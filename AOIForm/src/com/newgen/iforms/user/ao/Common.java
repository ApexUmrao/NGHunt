//----------------------------------------------------------------------------------------------------
//		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
//Group						: AP2
//Product / Project			: iForm Builder
//Module					: iForms
//File Name					: Common.java
//Author					: 	
//Date written (DD/MM/YYYY)	: 
//Description				: Java File for Common functionalities of AO Process
//----------------------------------------------------------------------------------------------------
//			CHANGE HISTORY
//----------------------------------------------------------------------------------------------------
// Date	(DD/MM/YYYY)		 Change By	 	Change Description (Bug No. (If Any))
// 26/10/2021			   Gautam Rajbhar	Bug : CQRN-0000178215 SaveEIDADetails Integration call Failure -AO
// 13/01/2022			   Gautam Rajbhar 	Bug : CQRN-0000188395 Passport type keep changing to Regular
// 17/01/2022			   Gautam Rajbhar 	Bug : CQRN-0000188860 - Increased Risk customer not identified by BRMS
// 18/01/2022			   Gautam Rajbhar 	Bug : CQRN-0000188395 - AO Passport type keep changing  to Regular
//----------------------------------------------------------------------------------------------------
package com.newgen.iforms.user.ao;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.newgen.custom.wfdesktop.xmlapi.WFCustomXmlList;
import com.newgen.custom.wfdesktop.xmlapi.WFCustomXmlResponse;
import com.newgen.iforms.EControlOption;
import com.newgen.iforms.EControlStyle;
import com.newgen.iforms.IControl;
import com.newgen.iforms.controls.EComboControl;
import com.newgen.iforms.custom.IFormReference;
import com.newgen.iforms.user.ao.util.ConnectSocket;
import com.newgen.iforms.user.ao.util.LoadConfiguration;
import com.newgen.iforms.user.ao.util.XMLParser;
import com.newgen.iforms.user.config.AOLogger;
//import com.newgen.util.ExecuteXML; --Disabled for error
//import com.newgen.util.APCallCreateXML;
//import com.newgen.util.GenerateXml;
//import com.newgen.util.Log;
import com.newgen.iforms.user.config.ConstantAlerts;
import com.newgen.iforms.user.config.Constants;

import java.util.regex.Pattern; //New Import FOR CRS_TIN Shivanshu 22-11-2024

public class Common implements Constants, ConstantAlerts {
	public static final Logger log = AOLogger.getInstance().getLogger();

	// public static final Logger signlog =
	// AOSignLogger.getInstance().getSignLogger();
	protected IFormReference formObject;
	public String engineName = "";
	String sProcessName = "";
	String sFieldName = "";
	String sUserName = "";
	String sInputXML3 = "";
	String sValues3 = "";
	String sInput_deletedcustforHOF = "";
	String scallName47 = "";
	String mobileNo = "";
	String mobileNumber = "";
	// String sUserIndex = ""; //Added by reyaz 01052023
	String dormantCustomer = "";

	public String rejectionFromID = "";
	String sGeneralData = "";
	String sActivityName = "";
	String sProcessDefId = "";
	String sWorkitemId = "";
	String sMode = "";
	String sActivityId = "";
	String sEngineName = "";
	String sSessionId = "";
	String serverUrl = "";
	String sJTSIP = "";
	String sJTSPORT = "";
	String sJTSApp = "";
	String strItemIndex = "";
	String dList = "";
	String linkedUAEPassWI = "";
	String cabinetName;
	String mobile = "";
	String email = "";
	String refNo;
	private String sessionId;
	ConnectSocket socket;
	private String socketIP = "";
	private int socketPort = 0;
	HashMap<String, String> defaultMap = new HashMap<>();
	public HashMap<String, String> countryMap = new HashMap<>();
	List<String> sendMessageList = new ArrayList<>();
	XMLParser xmlDataParser;
	boolean fetchInfoFlag = false;
	private boolean sGuardianReqFlag;
	int iProcessedCustomer = 0;
	boolean mohit_flag = false;
	boolean flag_mobile = true;
	String flag_phone_start = "true";
	boolean flag_phone = true;
	boolean flag_insert_audit = true;
	boolean FETCH_INFO_flag;
	String sBackRoute = "";
	boolean FETCH_INFO_flag_NO;
	String senderId = "";
	String consentFlag = "";
	String contractType = "";
	String enquiryType = "";
	String localDBSearchReq = "";
	String reportType = "";
	String role = "";
	String userId = "";
	String source = "";
	String noOfDaysDedupeCheck = "";
	String forceNewFetch = "";
	String sDocTypes = "";
	boolean appLevelMandatoryCheck = false;
	boolean rekeyloaded = false;
	static int SNO = 1;
	int instantrequestsent;
	String flagKey = "false";
	boolean mobileConfirmFlag = false;
	boolean mobileChangeFlag = false;

	public Common(IFormReference formObject) {
		this.formObject = formObject;
		sActivityName = formObject.getActivityName();
		if (sActivityName.equalsIgnoreCase("QDE_ Account_Info")) {
			sActivityName = ACTIVITY_QDE_ACCOUNT_INFO;
		}
		sEngineName = formObject.getObjGeneralData().getM_strEngineName();
		sProcessName = formObject.getProcessName();
		sSessionId = formObject.getObjGeneralData().getM_strDMSSessionId();
		sUserName = formObject.getUserName();
		sFieldName = sProcessName + "_";
		serverUrl = formObject.getObjGeneralData().getM_strServletPath();
		sJTSIP = formObject.getObjGeneralData().getM_strJTSIP();
		sJTSPORT = formObject.getObjGeneralData().getM_strJTSPORT();
		sJTSApp = formObject.getObjGeneralData().getM_strAppServerType();
		strItemIndex = formObject.getObjGeneralData().getM_strFolderId();
		sWorkitemId = formObject.getObjGeneralData()
				.getM_strProcessInstanceId();
		sDocTypes = formObject.getObjGeneralData().getM_strDocumentTypes();
		// sUserIndex = formObject.getObjGeneralData().getM_strUserIndex();
		// //added by reyaz 01052023
		try {
			sProcessDefId = LoadConfiguration.getInstance(formObject)
					.getProcessDefId();
			defaultMap = LoadConfiguration.getInstance(formObject)
					.getDefaultMap();
			countryMap = LoadConfiguration.getInstance(formObject)
					.getCountryMap();
			log.info("defaultMap :: " + defaultMap.get("SOCKETIP"));
			log.info("defaultMap :: " + defaultMap.get("SOCKETPORT"));
			log.info("defaultMap :: " + defaultMap);
			socketIP = defaultMap.get("SOCKETIP");
			log.info("SOCKETPORT: " + defaultMap.get("SOCKETPORT"));
			socketPort = Integer.parseInt(defaultMap.get("SOCKETPORT"));
			socket = ConnectSocket.getReference(socketIP, socketPort);
		} catch (Exception e) {
			logError("Common", e);
		}
	}

	public Common() {
	}

	public String getReturnMessage(boolean success, String data, String message) {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("success", success);
		jsonObject.put("data", data);
		jsonObject.put("message", message);
		logInfo("getReturnMessage", "json value : " + jsonObject.toString());
		return jsonObject.toString();
	}

	public String getReturnMessage(Boolean success, String data) {
		return getReturnMessage(success, data, "");
	}

	public String getReturnMessage(Boolean success) {
		return getReturnMessage(success, "", "");
	}

	public JSONObject getReturnMessageJSON(Boolean success, String data,
			String message) {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("success", success);
		jsonObject.put("data", data);
		jsonObject.put("message", message);
		return jsonObject;
	}

	public void loadListView(List recordList, String colnames, String sCtrolName) {
		logInfo("LoadListView", "INSDIE: " + recordList.size() + ",colnames="
				+ colnames + "," + "sCtrolName=" + sCtrolName);
		try {
			formObject.clearTable(sCtrolName);
			logInfo("LoadListView", "recordList: " + recordList);
			JSONArray jsonArray = new JSONArray();
			String[] columnArray = colnames.split(",");
			logInfo("LoadListView", "columnArray.length: " + columnArray.length);
			for (int i = 0; i < recordList.size(); i++) {
				JSONObject jsonObject = new JSONObject();
				for (int j = 0; j < columnArray.length; j++) {
					// log.info("In loadlist view "+((String) ((List)
					// recordList.get(i)).get(j)));
					jsonObject.put(columnArray[j],
							((String) ((List) recordList.get(i)).get(j)));
				}
				jsonArray.add(jsonObject);
			}
			formObject.addDataToGrid(sCtrolName, jsonArray);
			logInfo("LoadListView", "jsonArray: " + jsonArray.toString());
		} catch (Exception e) {
			logError("LoadListView", e);
		}
	}

	public void moveToAuditHist() {
		log.info("INSIDE moveToAuditHist");
		String sQuery;
		String sOutput;
		try {
			sQuery = "INSERT INTO USR_0_AO_SEARCH_AUDIT_H(CUST_ID,cust_full_name,cust_IC,cust_pass_no, "
					+ "cust_nationality,cust_email, cust_mobile_no, cust_dob, eida_no, memo_severity , "
					+ "memo , system_type , wI_NAme,CURRENT_DATE_TIME ) SELECT CUST_ID,cust_full_name,"
					+ "cust_IC,cust_pass_no, cust_nationality,cust_email, cust_mobile_no, cust_dob, eida_no,"
					+ " memo_severity , memo , system_type , wI_NAme,CURRENT_DATE_TIME FROM USR_0_AO_SEARCH_AUDIT"
					+ " WHERE WI_NAME ='" + sWorkitemId + "'";
			log.info("sQuery---" + sQuery);
			formObject.saveDataInDB(sQuery);
			sQuery = "DELETE FROM USR_0_AO_SEARCH_AUDIT WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			log.info("sQuery---" + sQuery);
			formObject.saveDataInDB(sQuery);
		} catch (Exception e) {
			log.error("Exception in [moveToAuditHist]: ", e);
		}
	}

	public void enableControls(String[] cName) {
		logInfo("enableControls", "array of controls: " + Arrays.asList(cName));
		for (int i = 0; i < cName.length; i++) {
			formObject.setStyle(cName[i], DISABLE, FALSE);
		}
	}

	public void clearControls(String[] cName) {
		logInfo("clearControls",
				"blankControls control: " + Arrays.asList(cName));
		for (int i = 0; i < cName.length; i++) {
			formObject.setValue(cName[i], "");
		}
	}

	public void showControls(String[] cName) {
		logInfo("showControls", "showing control: " + Arrays.asList(cName));
		for (int i = 0; i < cName.length; i++) {
			formObject.setStyle(cName[i], VISIBLE, TRUE);
		}
	}

	public void hideControls(String[] cName) {
		logInfo("hideControls", "hiding control: " + Arrays.asList(cName));
		for (int i = 0; i < cName.length; i++) {
			formObject.setStyle(cName[i], VISIBLE, FALSE);
		}
	}

	public void disableControls(String[] cName) {
		int i = 0;
		try {
			logInfo("disableControls",
					"array of controls: " + Arrays.asList(cName));
			// formObject.setStyle("abc", DISABLE, TRUE); for testing, to remove
			for (i = 0; i < cName.length; i++) {
				formObject.setStyle(cName[i], DISABLE, TRUE);
			}
		} catch (Exception e) {
			logInfo("disableControls", "error in: " + cName[i]);
			logError("disableControls", e);
		}
	}

	public void prefLang() {
		String sQuery = "select lang from usr_0_pref_lang order by 1";
		formObject.getDataFromDB(sQuery);
		addDataInComboFromQuery(sQuery, "DEL_PREF_LANG");
	}

	public void frameDelivery() {
		try {
			log.info("before writing channel_type again------"
					+ formObject.getValue(CHANNEL_TYPE).toString());
			boolean dfc_Flag = false;
			if (formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("")) {
				log.info("writing channel_type again------");
				String Query = "SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL ='"
						+ formObject.getValue(SOURCING_CHANNEL).toString()
						+ "'";
				formObject.getDataFromDB(Query);
			}
			disableControls(DELIVERY_FIELD);
			if (!formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("Alternate")) {
				disableControls(FRAME_DELIVERY_FIELDS);
			}
			if (formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("Alternate")
					&& sActivityName
							.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {

				log.info("inside Frame_delivery_CRM if condition=====");
				log.info("===========before clearing DFC_STATIONERY_AVAIL============");
				formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, "true");
				{
					log.info("O_DFC_STATIONERY_AVA------------");

				}
				String sQ1 = "SELECT DFC_STATIONERY_AVAIL FROM EXT_AO WHERE WI_NAME = '"
						+ sWorkitemId + "'";
				List sOutput = formObject.getDataFromDB(sQ1);
				String sVar1 = formObject.getValue(DFC_STATIONERY_AVAIL)
						.toString();
				log.info("sVar1----------..........." + sVar1);
				/*
				 * if(sVar1.equalsIgnoreCase("")) {
				 * 
				 * }
				 */log.info("if(!FETCH_INFO_flag||!cKioskIdd_flag)"
						+ fetchInfoFlag);
				if (sVar1.equalsIgnoreCase("") || sVar1.equalsIgnoreCase("")) {
					if (!fetchInfoFlag) {
						log.info("frame del inside !FETCH_INFO_flag"
								+ fetchInfoFlag);
						formObject.clearCombo(DFC_STATIONERY_AVAIL);
						formObject
								.setStyle(DFC_STATIONERY_AVAIL, ENABLE, FALSE);
						formObject
								.setStyle(DFC_STATIONERY_AVAIL, ENABLE, FALSE);
						log.info("frame del inside DFC_STATIONERY_AVAIL"
								+ formObject.getValue(DFC_STATIONERY_AVAIL));
					}
					if (formObject.getValue(DFC_STATIONERY_AVAIL).toString()
							.equalsIgnoreCase("")
							|| formObject.getValue(DFC_STATIONERY_AVAIL)
									.toString().equalsIgnoreCase("")) {
						formObject.setStyle(RD_INST_DEL, ENABLE, FALSE);
						// formObject.setStyle(INSTANT_DEL_NO,ENABLE,FALSE);
						log.info("inside frame_del and DFC_STATIONERY_AVAIL is "
								+ formObject.getValue(RD_INST_DEL)
								+ formObject.getValue(RD_INST_DEL));
					}
				}
				formObject.setStyle(FETCH_INFO, ENABLE, TRUE);
				dfc_Flag = true;
				if (!dfc_Flag) {
					formObject.setValue(DFC_STATIONERY_AVAIL, "");
				}
				if (formObject.getValue(RD_INST_DEL).toString()
						.equalsIgnoreCase("Yes")) {
					formObject.setStyle(DFC_STATIONERY_AVAIL, ENABLE, TRUE);
					formObject.setStyle(SEC_DEL_ADD, ENABLE, FALSE);
					formObject.setStyle(SEC_DEL_ADD, ENABLE, FALSE);
					formObject.setStyle(NOM_REQ, ENABLE, FALSE);
					formObject.setStyle(EXISTING_NOM_PRSN, ENABLE, FALSE);
					formObject.clearCombo(DELIVERY_PREFERENCE);
				} else if (formObject.getValue(RD_INST_DEL).toString()
						.equalsIgnoreCase("No")) {
					formObject.setStyle(FETCH_INFO, ENABLE, FALSE);
					formObject.setStyle(DFC_STATIONERY_AVAIL, ENABLE, FALSE);
					formObject.setStyle(DFC_STATIONERY_AVAIL, ENABLE, FALSE);
				}
				disableControls(DISABLE_FRAME_DELIVERY2);

				try {
					log.info("over here DDE alternate case click tab::-- ");
					String sQuery = "SELECT DELIVERY_MODE FROM USR_0_DELIVERY_MODE WHERE CODE='COLC'";
					log.info("squery--" + sQuery);
					List sOutput1 = formObject.getDataFromDB(sQuery);
					log.info("soutput::" + sOutput);
					String sdelMode = formObject.getValue(DELIVERY_MODE)
							.toString();
					log.info("sdelmode is::" + sdelMode);
					log.info("--delivery mode b$ setting from form::"
							+ formObject.getValue(DEL_DELIVERY_MODE));
					formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, TRUE);
					formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, TRUE);
					{
						String del_mode = formObject
								.getValue(DEL_DELIVERY_MODE).toString();
					}
					formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, FALSE);
					formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, FALSE);
					log.info("--deliver mode after setting on form--"
							+ formObject.getValue(DEL_DELIVERY_MODE));
				} catch (Exception e) {
					log.error("Exception in [frameDelivery]: ", e);
				}
				try {

					log.info("over here DDE alternate branch of instant issuance case click tab::-- ");
					String sQuery = "SELECT EMIRATES_NAME FROM USR_0_DELIVRY_BRANCH_MAPPING WHERE DELIVERY_MODE='COLC'";
					log.info("squery--" + sQuery);
					// String sOutput =
					// executeQueryAPSelectWithColumnNames(sQuery);
					List sOutput2 = formObject.getDataFromDB(sQuery);
					log.info("soutput::" + sOutput2);
					log.info("--branch of instant issuance after setting on form--"
							+ formObject.getValue(BRNCH_OF_INSTANT_ISSUE));
				} catch (Exception e) {
					log.error("Exception in [frameDelivery]: ", e);
				}

			}

			{
				disableControls(DISABLE_FRAME_DELIVERY);
				if (!formObject.getValue(SCAN_MODE).toString()
						.equalsIgnoreCase("New WMS ID")) {
					try {
						log.info("over here DDE alternate case click tab::-- ");
						String sQuery = "SELECT DELIVERY_MODE FROM USR_0_DELIVERY_MODE WHERE CODE='COLC'";
						log.info("squery--" + sQuery);
						// String sOutput =
						// executeQueryAPSelectWithColumnNames(sQuery);
						List sOutput = formObject.getDataFromDB(sQuery);
						log.info("soutput::" + sOutput);
						log.info("--delivery mode b$ setting from form::"
								+ formObject.getValue(DEL_DELIVERY_MODE));
						formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, "true");
						formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, "true");
						{
							String del_mode = formObject.getValue(
									DEL_DELIVERY_MODE).toString();
						}
						formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, FALSE);
						formObject.setStyle(DEL_DELIVERY_MODE, ENABLE, FALSE);
						log.info("--deliver mode after setting on form--"
								+ formObject.getValue(DEL_DELIVERY_MODE));
					} catch (Exception e) {
						log.error("Exception in [frameDelivery]: ", e);
					}
				}
			}
		} catch (Exception e) {
			log.error("Exception in [frameDelivery]: ", e);
		}
	}

	public void toggleCheckbox(String sControl1, String sControl2,
			String sControl3) {
		logInfo("toggleCheckbox", "INSIDE sControl1: " + sControl1
				+ ", sControl2: " + sControl2 + ", sControl3: " + sControl3);
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase("true")) {
			formObject.setValue(sControl2, "false");
			formObject.setValue(sControl3, "false");
		} else {
			formObject.setValue(sControl1, "false");
		}
	}

	public boolean mandatoryCRSCheckcategorychange() {
		if (formObject.getValue(REQUEST_TYPE).toString()
				.equalsIgnoreCase("Category Change Only")) {
			String custSegment = formObject.getValue(NEW_CUST_SEGMENT)
					.toString();
			if (custSegment.equalsIgnoreCase("Private Clients")) {
				String sQuery1 = "SELECT taxresidencycountry FROM USR_0_crs_details "
						+ "WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' and acc_relation_sno='1'";
				List<List<String>> output1 = formObject.getDataFromDB(sQuery1);
				String sQuery2 = "SELECT distinct crscertificationformobtained "
						+ "FROM USR_0_crs_details WHERE WI_NAME ='"
						+ sWorkitemId + "' and acc_relation_sno='1'";
				List<List<String>> output2 = formObject.getDataFromDB(sQuery2);
				String crscertification = output2.get(0).get(0);
				String rescountry = output1.get(0).get(0);
				log.info("inside crs check: " + sQuery1);
				log.info("inside crs check-1: " + output1);
				log.info("Value of CRS_CERTI: "
						+ formObject.getValue(CRS_CERTIFICATION_OBTAINED)
								.toString());
				// if(formObject.getValue("CRS_CERTI_YES").equalsIgnoreCase("False")
				// &&
				// formObject.getValue("CRS_CERTI_NO").equalsIgnoreCase("False"))
				log.info("crscertification: " + crscertification);
				log.info("!Yes.equalsIgnoreCase(crscertification): "
						+ (!"Yes".equalsIgnoreCase(crscertification)));
				log.info("!No.equalsIgnoreCase(crscertification): "
						+ (!"No".equalsIgnoreCase(crscertification)));
				if ((!"Yes".equalsIgnoreCase(crscertification))
						&& (!"No".equalsIgnoreCase(crscertification))) {
					log.info("No values selected for CRS_CERTI_YES/NO");
					sendMessageValuesList(
							"EDIT",
							"No value selected for CRS certification form obtained, please edit and select appropriate value");
					return false;
				}
				if (output1.size() == 0 || "".equalsIgnoreCase(rescountry)) {
					sendMessageValuesList("EDIT",
							"CRS Grid must have at least one record, please edit and add CRS data");
					return false;
				}
			}
		}
		return true;
	}

	public boolean UdfUniquenessCheck(String UdfFieldval) {
		int count = 0;
		for (int i = 0; i < getGridCount(ACCINFO_UDF_LIST); i++) {
			if (UdfFieldval.equals(formObject.getTableCellValue(
					ACCINFO_UDF_LIST, i, 0))) {
				count++;
				break;
			}
		}
		if (count == 0) {
			return true;
		} else {
			return false;
		}
	}

	public void EnableEtihadFrame() {
		String sAllProduct = "";
		int iRows = getGridCount(PRODUCT_QUEUE);
		if (iRows == 0) {
			Frame37_CPD_Disable();
		} else if (iRows > 0) {
			for (int i = 0; i < iRows; i++) {
				sAllProduct = sAllProduct + "'"
						+ formObject.getTableCellValue(PRODUCT_QUEUE, i, 1)
						+ "',";// (i,"PRODUCT_QUEUE.PROD_CODE")
				formObject.setTableCellValue(PRODUCT_QUEUE, i, 14, i + 1 + "");
				// objChkRepeater.setValue(i,"PRODUCT_QUEUE.CID",i+"");//Sanal
				// Sahil Fardeen to check this
			}
			sAllProduct = sAllProduct.substring(0, sAllProduct.length() - 1);
			String sQuery = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE "
					+ "IN ("
					+ sAllProduct
					+ ") AND UPPER(SUB_PRODUCT_TYPE) ='ETIHAD'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String count = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			if (!(count.equalsIgnoreCase("0"))) {
				Frame37_CPD_ENable();
			} else {
				Frame37_CPD_Disable();
			}
		}
	}

	public boolean crsGridUniquenessCheck(String taxCountry) {
		int count = 0;
		for (int i = 0; i < getGridCount(CRS_TAXCOUNTRYDETAILS); i++) {
			if (taxCountry.equals(formObject.getTableCellValue(
					CRS_TAXCOUNTRYDETAILS, i, 1))) {
				count++;
				break;
			}
		}
		if (count == 0)
			return true;
		else
			return false;
	}

	public Boolean validatePassportType(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sControl) {
		logInfo("validatePassportType", "INSIDE ValidatePassportType");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFCRCBControl, sMessageID);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sEIDACBControl, sMessageID);
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			logInfo("validatePassportType", "INSIDE IT 1");
			if (formObject.getValue(sManualDataControl).toString()
					.equalsIgnoreCase("")
					|| formObject.getValue(sManualDataControl).toString()
							.equalsIgnoreCase("")) {
				logInfo("validatePassportType", "INSIDE IT 2");
				sendMessageValuesList(sManualCBControl, sMessageID);
				return false;
			}
		}
		logInfo("validatePassportType", "ITS TRUE");
		return true;
	}

	public Boolean validateVisaStatus() {
		String sIsFCRNationality = formObject
				.getValue(CHECKBOX_NATIONALITY_FCR).toString();
		String sIsEIDANationality = formObject.getValue(
				CHECKBOX_NATIONALITY_EIDA).toString();
		String sIsManualNationality = formObject.getValue(
				CHECKBOX_NATIONALITY_MANUAL).toString();
		String sFCRNationality = formObject.getValue(FCR_NATIONALITY)
				.toString();
		String sEIDANationality = formObject.getValue(EIDA_NATIONALITY)
				.toString();
		String sManualNationality = formObject.getValue(MANUAL_NATIONALITY)
				.toString();
		String sFinalNationality = getFinalData(sIsFCRNationality,
				sIsEIDANationality, sIsManualNationality, sFCRNationality,
				sEIDANationality, sManualNationality);
		String sIsFCRCountry = formObject.getValue(CHECKFCR).toString();
		String sIsEIDACountry = formObject.getValue(CHECKEIDA).toString();
		String sIsManualCountry = formObject.getValue(CHECKMANUAL).toString();
		String sFCRCountry = formObject.getValue(FCR_RESIDENT).toString();
		String sEIDACountry = formObject.getValue(EIDA_RESIDENT).toString();
		String sManualCountry = formObject.getValue(MANUAL_RESIDENT).toString();
		String sFinalCountry = getFinalData(sIsFCRCountry, sIsEIDACountry,
				sIsManualCountry, sFCRCountry, sEIDACountry, sManualCountry);
		if (sFinalNationality.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
			if (!returnVisaStatus().equalsIgnoreCase("Not Required")) {
				sendMessageValuesList(returnVisaStatusControl(),
						"Visa Status should be 'Not Required' for UAE and GCC nationals");
				formObject.setValue(returnVisaStatusControl(), "Not Required");
				return false;
			}
		} else if ((sFinalNationality.equalsIgnoreCase("BAHRAIN")
				|| sFinalNationality.equalsIgnoreCase("KUWAIT")
				|| sFinalNationality.equalsIgnoreCase("OMAN")
				|| sFinalNationality.equalsIgnoreCase("QATAR") || sFinalNationality
					.equalsIgnoreCase("SAUDI ARABIA"))
				&& sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
			if (!returnVisaStatus().equalsIgnoreCase("Not Required")) {
				sendMessageValuesList(returnVisaStatusControl(),
						"Visa Status should be 'Not Required' for UAE resident and GCC nationals");
				formObject.setValue(returnVisaStatusControl(), "Not Required");
				return false;
			}
		} else {
			if (!sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				if (!returnVisaStatus().equalsIgnoreCase("Others")) {
					sendMessageValuesList("",
							"Visa Status should be 'Others' for non UAE nationals");
					formObject.setValue(returnVisaStatusControl(), "Others");
					return false;
				}
			} else if (!(returnVisaStatus().equalsIgnoreCase("Residency Visa") || returnVisaStatus()
					.equalsIgnoreCase("Under Processing"))) {
				sendMessageValuesList(
						returnVisaStatusControl(),
						"Visa Status should be 'Residency Visa' or 'Under Processing' for UAE residents");
				return false;
			}
		}
		if (returnVisaStatus().equalsIgnoreCase("Residency Visa")) {
			if (!ValidateComparisonData(CHECKBOX_VISA_NO_FCR,
					CHECKBOX_VISA_NO_EIDA, CHECKBOX_VISA_NO_MANUAL, FCR_VISANO,
					EIDA_VISANO, MANUAL_VISANO, CA0135, "Mandatory", "Visa No")) {
				return false;
			}
			if (!ValidateComparisonData(CHECKBOX_VISA_ISSUE_DATE_FCR,
					CHECKBOX_VISA_ISSUE_DATE_EIDA,
					CHECKBOX_VISA_ISSUE_DATE_MANUAL, FCR_VISAISSDATE,
					EIDA_VISAISSDATE, MANUAL_VISAISSDATE, CA0136, "Mandatory",
					"Visa Issue Date")) {
				return false;
			}
			if (!ValidateComparisonData(CHECKBOX_VISA_EXPIRY_DATE_FCR,
					CHECKBOX_VISA_EXPIRY_DATE_EIDA,
					CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAEXPDATE,
					EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE, CA0137, "Mandatory",
					"Visa Expiry Date")) {
				return false;
			}
		}
		return true;
	}

	public String returnVisaStatusControl() {
		log.info("GET INSIDE VISA STAUS");
		if (formObject.getValue(CHECKBOX_VISA_STATUS_FCR).toString()
				.equalsIgnoreCase("true")) {
			return FCR_VISASTATUS;
		} else if (formObject.getValue(CHECKBOX_VISA_STATUS_EIDA).toString()
				.equalsIgnoreCase("true")) {
			return EIDA_VISASTATUS;
		} else if (formObject.getValue(CHECKBOX_VISA_STATUS_MANUAL).toString()
				.equalsIgnoreCase("true")) {
			return MANUAL_VISASTATUS;
		}
		return "";
	}

	public boolean validateCustomerClassification() {
		logInfo("validateCustomerClassification", "INSIDE");
		try {
			if (!(formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("Category Change Only")
					&& (formObject.getValue(FATCAMINI).toString()
							.equalsIgnoreCase("NO") || formObject
							.getValue(FATCAMINI).toString()
							.equalsIgnoreCase("")) && (formObject
					.getValue(FATCAMAIN).toString().equalsIgnoreCase("NO") || formObject
					.getValue(FATCAMAIN).toString().equalsIgnoreCase("")))) {
				List<List<String>> sOutput = formObject
						.getDataFromDB("SELECT FATCA_CLASSIFICATION FROM USR_0_DOC_MASTER WHERE DOC_NAME = '"
								+ formObject.getValue(COMBODOC).toString()
								+ "'");
				logInfo("validateCustomerClassification", "sOutput: " + sOutput);
				if (!(sOutput.get(0).get(0)).equalsIgnoreCase(formObject
						.getValue(FAT_CUST_CLASSIFICATION).toString())) {
					sendMessageValuesList(FAT_CUST_CLASSIFICATION,
							"Customer US Classification is different.Please Check");
					return false;
				}
			}
		} catch (Exception e) {
			logError("validateCustomerClassification", e);
		}
		return true;
	}

	public boolean validateJavaDate(String strDate) {
		logInfo("validateJavaDate", "INSIDE strDate: " + strDate);
		if (strDate.trim().equals("")) {
			return true;
		} else {
			SimpleDateFormat sdfrmt = new SimpleDateFormat("dd/MM/yyyy");
			sdfrmt.setLenient(false);
			try {
				Date javaDate = sdfrmt.parse(strDate);
				logInfo("validateJavaDate", strDate + " is valid date format");
			} catch (ParseException e) {
				logInfo("validateJavaDate", strDate + " is Invalid Date format");
				return false;
			}
			return true;
		}
	}

	public void toggleCheckbox_2(String sControl1, String sControl2) {
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase("true")) {
			formObject.setValue(sControl2, "false");
		} else {
			formObject.setValue(sControl1, "false");
		}
	}

	public boolean nomDetailsUpdate(int selectedIndex) {
		try {
			logInfo("nomDetailsUpdate", "INSIDE");
			String sName = formObject.getValue(DEL_NAME).toString();
			String sPOBox = formObject.getValue(DEL_PO_BOX).toString();
			String sAdd = formObject.getValue(DEL_ADDRESS).toString();
			String sLandmark = formObject.getValue(DEL_LANDMARK).toString();
			String sCity = formObject.getValue(DEL_CITY).toString();
			String sState = formObject.getValue(DEL_STATE).toString();
			String sStateOther = formObject.getValue(DEL_STATE_OTHER)
					.toString();
			String sCntry = formObject.getValue(DEL_CNTRY).toString();
			String sFax = formObject.getValue(DEL_FAX).toString();
			String sZip = formObject.getValue(DEL_ZIP_CODE).toString();
			String sEmail = formObject.getValue(DEL_EMAIL).toString();
			String sLang = formObject.getValue(DEL_PREF_LANG).toString();
			String sPH = formObject.getValue(DEL_PH).toString();
			String sMOB = formObject.getValue(DEL_MOBILE).toString();
			String sNomID = "";
			List<List<String>> sOutput = null;
			if (formObject.getValue(EXISTING_NOM_PRSN).toString()
					.equalsIgnoreCase("Yes")) {
				String isARowSelected = "";
				try {
					String sQuery = "SELECT NOM_ROW_SELECTED FROM " + sExtTable
							+ " WHERE WI_NAME ='" + sWorkitemId + "'";
					sOutput = formObject.getDataFromDB(sQuery);
					logInfo("nomDetailsUpdate",
							"sOutput----" + sOutput.toString());
					isARowSelected = sOutput.get(0).get(0);
				} catch (Exception e) {
					logError("", e);
				}
				if (selectedIndex == -1 && isARowSelected.equalsIgnoreCase("")) {
					sendMessageValuesList(DELIVERY_PREFERENCE,
							"Please Select Atleast One Row Form Delivery Preference Grid");
					return false;
				}
			}
			logInfo("nomDetailsUpdate",
					"selectedIndex: " + String.valueOf(selectedIndex));
			sNomID = formObject.getTableCellValue(DELIVERY_PREFERENCE,
					selectedIndex, 15);
			int sOutputInsert = 0;
			logInfo("nomDetailsUpdate", "sNomID" + sNomID);
			String sColumn = "NOM_NAME,NOM_PO_BOX ,NOM_ADD1,NOM_LAND,NOM_CITY,NOM_STATE,NOM_OTHERS ,NOM_CNTRY,NOM_FAX ,NOM_ZIP,NOM_EMAIL,NOM_PREF_LANG,NOM_PHONE,NOM_MOB,WI_NAME";
			String sValues = "'" + sName + "'" + (char) 25 + "'" + sPOBox + "'"
					+ (char) 25 + "'" + sAdd + "'" + (char) 25 + "'"
					+ sLandmark + "'" + (char) 25 + "'" + sCity + "'"
					+ (char) 25 + "'" + sState + "'" + (char) 25 + "'"
					+ sStateOther + "'" + (char) 25 + "'" + sCntry + "'"
					+ (char) 25 + "'" + sFax + "'" + (char) 25 + "'" + sZip
					+ "'" + (char) 25 + "'" + sEmail + "'" + (char) 25 + "'"
					+ sLang + "'" + (char) 25 + "'" + sPH + "'" + (char) 25
					+ "'" + sMOB + "'" + (char) 25 + "'" + sWorkitemId + "'";
			sOutputInsert = updateDataInDB("usr_0_nom_mast", sColumn, sValues,
					"nom_id = '" + sNomID + "'");
			try {
				String sUpdateNomFlag = "update " + sExtTable
						+ " set NOM_ROW_SELECTED='" + selectedIndex
						+ "' Where WI_NAME='" + sWorkitemId + "'";
				formObject.saveDataInDB(sUpdateNomFlag);
			} catch (Exception e) {
				logError("nomDetailsUpdate", e);
			}
			logInfo("nomDetailsUpdate", "nomineupdate" + sOutput);
		} catch (Exception e) {
			logError("nomDetailsUpdate", e);
		}
		return true;
	}

	public void nomDetailsInsert() {
		String sQury = "";
		List<List<String>> sOutput;
		if (formObject.getValue(ACC_OWN_TYPE).toString()
				.equalsIgnoreCase("Joint")
				|| formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Minor")) {
			sQury = "Select cid from acc_relation_repeater where wi_name=='"
					+ sWorkitemId
					+ "' and"
					+ " (acc_relation='JAF' or acc_relation='JOF' or acc_relation='Gaurdian')";
		} else {
			sQury = "Select cid from acc_relation_repeater where wi_name='"
					+ sWorkitemId + "'";
		}
		logInfo("nomDetailsInsert", "query : " + sQury);
		sOutput = formObject.getDataFromDB(sQury);
		String sCust_id = "";
		try {
			sCust_id = sOutput.get(0).get(0);
		} catch (Exception e) {

			logError("", e);
		}
		logInfo("nomDetailsInsert", sCust_id + "ddddddddddddeeeeeeeeee");
		String sName = formObject.getValue(DEL_NAME).toString();
		String sPOBox = formObject.getValue(DEL_PO_BOX).toString();
		String sAdd = formObject.getValue(DEL_ADDRESS).toString();
		String sLandmark = formObject.getValue(DEL_LANDMARK).toString();
		String sCity = formObject.getValue(DEL_CITY).toString();
		String sState = formObject.getValue(DEL_STATE).toString();
		String sStateOther = formObject.getValue(DEL_STATE_OTHER).toString();
		String sCntry = formObject.getValue(DEL_CNTRY).toString();
		String sFax = formObject.getValue(DEL_FAX).toString();
		String sZip = formObject.getValue(DEL_ZIP_CODE).toString();
		String sEmail = formObject.getValue(DEL_EMAIL).toString();
		String sLang = formObject.getValue(DEL_PREF_LANG).toString();
		String sPH = formObject.getValue(DEL_PH).toString();
		String sMOB = formObject.getValue(DEL_MOBILE).toString();
		String dualQuery = "Select nom_id.nextval val from dual";

		sOutput = formObject.getDataFromDB(dualQuery);
		String sNomID = "";
		try {
			sNomID = sOutput.get(0).get(0);
			logInfo("nomDetailsInsert", "sNomID" + sNomID);
		} catch (Exception e) {
			logError("", e);
		}

		formObject.setValue("NOM_ID", sNomID);
		// <Modification done by garima for CPD Checker issue>
		String sColumn = "NOM_ID,CUST_ID,NOM_NAME,NOM_PO_BOX ,NOM_ADD1,NOM_LAND,NOM_CITY,NOM_STATE,NOM_OTHERS ,NOM_CNTRY,NOM_FAX ,NOM_ZIP,NOM_EMAIL,NOM_PREF_LANG,NOM_PHONE,NOM_MOB,WI_NAME";
		String sValues = "'" + sNomID + "','" + sCust_id + "','" + sName
				+ "','" + sPOBox + "','" + sAdd + "','" + sLandmark + "','"
				+ sCity + "','" + sState + "','" + sStateOther + "','" + sCntry
				+ "','" + sFax + "','" + sZip + "','" + sEmail + "','" + sLang
				+ "','" + sPH + "','" + sMOB + "','" + sWorkitemId + "'";
		// <Modification Ends>

		String sQuery = "DELETE FROM USR_0_NOM_MAST WHERE WI_NAME='"
				+ sWorkitemId + "'";
		int sOutputInsertt = insertDataIntoDB("usr_0_nom_mast", sColumn,
				sValues);
		logInfo("nomDetailsInsert", "nomine output : " + sOutputInsertt);
	}

	public String executeQueryAPSelectWithColumnNames(String sQuery) {
		XMLParser generalDataParser = new XMLParser();
		// generalDataParser.setInputXML(formObject.getObjGeneralData());
		String sEngineName = generalDataParser.getValueOf("EngineName");
		String sSessionId = generalDataParser.getValueOf("DMSSessionId");
		String serverUrl = generalDataParser.getValueOf("ServletPath");
		String sJTSIP = generalDataParser.getValueOf("JTSIP");
		String sJTSPORT = generalDataParser.getValueOf("JTSPORT");
		String sJTSApp = generalDataParser.getValueOf("AppServerType");
		String ServletUrl = serverUrl.replace("webdesktop", "")
				+ "NGServlet/servlet/ExternalServlet?AppServerIP=" + sJTSIP
				+ "&AppServerPort=" + sJTSPORT + "&AppServerType=" + sJTSApp;
		String sOutputXML = "";
		HttpURLConnection urlConnection = null;
		String sInputXML = "<?xml version=\1.0\"?>"
				+ "<APSelectWithColumnNames_Input>"
				+ "<Option>APSelectWithColumnNames</Option>" + "<EngineName>"
				+ sEngineName + "</EngineName> " + "<SessionId>" + sSessionId
				+ "</SessionId>" + "<QueryString>" + sQuery + "</QueryString>"
				+ "</APSelectWithColumnNames_Input>";
		log.info("INPUTXML" + sInputXML);
		InputStream is = null;
		BufferedWriter os = null;
		try {
			URL url = new URL(ServletUrl);
			urlConnection = (HttpURLConnection) url.openConnection();
			urlConnection.setRequestMethod("POST");
			urlConnection.setDoInput(true);
			urlConnection.setDoOutput(true);
			urlConnection.setRequestProperty("Content-Type",
					"application/octet-stream");
			os = new BufferedWriter(new OutputStreamWriter(
					urlConnection.getOutputStream(), "UTF-8"));
			os.write(sInputXML, 0, sInputXML.length());
			if (os != null) {
				os.close();
			}
			os = null;
			// ----------------------------------------------------------------------
			// read any response data, and store in a ByteArrayOutputStream
			// ----------------------------------------------------------------------
			ByteArrayOutputStream baos = null;
			if ((is = urlConnection.getInputStream()) != null) {
				baos = new ByteArrayOutputStream();
				byte ba[] = new byte[1];
				while ((is.read(ba, 0, 1)) != (-1))
					baos.write(ba, 0, 1);
				baos.flush();
				if (is != null) {
					is.close();
				}
				is = null;
				sOutputXML = new String(baos.toByteArray(), "UTF-8");
				sOutputXML = sOutputXML.replaceAll("\r", "");
				sOutputXML = sOutputXML.replaceAll("\n", "");
				sOutputXML = sOutputXML.replaceAll("\t", "");
			}
		} catch (Exception e) {
			log.error("Exception in [executeQueryAPSelectWithColumnNames]", e);
		} finally {
			try {
				if (os != null) {
					os.close();
				}
				if (is != null) {
					is.close();
				}
			} catch (Exception e) {
				log.error("Exception in [executeQueryAPSelectWithColumnNames]",
						e);
			}
			urlConnection.disconnect();
		}
		log.info("OUTPUTXML" + sOutputXML);
		return sOutputXML;
	}

	public void sendMessageValuesList(String controlId, String Message) {
		try {
			log.info("in sendMessagePMHashMap");
			sendMessageList.clear();
			sendMessageList.add(controlId);
			sendMessageList.add(Message);
			log.info("sendmessagelist: " + sendMessageList);
		} catch (Exception e) {
			log.error("excpetion in [sendMessageHashMap] ", e);
		}
	}

	public void savePopulateSearch(int countMobile, String whereCls,
			String whereCls1, String whereCls2, String ListView,
			String TableName) {
		String sQuery = "";
		int count = 0;
		int count1 = 0;
		int count2 = 0;
		int count3 = 0;
		logInfo("savePopulateSearch", "INSIDE");
		try {
			count = auditSearchFCUBS(whereCls, TableName, ListView);
			count1 = auditSearchCBG(whereCls1, TableName, ListView);
			count2 = auditSearchLAPS(ListView);
			count3 = auditSearchAO(whereCls2, TableName, ListView);
			if (countMobile > 0 || count > 0 || count1 > 0 || count2 > 0
					|| count3 > 0) {
				logInfo("savePopulateSearch", "" + countMobile + count + count1
						+ count2 + count3);
				populateAuditSearch(ListView);
			} else {
				sendMessageValuesList("",
						"No Customer found for provided details.");
			}
			logInfo("savePopulateSearch", "In saveAuditSearch view 11111 ----");
		} catch (Exception e) {
			logError("Exception in [savePopulateSearch]", e);
		}
	}

	public int auditSearchAO(String whereCls, String dbTable, String ListView) {
		String sQuery = "";
		int iCount = 0;
		logInfo("auditSearchAO", "INSIDE");
		try {
			logInfo("auditSearchAO", "ListView: " + ListView);
			logInfo("auditSearchAO", "whereCls: " + whereCls);
			iCount = returnCount(whereCls + " and a.wi_name<>'" + sWorkitemId
					+ "'", "USR_0_CUST_TXN");
			logInfo("auditSearchAO", "iCount: " + iCount);
			if (iCount > 0) {
				if (ListView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
					logInfo("auditSearchAO", "INSIDE SEARCH_DETAILS_LVW");
					String columns = "CUST_ID,cust_IC,cust_full_name,cust_pass_no,cust_nationality,cust_email,cust_mobile_no,cust_dob,eida_no,memo_severity,memo,system_type,wi_name";
					String values = "";
					String custID, custIC, custFullName, custPassNo, custNationality, custEmail, custMobileNo, passDobDate, eidaNo, memoSeverity, memo, systemType, wiName;
					sQuery = "select CUST_ID,cust_IC AS CUST_IC, final_full_name AS CUSTOMER_FULL_NAME, FINAL_PASS_NO AS CUST_PASS_NO, "
							+ "final_nationality AS CUST_NATIONALITY,final_email AS CUST_EMAIL, final_mobile_no AS CUST_MOBILE_NO,"
							+ "to_char(final_dob,'dd/mm/yyyy') FINAL_DOB , final_eida_no AS EIDA_NO, '' AS MEMO_SEVERITY, '' AS MEMO, "
							+ "wi_name AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME FROM usr_0_cust_txn a "
							+ "WHERE ("
							+ whereCls
							+ ") and a.wi_name<>'"
							+ sWorkitemId + "'";
					logInfo("auditSearchAO", "SEARCH_DETAILS_LVW sQuery: "
							+ sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// iCount=list.get(i).get(0);
							custID = list.get(i).get(0);
							custIC = list.get(i).get(1);
							custFullName = list.get(i).get(2);
							custPassNo = list.get(i).get(3);
							custNationality = list.get(i).get(4);
							custEmail = list.get(i).get(5);
							custMobileNo = list.get(i).get(6);
							passDobDate = list.get(i).get(7);
							eidaNo = list.get(i).get(8);
							memoSeverity = list.get(i).get(9);
							memo = list.get(i).get(10);
							systemType = list.get(i).get(11);
							wiName = list.get(i).get(12);
							values = "'" + custID + "','" + custIC + "','"
									+ custFullName + "','" + custPassNo + "','"
									+ custNationality + "','" + custEmail
									+ "','" + custMobileNo + "','"
									+ passDobDate + "','" + eidaNo + "','"
									+ memoSeverity + "','" + memo + "','"
									+ systemType + "','" + wiName + "'";
							logInfo("auditSearchAO", "Insert values: " + values);
							String sQuery1 = "insert into " + dbTable + " ("
									+ columns + ") values (" + values + ")";
							logInfo("auditSearchAO", "Insert sQuery1: "
									+ sQuery1);
							formObject.saveDataInDB(sQuery1);
						}
					}
				} else if (ListView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
					logInfo("auditSearchAO", "INSIDE LVW_DEDUPE_RESULT");
					int iProcessedCustomer = Integer
							.parseInt((String) formObject
									.getValue(SELECTED_ROW_INDEX)) + 1;
					String columns = "CUST_SNO,CUST_ID,cust_name,cust_IC,cust_passport,cust_nationality,cust_email,cust_mobile,cust_dob,cust_eida,system_type,wi_name";
					String values = "";
					String custSno, custID, custFullName, custIC, custPassNo, custNationality, custEmail, custMobileNo, custDob, eidaNo, systemType, wiName;
					sQuery = "SELECT "
							+ iProcessedCustomer
							+ " AS CUST_SNO,CUST_ID,final_full_name AS CUSTOMER_FULL_NAME,cust_IC AS CUST_IC, "
							+ "FINAL_PASS_NO AS CUST_PASS_NO, final_nationality AS CUST_NATIONALITY,final_email AS CUST_EMAIL, "
							+ "final_mobile_no AS CUST_MOBILE_NO,  final_dob AS FINAL_DOB, final_eida_no AS EIDA_NO,  wi_name AS SYSTEM_TYPE,"
							+ "'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME FROM usr_0_cust_txn a  WHERE ("
							+ whereCls + ") " + "and a.wi_name<>'"
							+ sWorkitemId + "'";
					logInfo("auditSearchAO", "LVW_DEDUPE_RESULT sQuery: "
							+ sQuery);
					// String sOutput =
					// executeQueryAPSelectWithColumnNames(sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					logInfo("auditSearchLAPS", "list.size(): " + list.size());
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// iCount=list.get(i).get(0);
							custSno = list.get(i).get(0);
							custID = list.get(i).get(1);
							custFullName = list.get(i).get(2);
							custIC = list.get(i).get(3);
							custPassNo = list.get(i).get(4);
							custNationality = list.get(i).get(5);
							custEmail = list.get(i).get(6);
							custMobileNo = list.get(i).get(7);
							// custDob = list.get(i).get(8);
							custDob = "TO_DATE('" + list.get(i).get(8)
									+ "', 'dd/MM/yyyy hh24:mi:ss')";
							eidaNo = list.get(i).get(9);
							systemType = list.get(i).get(10);
							wiName = list.get(i).get(11);
							values = "'" + custSno + "','" + custID + "','"
									+ custFullName + "','" + custIC + "','"
									+ custPassNo + "','" + custNationality
									+ "','" + custEmail + "','" + custMobileNo
									+ "'," + custDob + ",'" + eidaNo + "','"
									+ systemType + "','" + wiName + "'";
							String sQuery1 = "insert into " + dbTable + " ("
									+ columns + ") values (" + values + ")";
							// logInfo("auditSearchAO","sQuery1: "+sQuery1);
							formObject.saveDataInDB(sQuery1);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("auditSearchAO", e);
		}
		return iCount;
	}

	public int auditSearchLAPS(String listView) {
		int iProcessedCustomer = Integer.parseInt((String) formObject
				.getValue(SELECTED_ROW_INDEX)) + 1;
		logInfo("auditSearchLAPS", "Inside");
		String sOutput = null;
		String ID = "";
		List<List<String>> list = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
		if (list != null && !list.isEmpty()) {
			for (int i = 0; i < list.size(); i++) {
				// log.info("data : "+list.get(i));
				ID = list.get(i).get(0);
			}
		}
		int count = 0;
		if (listView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
			sOutput = getLAPSInputXML("",
					(String) formObject.getValue(SEARCH_EIDA_CARD_NO), "", ID);
		} else if (listView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
			String sFinalCEida = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO);
			sOutput = getLAPSInputXML("", sFinalCEida, "", ID);
		}
		logInfo("auditSearchLAPS", "LAPS inputXML: " + sOutput);
		String lapsOutput = socket.connectToSocket(sOutput);
		logInfo("auditSearchLAPS", "fetchLAPSResult: " + lapsOutput);
		String colNames = "cust_id,cust_full_name,cust_ic,cust_pass_no,cust_nationality,cust_email,cust_mobile_no,cust_dob,eida_no,"
				+ "memo_severity,memo,system_type,wi_name";
		String colNames2 = "CUST_SNO,CUST_ID,cust_name,cust_IC,cust_passport, cust_nationality,cust_email, cust_mobile, cust_dob,"
				+ " cust_eida,system_type,wi_name";
		String values = "";
		if (lapsOutput.indexOf("ListItems") > -1
				&& lapsOutput.indexOf("ListItem") > -1) {
			String sReturnCode = getTagValues(lapsOutput, "returnCode");
			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				WFCustomXmlResponse xmlResponse = new WFCustomXmlResponse(
						lapsOutput);
				WFCustomXmlList lWfXml = xmlResponse.createList("ListItems",
						"ListItem");
				for (int i = 0; lWfXml.hasMoreElements(true); lWfXml.skip(true), i++) {
					if (!lWfXml.getVal("CustomerID").isEmpty()) {
						count++;
						try {
							if (listView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
								values = "'" + lWfXml.getVal("CustomerID")
										+ "','" + lWfXml.getVal("CustomerName")
										+ "','','"
										+ lWfXml.getVal("PassportNo")
										+ "','','','"
										+ lWfXml.getVal("MobileNo") + "','','"
										+ lWfXml.getVal("EidaNo")
										+ "','','','LAPS','" + sWorkitemId
										+ "'";
								logInfo("auditSearchLAPS",
										"Laps fetched values: " + values);
								String sQuery = "insert into USR_0_AO_SEARCH_AUDIT("
										+ colNames
										+ ") values ("
										+ values
										+ ")";
								// log.info("auditSearchLAPS sQuery ::: "+
								// sQuery);
								formObject.saveDataInDB(sQuery);
							}
						} catch (Exception e) {
							log.error("Exception in [auditSearchLAPS]", e);
						}
						try {
							if (listView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
								values = "'" + iProcessedCustomer + "','"
										+ lWfXml.getVal("CustomerID") + "','"
										+ lWfXml.getVal("CustomerName")
										+ "','','"
										+ lWfXml.getVal("PassportNo")
										+ "','','','"
										+ lWfXml.getVal("MobileNo") + "','','"
										+ lWfXml.getVal("EidaNo")
										+ "','LAPS','" + sWorkitemId + "'";
								logInfo("auditSearchLAPS",
										"Laps fetched values:" + values);
								String sQuery = "insert into usr_0_duplicate_search_data("
										+ colNames2
										+ ") values ("
										+ values
										+ ")";
								// log.info("auditSearchLAPS sQuery ::: "+
								// sQuery);
								formObject.saveDataInDB(sQuery);
							}
						} catch (Exception e) {
							log.error("Exception in [auditSearchLAPS]", e);
						}
					}
				}
			}
		}
		return count;
	}

	public String getFinalDataComparison(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl) {
		if ((formObject.getValue(sFCRCBControl).toString())
				.equalsIgnoreCase("True")) {
			if (!(formObject.getValue(sFCRDataControl).toString())
					.equalsIgnoreCase("")) {
				return (String) formObject.getValue(sFCRDataControl);
			}
		} else if (((String) formObject.getValue(sEIDACBControl))
				.equalsIgnoreCase("True")) {
			if (!((String) formObject.getValue(sEIDADataControl))
					.equalsIgnoreCase("")) {
				return (String) formObject.getValue(sEIDADataControl);
			}
		} else if (((String) formObject.getValue(sManualCBControl))
				.equalsIgnoreCase("True")) {
			log.info("checkbox value is: "
					+ formObject.getValue(sManualCBControl));
			if (!((String) formObject.getValue(sManualDataControl))
					.equalsIgnoreCase("")) {
				log.info("checkbox value is: "
						+ formObject.getValue(sManualCBControl));
				logInfo("getFinalDataComparison", "returning val: "
						+ formObject.getValue(sManualDataControl).toString());
				return (String) formObject.getValue(sManualDataControl);
			}
		}
		return "";
	}

	public void saveCustNeedAnalysisData() {
		try {
			logInfo("saveCustNeedAnalysisData", "in saveCustNeedAnalysisData--");
			int iSelectedRow = 0;
			String cust_id = "";
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater(ACC_RELATION);
			iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
			cust_id = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,2);
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,iSelectedRow, 0);
			String column1 = "IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,BANKING_IN_UAE,PEP_LIST,CUST_ID,WMS_ID,WI_NAME,CUST_SNO,CUST_SEG,IS_VVIP_CUSTOMER,"
					+ "PASS_TYPE,VISA_STATUS,EMPLOYEE_TYPE, IS_UAE_RESIDENT,SIGN_STYLE,PURPOSE_TAX,PEP,HAWALA,DEALS_ARMAMENT,IS_HOLDING_GREENCARD,"
					+ "IS_US_RESIDENT,IS_US_TIN_PRESENT,BIRTH_COUNTRY,IS_US_TAX_LIABLE,IS_US_CLASSIFICATION,SPECIAL_CATAGORY,EMP_STATUS,CURR_RELATION_TYPE,"
					+ "RM_CODE,RM_NAME,SMS_FLAG,IB_FLAG,IVR_FLAG,STAFF_FLAG_EXISTING,ESTATEMENT_REGISTERED,CHEQUEBOOK_BLOCK,SIGNATUREPRESENTFLAG,"
					+ "PHOTOPRESENTFLAG ,CUSTOMER_OPEN_DATE,TOUCHPOINTS,MIB_FLAG,IS_GEN_TRADE_COMP,IS_STONE_DEALER,IS_COMMODITY_BROKER,"
					+ "IS_REAL_ESTATE_BROKER,IS_SELF_EMPLOYED,SRC_OF_WEALTH,IS_POA_US_PERSON,IS_US_INDICIA_FOUND,DOCUMENT_TO_BE_COLLECTED,"
					+ "CLASSIFICATION_DATE,W8_SIGNUP_DATE,CHANGE_IN_FATCA_3WAY_INPUTS,US_INDICIA_FOUND_WEBSERVICE,FATCAMAIN,FATCAMINI,"
					+ "FATCA_MAINTAIN_OPTION,IS_SELF_EMPLOYED_OTHER,SELF_EMPLOYED_OTHER,NIGEXCEPTIONMAKER,"
					+ "NIGEXCEPTIONCHECKKER,RES_EIDA,DEALS_IN_WMD,SALARY_TRANSFER,"
					+ "FINANCIAL_BROKERS,NOTARY_PUBLIC,SOCIAL_MEDIA_INFLUNCER,STAFF_FLAG";
			String sFinalPassType = getFinalData(
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_FCR).toString(),
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_EIDA).toString(),
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_MANUAL)
							.toString(), getDateValue(FCR_PASSTYPE),
					getDateValue(EIDA_PSSTYPE), getDateValue(MANUAL_PASSTYPE));
			String value1 = "'"
					+ formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_RSN_BNKNG_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ cust_id
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(WMS_ID).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(WI_NAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sCustNo
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CUST_SEGMENT1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CUST_VVIP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPassType
					+ "'"
					+ (char) 25
					+ "'"
					+ returnVisaStatus()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMPLYR_TYPE1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RESIDENCY_STATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SIGN_STYLE1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(TAX_EVASION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ARE_U_PEP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(HAWALA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(DEALS_IN_ARMAMENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_US_PERSON).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CRS_RES_PERM_ADRS_US).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_SSN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CNTRY_OF_BIRTH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_LIABLE_TO_PAY_TAX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_CUST_CLASSIFICATION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SPECIAL_CAT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_STATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT5").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RM_CODE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RM_NAME).toString().replace("'", "")
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SMS_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IB_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IVR_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(STAFF_FLAG_EXISTING).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ESTATEMENT_REGISTERED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHEQUEBOOK_BLOCK).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SIGNATUREPRESENTFLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(PHOTOPRESENTFLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CUSTOMER_OPEN_DATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(TOUCHPOINTS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MIB_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_REAL_STATE_BROKR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+
					// formObject.getValue(RA_CB_REAL_STATE_BROKR).toString()+"'"+(char)25+"'"+formObject.getValue(RA_CUST_SRC_WEALTH).toString()
					formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CUST_SRC_WEALTH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(POACOMBO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(INDICIACOMBO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(COMBODOC).toString()
					+ "'"
					+ (char) 25
					+ convertInTo_To_Date(getDateValue(DATEPICKERCUST))
					+ (char) 25
					+ convertInTo_To_Date(getDateValue(DATEPICKERW8))
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(US_INDICIA_MDM).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAMAIN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAMINI).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAOPTION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_OTHERS_FLD).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NIG_MAKER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NIG_CHECKER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(DRP_RESEIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(DEALS_IN_WMD).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SALARY_TRANSFER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FINANCIAL_BROKERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NOTARY_PUBLIC).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SOCIAL_MEDIA_INFLUNCER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ (formObject.getValue(EMPLYR_TYPE1).toString()
							.equalsIgnoreCase("ADCB") ? "Yes" : "No") + "'";
			insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
		} catch (Exception e) {
			logError("Exception in saveCustNeedAnalysisData", e);
		}
	}

	public String getDateValue(String sFieldName) {
		String sFieldValue = formObject.getValue(sFieldName).toString();
		if (sFieldValue.isEmpty()) {
			return "";
		} else {
			if (sFieldValue.equalsIgnoreCase("")) {
				return "";
			} else {
				return sFieldValue;
			}
		}
	}

	public void saveHiddenDataQDE() {
		logInfo("saveHiddenDataQDE", "in saveHiddenDataQDE--");
		int iSelectedRow = Integer.parseInt((formObject
				.getValue(SELECTED_ROW_INDEX).toString()));
		String cust_id = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String wms_id = formObject.getValue(WMS_ID).toString();
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String sShortName = getFinalDataComparison(CHECKBOX_SHORTNAME_FCR,
				CHECKBOX_SHORTNAME_EIDA, CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME, EIDA_SHORTNAME, MANUAL_SHORTNAME).trim();
		logInfo("saveHiddenDataQDE", "ShortName is:" + sShortName);
		String sEMpPosition = (formObject.getValue(ED_POSITN_DESGNT).toString());
		String sstaffFlag = (formObject.getValue(ED_SET_FLG).toString());
		if (sstaffFlag != null && sstaffFlag.equals("")) {
			sstaffFlag = formObject.getValue(EMPLYR_TYPE1).toString()
					.equalsIgnoreCase("ADCB") ? "Yes" : "No";
		}
		String sEmpSalary = (formObject.getValue(ED_MONTHLY_INCM).toString());
		String cust_marital_status = (formObject.getValue(MARITAL_STATUS)
				.toString());
		String sEmpDOJ = (formObject.getValue(ED_DATE_OF_JOING).toString());
		String sEmpID = (formObject.getValue(ED_EMPLYID).toString());
		String sExistingSince = (formObject.getValue(GI_EXST_SINCE).toString());
		String corr_po_box = (formObject.getValue(CP_POBOXNO).toString());
		String corr_floor = (formObject.getValue(CP_FLOOR).toString());
		String corr_street = (formObject.getValue(CP_STREET).toString());
		String corr_email = (formObject.getValue(CP_EMAIL).toString());
		String corr_city = (formObject.getValue(CP_CITY).toString());
		String corr_state = (formObject.getValue(CORR_STATE).toString());
		String corr_state_other = (formObject.getValue(CPD_RISK_ASSESS_MARKS)
				.toString());
		String corr_cntry = (formObject.getValue(CORR_CNTRY).toString());
		String corr_off_phone = (formObject.getValue(CP_TELEOFFICE).toString());
		String res_building = (formObject.getValue(PA_BUILDINGNAME).toString());
		String res_villa = (formObject.getValue(PA_VILLAFLATNO).toString());
		String res_landmark = (formObject.getValue(PA_STREET).toString());
		String res_city = (formObject.getValue(PA_CITY).toString());
		String res_state = (formObject.getValue(RES_STATE).toString());
		String res_state_other = (formObject.getValue(PA_OTHERS).toString());
		String res_cntry = (formObject.getValue(RES_CNTRY).toString());
		String sEmpPhone = (formObject.getValue("TEXT75").toString());
		log.info("sEmpDOJ----" + sEmpDOJ);
		log.info("sExistingSince----" + sExistingSince);
		String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,CUST_SHORT_NAME,EMP_POSITION,STAFF_FLAG,EMP_SAL,"
				+ "CUST_MARITAL_STATUS,EMP_DOJ,EMP_ID,EXISTING_SINCE,CORR_PO_BOX,CORR_FLOOR,CORR_STREET,CORR_EMAIL,"
				+ "CORR_CITY,CORR_STATE,CORR_OTHER,CORR_CNTRY,CORR_OFF_PHONE,RES_BUILDING,RES_VILLA,RES_LANDMARK,"
				+ "RES_CITY,RES_STATE,RES_OTHER,RES_CNTRY,EMP_PHONE";
		String value1 = "'" + cust_id + "'" + (char) 25 + "'" + wms_id + "'"
				+ (char) 25 + "'" + sWorkitemId + "'" + (char) 25 + "'"
				+ sCustNo + "'" + (char) 25 + "'" + sShortName + "'"
				+ (char) 25 + "'" + sEMpPosition + "'" + (char) 25 + "'"
				+ sstaffFlag + "'" + (char) 25 + "'" + sEmpSalary + "'"
				+ (char) 25 + "'" + cust_marital_status + "'" + (char) 25
				+ convertInTo_To_Date(sEmpDOJ) + (char) 25 + "'" + sEmpID + "'"
				+ (char) 25 + convertInTo_To_Date(sExistingSince) + (char) 25
				+ "'" + corr_po_box + "'" + (char) 25 + "'" + corr_floor + "'"
				+ (char) 25 + "'" + corr_street + "'" + (char) 25 + "'"
				+ corr_email + "'" + (char) 25 + "'" + corr_city + "'"
				+ (char) 25 + "'" + corr_state + "'" + (char) 25 + "'"
				+ corr_state_other + "'" + (char) 25 + "'" + corr_cntry + "'"
				+ (char) 25 + "'" + corr_off_phone + "'" + (char) 25 + "'"
				+ res_building + "'" + (char) 25 + "'" + res_villa + "'"
				+ (char) 25 + "'" + res_landmark + "'" + (char) 25 + "'"
				+ res_city + "'" + (char) 25 + "'" + res_state + "'"
				+ (char) 25 + "'" + res_state_other + "'" + (char) 25 + "'"
				+ res_cntry + "'" + (char) 25 + "'" + sEmpPhone + "'";
		insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
	}

	public String convertInTo_To_Date(String date) {
		if (!date.equalsIgnoreCase("")) {
			String convertedDate = "";
			String ary[] = date.split("/");
			String monthInAlpha = getMonthAlpha(ary[1]);
			convertedDate = "'" + ary[0] + "/" + monthInAlpha + "/" + ary[2]
					+ "'";
			logInfo("convertInTo_To_Date", "convertedDate= " + convertedDate);
			return convertedDate;
		}
		return "''";
	}

	public Boolean validateDOB(String date) {
		try {
			log.info("Called validateDOB ");
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String scurrentDate = simpledateformat.format(calendar.getTime());
			String sDOB = formObject.getValue(date).toString();
			if (sDOB.equalsIgnoreCase(""))
				return true;
			log.info("date :" + sDOB + "\n " + "scurrentDate " + scurrentDate);
			if (!scurrentDate.equals("")) {
				String[] temp = scurrentDate.split("/");
				if (temp[1].length() == 3) {
					scurrentDate = temp[0] + "/" + getMonthNumber(temp[1])
							+ "/" + temp[2];
				} else {
					scurrentDate = temp[0] + "/" + temp[1] + "/" + temp[2];
				}
			}
			Date currentDate = simpledateformat.parse(scurrentDate);
			if (!sDOB.equals("")) {
				String[] temp = sDOB.split("/");
				sDOB = temp[0] + "/" + temp[1] + "/" + temp[2];
			}
			Date nDate = simpledateformat.parse(sDOB);
			log.info("currentDate :" + currentDate + "\n " + "nDate " + nDate);
			if (nDate.compareTo(currentDate) > 0) {
				sendMessageValuesList("", CA014);
				return false;
			} else if (nDate.compareTo(currentDate) == 0) {
				sendMessageValuesList("", CA0128);
				return false;
			} else if (Integer.parseInt(sDOB.substring(
					sDOB.lastIndexOf("/") + 1, sDOB.length())) <= 1900) {
				sendMessageValuesList("", CA015);
				return false;
			}
		} catch (Exception e) {
			log.error("Caught the exception in [validateDOB]", e);
		}
		return true;
	}

	public String getMonthNumber(String e) {
		String letter;
		if (e.equalsIgnoreCase("Jan") || e.equalsIgnoreCase("janv."))
			letter = "01";
		else if (e.equalsIgnoreCase("Feb") || e.equalsIgnoreCase("f�vr."))
			letter = "02";
		else if (e.equalsIgnoreCase("Mar") || e.equalsIgnoreCase("mars"))
			letter = "03";
		else if (e.equalsIgnoreCase("Apr") || e.equalsIgnoreCase("avr."))
			letter = "04";
		else if (e.equalsIgnoreCase("May") || e.equalsIgnoreCase("mai"))
			letter = "05";
		else if (e.equalsIgnoreCase("Jun") || e.equalsIgnoreCase("juin"))
			letter = "06";
		else if (e.equalsIgnoreCase("Jul") || e.equalsIgnoreCase("juil."))
			letter = "07";
		else if (e.equalsIgnoreCase("Aug") || e.equalsIgnoreCase("ao�t"))
			letter = "08";
		else if (e.equalsIgnoreCase("Sep") || e.equalsIgnoreCase("sept."))
			letter = "09";
		else if (e.equalsIgnoreCase("Oct") || e.equalsIgnoreCase("oct."))
			letter = "10";
		else if (e.equalsIgnoreCase("Nov") || e.equalsIgnoreCase("nov."))
			letter = "11";
		else
			letter = "12";
		return letter;
	}

	public String getLAPSInputXML(String sCustID, String eida,
			String passportNo, String sSeqNo) {
		String sInputXML = "";
		try {
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>FetchLAPSResult</Calltype>" + "<Customer>"
					+ "<CustID>" + sCustID + "</CustID>" + "<EidaNumber>"
					+ eida + "</EidaNumber>" + "<PassportNo>" + passportNo
					+ "</PassportNo>" + "</Customer>" + "<REF_NO>" + sSeqNo
					+ "</REF_NO>" + "<WiName>" + sWorkitemId + "</WiName>";
		} catch (Exception e) {
			log.error("Exception in [getLAPSInputXML]: ", e);
		}
		log.info("---FetclAPSREsult input xml=" + sInputXML);
		return sInputXML;
	}

	public int auditSearchCBG(String whereCls, String dbTable, String ListView) {
		String sQuery = "";
		int iCount = 0;
		String custID, custIC, custFullName, custPassNo, custNationality, custEmail, custMobileNo, passDobDate, eidaNo, memoSeverity, memo, systemType, wiName;
		log.info("In auditSearchCBG");
		try {
			logInfo("auditSearchCBG", "INSIDE");
			iCount = returnCount(whereCls, "EXT_CBG_CUST_ONBOARDING");
			log.info("iCount---" + iCount);
			if (iCount > 0) {
				if (ListView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
					logInfo("auditSearchCBG", "INSIDE: " + ListView);
					String columns = "CUST_ID,cust_IC,cust_full_name,cust_pass_no,cust_nationality,cust_email,cust_mobile_no,cust_dob,eida_no,memo_severity,memo,system_type,wi_name";
					String values = "";
					sQuery = "select CUSTOMER_ID,'' AS CUST_IC,CUSTOMER_FULL_NAME, passport_number AS CUST_PASS_NO, "
							+ "passport_nationality AS CUST_NATIONALITY, customer_email AS CUST_EMAIL, customer_mobile_no AS CUST_MOBILE_NO, "
							+ "passport_dob_date AS PASS_DOB_DATE, eida_number AS EIDA_NO,'' AS MEMO_SEVERITY,'' AS MEMO,"
							+ "'"
							+ cBGSystem
							+ "' AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME "
							+ "FROM EXT_CBG_CUST_ONBOARDING WHERE ("
							+ whereCls
							+ ")";
					logInfo("auditSearchCBG", "sQuery: " + sQuery);
					// String sOutput =
					// ExecuteQuery_APSelectWithColumnNames(sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					logInfo("auditSearchCBG", "list.size(): " + list.size());
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// log.info("data : "+list.get(i));
							// iCount=list.get(i).get(0);
							custID = list.get(i).get(0);
							custIC = list.get(i).get(1);
							custFullName = list.get(i).get(2);
							custPassNo = list.get(i).get(3);
							custNationality = list.get(i).get(4);
							custEmail = list.get(i).get(5);
							custMobileNo = list.get(i).get(6);
							passDobDate = list.get(i).get(7);
							eidaNo = list.get(i).get(8);
							memoSeverity = list.get(i).get(9);
							memo = list.get(i).get(10);
							systemType = list.get(i).get(11);
							wiName = list.get(i).get(12);
							values = "'" + custID + "','" + custIC + "','"
									+ custFullName + "','" + custPassNo + "','"
									+ custNationality + "','" + custEmail
									+ "','" + custMobileNo + "','"
									+ passDobDate + "','" + eidaNo + "','"
									+ memoSeverity + "','" + memo + "','"
									+ systemType + "','" + wiName + "'";
							// log.info("values : "+values);
							String sQuery1 = "insert into " + dbTable + " ("
									+ columns + ") values (" + values + ")";
							// log.info("auditSearchCBG sQuery1 : "+sQuery1);
							formObject.saveDataInDB(sQuery1);
						}
					}
				} else if (ListView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
					logInfo("auditSearchCBG", "INSIDE: " + ListView);
					int iProcessedCustomer = Integer
							.parseInt((String) formObject
									.getValue(SELECTED_ROW_INDEX)) + 1;
					String columns = "CUST_SNO,CUST_ID,cust_name,cust_IC,cust_passport,cust_nationality,cust_email,cust_mobile,cust_dob,cust_eida,system_type,wi_name";
					String values = "";
					String CUST_SNO, CUST_ID, cust_name, cust_IC, cust_passport, cust_nationality, cust_email, cust_mobile, cust_dob, cust_eida, system_type, wi_name;
					sQuery = "SELECT "
							+ iProcessedCustomer
							+ " AS CUST_SNO,CUSTOMER_ID, CUSTOMER_FULL_NAME,'' AS CUST_IC, "
							+ "passport_number AS CUST_PASS_NO,"
							+ "(SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE=passport_nationality)  AS CUST_NATIONALITY,"
							+ "customer_email AS CUST_EMAIL, customer_mobile_no AS CUST_MOBILE_NO,passport_dob_date AS PASS_DOB_DATE,"
							+ "eida_number AS EIDA_NO,'" + cBGSystem
							+ "' AS SYSTEM_TYPE,'" + sWorkitemId
							+ "' AS WORKITEM_NAME "
							+ "FROM EXT_CBG_CUST_ONBOARDING WHERE (" + whereCls
							+ ")";
					logInfo("auditSearchCBG", "sQuery: " + sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					logInfo("auditSearchCBG", "list.size(): " + list.size());
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// log.info("data : "+list.get(i));
							// iCount=list.get(i).get(0);
							CUST_SNO = list.get(i).get(0);
							CUST_ID = list.get(i).get(1);
							cust_name = list.get(i).get(2);
							cust_IC = list.get(i).get(3);
							cust_passport = list.get(i).get(4);
							cust_nationality = list.get(i).get(5);
							cust_email = list.get(i).get(6);
							cust_mobile = list.get(i).get(7);
							cust_dob = list.get(i).get(8);
							cust_eida = list.get(i).get(9);
							system_type = list.get(i).get(10);
							wi_name = list.get(i).get(11);
							// WORKITEM_NAME = list.get(i).get(12);
							values = "'" + CUST_SNO + "','" + CUST_ID + "','"
									+ cust_name + "','" + cust_IC + "','"
									+ cust_passport + "','" + cust_nationality
									+ "','" + cust_email + "','" + cust_mobile
									+ "','" + cust_dob + "','" + cust_eida
									+ "','" + system_type + "','" + sWorkitemId
									+ "'";
							String sQuery1 = "insert into " + dbTable + " ("
									+ columns + ") values (" + values + ")";
							formObject.saveDataInDB(sQuery1);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("auditSearchCBG", e);
		}
		return iCount;
	}

	public int auditSearchFCUBS(String whereCls, String dBTable, String ListView) {
		String sQuery = "";
		int iCount = 0;
		logInfo("auditSearchFCUBS", "In auditSearchFCUBS");
		try {
			logInfo("auditSearchFCUBS", "FIRST SEARCH IN FCUBS");
			iCount = returnCount(whereCls, "USR_0_CUST_MASTER");
			String fcubsDate = "";
			if ("USR_0_AO_SEARCH_AUDIT".equalsIgnoreCase(dBTable)) {
				fcubsDate = "to_char(A.CUST_DOB,'" + DATEFORMAT + "')";
			} else {
				fcubsDate = "to_date(to_char(A.CUST_DOB,'" + DATEFORMAT
						+ "'),'dd/mm/yyyy')";
			}
			if (iCount > 0) {
				if (ListView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
					logInfo("auditSearchFCUBS", "INSIDE" + ListView);
					String columns = "CUST_ID,cust_full_name,cust_IC,cust_pass_no,cust_nationality,cust_email,cust_mobile_no,cust_dob,eida_no,memo_severity,memo,system_type,wi_name";
					String values = "";
					String custID, custFullName, custIC, custPassNo, custNationality, custEmail, custMobileNo, custDob, eidaNo, memoSeverity, memo, systemType, wiName;
					sQuery = "SELECT A.CUST_ID AS CUST_ID, A.CUST_FULL_NAME AS CUST_FULL_NAME,CUST_IC, CUST_PASS_NO,"
							+ "(SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE=CUST_NATIONALITY) CUST_NATIONALITY ,"
							+ "CUST_EMAIL, CUST_MOBILE_NO,"
							+ fcubsDate
							+ " AS FCUBS_DATE, A.EIDA_NO AS EIDA_NO, MEMO_SEVERITY AS MEMO_SEVERITY, MEMO AS MEMO,"
							+ "'"
							+ fCUBSSystem
							+ "' AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME "
							+ "FROM USR_0_CUST_MASTER A, USR_0_CUST_MASTER_WMS B WHERE A.CUST_ID =B.CUST_ID(+) AND ("
							+ whereCls + ")";
					// String sOutput =
					// executeQueryAPSelectWithColumnNames(sQuery);
					logInfo("auditSearchFCUBS", "SEARCH_DETAILS_LVW sQuery: "
							+ sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					logInfo("auditSearchFCUBS", "data : " + list.size());
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// log.info("data : "+list.get(i));
							// iCount=list.get(i).get(0);
							custID = list.get(i).get(0);
							custFullName = list.get(i).get(1);
							custIC = list.get(i).get(2);
							custPassNo = list.get(i).get(3);
							custNationality = list.get(i).get(4);
							custEmail = list.get(i).get(5);
							custMobileNo = list.get(i).get(6);
							custDob = list.get(i).get(7);
							eidaNo = list.get(i).get(8);
							memoSeverity = list.get(i).get(9);
							memo = list.get(i).get(10);
							systemType = list.get(i).get(11);
							wiName = list.get(i).get(12);
							values = "'" + custID + "','" + custFullName
									+ "','" + custIC + "','" + custPassNo
									+ "','" + custNationality + "','"
									+ custEmail + "','" + custMobileNo + "','"
									+ custDob + "','" + eidaNo + "','"
									+ memoSeverity + "','"
									+ memo.replace("'", " ") + "','"
									+ systemType + "','" + wiName + "'";
							logInfo("auditSearchFCUBS", "values : " + values);
							String sQuery1 = "insert into " + dBTable + " ("
									+ columns + ") values (" + values + ")";
							logInfo("auditSearchFCUBS",
									"auditSearchFCUBS sQuery1 : " + sQuery1);
							formObject.saveDataInDB(sQuery1);
						}
					}
				} else if (ListView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
					logInfo("auditSearchFCUBS", "INSIDE" + ListView);
					String columns = "CUST_SNO,CUST_ID,cust_name,cust_IC,cust_passport,cust_nationality,cust_email,cust_mobile,cust_dob,cust_eida,system_type,wi_name";
					String values = "";
					String custSno, custID, custFullName, custIC, custPassNo, custNationality, custEmail, custMobileNo, custDob, eidaNo, systemType, wiName;
					int iProcessedCustomer = Integer
							.parseInt((String) formObject
									.getValue(SELECTED_ROW_INDEX)) + 1;
					sQuery = "SELECT "
							+ iProcessedCustomer
							+ " AS CUST_SNO,A.CUST_ID AS CUST_ID, A.CUST_FULL_NAME AS CUST_FULL_NAME,CUST_IC, CUST_PASS_NO,"
							+ "(SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE=CUST_NATIONALITY) CUST_NATIONALITY ,"
							+ "CUST_EMAIL, CUST_MOBILE_NO,"
							+ fcubsDate
							+ " AS FCUBS_DATE, A.EIDA_NO AS EIDA_NO,'"
							+ fCUBSSystem
							+ "' AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME "
							+ "FROM USR_0_CUST_MASTER A, USR_0_CUST_MASTER_WMS B WHERE A.CUST_ID =B.CUST_ID(+) AND ("
							+ whereCls + ")";
					// String sOutput =
					// executeQueryAPSelectWithColumnNames(sQuery);
					logInfo("auditSearchFCUBS", "LVW_DEDUPE_RESULT sQuery: "
							+ sQuery);
					List<List<String>> list = formObject.getDataFromDB(sQuery);
					logInfo("auditSearchFCUBS", "data : " + list.size());
					if (list != null && !list.isEmpty()) {
						for (int i = 0; i < list.size(); i++) {
							// log.info("data : "+list.get(i));
							// iCount=list.get(i).get(0);
							custSno = list.get(i).get(0);
							custID = list.get(i).get(1);
							custFullName = list.get(i).get(2);
							custIC = list.get(i).get(3);
							custPassNo = list.get(i).get(4);
							custNationality = list.get(i).get(5);
							custEmail = list.get(i).get(6);
							custMobileNo = list.get(i).get(7);
							custDob = "TO_DATE('" + list.get(i).get(8)
									+ "', 'dd/MM/yyyy hh24:mi:ss')";
							eidaNo = list.get(i).get(9);
							systemType = list.get(i).get(10);
							wiName = list.get(i).get(11);
							values = "'" + custSno + "','" + custID + "','"
									+ custFullName + "','" + custIC + "','"
									+ custPassNo + "','" + custNationality
									+ "','" + custEmail + "','" + custMobileNo
									+ "'," + custDob + ",'" + eidaNo + "','"
									+ systemType + "','" + wiName + "'";
							// logInfo("auditSearchFCUBS","values : "+values);
							String sQuery1 = "insert into " + dBTable + " ("
									+ columns + ") values (" + values + ")";
							// logInfo("auditSearchFCUBS","auditSearchFCUBS sQuery1 : "+sQuery1);
							formObject.saveDataInDB(sQuery1);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("auditSearchFCUBS", e);
		}
		return iCount;
	}

	public int returnCount(String whereCls, String TableName) {
		String sQuery;
		int iCount = 0;
		String sOutput;
		sQuery = "Select count(*) AS COUNT FROM " + TableName + " A WHERE ("
				+ whereCls + ") ";
		logInfo("returnCount", "INSIDE RETURNCOUNT" + sQuery);
		List<List<String>> list = formObject.getDataFromDB(sQuery);
		if (list != null && !list.isEmpty()) {
			for (int i = 0; i < list.size(); i++) {
				logInfo("returnCount", "data : " + list.get(i));
				iCount = Integer.parseInt(list.get(i).get(0));
			}
		}
		logInfo("returnCount", "iCount---" + iCount);
		return iCount;
	}

	public void addDataInComboFromQuery(String sQuery, String ControlName) {
		try {
			log.info("query=" + sQuery);
			List<List<String>> list = formObject.getDataFromDB(sQuery);
			if (list != null && !list.isEmpty()) {
				for (int i = 0; i < list.size(); i++) {
					log.info("data : " + list.get(i));
					formObject.addItemInCombo(ControlName, list.get(i).get(0)
							.toString());
				}
				formObject.setValue(ControlName, list.get(0).get(0).toString());
			}
		} catch (Exception e) {
			log.error("excpetion in [addDataInComboFromQuery:] ", e);
		}
	}

	public void createHistory() {
		logInfo("createHistory", "INSIDE");
		String ws_decision = "";
		String Remarks = "";
		String created_by = "";
		String prv_ws_name = "";
		String tablename = "";
		String columnname = "";
		String values = "";
		String rej_reason = "";
		String channel = "";
		String id = "";
		List<List<String>> list;
		String sQuery = "";
		String groupname = "";
		String trsddecision = "";
		try {
			tablename = "DECISION_HISTORY";
			// tablename ="USR_0_AO_DEC_HIST";
			columnname = "WINAME,GROUP_NAME,USERID,USERNAME,PRV_WS_NAME,REJ_REASON,WS_COMMENTS,WS_DECISION,CREATE_DAT,"
					+ "CHANNEL,WS_NAME";
			created_by = sUserName.toUpperCase();
			channel = formObject.getValue(SOURCING_CHANNEL).toString();
			if (!(sActivityName.equalsIgnoreCase(ACTIVITY_INTRODUCTION) || sActivityName
					.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO))) {
				if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)
						|| sActivityName
								.equalsIgnoreCase("Customer_Screen_QDE")) {
					if (!"0".equalsIgnoreCase(checkTRSDResult("CRO"))
							&& !"Returned"
									.equalsIgnoreCase(checkTRSDResult1("CRO"))) {
						prv_ws_name = formObject.getValue(PREV_WS_NAME)
								.toString();
						rej_reason = "";
						Remarks = "Sent to TRSD";
					} else {
						prv_ws_name = formObject.getValue(PREV_WS_NAME)
								.toString();
						rej_reason = "";
						Remarks = "";
					}
				} else {
					prv_ws_name = formObject.getValue(PREV_WS_NAME).toString();
					rej_reason = formObject.getValue(CRO_REJ_REASON).toString();
					logInfo("createHistory::", "rej_reason" + rej_reason);
					Remarks = formObject.getValue(CRO_REMARKS).toString()
							.replaceAll("'", "''");
				}
			} else {
				Remarks = "Initiated by " + created_by;
			}
			sQuery = "SELECT GROUPNAME,PERSONALNAME FROM PDBGROUP A, PDBGROUPMEMBER B,PDBUSER C WHERE A.GROUPINDEX=B.GROUPINDEX AND B.USERINDEX=C.USERINDEX AND UPPER(USERNAME)='"
					+ created_by + "'  AND GROUPNAME != 'Everyone'";
			logInfo("createHistory", "query : " + sQuery);
			list = formObject.getDataFromDB(sQuery);
			if (list != null && !list.isEmpty()) {
				logInfo("createHistory", "ID : " + list.get(0).get(0));
				// groupname = list.get(0).get(0);
				for (int i = 0; i < list.size(); i++) {
					groupname = groupname + list.get(i).get(0) + ",";
				}
				groupname = groupname.substring(0, groupname.length() - 1);
				id = list.get(0).get(1);
			}
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_INTRODUCTION)) {
				if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)
						|| sActivityName
								.equalsIgnoreCase("Customer_Screen_QDE")) {
					if (!"0".equalsIgnoreCase(checkTRSDResult("CRO"))
							&& !"Returned"
									.equalsIgnoreCase(checkTRSDResult1("CRO"))) {
						ws_decision = "Sent to TRSD";
					} else {
						ws_decision = "Approve";
					}
				} else {
					ws_decision = formObject.getValue(CRO_DEC).toString();
				}
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN_QDE)) {
				if (!"0".equalsIgnoreCase(checkTRSDResult("CRO"))
						&& !"Returned"
								.equalsIgnoreCase(checkTRSDResult1("CRO"))) {
					ws_decision = "Sent to TRSD";
				} else {
					ws_decision = "Approve";
				}
			}
			if (rej_reason.equalsIgnoreCase("")) {
				rej_reason = "";
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				if (!"0".equalsIgnoreCase(checkTRSDResult("CPD"))
						&& !"Returned"
								.equalsIgnoreCase(checkTRSDResult1("CPD"))) {
					ws_decision = "Sent to TRSD";
					Remarks = "Sent to TRSD";
				}
			}
			values = sWorkitemId + "##" + groupname + "##" + created_by + "##"
					+ id + "##" + prv_ws_name + "##" + rej_reason + "##"
					+ Remarks + "##" + ws_decision + "##"
					+ getCurrentDateTime() + "##" + channel + "##"
					+ sActivityName;
			logInfo("createHistory", "columnname--A--" + columnname);
			logInfo("createHistory", "values--A--" + values);
			logInfo("createHistory", "Remarks---" + Remarks);
			logInfo("createHistory", "ws_decision---" + ws_decision);
			int resAPInsert = -1;
			int resAPInsert2 = -1;
			String grpname = groupname;
			if (!ws_decision.equalsIgnoreCase("null")) {
				logInfo("createHistory", "inside  if---" + ws_decision);
				if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)
						|| sActivityName
								.equalsIgnoreCase(ACTIVITY_CUST_SCREEN_QDE)) {
					logInfo("createHistory", "inside activity---" + ws_decision);
					groupname = "";
					String totalCust = formObject.getValue(
							"NO_OF_CUST_SEARCHED").toString();
					sQuery = "SELECT cust_processed,trsd_decision FROM EXT_AO  WHERE WI_NAME='"
							+ sWorkitemId + "'";
					logInfo("createHistory", "query : " + sQuery);
					list = formObject.getDataFromDB(sQuery);
					if (list != null && !list.isEmpty()) {
						logInfo("createHistory", "ID : " + list.get(0).get(0));
						groupname = list.get(0).get(0);
						trsddecision = list.get(0).get(1);
					}
					logInfo("createHistory", "groupname: " + groupname);
					try {
						int totproc = 0;
						int totcust = 0;
						totproc = Integer.parseInt(groupname);
						totcust = Integer.parseInt(totalCust);
						logInfo("createHistory", "total---" + totproc);
						logInfo("createHistory", "total cust---" + totcust);
						if ((totproc > totcust)
								&& trsddecision.equalsIgnoreCase("Pending")) {
							groupname = "1";
						} else {
							groupname = "";
						}
					} catch (Exception e) {
						logError("createHistory", e);
					}
				} else {
					groupname = "1";
				}
				logInfo("createHistory", "groupname: " + groupname);
				if (!groupname.equalsIgnoreCase("")) {
					resAPInsert = LoadListViewWithHardCodeValues(tablename,
							columnname, values);
					logInfo("createHistory", "resAPInsert: " + resAPInsert);
					if (sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")
							|| sActivityName
									.equalsIgnoreCase("DDE_Acc_INFO_CHK")
							|| sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)) {
						if (formObject.getValue("P_ECB_CHQ_VALIDATION")
								.toString().equalsIgnoreCase("false")) {
							Remarks = "ECB Cheque validation skip reason - "
									+ formObject.getValue("P_ECB_REASON");
							values = sWorkitemId + "##" + grpname + "##"
									+ created_by + "##" + id + "##"
									+ prv_ws_name + "##" + rej_reason + "##"
									+ Remarks + "##" + ws_decision + "##"
									+ getCurrentDateTime() + "##" + channel
									+ "##" + sActivityName;
							resAPInsert2 = LoadListViewWithHardCodeValues(
									tablename, columnname, values);
							logInfo("createHistory", "resAPInsert2: "
									+ resAPInsert2);
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
									&& ws_decision
											.equalsIgnoreCase("Sent to TRSD")
									&& formObject
											.getValue(CRO_DEC)
											.toString()
											.equalsIgnoreCase(
													"Return to Originator")) {
								ws_decision = "Return to Originator";
								Remarks = formObject.getValue(CRO_REMARKS)
										.toString().replaceAll("'", "''");
								values = sWorkitemId + "##" + grpname + "##"
										+ created_by + "##" + id + "##"
										+ prv_ws_name + "##" + rej_reason
										+ "##" + Remarks + "##" + ws_decision
										+ "##" + getCurrentDateTime() + "##"
										+ channel + "##" + sActivityName;
								logInfo("createHistory", "resAPInsert2: "
										+ resAPInsert2);
							}
						}
					}
					if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
						if (0 != resAPInsert) {
							sendMessageValuesList("",
									"Decision History is not populated. "
											+ "Please contact app support team");
						}
					}
				}
				logInfo("createHistory", "output resAPInsert :: " + resAPInsert);
				logInfo("createHistory", "output 2 :: " + resAPInsert2);
			}
		} catch (Exception ex) {
			if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				sendMessageValuesList("",
						"Exception occured in populating decision history. "
								+ "Please contact app support team");
			}
			logError("createHistory", ex);
		}
	}

	public void createAllHistory() {
		logInfo("createAllHistory", "INSIDE");
		String sno = "";
		String ws_decision = "";
		String Remarks = "";
		String created_by = "";
		String prv_ws_name = "";
		String ws_name = "";
		String tablename = "";
		String columnname = "";
		String values = "";
		String entry_date = "";
		String channel = "";
		String personalName = "";
		List<List<String>> list;
		String sQuery = "";
		logInfo("createAllHistory", "inside Creste all history--------");
		try {
			tablename = "USR_0_ALL_WS_DECISION_HIST";
			columnname = "WI_NAME,USER_NAME,WS_NAME,PREV_WS_NAME,WS_DECISION,WS_COMMENTS,ENTRY_DATE,EXIT_DATE,CHANNEL";
			created_by = sUserName.toUpperCase();
			log.info("username----" + created_by);
			channel = formObject.getValue(SOURCING_CHANNEL).toString();
			log.info("channel----" + channel);
			ws_name = formObject.getValue(CURR_WS_NAME).toString();
			log.info("ws_name::::" + ws_name);
			Date d = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			String EXIT_DATE = dateFormat.format(d);
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_INTRODUCTION)) {
				log.info("inside if---");
				prv_ws_name = formObject.getValue(PREV_WS_NAME).toString();
				log.info("prv_ws_name=" + prv_ws_name);
				Remarks = formObject.getValue(CRO_REMARKS).toString()
						.replaceAll("'", "''");
				if (prv_ws_name.equalsIgnoreCase("")
						&& ws_name.equalsIgnoreCase(ACTIVITY_ACCOUNT_RELATION)) {
					prv_ws_name = ACTIVITY_INTRODUCTION;
					log.info("prev ws_name inside if------" + prv_ws_name);

				}
			} else {
				Remarks = "Initiated by " + created_by;
			}

			log.info("Remarks" + Remarks);
			log.info("start edit by  mohit 25012016 for username issue at CPD Checker sno is set to null as execution time was more");

			sQuery = "select PERSONALNAME from pdbuser where upper(UserName)=upper('"
					+ created_by + "')";
			log.info("query : " + sQuery);
			list = formObject.getDataFromDB(sQuery);
			if (list != null && !list.isEmpty()) {
				log.info("ID : " + list.get(0).get(0));
				personalName = list.get(0).get(0);
			}

			sQuery = "select CURR_ENTRYDATETIME  as ENTRY_DATE from "
					+ sExtTable + " where wi_name='" + sWorkitemId + "'";
			log.info("query : " + sQuery);
			list = formObject.getDataFromDB(sQuery);
			if (list != null && !list.isEmpty()) {
				log.info("ID : " + list.get(0).get(0));
				entry_date = list.get(0).get(0);
			}
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_INTRODUCTION)) {
				ws_decision = formObject.getValue(CRO_DEC).toString();
			}

			String ws_desc = ws_decision;
			if (ws_decision.equalsIgnoreCase("")) {
				ws_decision = "";
			}
			log.info("ws_decision%%%%%%" + ws_decision);

			values = "'" + sWorkitemId + "','" + created_by + "','" + ws_name
					+ "','" + prv_ws_name + "','" + ws_decision + "','"
					+ Remarks + "',to_date('" + entry_date
					+ "','dd/mm/yyyy HH24:MI:SS'),sysdate,'" + channel + "'";
			log.info("columnname----" + columnname);
			log.info("values----" + values);
			log.info("Remarks---" + Remarks);

			ws_decision = ws_desc;
			int resAPInsert;

			resAPInsert = insertDataIntoDB(tablename, columnname, values);

			log.info("output" + resAPInsert);
		} catch (Exception e) {
			log.error("Exception: ", e);
		}

	}

	public String checkTRSDResult(String group) {
		String personalName = "";
		String sQuery = "select nvl(max(a),0) CNT from ( select (case when trsd_2_status='Rejected' then 2 else 1 end)a from usr_0_trsd_details where wi_name='"
				+ sWorkitemId
				+ "' and trsd_2_status<>'Approved' and user_id='"
				+ group + "') ";
		log.info("query : " + sQuery);
		List<List<String>> list = formObject.getDataFromDB(sQuery);
		if (list != null && !list.isEmpty()) {
			log.info("ID : " + list.get(0).get(0));
			return list.get(0).get(0);
		}
		return "0";

	}

	public String checkTRSDResult1(String group) {

		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String sQuery = "select trsd_2_status CNT from usr_0_trsd_details where wi_name='"
				+ sWorkitemId
				+ "' and trsd_2_status<>'Approved' and user_id='"
				+ group + "' and acc_relation_sno='" + iSelectedRow + "' ";
		log.info("query : " + sQuery);
		List<List<String>> list = formObject.getDataFromDB(sQuery);
		if (list != null && !list.isEmpty()) {
			log.info("ID : " + list.get(0).get(0));
			return list.get(0).get(0);
		}
		return "0";
	}

	public int LoadListViewWithHardCodeValues(String listView, String colnames,
			String values) {
		logInfo("LoadListViewWithHardCodeValues", "values: " + values
				+ " -- colnames=" + colnames + " -- gridName=" + listView);
		JSONArray jsonArray = new JSONArray();
		JSONObject jsonObject = new JSONObject();
		String[] columnArray;
		String[] valuesArray;
		logInfo("LoadListViewWithHardCodeValues",
				"no. of rows in grid before: " + getGridCount(listView));
		try {
			if (isEmpty(colnames) && isEmpty(values)) {
				columnArray = colnames.split(",");
				valuesArray = values.split("##");
				log.info("In loadlist view " + columnArray.length);
				for (int i = 0; i < valuesArray.length; i++) {
					/*
					 * logInfo("LoadListViewWithHardCodeValues","grid column :"+
					 * columnArray[i]);
					 * logInfo("LoadListViewWithHardCodeValues",
					 * "grid value :"+valuesArray[i].toString());
					 */
					if ("null".equalsIgnoreCase(valuesArray[i].toString()))
						valuesArray[i] = "";
					jsonObject.put(columnArray[i], valuesArray[i].toString());
				}
				jsonArray.add(jsonObject);
				logInfo("LoadListViewWithHardCodeValues", "json array: "
						+ jsonArray);
				formObject.addDataToGrid(listView, jsonArray);
				return 0;
			}
		} catch (Exception e) {
			log.error("Exception: ", e);
			return -1;
		}
		logInfo("LoadListViewWithHardCodeValues", "no. of rows in grid after: "
				+ getGridCount(listView));
		return -1;
	}

	public boolean isEmpty(String str) {
		boolean flag = ((null != str) && (str.trim().length() > 0) && (!(str
				.trim().equalsIgnoreCase("null"))));
		log.info("flag value : " + flag);
		return flag;
	}

	public String getCurrentDateTime() {
		String today = null;
		try {
			Date date = Calendar.getInstance().getTime();
			DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			today = formatter.format(date);
			log.info("today=" + today);
		} catch (Exception e) {
			log.error("Exception: ", e);
		}

		return today;
	}

	/*
	 * public int insertDataIntoDB(String tablename,String columnname,String
	 * values) { values = values.replaceAll(Character.toString((char)25), ",");
	 * String insertQuery =
	 * "INSERT INTO "+tablename+" ("+columnname+") VALUES ("+values+")";
	 * logInfo("insertDataIntoDB","insertQuery : "+insertQuery); int result =
	 * formObject.saveDataInDB(insertQuery); return result; }
	 */

	/*
	 * public int insertDataIntoDB(String tablename,String columnname,String
	 * values) { values = values.replaceAll("'"+(char)25+"'", ""+(char)25+"");
	 * values = values.replaceAll("'", "''"); values =
	 * values.replaceAll(""+(char)25 , "'"+(char)25+"'"); values =
	 * values.replaceAll(Character.toString((char)25), ",");
	 * values=values.substring(1,values.length()-1); String insertQuery =
	 * "INSERT INTO "+tablename+" ("+columnname+") VALUES ("+values+")";
	 * logInfo("insertDataIntoDB","insertQuery : "+insertQuery); int result =
	 * formObject.saveDataInDB(insertQuery); return result; }
	 */

	public int insertDataIntoDB(String tablename, String columnname,
			String values) {
		logInfo("insertDataIntoDB", "insertQuery NEW 18/01/2022 : values "
				+ values);
		if (values.contains("" + (char) 25)) {
			values = values.replaceAll("'" + (char) 25 + "'", "!~!");
			values = values.replaceAll("'" + (char) 25, "!#!");
			values = values.replaceAll((char) 25 + "'", "!@!");
			values = values.replaceAll("','", "!~!");
			values = values.replaceAll("\\('", "!b!");
			values = values.replaceAll("'\\)", "!c!");
			// System.out.println(values);
			values = values.replaceAll("'", "''");
			// values = values.replaceAll(""+(char)25 , "'"+(char)25+"'");
			values = values.replaceAll("!~!", "','");
			values = values.replaceAll("!#!", "',");
			values = values.replaceAll("!@!", ",'");
			values = values.replaceAll("!b!", "\\('");
			values = values.replaceAll("!c!", "'\\)");
			values = values.replaceAll(Character.toString((char) 25), ",");
			if ("'".equalsIgnoreCase(values.substring(1, 2)))
				values = values.substring(1, values.length());
			if ("'".equalsIgnoreCase(values.substring(values.length() - 1,
					values.length())))
				values = values.substring(0, values.length() - 1);
		} else {
			values = values.replaceAll("','", "!~!");
			values = values.replaceAll("',", "!#!");
			values = values.replaceAll(",'", "!@!");
			values = values.replaceAll("','", "!~!");
			values = values.replaceAll("\\('", "!b!");
			values = values.replaceAll("'\\)", "!c!");
			// System.out.println(values);
			values = values.replaceAll("'", "''");
			// values = values.replaceAll(""+(char)25 , "'"+(char)25+"'");
			values = values.replaceAll("!~!", "','");
			values = values.replaceAll("!#!", "',");
			values = values.replaceAll("!@!", ",'");
			values = values.replaceAll("!b!", "\\('");
			values = values.replaceAll("!c!", "'\\)");
			values = values.replaceAll(Character.toString((char) 25), ",");
			if ("'".equalsIgnoreCase(values.substring(1, 2)))
				values = values.substring(1, values.length());
			if ("'".equalsIgnoreCase(values.substring(values.length() - 1,
					values.length())))
				values = values.substring(0, values.length() - 1);
		}
		String insertQuery = "INSERT INTO " + tablename + " (" + columnname
				+ ") VALUES (" + values + ")";

		logInfo("insertDataIntoDB", "insertQuery : " + insertQuery);
		int result = formObject.saveDataInDB(insertQuery);
		return result;
	}

	public String getPrimaryCustomerSNO() {
		// NGRepeater objChkRepeater = formObject.getNGRepeater;
		int iRows = getGridCount(ACC_RELATION);
		String sAccRelation = "";
		String sNo = "";
		if (iRows == 0) {
			sNo = "0";
		} else {
			for (int i = 0; i < iRows; i++) {
				// sAccRelation=formObject.getValue("ACC_RELATION.ACC_RELATION").toString();
				sAccRelation = formObject.getTableCellValue(ACC_RELATION, i, 9);
				// commented for AO release by Ayush
				if ("".equalsIgnoreCase(sAccRelation)) {
					sAccRelation = formObject.getTableCellValue(ACC_RELATION,
							i, 8);
				}
				if (sAccRelation.equalsIgnoreCase("SOW")) {
					sNo = "1";
					break;
				} else if (sAccRelation.equalsIgnoreCase("JAF")
						|| sAccRelation.equalsIgnoreCase("JOF")
						|| sAccRelation.equalsIgnoreCase("Minor")) {
					// sNo= formObject.getValue("ACC_RELATION.sno").toString();
					sNo = formObject.getTableCellValue(ACC_RELATION, i, 0);
					break;
				}
			}
		}
		return sNo;
	}

	public int getGridCount(String controlName) {
		int count = 0;
		try {
			JSONArray jsonArray = formObject.getDataFromGrid(controlName);
			count = jsonArray.size();
		} catch (Exception e) {
			logError("Exception in getListCount: " + e, e);
		}
		return count;
	}

	public int getListCount(String controlName) {
		int count = 0;
		try {
			EComboControl combo = (EComboControl) formObject
					.getIFormControl(controlName);
			ArrayList<EControlOption> list = combo.getM_objControlOptions()
					.getM_arrOptions();
			count = list.size();
		} catch (Throwable e) {
			log.debug("Exception in getListCount: " + e, e);
			;
		}
		return count;
	}

	public void loadExistingDebitCard(String sTableName, String sGridName,
			String sCustID) {
		try {
			logInfo("loadExistingDebitCard", "INSIDE");
			String sReturnCode = "";
			String result = "";
			String sValues = "";
			String sAccValues = "";
			int iLinkAccCount = 0;
			int iAccCount = 0;
			String sColumnName = "WI_NAME,CUST_ID,CARD_NO ,CARD_TYPE,CARD_TYPE_DESC,PRODUCT_GROUP,EMBOSS_NAME,"
					+ "LINK_ACC_COUNT,STATUS,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE,CURRENCY";
			String sAccColumnName = "WI_NAME,DEBIT_CARD_NO,LINKED_ACC_NO,LINKED_ACC_TYPE";
			String[] sAllDebitCard;
			String[] sEachDebitCard;
			String[] sAllLinkAcc;
			String[] sEachLinkAcc;
			String count = "";
			if (sCustID.length() < 6) {
				for (int i = 0; i < (6 - sCustID.length()); i++) {
					count = "0" + count;
				}
			}
			sCustID = count + sCustID;
			logInfo("loadExistingDebitCard", "scustID: " + sCustID);
			String sOutput = fetchDebitCard(sCustID);
			sReturnCode = getTagValue(sOutput, "returnCode");
			logInfo("loadExistingDebitCard", "sReturnCode: " + sReturnCode);
			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				if (!getTagValue(sOutput, "DebitCard").equalsIgnoreCase("")) {
					sAllDebitCard = getTagValue(sOutput, "DebitCard")
							.split(";");
					sAllLinkAcc = getTagValue(sOutput, "LinkedAccounts").split(
							";");
					// sCurrency= getTagValue(sOutput,"Currency").split(";");
					for (int j = 0; j < sAllDebitCard.length; j++) {
						sEachDebitCard = sAllDebitCard[j].split(",");
						logInfo("loadExistingDebitCard", " "
								+ sEachDebitCard.length);
						sValues = "'" + sWorkitemId + "','" + sCustID + "','"
								+ sEachDebitCard[0] + "','" + sEachDebitCard[2]
								+ "','" + sEachDebitCard[3] + "','"
								+ sEachDebitCard[4] + "','" + sEachDebitCard[5]
								+ "','" + sEachDebitCard[20] + "','"
								+ sEachDebitCard[6] + "','" + sEachDebitCard[7]
								+ "','" + sEachDebitCard[17] + "','"
								+ sEachDebitCard[10] + "','"
								+ sEachDebitCard[11] + "'";
						logInfo("loadExistingDebitCard",
								"All Debit Card- sColumnName: " + sColumnName
										+ ", sValues: " + sValues);
						insertDataIntoDB(sTableName, sColumnName, sValues);
						// result=ExecuteQuery_APInsert(sTableName,sColumnName,sValues);
						logInfo("loadExistingDebitCard", "result---" + result);
						// FCR changes previously 19
						iLinkAccCount = Integer.parseInt(sEachDebitCard[20]);
						logInfo("loadExistingDebitCard", "iLinkAccCount: "
								+ iLinkAccCount);
						if (iLinkAccCount > 0) {
							for (int iCount = 0; iCount < iLinkAccCount; iCount++) {
								logInfo("loadExistingDebitCard",
										"In Saving Link Account---");
								sEachLinkAcc = sAllLinkAcc[iAccCount]
										.split(",");
								sAccValues = "'" + sWorkitemId + "','"
										+ sEachDebitCard[0] + "','"
										+ sEachLinkAcc[0] + "','"
										+ sEachLinkAcc[1] + "'";
								insertDataIntoDB(
										"USR_0_DC_ACC_MAPPING_EXISTING",
										sAccColumnName, sAccValues);
								logInfo("loadExistingDebitCard", "result: "
										+ result);
								iAccCount = iAccCount + 1;
							}
						}
					}
				}
			}
			String sQuery = "SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE FROM "
					+ sTableName + " WHERE WI_NAME = '" + sWorkitemId + "'";
			logInfo("loadExistingDebitCard", "sQuery: " + sQuery);
			List recordList = formObject.getDataFromDB(sQuery);
			loadListView(
					recordList,
					"CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE",
					sGridName);
		} catch (Exception e) {
			logError("loadExistingDebitCard", e);
		}
	}

	public String fetchDebitCard(String sCustID) {
		List<List<String>> list;
		String sOutput = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
		list = formObject.getDataFromDB(sOutput);
		sOutput = getDebitCardInputXML(sCustID, list.get(0).get(0), "TP906079");
		log.info("fetchDebitCardDetails   1st  -----" + sOutput);
		log.info("sCustID   1st  -----" + sCustID);
		sOutput = socket.connectToSocket(sOutput);
		log.info("fetchDebitCardDetails sOutput: " + sOutput);
		return sOutput;
	}

	public String getDebitCardInputXML(String sCustID, String sSeqNo,
			String sUserName) {
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Debit_Card_Information</Calltype>" + "<Customer>"
				+ "<CUST_ID>" + sCustID + "</CUST_ID>" + "<REF_NO>" + sSeqNo
				+ "</REF_NO>" + "<USER>" + sUserName + "</USER>" + "<WiName>"
				+ sWorkitemId + "</WiName>" + "</Customer>";

		log.info("debit card input XXMMLL  " + sInputXML);
		return sInputXML;
	}

	public String ExecuteWebserviceAll1(String sXML) {
		XMLParser generalDataParser = new XMLParser();
		// generalDataParser.setInputXML(formObject.getObjGeneralData());
		/*
		 * String sEngineName = generalDataParser.getValueOf("EngineName");
		 * String sSessionId = generalDataParser.getValueOf("DMSSessionId");
		 * String serverUrl = generalDataParser.getValueOf("ServletPath") ;
		 * String sJTSIP=generalDataParser.getValueOf("JTSIP") ; String
		 * sJTSPORT=generalDataParser.getValueOf("JTSPORT") ; String
		 * sJTSApp=generalDataParser.getValueOf("AppServerType") ;
		 */
		String sEngineName = formObject.getObjGeneralData()
				.getM_strEngineName();
		String sSessionId = formObject.getObjGeneralData()
				.getM_strDMSSessionId();
		String serverUrl = formObject.getObjGeneralData().getM_strServletPath();
		String sJTSIP = formObject.getObjGeneralData().getM_strJTSIP();
		String sJTSPORT = formObject.getObjGeneralData().getM_strJTSPORT();
		String sJTSApp = formObject.getObjGeneralData().getM_strAppServerType();
		String ServletUrl = serverUrl.replace("webdesktop", "")
				+ "NGServlet/servlet/ExternalServlet?AppServerIP=" + sJTSIP
				+ "&AppServerPort=" + sJTSPORT + "&AppServerType=" + sJTSApp;
		String sOutputXML = "";
		String sInputXML = "<EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		log.info("Server URL: " + ServletUrl);
		sInputXML = sXML + sInputXML;
		log.info("sInputXML:" + sInputXML);
		HttpURLConnection urlConnection = null;
		InputStream is = null;
		BufferedWriter os = null;
		try {
			URL url = new URL(ServletUrl);
			urlConnection = (HttpURLConnection) url.openConnection();
			urlConnection.setRequestMethod("POST");
			urlConnection.setDoInput(true);
			urlConnection.setDoOutput(true);
			urlConnection.setRequestProperty("Content-Type",
					"application/octet-stream");
			os = new BufferedWriter(new OutputStreamWriter(
					urlConnection.getOutputStream(), "UTF-8"));
			os.write(sInputXML, 0, sInputXML.length());
			if (os != null) {
				os.close();
			}
			os = null;
			// ----------------------------------------------------------------------
			// read any response data, and store in a ByteArrayOutputStream
			// ----------------------------------------------------------------------
			ByteArrayOutputStream baos = null;
			if ((is = urlConnection.getInputStream()) != null) {
				baos = new ByteArrayOutputStream();
				byte ba[] = new byte[1];
				while ((is.read(ba, 0, 1)) != (-1))
					baos.write(ba, 0, 1);
				baos.flush();
				if (is != null) {
					is.close();
				}
				is = null;
				sOutputXML = new String(baos.toByteArray(), "UTF-8");
			}
		} catch (Exception e) {
			log.error("Exception in [ExecuteWebserviceAll]", e);

		} finally {
			try {
				if (os != null) {
					os.close();
				}
				if (is != null) {
					is.close();
				}
			} catch (Exception e) {
				log.error("Exception in [ExecuteWebserviceAll]", e);
			}
			urlConnection.disconnect();
		}
		return sOutputXML;
	}

	public String getTagValues(String sXML, String sTagName) {
		String sTagValues = "";
		String sStartTag = "<" + sTagName + ">";
		String sEndTag = "</" + sTagName + ">";
		String tempXML = sXML;
		tempXML = tempXML.replaceAll("&", "#amp#");
		try {
			for (int i = 0; i < sXML.split(sEndTag).length - 1; i++) {
				if (tempXML.indexOf(sStartTag) != -1) {
					sTagValues += tempXML.substring(tempXML.indexOf(sStartTag)
							+ sStartTag.length(), tempXML.indexOf(sEndTag));
					tempXML = tempXML.substring(tempXML.indexOf(sEndTag)
							+ sEndTag.length(), tempXML.length());
				}
				if (tempXML.indexOf(sStartTag) != -1) {
					sTagValues += ",";
				}
			}
			if (sTagValues.indexOf("#amp#") != -1) {
				log.info("Index found");
				sTagValues = sTagValues.replaceAll("#amp#", "&").trim();
			}
			log.info(" Final sTagValues" + sTagValues);
		} catch (Exception e) {
			log.error("Exception: ", e);
		}
		return sTagValues;
	}

	public String getTagValue(String xml, String tag)
			throws ParserConfigurationException, SAXException, IOException {
		xml = xml.replaceAll("&", "#amp#");
		xml = xml.replaceAll(";", "#col#");
		xml = xml.replaceAll(",", "#Comma#");
		Document doc = getDocument(xml);
		NodeList nodeList = doc.getElementsByTagName(tag);
		String value = "";
		int length = nodeList.getLength();
		// log.info("length---"+length);
		if (length > 0) {
			String sTempValue = "";
			for (int j = 0; j < length; j++) {
				Node node = nodeList.item(j);
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					NodeList childNodes = node.getChildNodes();
					int count = childNodes.getLength();
					for (int i = 0; i < count; i++) {
						Node item = childNodes.item(i);
						if (item.getNodeType() == Node.ELEMENT_NODE) {
							sTempValue = item.getTextContent();
							if (sTempValue.indexOf("#amp#") != -1) {
								log.info("Index found");
								sTempValue = sTempValue
										.replaceAll("#amp#", "&");
							}
							value += sTempValue + ",";
						} else if (item.getNodeType() == Node.TEXT_NODE) {
							value = item.getNodeValue();
							if (value.indexOf("#amp#") != -1) {
								log.info("Index found");
								value = value.replaceAll("#amp#", "&");
								value = value.replaceAll("#col#", ";");
								value = value.replaceAll("#Comma#", ",");
							}
							return value;
						}
					}
					if (!value.equalsIgnoreCase("")) {
						value = value.substring(0, value.length() - 1);
						value = value + ";";
					}
				} else if (node.getNodeType() == Node.TEXT_NODE) {
					value = node.getNodeValue();
					if (value.indexOf("#amp#") != -1) {
						log.info("Index found");
						value = value.replaceAll("#amp#", "&");
						value = value.replaceAll("#col#", ";");
						value = value.replaceAll("#Comma#", ",");
					}
					return value;
				}
			}
			if (!value.equalsIgnoreCase("")) {
				value = value.substring(0, value.length() - 1);
			}
			return value;
		}
		return "";
	}

	private Document getDocument(String xml)
			throws ParserConfigurationException, SAXException, IOException {
		// Step 1: create a DocumentBuilderFactory
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		// Step 2: create a DocumentBuilder
		DocumentBuilder db = dbf.newDocumentBuilder();

		// Step 3: parse the input file to get a Document object
		Document doc = db.parse(new InputSource(new StringReader(xml)));
		return doc;
	}

	// public String convertIntoDate(String date)
	// {
	// if(!date.equalsIgnoreCase(""))
	// {
	// String convertedDate="";
	// String ary[]=date.split("/");
	// String monthInAlpha=ngValidation.getMonthAlpha(ary[1]);
	// convertedDate="'"+ary[0]+"/"+monthInAlpha+"/"+ary[2]+"'";
	// log.info("############### convertedDate ####### = "+convertedDate);
	// return convertedDate;
	// }
	//
	// return "''";
	// }

	public void loadSICombos() {
		try {
			logInfo("loadSICombos", "INSIDE  loadSICombos");
			int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			if (iPrimaryCust > 0) {
				iPrimaryCust = iPrimaryCust - 1;
			}
			logInfo("loadSICombos", "INSIDE  iPrimaryCust" + iPrimaryCust);
			String gridListName = ACC_RELATION;
			List output = formObject.getDataFromGrid(gridListName);
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust, 2);
			logInfo("loadSICombos", "INSIDE  sCustID" + sCustID);

			int iRows = getGridCount(PRODUCT_QUEUE);
			String sProdCode = "";
			String sQuery = "";
			String sName = "";
			String sweetOutDAN = formObject.getValue(SWP_OUT_DEB_ACC_NO)
					.toString();
			String sweetInDAN = formObject.getValue(SWP_IN_DEB_ACC_NO)
					.toString();
			log.info("sweetOutDAN----" + sweetOutDAN);
			log.info("sweetInDAN----" + sweetInDAN);
			formObject.clearCombo(PROD_COMBO);
			formObject.clearCombo(SI_CRED_PROD);
			formObject.clearCombo(SI_DEB_ACC_NO);
			formObject.clearCombo(SWP_OUT_DEB_ACC_NO);
			formObject.clearCombo(SWP_IN_DEB_ACC_NO);
			for (int i = 0; i < iRows; i++) {
				sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE, i, 1);
				sName = formObject.getTableCellValue(PRODUCT_QUEUE, i, 2);
				log.info("sProdCode----" + sProdCode);
				log.info("sName----" + sName);
				formObject.addItemInCombo(PROD_COMBO, sName + "_" + sProdCode
						+ "_" + i);
				formObject.addItemInCombo(SI_CRED_PROD, sName + "_" + sProdCode
						+ "_" + i);
			}
			sQuery = "SELECT TO_CHAR('') FROM DUAL UNION SELECT to_char(ACC_NO) FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUSTOMER_ID='"
					+ sCustID
					+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE IN ('6','8')) AND PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE SI_FLAG ='Y')";
			// sQuery=
			// "SELECT ACC_NO FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"+sWorkitemId+"' AND CUSTOMER_ID='"+sCustID+"' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE IN ('6','8')) AND PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE SI_FLAG ='Y') order by 1";
			formObject.getDataFromDB(sQuery);
			// addItemsDropDown(SI_DEB_ACC_NO,SI_DEB_ACC_NO);
			// formObject.setNGListIndex(SI_DEB_ACC_NO,0);
			loadCombo(sQuery, SI_DEB_ACC_NO);
			loadCombo(sQuery, SWP_OUT_DEB_ACC_NO);
			loadCombo(sQuery, SWP_IN_DEB_ACC_NO);

			// formObject.addItemInCombo(SI_DEB_ACC_NO,SWP_OUT_DEB_ACC_NO);
			// formObject.addItemInCombo(SI_DEB_ACC_NO,SWP_IN_DEB_ACC_NO);
			// formObject.setNGListIndex(PROD_COMBO,0);
			if (sweetOutDAN != null) {
				formObject.setValue(SWP_OUT_DEB_ACC_NO, sweetOutDAN);
			} else {
				// formObject.setNGListIndex(SWP_OUT_DEB_ACC_NO,0);
			}
			if (sweetInDAN != null) {
				formObject.setValue(SWP_IN_DEB_ACC_NO, sweetInDAN);
			} else {
				// formObject.setNGListIndex(SWP_IN_DEB_ACC_NO,0);
			}
		} catch (Exception e) {
			log.error("Exception: ", e);
		}
	}

	public void populateStndInstr() {
		String sQuery1 = "SELECT DEBIT_ACC_NO,DEBIT_CURRENCY,CREDIT_PRODUCT,TO_CHAR(FIRST_PAY_DATE,'DD/MM/YYYY'),TO_CHAR(LAST_PAY_DATE,'DD/MM/YYYY'),PERIOD, AMOUNT FROM USR_0_STANDING_INSTRUCTION WHERE WI_NAME ='"
				+ sWorkitemId + "' ORDER BY TO_NUMBER(SNO)";
		logInfo("populateStndInstr", "sQuery1-----" + sQuery1);
		List list = formObject.getDataFromDB(sQuery1);
		logInfo("populateStndInstr", "list-----" + list);
		loadListView(
				list,
				"DEBIT_ACC_NO,DEBIT_CURRENCY,CREDIT_PRODUCT,FIRST_PAY_DATE,LAST_PAY_DATE,PERIOD,AMOUNT",
				STND_INST_LVW);

		String sQuery = "SELECT SWEEP_OUT_DEBIT_ACC,SWEEP_OUT_CREDIT_TO,ANY_AMT_ABOVE,SWEEP_OUT_TO,SWEEP_IN_DEBIT_ACC"
				+ ",SWEEP_IN_CREDIT_ACC,SWEEP_IN_ANY_AMT,SWEEP_IN,SWEEP_IN_CURR,SWEEP_OUT,SWEEP_OUT_CURR "
				+ "from usr_0_stnd_instr WHERE WI_NAME= '" + sWorkitemId + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		log.info("sOutput-----" + sOutput);
		if (sOutput != null && !sOutput.isEmpty()) {
			logInfo("populateStndInstr", "setting value to fields from quer >>"
					+ sOutput);
			formObject.setValue(SWP_OUT_DEB_ACC_NO, sOutput.get(0).get(0));
			formObject.setValue(SWP_OUT_CRED_ACC_NO, sOutput.get(0).get(1));
			formObject.setValue(SWP_OUT_AMT_ABV, sOutput.get(0).get(2));
			formObject.setValue(SWP_OUT_ABV_AMT, sOutput.get(0).get(3));
			formObject.setValue(SWP_IN_DEB_ACC_NO, sOutput.get(0).get(4));
			formObject.setValue(SWP_IN_CRED_ACC_NO, sOutput.get(0).get(5));
			formObject.setValue(SWP_IN_AMT_ABV, sOutput.get(0).get(6));
			formObject.setValue(SWP_OUT_TRNS, sOutput.get(0).get(7));
			formObject.setValue(SWP_OUT_CURRENCY, sOutput.get(0).get(8));
			formObject.setValue(SWP_IN_TRNS, sOutput.get(0).get(9));
			formObject.setValue(SWP_IN_CURRENCY, sOutput.get(0).get(10));

		}
	}

	public int calculateAge(String dob) {
		Calendar dobDate = Calendar.getInstance();
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR);
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
		SimpleDateFormat f = new SimpleDateFormat(DATEFORMAT);
		String d1 = dob;
		try {
			Date formatted1 = f.parse(d1);
			dobDate.setTime(formatted1);
		} catch (Exception e) {
			log.error("Exception in [calculateAge]: ", e);
		}
		int year = dobDate.get(Calendar.YEAR);
		int month = dobDate.get(Calendar.MONTH);
		int day = dobDate.get(Calendar.DAY_OF_MONTH);
		int age = curYear - year;
		if (curMonth < month || (month == curMonth && curDay < day)) {
			age--;
		} else if (curMonth > month || (month == curMonth && curDay > day)) {
			age++;
		}
		log.info("age==" + age);
		return age;
	}

	public void populateAuditSearch(String ListView) {
		String sQuery;
		logInfo("populateAuditSearch", "In saveAuditSearch" + ListView);
		if (ListView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
			sQuery = "Select CUST_ID,cust_full_name,cust_IC,  cust_pass_no, cust_nationality,cust_email,"
					+ " cust_mobile_no, cust_dob, eida_no, memo_severity , memo , system_type  FROM  "
					+ sAuditTable + " WHERE WI_NAME = '" + sWorkitemId + "'";
			logInfo("populateAuditSearch", "loadlistview sQuery---" + sQuery);
			List recordList = formObject.getDataFromDB(sQuery);
			loadListView(recordList,
					"CID,NAME,CUSTOMERIC,PASSPORTNO,NATIONALITY,EMAIL,MOBILE,DOB,EIDANO,"
							+ "MEMOSEV,MEMO,SYSTEM", ListView);
		} else if (ListView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
			loadDedupeSearchData(sWorkitemId);
		}
	}

	public void loadDedupeSearchData(String wiName) {
		logInfo("loadDedupeSearchData", "Inside");
		int iSelectedRow = Integer.parseInt((String) formObject
				.getValue(SELECTED_ROW_INDEX)) + 1;
		String query = "select cust_id,cust_name,cust_ic,cust_passport,cust_email,cust_mobile,'','',to_char(cust_dob,'dd/mm/yyyy') "
				+ "cust_dob,cust_eida,cust_nationality,system_type from usr_0_duplicate_search_data "
				+ "where wi_name='"
				+ wiName
				+ "' AND CUST_SNO ="
				+ iSelectedRow + "";
		logInfo("loadDedupeSearchData", "loadlistview query: " + query);
		List recordList = formObject.getDataFromDB(query);
		logInfo("loadDedupeSearchData",
				"loadlistview sQuery: " + recordList.size());
		loadListView(recordList, COLUMNS_LVW_DEDUPE_RESULT, LVW_DEDUPE_RESULT);
	}

	public void showTRSDHistory() {
		logInfo("inside showTRSDHistory", "");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String selectQuery = "select ACC_RELATION_SNO,trsd_channelrefno,TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,"
					+ "TRSD_2_STATUS,decode(TRSD_APPROVALREQUIRED,'Yes','NA','No','NA',TRSD_APPROVALREQUIRED),"
					+ "to_char(trsd_assessment_date,'dd/mm/yyyy hh:mi:ss')trsd_assessment_date,"
					+ "to_char(TRSD_SCREENINGDATE,'dd/mm/yyyy hh:mi:ss')TRSD_SCREENINGDATE,trsd_remarks "
					+ "from usr_0_trsd_history_ao where wi_name='"
					+ sWorkitemId
					+ "'"
					+ " and ACC_RELATION_SNO='"
					+ iSelectedRow
					+ "' and USER_ID='CRO' "
					+ "order by TRSD_SCREENINGDATE desc";
			logInfo("inside showTRSDHistory", "query TRSD HISTORY CRO: "
					+ selectQuery);
			List recordList = formObject.getDataFromDB(selectQuery);
			logInfo("showTRSDHistory", "historyRecordList123" + recordList);
			loadListView(
					recordList,
					"Sno,ChannelRefNo,TRSDCaseId,Name,TRSDSysCalRes,"
							+ "TRSDFinalDec,ApprovedBy,AssessmentDate,TRSDScreeDate,Remarks",
					SANC_TRSD_HISTORY_LVW);// TRSD_HISTORY_LVW_label
			selectQuery = "select ACC_RELATION_SNO,trsd_channelrefno,TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,"
					+ "decode(TRSD_APPROVALREQUIRED,'Yes','NA','No','NA',TRSD_APPROVALREQUIRED),"
					+ "to_char(trsd_assessment_date,'dd/mm/yyyy hh:mi:ss')trsd_assessment_date,"
					+ "to_char(TRSD_SCREENINGDATE,'dd/mm/yyyy hh:mi:ss')TRSD_SCREENINGDATE,trsd_remarks "
					+ "from usr_0_trsd_history_ao where wi_name='"
					+ sWorkitemId
					+ "' "
					+ "and ACC_RELATION_SNO='"
					+ iSelectedRow
					+ "' and USER_ID='CPD' "
					+ "order by TRSD_SCREENINGDATE desc";
			logInfo("showTRSDHistory", "s  " + selectQuery);
			List recordList1 = formObject.getDataFromDB(selectQuery);
			logInfo("inside showTRSDHistory kdd", "" + recordList1);
			loadListView(
					recordList1,
					"Sno,ChannelRefNo,TRSDCaseId,Name,TRSDSysCalRes,"
							+ "TRSDFinalDec,ApprovedBy,AssessmentDate,TRSDScreeDate,Remarks",
					CPD_TRSD_HISTORY_LVW);
		} catch (Exception e) {
			log.error("showTRSDHistory: ", e);
		}
	}

	public void populateTRSD() {
		logInfo("inside populateTRSD", "");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String sQuery = "";
			List<List<String>> sOutput2;
			sQuery = "select count(1)CNT from usr_0_trsd_details where wi_name='"
					+ sWorkitemId
					+ "' and "
					+ "acc_relation_sno='"
					+ iSelectedRow + "' and user_id='CRO'";
			logInfo("populateTRSD:Query", sQuery);
			sOutput2 = formObject.getDataFromDB(sQuery);
			logInfo("soutput2", sOutput2.toString());
		 /*	if (sOutput2.size() > 0 && sOutput2 != null) {
				logInfo("populateTRSD",
						"Inside if because sOutput size is not equal to o");
				if (!sOutput2.get(0).get(0).equalsIgnoreCase("0")) {
					logInfo("populateTRSD",
							"inside another if because value of sOutput is not '0'"
									+ iSelectedRow);
					sQuery = "select TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,"
							+ "decode(TRSD_APPROVALREQUIRED,'Yes','Yes','No','No','Yes') as TRSD_APPROVALREQUIRED,"
							+ "to_char(TRSD_SCREENINGDATE,'dd/mm/yyyy hh:mi:ss')TRSD_SCREENINGDATE,TRSD_CHANNELREFNO,"
							+ "to_char(TRSD_ASSESSMENT_DATE,'dd/mm/yyyy hh:mi:ss')TRSD_ASSESSMENTDATE"
							+ " from usr_0_trsd_details where wi_name='"
							+ sWorkitemId
							+ "' and "
							+ "acc_relation_sno='"
							+ iSelectedRow + "' and user_id='CRO'";
					sOutput2 = sOutput2 = formObject.getDataFromDB(sQuery);
					logInfo("inside populateTRSD", "inside query" + sQuery);
					logInfo("soutput", sOutput2.toString());
					if (sOutput2 != null && sOutput2.size() > 0) {
						logInfo("populateTRSD", "Indise if consition 1");
						String trsdCaseID = sOutput2.get(0).get(0);
						String fullName = sOutput2.get(0).get(1);
						String trsdStatus = sOutput2.get(0).get(2);
						String trsd2Status = sOutput2.get(0).get(3);
						String trsdAppReq = sOutput2.get(0).get(4);
						String trsdScreenDate = sOutput2.get(0).get(5);
						String trsdChanRef = sOutput2.get(0).get(6);
						String trsdAssDate = sOutput2.get(0).get(7);

						formObject.setValue(TRSD_CASE_ID, trsdCaseID);
						formObject.setValue(TRSD_NAME, fullName);
						formObject.setValue(TRSD_SYS_CALC_RES, trsdStatus);
						formObject.setValue(TRSD_FINAL_DECISION, trsd2Status);
						formObject.setValue(TRSD_APPROVAL_REQUIRED, trsdAppReq);
						formObject
								.setValue(TRSD_SCREENING_DATE, trsdScreenDate);
						formObject.setValue(TRSD_CHANNEL_REF_NO, trsdChanRef);
						formObject.setValue(TRSD_ASSESSMENT_DATE, trsdAssDate);
						logInfo("populateTRSD", "Indise if consition 2");
						trsdDate();
						logInfo("populateTRSD", "Indise if consition 3");
					}
				} else {
					logInfo("populateTRSD", "Indise if consition 4");
					formObject.setValue(TRSD_CASE_ID, "");
					formObject.setValue(TRSD_NAME, "");
					formObject.setValue(TRSD_SYS_CALC_RES, "");
					formObject.setValue(TRSD_FINAL_DECISION, "");
					formObject.setValue(TRSD_APPROVAL_REQUIRED, "");
					formObject.setValue(TRSD_ASSESSMENT_DATE, "");
					formObject.setValue(TRSD_CHANNEL_REF_NO, "");
					formObject.setValue(TRSD_SCREENING_DATE, "");
					logInfo("populateTRSD", "Indise if consition 5");
				}
			} */
			logInfo("TRSD_FINAL_DECISION",
					formObject.getValue("TRSD_DECISION").toString());
			if (formObject.getValue("TRSD_DECISION").toString()
					.equalsIgnoreCase("Approved")
					|| formObject.getValue("TRSD_DECISION").toString()
							.equalsIgnoreCase("Pending")/*
														 * &&
														 * checkTRSDExpiry("CRO"
														 * )==false
														 */) {
				logInfo("populateTRSD", "Indise if consition 6");
				formObject.setStyle(BTN_TRSD_CHECK, "disable", "true");
				logInfo("trsd_check set to disabled", "");
				logInfo("populateTRSD", "Indise if consition 7");
			} else {
				logInfo("populateTRSD", "Indise if consition 8");
				formObject.setStyle(IDS_CB_SAL_TRANSFER, VISIBLE, TRUE);

				formObject.setStyle(BTN_TRSD_CHECK, "disable", "false");
				log.info("trsd_check set to enabled");
				logInfo("populateTRSD", "Indise if consition 9");
			}
			logInfo("populateTRSD", "Indise if consition 10");
			showTRSDHistory();
			logInfo("populateTRSD", "Indise if consition 11");
		} catch (Exception e) {
			log.error("Exception: ", e);
		}
	}

	public void manualFrameCPDDisable() { // manual_frame_CPD_disable
		String[] manualFrameCPDDisableFields = { MANUAL_PREFIX, MANUAL_NAME,
				MANUAL_MOTHERNAME, MANUAL_EIDANO, MANUAL_ADDRESS, MANUAL_CITY,
				MANUAL_CNTRY, MANUAL_STATE, MANUAL_PER_CNTRY, MANUAL_PH,
				MANUAL_MOBILE, MANUAL_EMAIL, MANUAL_PASSPORTNO,
				MANUAL_NATIONALITY, MANUAL_VISANO, MANUAL_PROFESSION,
				MANUAL_GENDER, MANUAL_EMPLYR_NAME, BTNPROFESSION,
				BTNEMLOYERNAME };
		disableControls(manualFrameCPDDisableFields);
	}

	public void addGridData(String sFinalString, String sQVRName, String tabName) {
		List<List<String>> tmpList = null;
		String[] strArr = sFinalString.split("##");
		StringBuilder sb = new StringBuilder();
		formObject.clearTable(sQVRName);
		JSONArray jsonArray = new JSONArray();
		String strCell = "";
		String[] columnName = "guideline,response".split(",");
		for (int i = 0; i < strArr.length; i++) {
			String strCellData[] = strArr[i].split("#");
			JSONObject jsonObject = new JSONObject();
			int counter = 0;
			for (int j = 0; j < strCellData.length; j++) {
				strCell = strCellData[j];
				strCell = strCell.replace("<BR>", "<>");
				strCell = strCell.replace("<br>", "<>");
				log.info("StrCell=" + strCell);
				jsonObject.put(columnName[j], strCell);
				if (counter == 1) {
					dList = strCell;
					counter++;
				}
				if (tmpList != null
						&& strCell.equalsIgnoreCase(tmpList.get(0).get(0)
								.trim())) {
					counter++;
				}
			}
			jsonArray.add(jsonObject);
		}
		log.info("sQVRName size=" + sQVRName);
		log.info("jsonArray size=" + jsonArray);
		formObject.addDataToGrid(sQVRName, jsonArray);
		log.info("String After Append " + sb);

	}

	public void trsdDate() {
		try {
			log.info("inside trsdDate");
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			log.info("iSelectedRow--" + iSelectedRow);
			log.info("TRSD()");
			String Query = "";
			List<List<String>> soutput2;
			Query = "select count(1)CNT from usr_0_trsd_history_ao where wi_name='"
					+ sWorkitemId
					+ "' and acc_relation_sno='"
					+ iSelectedRow
					+ "' and user_id='CRO'";
			log.info("Query--" + Query);
			soutput2 = formObject.getDataFromDB(Query);
			log.info("soutput2--" + soutput2);
			if (!(soutput2.equals("0"))) {
				log.info("inside soutput2 0");
				Query = "select  (to_char(min(initial_assessment_date),'dd/MM/yyyy hh:mi:ss'))  as TRSD_ASSESSMENTDATE  from usr_0_trsd_history_ao where wi_name='"
						+ sWorkitemId
						+ "'  and  acc_relation_sno='"
						+ iSelectedRow + "' and user_id='CRO'";
				log.info("Query--" + Query);
				soutput2 = formObject.getDataFromDB(Query);
				log.info("soutput2--" + soutput2);
				if (!(soutput2.equals("0"))) {
					String trsdAssessDate = soutput2.get(0).get(0);
					log.info("inside assesement 0 TotalRetrieved if--"
							+ trsdAssessDate);
					formObject.setValue("trsd_assesmentDate", trsdAssessDate);
				} else {
					log.info("inside assesement 0 TotalRetrieved else");
					formObject.setValue("trsd_assesmentDate", "");
				}
				Query = "select  (to_char(max(TRSD_ASSESSMENT_DATE),'dd/MM/yyyy hh:mi:ss'))  as TRSD_ASSESSMENTDATE_NEW  from usr_0_trsd_history_ao where wi_name='"
						+ sWorkitemId
						+ "'  and  acc_relation_sno='"
						+ iSelectedRow + "' and user_id='CRO'";
				log.info("Query--" + Query);
				soutput2 = formObject.getDataFromDB(Query);
				log.info("soutput2--" + soutput2);
				if (!(soutput2.equals("0"))) {
					String newTRSDAssessDate = soutput2.get(0).get(0);
					log.info("inside assesement 0 TotalRetrieved if--"
							+ newTRSDAssessDate);
					formObject.setValue("trsd_assessment_new",
							newTRSDAssessDate);
				} else {
					log.info("inside assesement 0 TotalRetrieved else");
					formObject.setValue("trsd_assessment_new", "");
				}
				Query = "select  (to_char(max(TRSD_SCREENINGDATE),'dd/MM/yyyy hh:mi:ss')) as TRSD_SCREENINGDATE  from usr_0_trsd_history_ao where wi_name='"
						+ sWorkitemId
						+ "'  and  acc_relation_sno='"
						+ iSelectedRow + "' and user_id='CRO'";
				soutput2 = formObject.getDataFromDB(Query);
				log.info("Query--" + Query);
				log.info("soutput2--" + soutput2);
				if (!(soutput2.equals("0"))) {
					String screeningDate = soutput2.get(0).get(0);
					log.info("inside screening 0 TotalRetrieved if--"
							+ screeningDate);
					formObject.setValue("trsd_screeningdate", screeningDate);
				} else {
					log.info("inside screeining 0 TotalRetrieved else");
					formObject.setValue("trsd_screeningdate", "");
				}
			}
		} catch (Exception e) {
			log.info("Exception in [trsdDate]:", e);
		}
	}

	public void fillFCRDataInBelowFields(String sControlName,
			String sControlValue) {
		try {
			logInfo("fillFCRDataInBelowFields", "INSIDE sControlName: "
					+ sControlName + ", sControlValue: " + sControlValue);
			if (sControlName.equalsIgnoreCase(FCR_ADDRESS)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CORR_POB_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_POBOXNO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_CITY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CITY_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_CITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_STATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_STATE_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CORR_STATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_CNTRY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CNTRY_OF_CORR_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CORR_CNTRY, sControlValue);
				}
				if (formObject.getValue(FCR_CNTRY).toString()
						.equalsIgnoreCase("UAE")) {
					if (formObject.getValue(RESIDENCY_STATUS).toString()
							.equalsIgnoreCase("")) {
						formObject.setValue(RESIDENCY_STATUS, "Yes");
						formObject.setStyle(RESIDENCY_STATUS, DISABLE, TRUE);
					}
					if (returnVisaStatus().equalsIgnoreCase("")) {
						setFinalDataComparison(
								formObject.getValue(CHECKBOX_VISA_STATUS_FCR)
										.toString(),
								formObject.getValue(CHECKBOX_VISA_STATUS_EIDA)
										.toString(),
								formObject
										.getValue(CHECKBOX_VISA_STATUS_MANUAL)
										.toString(),
								formObject.getValue(FCR_VISASTATUS).toString(),
								formObject.getValue(EIDA_VISASTATUS).toString(),
								formObject.getValue(MANUAL_VISASTATUS)
										.toString(), "Not Required");
					}
					if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
							.equalsIgnoreCase("")) {
						formObject.setValue(RA_IS_UAE_RESIDENT, "Yes");
						formObject.setStyle(RA_IS_UAE_RESIDENT, DISABLE, TRUE);
					}
				}
			} else if (sControlName.equalsIgnoreCase(RESIDENCY_STATUS)
					&& sControlValue.equalsIgnoreCase("Yes")) {
				if (!formObject.getValue(MANUAL_CNTRY).toString()
						.equalsIgnoreCase("UNITED STATES")) {
					sendMessageValuesList(RESIDENCY_STATUS,
							"Residency status is not valid.");
					formObject.setValue(RESIDENCY_STATUS, "No");
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PH)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_TELE_RES_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_PHONENO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_MOBILE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_TELE_MOB_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_MOBILE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_EMAIL)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EMAIL_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_EMAIL, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PREFIX)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PREFIX_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CUST_PREFIX, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_NAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_FULLNAME_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_FULLNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_EIDANO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EIDANO_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_EIDANO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_NATIONALITY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_NATIONALITY_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					logInfo("fillFCRDataInBelowFields",
							"In side visaStatus_fcr ==== ");
					if (sControlValue.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						logInfo("fillFCRDataInBelowFields",
								"In side if block visaStatus_fcr ==== ");
						formObject.setValue(FCR_VISASTATUS, "Not Required");
					} else {
						logInfo("fillFCRDataInBelowFields",
								"In side else block visaStatus_fcr ==== ");
						formObject.setValue(FCR_VISASTATUS, "");
					}
					formObject.setValue(CUST_NATIONALITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_MOTHERSNAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_MOTHERSNAME_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_MOTHERMAIDENNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_DOB)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_DOB_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_DOB, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_GENDER)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_GENDER_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CUST_GENDER, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PASSPORTNO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASSPORT_NO_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_PASSPORT_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PASSPORTISSDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASS_ISS_DT_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_PASS_ISS_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PASSPORTEXPDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASS_EXP_DT_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_PASS_EXP_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_VISANO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_NO_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_VISA_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_VISAISSDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_FCR)
						.toString().equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_VISA_ISSUE_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_VISAEXPDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_FCR)
						.toString().equalsIgnoreCase(TRUE)) {
					formObject.setValue(HD_EXP_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PROFESSION)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PROFESSION_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PROF_CODE, sControlValue);
					formObject.setValue(PROFESION, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_EMPLYR_NAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EMP_NAME_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(EMPNAME,
							formObject.getValue(FCR_EMPLYR_NAME).toString());
					List<List<String>> sOutput = formObject
							.getDataFromDB("SELECT CD_STATUS FROM "
									+ "USR_0_EMPLOYER_MASTER WHERE EMP_NAME ='"
									+ sControlValue + "'");
					logInfo("fillFCRDataInBelowFields", "CD_STATUS query: "
							+ "SELECT CD_STATUS FROM "
							+ "USR_0_EMPLOYER_MASTER WHERE EMP_NAME ='"
							+ sControlValue + "'");
					logInfo("fillFCRDataInBelowFields", "CD_STATUS sOutput: "
							+ sOutput);
					formObject.setValue(ED_CB_TML, "False");
					formObject.setValue(ED_CB_NON_TML, "False");
					if (sOutput.size() > 0
							&& null != sOutput.get(0)
							&& (sOutput.get(0).get(0).equalsIgnoreCase("1") || sOutput
									.get(0).get(0).equalsIgnoreCase("2"))) {
						formObject.setValue(ED_CB_TML, TRUE);
					} else {
						formObject.setValue(ED_CB_NON_TML, TRUE);
					}
				}
				String sIsFCREmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_FCR).toString();
				String sIsEIDAEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_EIDA).toString();
				String sIsManualEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_MANUAL).toString();
				String sFCREmpName = formObject.getValue(FCR_EMPLYR_NAME)
						.toString();
				String sEIDAEmpName = formObject.getValue(EIDA_EMPLYR_NAME)
						.toString();
				String sManualEmpName = formObject.getValue(MANUAL_EMPLYR_NAME)
						.toString();
				String sFinalEmpName = getFinalData(sIsFCREmpName,
						sIsEIDAEmpName, sIsManualEmpName, sFCREmpName,
						sEIDAEmpName, sManualEmpName);
				if (formObject.getValue(EMP_STATUS).toString().isEmpty()) {
					if (!sFinalEmpName.isEmpty()) {
						formObject.setValue(EMP_STATUS, "Employed");
					}
				}
			} else if (sControlName.equalsIgnoreCase(FCR_PER_CNTRY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_COUNTRY_PER_RES_FCR)
						.toString().equalsIgnoreCase(TRUE)) {
					// formObject.setValue(RES_CNTRY, sControlValue);
					formObject.setValue(PERM_CNTRY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(FCR_RESIDENT)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_COUNTRY_RES_FCR).toString()
						.equalsIgnoreCase(TRUE)) {
					// formObject.setValue(PERM_CNTRY, sControlValue);
					formObject.setValue(RES_CNTRY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(ED_MONTHLY_INCM)
					&& !sControlValue.isEmpty()) {
				String mnthsalary = formObject.getValue(ED_MONTHLY_INCM)
						.toString();
				try {
					if (mnthsalary.equalsIgnoreCase("")) {
						formObject.setValue(ED_ANNUAL_INC, "");
						formObject.setValue(ED_SAL_AED, "");
					}
					long mnthslry = Long.parseLong(mnthsalary);
					long finalsalary = mnthslry * 12;
					logInfo("fillFCRDataInBelowFields", "finalsalary: "
							+ finalsalary);
					formObject.setValue(ED_ANNUAL_INC, finalsalary + "");
					formObject.setValue(ED_CB_SAL_AED, "true");
					if (((String) formObject.getValue(ED_CB_SAL_AED))
							.equalsIgnoreCase("True")) {
						formObject.setValue(ED_SAL_AED, finalsalary + "");
					}
				} catch (Exception ex) {
					logError("fillFCRDataInBelowFields", ex);
				}
			}
			setEIDA();
			setEIDAInPersonalAndKYCTab();
			if (formObject.getValue(RESIDENCY_STATUS).toString()
					.equalsIgnoreCase("")) {
				calculateResidencyStatus(RESIDENCY_STATUS);
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
				String sIsFCREmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_FCR).toString();
				String sIsEIDAEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_EIDA).toString();
				String sIsManualEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_MANUAL).toString();
				String sFCREmpName = formObject.getValue(FCR_EMPLYR_NAME)
						.toString();
				String sEIDAEmpName = formObject.getValue(EIDA_EMPLYR_NAME)
						.toString();
				String sManualEmpName = formObject.getValue(MANUAL_EMPLYR_NAME)
						.toString();
				String sFinalEmpName = getFinalData(sIsFCREmpName,
						sIsEIDAEmpName, sIsManualEmpName, sFCREmpName,
						sEIDAEmpName, sManualEmpName);
				log.info("sFinalEmpName ==== " + sFinalEmpName);
				if (formObject.getValue(EMP_STATUS).toString()
						.equalsIgnoreCase("")) {
					if (!sFinalEmpName.equalsIgnoreCase("")) {
						formObject.setValue(EMP_STATUS, "Employed");
					}
				}
			}
		} catch (Exception e) {
			logError("fillFCRDataInBelowFields", e);
		}
	}

	public void fillEIDADataInBelowFields(String sControlName,
			String sControlValue) {
		try {
			logInfo("fillEIDADataInBelowFields", "INSIDE, sControlName: "
					+ sControlName + ", " + "sControlValue: " + sControlValue);
			if (sControlName.equalsIgnoreCase(EIDA_ADDRESS)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CORR_POB_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_POBOXNO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_CITY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CITY_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_CITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_STATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_STATE_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CORR_STATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_CNTRY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_CNTRY_OF_CORR_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CORR_CNTRY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PH)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_TELE_RES_EIDA).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_PHONENO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_MOBILE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_TELE_MOB_EIDA).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(CP_MOBILE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_EMAIL)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EMAIL_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_EMAIL, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PREFIX)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PREFIX_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CUST_PREFIX, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_NAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_FULLNAME_EIDA).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_FULLNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_EIDANO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
						.equalsIgnoreCase(TRUE)) {
					formObject.setValue(PD_EIDANO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_NATIONALITY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_NATIONALITY_EIDA).toString()
						.equalsIgnoreCase("True")) {
					if (sControlValue.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						formObject.setValue(DI_CODE, "Not Required");
					} else {
						formObject.setValue(DI_CODE, "");
					}
					formObject.setValue(CUST_NATIONALITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_MOTHERNAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_MOTHERSNAME_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PD_MOTHERMAIDENNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_DOB)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_DOB_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PD_DOB, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_GENDER)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_GENDER_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CUST_GENDER, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PASSPORTNO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASSPORT_NO_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_PASSPORT_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PASS_ISSUE_DATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASS_ISS_DT_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_PASS_ISS_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PASS_EXP_DATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PASS_EXP_DT_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_PASS_EXP_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_VISANO)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_NO_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_VISA_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_VISAISSDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_EIDA)
						.toString().equalsIgnoreCase("True")) {
					formObject.setValue(HD_VISA_ISSUE_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_VISAEXPDATE)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_EIDA)
						.toString().equalsIgnoreCase("True")) {
					formObject.setValue(HD_EXP_DATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PROFESSION)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_PROFESSION_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PROF_CODE, sControlValue);
					formObject.setValue(PROFESION, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_EMPLYR_NAME)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_EMP_NAME_EIDA).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(EMPNAME,
							formObject.getValue(EIDA_EMPLYR_NAME).toString());
					formObject.setValue(EMP_STATUS, "Salaried");
					List<List<String>> sOutput = formObject
							.getDataFromDB("SELECT CD_STATUS FROM "
									+ "USR_0_EMPLOYER_MASTER WHERE EMP_NAME ='"
									+ sControlValue + "'");
					logInfo("fillEIDADataInBelowFields", "CD_STATUS sOutput: "
							+ sOutput);
					formObject.setValue(ED_CB_TML, "False");
					formObject.setValue(ED_CB_NON_TML, "False");
					if (sOutput.size() > 0
							&& null != sOutput.get(0)
							&& (sOutput.get(0).get(0).equalsIgnoreCase("1") || sOutput
									.get(0).get(0).equalsIgnoreCase("2"))) {
						formObject.setValue(ED_CB_TML, "True");
					} else {
						formObject.setValue(ED_CB_NON_TML, "True");
					}
				}
				String sIsFCREmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_FCR).toString();
				String sIsEIDAEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_EIDA).toString();
				String sIsManualEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_MANUAL).toString();
				String sFCREmpName = formObject.getValue(FCR_EMPLYR_NAME)
						.toString();
				String sEIDAEmpName = formObject.getValue(EIDA_EMPLYR_NAME)
						.toString();
				String sManualEmpName = formObject.getValue(MANUAL_EMPLYR_NAME)
						.toString();
				String sFinalEmpName = getFinalData(sIsFCREmpName,
						sIsEIDAEmpName, sIsManualEmpName, sFCREmpName,
						sEIDAEmpName, sManualEmpName);
				if (formObject.getValue(EMP_STATUS).toString().isEmpty()) {
					if (!sFinalEmpName.isEmpty()) {
						formObject.setValue(EMP_STATUS, "Employed");
					}
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_PER_CNTRY)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_COUNTRY_PER_RES_EIDA)
						.toString().equalsIgnoreCase("True")) {
					// formObject.setValue(RES_CNTRY, sControlValue);
					formObject.setValue(PERM_CNTRY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(EIDA_RESIDENT)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_COUNTRY_RES_EIDA).toString()
						.equalsIgnoreCase("True")) {
					// formObject.setValue(PERM_CNTRY, sControlValue);
					formObject.setValue(RES_CNTRY, sControlValue);
				}
			}
		} catch (Exception e) {
			logError("fillEIDADataInBelowFields", e);
			;
		}
	}

	public void setRepeaterRowInOrder() {
		try {
			logInfo("setRepeaterRowInOrder", "Inside");
			if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				logInfo("setRepeaterRowInOrder", "sActivityName: "
						+ sActivityName);
				String sQuery2 = "SELECT COUNT(1) AS COUNT FROM DEBIT_CARD_REP WHERE WI_NAME='"
						+ sWorkitemId + "'";
				List<List<String>> sOutput2 = formObject.getDataFromDB(sQuery2);
				int sCount2 = (sOutput2 != null && sOutput2.size() > 0) ? Integer
						.parseInt(sOutput2.get(0).get(0).toString()) : 0;
				logInfo("setRepeaterRowInOrder", "sCount2: " + sCount2);
				if (sCount2 == 0) {
					String sQuery4 = "SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL="
							+ "'"
							+ formObject.getValue(SOURCING_CHANNEL).toString()
							+ "'";
					logInfo("setRepeaterRowInOrder", "sQuery4: " + sQuery4);
					List<List<String>> sOutput4 = formObject
							.getDataFromDB(sQuery4);
					formObject.setValue(CHANNEL_TYPE, sOutput4.get(0).get(0));
					if (formObject.getValue(CHANNEL_TYPE).toString()
							.equalsIgnoreCase("Alternate")
							&& (formObject.getValue(SOURCING_CHANNEL)
									.toString().equalsIgnoreCase("DFC") || formObject
									.getValue(SOURCING_CHANNEL).toString()
									.equalsIgnoreCase("Online Request"))) {
						String sLodgement_no = formObject
								.getValue(LODGEMENT_NO).toString();
						logInfo("setRepeaterRowInOrder", "slodge: "
								+ sLodgement_no);
						if (!sLodgement_no.equalsIgnoreCase("")) {
							sQuery2 = "SELECT COUNT(1) AS COUNT FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME='"
									+ sWorkitemId + "'";
							sOutput2 = formObject.getDataFromDB(sQuery2);
							sCount2 = (sOutput2 != null && sOutput2.size() > 0) ? Integer
									.parseInt(sOutput2.get(0).get(0).toString())
									: 0;
							if (sCount2 == 0) {
								int iRows1 = getGridCount(PRODUCT_QUEUE);
								String sQuery1 = "SELECT * FROM USR_0_WEBProd_Info WHERE LODGEMENT_REF_NO='"
										+ formObject.getValue(LODGEMENT_NO)
												.toString() + "'";
								List<List<String>> sOutput1 = formObject
										.getDataFromDB(sQuery1);
								int sCount = sOutput1.size();
								String sPRODCODE = "";
								String sprodcurr = "";
								String saccbranch = "";
								String schequereq = "";
								String smodefunding = "";
								String sdebitaccno = "";
								String sdebitamt = "";
								String sdebitcurr = "";
								String savbal = "";
								String sPRODDESC = "";
								String acc_class = "";
								String acc_home_branch = "";
								String values = "";
								String columnNames = "";
								int cid = 0;
								String tableName = "USR_0_WEBProd_Info";
								for (int i = iRows1; i <= sCount; i++) {
									// objChkRepeater11.addRow();
									sPRODCODE = sOutput1.get(i).get(0);
									sprodcurr = sOutput1.get(i).get(1);
									saccbranch = sOutput1.get(i).get(2);
									schequereq = sOutput1.get(i).get(3);
									smodefunding = sOutput1.get(i).get(4);
									sdebitaccno = sOutput1.get(i).get(5);
									sdebitamt = sOutput1.get(i).get(6);
									sdebitcurr = sOutput1.get(i).get(7);
									savbal = sOutput1.get(i).get(8);
									if (schequereq.equalsIgnoreCase("")) {// doubt
										schequereq = "No"; // doubt
									}
									sQuery1 = "select product_desc from usr_0_product_master where product_code='"
											+ sPRODCODE + "'";
									sOutput1 = formObject
											.getDataFromDB(sQuery1);
									sPRODDESC = (sOutput1 != null && sOutput1
											.size() > 0) ? sOutput1.get(0)
											.get(0).toString() : "";
									sQuery1 = "select acc_class from ext_ao where wi_name='"
											+ sWorkitemId + "'";
									sOutput1 = formObject
											.getDataFromDB(sQuery1);
									acc_class = (sOutput1 != null && sOutput1
											.size() > 0) ? sOutput1.get(0)
											.get(0).toString() : "";
									if (acc_class.equalsIgnoreCase("Islamic")) {
										sQuery1 = "select eqv_islamic_br_code from usr_0_home_branch where code='"
												+ saccbranch + "'";
										sOutput1 = formObject
												.getDataFromDB(sQuery1);
										acc_class = sOutput1.get(0).get(0)
												.toString();
										acc_home_branch = acc_class;
									} else {
										acc_home_branch = saccbranch;
									}
									cid = i + 1;
									values = sPRODCODE + "##" + sPRODDESC
											+ "##" + sprodcurr + "##"
											+ acc_home_branch + "##"
											+ schequereq + "##" + sdebitaccno
											+ "##" + savbal + "##" + sdebitcurr
											+ "##" + smodefunding + "##"
											+ sdebitamt + "##" + sWorkitemId
											+ "##" + cid;
									columnNames = "PROD_CODE,PROD_DESC,CURRENCY,ACC_BRNCH,CHEQUE_BOOK,TRNSFR_FROM_ACC_NO"
											+ ",FROM_ACC_BAL,TRNSFR_FROM_CURRENCY,MODE_OF_FUNDING,ATM_TRNSFERED,WI_NAME,CID";
									LoadListViewWithHardCodeValues(tableName,
											columnNames, values);
								}
							}
						}
					}
				}
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_ACCOUNT_RELATION)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				logInfo("setRepeaterRowInOrder", "sActivityName: "
						+ sActivityName);
				String sCount2 = null;
				String sQuery2 = "SELECT COUNT(1) AS COUNT FROM ACC_RELATION_REPEATER WHERE WI_NAME='"
						+ sWorkitemId + "'";
				List<List<String>> list = formObject.getDataFromDB(sQuery2);
				sCount2 = (list != null && !list.isEmpty()) ? list.get(0)
						.get(0) : "0";
				if (sCount2.equalsIgnoreCase("0")) {
					String sQuery4 = "SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL='"
							+ formObject.getValue(SOURCING_CHANNEL).toString()
							+ "'";
					List<List<String>> sOutput4 = formObject
							.getDataFromDB(sQuery4);
					formObject
							.setValue(
									CHANNEL_TYPE,
									((sOutput4 != null && sOutput4.size() > 0) ? sOutput4
											.get(0).get(0).toString()
											: ""));
					if ((formObject.getValue(CHANNEL_TYPE).toString()
							.equalsIgnoreCase("Alternate"))
							&& ((formObject.getValue(DATA_ENTRY_MODE)
									.toString()
									.equalsIgnoreCase("Detail Data Entry") && sActivityName
									.equalsIgnoreCase(ACTIVITY_ACCOUNT_RELATION)) || (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)))) {
						String sQuery3 = "SELECT LODGEMENT_REF_NO FROM USR_0_AOWEBSERVICEDATA WHERE WORKITEMNO='"
								+ sWorkitemId + "'";
						List<List<String>> sOutput3 = formObject
								.getDataFromDB(sQuery3);
						String slodge = sOutput3.get(0).get(0);
						if (!slodge.equalsIgnoreCase("")) {
							String sNO = "";
							int iRows = getGridCount(ACC_RELATION);
							if (iRows != 1) {
								sNO = formObject.getTableCellValue(
										ACC_RELATION, iRows - 1, 0);
								sNO = (Integer.parseInt(sNO) + 1) + "";
							} else {
								sNO = "1";
							}
							SimpleDateFormat format1 = new SimpleDateFormat(
									"dd/MM/yyyy");
							String sQuery1 = "SELECT FULLNAME,CID,MOBILE,EIDANUMBER,DOB,NATIONALITY FROM"
									+ " USR_0_WEBCUST_PERSONAL_INFO WHERE LODGEMENT_REF_NO='"
									+ formObject.getValue(LODGEMENT_NO)
											.toString() + "'";
							List<List<String>> sOutput1 = formObject
									.getDataFromDB(sQuery1);
							int sCount = sOutput1.size();
							String sfullname = "";
							String sCid = "";
							String sMobile = "";
							String sEidaNo = "";
							String sDob = "";
							String sNationality = "";
							String bankRelation = "";
							String accRelation = "";
							String values = "";
							String columnNames = "";
							int cid = 0;
							String tableName = "ACC_RELATION_REPEATER";
							String sDOBi = "";
							String[] temp = null;
							for (int i = iRows; i <= sCount; i++) {
								// objChkRepeater.addRow();
								sfullname = sOutput1.get(0).get(0);
								sCid = sOutput1.get(0).get(1);
								sMobile = sOutput1.get(0).get(2);
								sEidaNo = sOutput1.get(0).get(3);
								sDob = sOutput1.get(0).get(4);
								sNationality = sOutput1.get(0).get(5);
								sDOBi = sDob;
								if (sDOBi.indexOf(" ") > 0) {
									temp = sDOBi.split(" ");
									temp = temp[0].split("-");
									sDOBi = temp[2] + "/" + temp[1] + "/"
											+ temp[0];
								}
								if (sCid.equalsIgnoreCase("")) {
									bankRelation = "New";
								} else {
									bankRelation = "Existing";
								}
								if (i >= 2
										&& formObject.getValue(ACC_OWN_TYPE)
												.toString()
												.equalsIgnoreCase("Joint")) {
									accRelation = "JAO";
								} else if (formObject.getValue(ACC_OWN_TYPE)
										.toString().equalsIgnoreCase("Single")) {
									accRelation = "Single";
									if (i == 1) {
										accRelation = "SOW";
									} else {
										accRelation = "AUS";
									}
								} else if (formObject.getValue(ACC_OWN_TYPE)
										.toString().equalsIgnoreCase("Minor")) {
									if (i == 1) {
										accRelation = "Minor";
									} else {
										accRelation = "Guardian";
									}
								}
								sNO = Integer
										.toString(Integer.parseInt(sNO) + 1);
								values = sNO + "##" + sfullname + "##" + sCid
										+ "##" + sMobile + "##" + sEidaNo
										+ "##" + sDOBi + "##" + sNationality
										+ "##" + bankRelation + "##"
										+ accRelation + "##" + sWorkitemId;
								columnNames = "SNO,FULLNAME,CID,MOBILE,EIDANUMBER,DOB,NATIONALITY,BANK_RELATION,ACC_RELATION,WI_NAME";
								LoadListViewWithHardCodeValues(tableName,
										columnNames, values);
							}
							String sManual = "MANUAL";
							String sQuery5 = "UPDATE ACC_RELATION_REPEATER SET SEARCH_TYPE= '"
									+ sManual
									+ "'"
									+ " WHERE WI_NAME = '"
									+ sWorkitemId + "'";
							formObject.saveDataInDB(sQuery5);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in setRepeaterRowInOrder", e);
		}
	}

	public int CalculateAge1(String dob) {
		Calendar dobDate = Calendar.getInstance();
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR);
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);

		SimpleDateFormat f = new SimpleDateFormat(DATEFORMAT);
		String d1 = dob;
		try {
			Date formatted1 = f.parse(d1);
			dobDate.setTime(formatted1);
		} catch (ParseException e) {
			logError("", e);
		}
		int year = dobDate.get(Calendar.YEAR);
		int month = dobDate.get(Calendar.MONTH);
		int day = dobDate.get(Calendar.DAY_OF_MONTH);

		int age = curYear - year;
		if (curMonth < month || (month == curMonth && curDay < day)) {
			age--;
		}

		log.info("age==" + age);
		return age;
	}

	public boolean validateRelationData() {
		logInfo("validateRelationData", "Inside");
		int iRows = getGridCount(ACC_RELATION);
		if (iRows == 0) {
			sendMessageValuesList(ACC_RELATION, CA0106);
			return false;
		}
		if (!((String) formObject.getValue(ACC_OWN_TYPE))
				.equalsIgnoreCase("Single")) {
			if (iRows == 1) {
				validateGuardianRequired();
				if ((!((String) formObject.getValue(ACC_OWN_TYPE))
						.equalsIgnoreCase("Minor"))
						|| (sGuardianReqFlag == true)) {
					sendMessageValuesList(ACC_RELATION,
							"Please add atleast 2 rows in Account Relationship frame.");
					return false;
				}
			}
		}
		int countMinor = 0;
		int countGuardian = 0;
		int countJAF = 0;
		int countJAO = 0;
		int countJOF = 0;
		int countJOO = 0;
		int countSOW = 0;
		int age = 0;// to plus the age (if 20 yrs and 3 months old then it will
					// be equal to 21)
		int age1 = 0;// not to plus the age (if 20 yrs and 3 months old then it
						// will not be equal to 21)
		int minorAge = 0;
		String minorDOB = formObject.getTableCellValue(ACC_RELATION, 0, 5);// this.formObject.getValue("acc_relation.dob");
		logInfo("validateRelationData", "minorDOB: " + minorDOB);
		minorAge = calculateAge(minorDOB);
		logInfo("validateRelationData", "minorAge: " + minorAge);
		String accountOwn = (String) formObject.getValue(ACC_OWN_TYPE);
		logInfo("validateRelationData", "iRows: " + iRows);
		if (iRows != 0) {
			for (int i = 0; i < iRows; i++) {
				String sCustomerRelation = formObject.getTableCellValue(
						ACC_RELATION, i, 8);// objChkRepeater.getValue(i,"ACC_RELATION.CUST_RELATION");
				String sDOB = formObject.getTableCellValue(ACC_RELATION, i, 5);// objChkRepeater.getValue(i,"ACC_RELATION.DOB");
				String relation = formObject.getTableCellValue(ACC_RELATION, i,
						9);// objChkRepeater.getValue(i,"ACC_RELATION.ACC_RELATION");
				// commented for AO release by Ayush String
				// sRelationGuardian=formObject.getTableCellValue(ACC_RELATION,
				// i+1,
				// 8);//objChkRepeater.getValue(i+1,"ACC_RELATION.ACC_RELATION");
				String sRelationGuardian = formObject.getTableCellValue(
						ACC_RELATION, i + 1, 9);
				age = calculateAge(sDOB);
				age1 = CalculateAge1(sDOB);
				logInfo("validateRelationData", "iRows " + iRows);
				logInfo("validateRelationData", "relation " + relation);
				logInfo("validateRelationData", "sRelationGuardian "
						+ sRelationGuardian);
				sRelationGuardian = (sRelationGuardian == null) ? ""
						: sRelationGuardian;
				logInfo("validateRelationData", "sRelationGuardiann "
						+ sRelationGuardian + "");
				// commented for AO release by Ayush
				// logInfo("validateRelationData","sCustomerRelation "+sCustomerRelation+"");
				String custValue = formObject.getTableCellValue(ACC_RELATION,
						i, 8);
				logInfo("validateRelationData", "custValue " + custValue + "");
				logInfo("Value",
						"sCustomerRelation condition"
								+ (sCustomerRelation.equalsIgnoreCase("") && iRows != 1)
								+ "");
				if (sCustomerRelation.equalsIgnoreCase("") && iRows != 1) {
					sendMessageValuesList(ACC_RELATION,
							"Please select Customer Relationship");
					return false;
				}
				int sMinorAge = 0;
				String sQueryy = "select VALUE from usr_0_defaultvalue_fcr where name='Minor_Age'";
				List<List<String>> list = formObject.getDataFromDB(sQueryy);
				if (list != null && !list.isEmpty()) {
					for (int j = 0; j < list.size(); j++) {
						logInfo("validateRelationData", "data : " + list.get(j));
						sMinorAge = Integer.parseInt(list.get(j).get(0));
					}
				}
				logInfo("validateRelationData", "sMinorAge....." + sMinorAge);
				if (accountOwn.equalsIgnoreCase("Minor")) {
					logInfo("validateRelationData",
							"inside minor and single condition.....");
					if (age1 > sMinorAge && relation.equalsIgnoreCase("Minor")) {
						sendMessageValuesList("",
								"For Minor Date Of Birth Should Not Be Greater Than or equal to "
										+ sMinorAge + " Years.");
						return false;
					}
					if ((age >= 18)
							&& (age1 < sMinorAge)
							&& ((!sRelationGuardian
									.equalsIgnoreCase("Guardian")) || (sRelationGuardian
									.equalsIgnoreCase("")))) {
						sendMessageValuesList("", CA0176);
						return false;
					}
					// start edit by mohit 25/09/2017
					/*
					 * if((age > 18) && (age < sMinorAge) &&
					 * (relation.equalsIgnoreCase("Minor"))) {
					 * 
					 * log.info("inside popup without taking guardian ");
					 * ////JOptionPane.showMessageDialog(_objApplet,
					 * "You are proceeding without adding guardian, are you sure ?"
					 * ); sendMessageValuesList("",
					 * "You are proceeding without adding guardian, are you sure ?"
					 * );
					 * 
					 * }
					 */
					// end edit by mohit on 25/09/2017

					if (age < sMinorAge
							&& relation.equalsIgnoreCase("Guardian")) {
						sendMessageValuesList("",
								"For Guardian Date Of Birth Should Be Greater Than or equal to "
										+ sMinorAge + " Years.");
						return false;
					}
					if (relation.equalsIgnoreCase("Minor")) {
						countMinor++;
					} else if (relation.equalsIgnoreCase("Guardian")) {
						countGuardian++;
					}
				} else if (accountOwn.equalsIgnoreCase("Joint")) {
					if (age < sMinorAge) {
						sendMessageValuesList("",
								"For Joint Date Of Birth Should be greater than or equal to "
										+ sMinorAge + " Years.");
						return false;
					}
					if (relation.equalsIgnoreCase("JAF")) {
						countJAF++;
					} else if (relation.equalsIgnoreCase("JAO")) {
						countJAO++;
					} else if (relation.equalsIgnoreCase("JOF")) {
						countJOF++;
					} else if (relation.equalsIgnoreCase("JOO")) {
						countJOO++;
					}
				} else {
					if (!((String) formObject.getValue(REQUEST_TYPE))
							.equalsIgnoreCase("Category Change Only")) {
						if (age < 18) {
							sendMessageValuesList("",
									"For Single Date Of Birth Should be greater than 18 Years.");
							return false;
						}
					}
					if ((age >= 18) && (age1 < sMinorAge)
							&& (accountOwn.equalsIgnoreCase("Single"))) {
					}
					if (i == 0 && !relation.equalsIgnoreCase("SOW")) {
						sendMessageValuesList("",
								"First customer should be SOW.");
						return false;
					}
					if (relation.equalsIgnoreCase("SOW")) {
						countSOW++;
					}
				}
			}
			if (accountOwn.equalsIgnoreCase("Minor")) {
				validateGuardianRequired();
				if (countMinor == 0) {
					// sendMessageValuesList("",
					// "Atleast one minor required.");05102022
					// commented for AO release by Ayush
					// sendMessageValuesList("", "Atleast one minor required.");
					sendMessageValuesList("",
							"Select Account Relationship ,Atleast one minor required.");
					return false;
				}
				if (countMinor > 1) {
					sendMessageValuesList("", "Only one minor required.");
					return false;
				}
				if ((countGuardian == 0) && (sGuardianReqFlag == true)) {
					sendMessageValuesList("", "Atleast one Guardian required.");
					return false;
				}
			}
			if (accountOwn.equalsIgnoreCase("Joint")) {
				if (countJAF == 0 && countJOF == 0) {
					sendMessageValuesList("", "Atleast one JAF/JOF required.");
					return false;
				}
				if (countJAF > 1 || countJOF > 1) {
					sendMessageValuesList("", "Only one JAF/JOF required.");
					return false;
				}
				if (countJAF == 1 && countJAO == 0) {
					sendMessageValuesList("", "Atleast one JAO required.");
					return false;
				}
				if (countJOF == 1 && countJOO == 0) {
					sendMessageValuesList("", "Atleast one JOO required.");
					return false;
				}
				if (countJAF >= 1 && countJOF >= 1) {
					sendMessageValuesList("",
							"You Can Not Enter Both JAF And JOF At A Time.");
					return false;
				}
				if (countJAO >= 1 && countJOO >= 1) {
					sendMessageValuesList("",
							"You Can Not Enter Both JAO And JOO At A Time.");
					return false;
				}
			}
			if (accountOwn.equalsIgnoreCase("Single")) {
				if (countSOW == 0) {
					sendMessageValuesList("", "Atleast one SOW Required.");
					return false;
				}
				if (countSOW > 1) {
					sendMessageValuesList("", "Only one SOW Required.");
					return false;
				}
			}
		}
		if (((String) formObject.getValue(REQUEST_TYPE))
				.equalsIgnoreCase("New Account with Category Change")) {
			if (formObject.getTableCellValue(ACC_RELATION, 0, 2)
					.equalsIgnoreCase("")) {
				sendMessageValuesList(
						"",
						"For New Account with Category Change request first customer should be an existing customer");
				return false;
			}
		}
		if (((String) formObject.getValue(OPERATING_INST)).equalsIgnoreCase("")) {
			sendMessageValuesList(OPERATING_INST,
					"Please fill Operating Instructions.");
			return false;
		}
		return true;
	}

	// should be commented for AO release by Ayush
	public void setBankRelnData() {
		String sQuery = "SELECT CID,SNO FROM ACC_RELATION_REPEATER where WI_NAME = '"
				+ sWorkitemId + "'";
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		logInfo("setBankRelnData", "setBankRelnData value: " + recordList);
		if (recordList.size() != 0 && recordList != null) {
			logInfo("setBankRelnData", "setBankRelnData: inside ize ");
			for (int i = 0; i < recordList.size(); i++) {
				logInfo("setBankRelnData", "setBankRelnData: inside for " + i);
				String cid = recordList.get(i).get(0).toString();
				String sno = recordList.get(i).get(1).toString();
				String bankRel = "";
				String reqType = "";

				if (cid.equalsIgnoreCase("") || cid == null) {
					bankRel = "New";
					reqType = "New Account";
				} else {
					reqType = "New Account with Category Change";
					bankRel = "Existing";
				}
				sQuery = "UPDATE ACC_RELATION_REPEATER SET BANK_RELATION = '"
						+ bankRel
						+ "',SEARCH_TYPE = 'MANUAL',ACC_RELATION ='' WHERE WI_NAME = '"
						+ sWorkitemId + "' AND SNO = '" + sno + "'";
				formObject.saveDataInDB(sQuery);
				logInfo("setBankRelnData", "sQuery: " + sQuery);
				formObject.setValue("REQUEST_TYPE", reqType);
				logInfo("setRequestTypeValue",
						"REQUEST_TYPE: " + formObject.getValue("REQUEST_TYPE"));
			}
		}
	}

	public void validateGuardianRequired() {
		try {
			logInfo("validateGuardianRequired",
					"Inside validateGuardianRequired");
			sGuardianReqFlag = false;
			int minorAge = 0;
			String minorDOB = formObject.getTableCellValue(ACC_RELATION, 0, 5);// objChkRepeater.getValue(1,"ACC_RELATION.DOB");
			logInfo("validateGuardianRequired", "minorDOB.." + minorDOB);
			minorAge = calculateAge(minorDOB);
			logInfo("validateGuardianRequired", "minorAge.." + minorAge);
			logInfo("validateGuardianRequired",
					"sGuardianReqFlag....before setting  " + sGuardianReqFlag);
			if ((((String) formObject.getValue(ACC_OWN_TYPE))
					.equalsIgnoreCase("Minor")) && (minorAge <= 18)) {
				sGuardianReqFlag = true;
				logInfo("validateGuardianRequired",
						"sGuardianReqFlag....set to " + sGuardianReqFlag);
			}
		} catch (Exception e) {
			logError("Exception in [validateGuardianRequired]", e);
		}
	}

	public String convertIntoDate(String date) {
		if (!date.equalsIgnoreCase("")) {
			String convertedDate = "";
			String ary[] = date.split("/");
			String monthInAlpha = getMonthAlpha(ary[1]);
			convertedDate = "'" + ary[0] + "/" + monthInAlpha + "/" + ary[2]
					+ "'";
			log.info("############### convertedDate ####### = " + convertedDate);
			return convertedDate;
		}

		return "''";
	}

	public String getMonthAlpha(String e) {
		String letter;
		if (e.equalsIgnoreCase("01"))
			letter = "Jan";
		else if (e.equalsIgnoreCase("02"))
			letter = "Feb";
		else if (e.equalsIgnoreCase("03"))
			letter = "Mar";
		else if (e.equalsIgnoreCase("04"))
			letter = "Apr";
		else if (e.equalsIgnoreCase("05"))
			letter = "May";
		else if (e.equalsIgnoreCase("06"))
			letter = "Jun";
		else if (e.equalsIgnoreCase("07"))
			letter = "Jul";
		else if (e.equalsIgnoreCase("08"))
			letter = "Aug";
		else if (e.equalsIgnoreCase("09"))
			letter = "Sep";
		else if (e.equalsIgnoreCase("10"))
			letter = "Oct";
		else if (e.equalsIgnoreCase("11"))
			letter = "Nov";
		else
			letter = "Dec";
		return letter;
	}

	public void fillManualDataInBelowFields(String sControlName,
			String sControlValue) {
		try {
			logInfo("fillManualDataInBelowFields", "INSIDE sControlName: "
					+ sControlName + ", " + "sControlValue: " + sControlValue);
			if (sControlName.equalsIgnoreCase(MANUAL_ADDRESS)) {
				if (formObject.getValue(CHECKBOX_CORR_POB_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_POBOXNO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_CITY)) {
				if (formObject.getValue(CHECKBOX_CITY_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_CITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_STATE)) {
				if (formObject.getValue(CHECKBOX_STATE_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CORR_STATE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_NATIONALITY)) {
				if (formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					if (sControlValue.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						formObject.setValue(MANUAL_VISASTATUS, "Not Required");
					} /*
					 * else { formObject.setValue(MANUAL_VISASTATUS,""); }
					 */
					formObject.setValue(CUST_NATIONALITY, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_CNTRY)) {
				if (formObject.getValue(CHECKBOX_CNTRY_OF_CORR_MANUAL)
						.toString().equalsIgnoreCase("True")) {
					formObject.setValue(CORR_CNTRY, sControlValue);
					if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
							|| sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
						if (sControlValue
								.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
							formObject.setStyle(COR_MAKANI, DISABLE, FALSE);
						} else {
							formObject.setStyle(COR_MAKANI, DISABLE, TRUE);
						}
					}
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PH)) {
				if (formObject.getValue(CHECKBOX_TELE_RES_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_PHONENO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_MOBILE)) {
				if (formObject.getValue(CHECKBOX_TELE_MOB_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_MOBILE, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_EMAIL)) {
				if (formObject.getValue(CHECKBOX_EMAIL_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CP_EMAIL, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PREFIX)) {
				if (formObject.getValue(CHECKBOX_PREFIX_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CUST_PREFIX, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_NAME)) {
				if (formObject.getValue(CHECKBOX_FULLNAME_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PD_FULLNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_EIDANO)) {
				if (formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PD_EIDANO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_MOTHERNAME)) {
				if (formObject.getValue(CHECKBOX_MOTHERSNAME_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PD_MOTHERMAIDENNAME, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_GENDER)) {
				if (formObject.getValue(CHECKBOX_GENDER_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(CUST_GENDER, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PASSPORTNO)) {
				if (formObject.getValue(CHECKBOX_PASSPORT_NO_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_PASSPORT_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_VISANO)) {
				if (formObject.getValue(CHECKBOX_VISA_NO_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(HD_VISA_NO, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PROFESSION)) {
				if (formObject.getValue(CHECKBOX_PROFESSION_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(PROF_CODE, sControlValue);
					formObject.setValue(PROFESION, sControlValue);
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PROFESSION)) {
				if (formObject.getValue(CHECKBOX_PROFESSION_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					logInfo("", "IN IF--select in profession");
					formObject.setValue(PROF_CODE, "");
					formObject.setValue(PROFESION, "");
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_EMPLYR_NAME)) {
				if (formObject.getValue(CHECKBOX_EMP_NAME_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(EMPNAME,
							formObject.getValue(MANUAL_EMPLYR_NAME).toString());
					List<List<String>> sOutput = formObject
							.getDataFromDB("SELECT CD_STATUS FROM USR_0_EMPLOYER_MASTER WHERE EMP_NAME ='"
									+ sControlValue + "'");
					logInfo("fillManualDataInBelowFields",
							"CD_STATUS sOutput: " + sOutput);
					formObject.setValue(ED_CB_TML, "False");
					formObject.setValue(ED_CB_NON_TML, "False");
					if (sOutput.size() > 0
							&& null != sOutput.get(0)
							&& (sOutput.get(0).get(0).equalsIgnoreCase("1") || sOutput
									.get(0).get(0).equalsIgnoreCase("2"))) {
						formObject.setValue(ED_CB_TML, "True");
					} else {
						formObject.setValue(ED_CB_NON_TML, "True");
					}
				}
				String sIsFCREmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_FCR).toString();
				String sIsEIDAEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_EIDA).toString();
				String sIsManualEmpName = formObject.getValue(
						CHECKBOX_EMP_NAME_MANUAL).toString();
				String sFCREmpName = formObject.getValue(FCR_EMPLYR_NAME)
						.toString();
				String sEIDAEmpName = formObject.getValue(EIDA_EMPLYR_NAME)
						.toString();
				String sManualEmpName = formObject.getValue(MANUAL_EMPLYR_NAME)
						.toString();
				String sFinalEmpName = getFinalData(sIsFCREmpName,
						sIsEIDAEmpName, sIsManualEmpName, sFCREmpName,
						sEIDAEmpName, sManualEmpName);
				if (formObject.getValue(EMP_STATUS).toString().isEmpty()) {
					if (!sFinalEmpName.isEmpty()) {
						formObject.setValue(EMP_STATUS, "Employed");
					}
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_PER_CNTRY)) {
				if (formObject.getValue(CHECKBOX_COUNTRY_PER_RES_MANUAL)
						.toString().equalsIgnoreCase("True")) {
					formObject.setValue(PERM_CNTRY, sControlValue);
					if (sControlValue.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO))
							formObject.setStyle(RES_MAKANI, DISABLE, FALSE);
						if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER))
							formObject.setStyle(CONTACT_DETAILS_MAKANI_NO,
									DISABLE, FALSE);
					} else {
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO))
							formObject.setStyle(RES_MAKANI, DISABLE, TRUE);
						if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER))
							formObject.setStyle(CONTACT_DETAILS_MAKANI_NO,
									DISABLE, TRUE);
					}
				}
			} else if (sControlName.equalsIgnoreCase(MANUAL_RESIDENT)
					&& !sControlValue.equalsIgnoreCase("")) {
				if (formObject.getValue(CHECKBOX_COUNTRY_RES_MANUAL).toString()
						.equalsIgnoreCase("True")) {
					formObject.setValue(RES_CNTRY, sControlValue);
					if (sControlValue.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO))
							formObject.setStyle(CONTACT_DETAILS_MAKANI_NO,
									DISABLE, FALSE);
						if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER))
							formObject.setStyle(RES_MAKANI, DISABLE, FALSE);
					} else {
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO))
							formObject.setStyle(CONTACT_DETAILS_MAKANI_NO,
									DISABLE, TRUE);
						if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER))
							formObject.setStyle(RES_MAKANI, DISABLE, TRUE);
					}
				}
			}
			if (formObject.getValue(CHECKBOX_DOB_MANUAL).toString()
					.equalsIgnoreCase(TRUE)) {
				formObject.setValue(PD_DOB, formObject.getValue(MANUAL_DOB)
						.toString());
			}
			if (formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString()
					.equalsIgnoreCase(TRUE)) {
				formObject.setValue(CUST_NATIONALITY,
						formObject.getValue(MANUAL_NATIONALITY).toString());
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
				if ("UNITED ARAB EMIRATES".equalsIgnoreCase(formObject
						.getValue(CUST_NATIONALITY).toString())) {
					enableControls(new String[] { COR_MAKANI, PERM_MAKANI,
							RES_MAKANI });
				} else {
					disableControls(new String[] { COR_MAKANI, PERM_MAKANI,
							RES_MAKANI });
				}
			}

		} catch (Exception e) {
			logError("fillManualDataInBelowFields", e);
			;
		}
	}

	/* Yamini Changes */

	public void logInfo(String functionName, String message) {
		log.info("[" + sActivityName + "][" + sWorkitemId + "][" + functionName
				+ "] : " + message);
	}

	public void logError(String functionName, Exception e) {
		log.error("[" + sActivityName + "][" + sWorkitemId + "] Exception in ["
				+ functionName + "] : ", e);
	}

	// public void logSignInfo(String functionName, String message) {
	// signlog.info("[" + sActivityName + "][" + sWorkitemId + "][" +
	// functionName + "] : " + message);
	// }

	// commented for AO release by Ayush
	public void setHeaderAccRelData() {
		try {
			if (sActivityName.equalsIgnoreCase(ACTIVITY_ACCOUNT_RELATION)) {

				String dsaPromoCode = "";
				String sourcingChannel = "";
				String homeBranch = "";
				String sourcingCenter = "";
				String sQry = "select dsa_promo_code from ext_ao  WHERE WI_NAME = N'"
						+ sWorkitemId + "'";
				logInfo("setHeaderAccRelData", "setHeaderAccRelData: " + sQry);
				List<List<String>> extData = formObject.getDataFromDB(sQry);
				logInfo("setHeaderAccRelData", "setHeaderAccRelData: "
						+ extData);
				if (extData.size() != 0 && extData != null) {

					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData " + "");
					dsaPromoCode = extData.get(0).get(0);
					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData value "
									+ dsaPromoCode);
				}
				String sData = " SELECT DEPARTMENT,BRANCH,SALES  FROM USR_0_USER_ACCESS WHERE PROCESSNAME = 'AO' AND UPPER(USERNAME) = UPPER('"
						+ dsaPromoCode + "')";
				logInfo("setHeaderAccRelData", "setHeaderAccRelData: " + sData);
				List<List<String>> record = formObject.getDataFromDB(sData);
				logInfo("setHeaderAccRelData", "setHeaderAccRelData: " + record);
				if (record.size() != 0 && record != null) {

					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData " + record);
					sourcingChannel = record.get(0).get(0);
					homeBranch = record.get(0).get(1);
					sourcingCenter = record.get(0).get(2);
					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData value sourcingChannel"
									+ sourcingChannel);
					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData value homeBranch "
									+ homeBranch);
					logInfo("setHeaderAccRelData",
							"setHeaderAccRelData: inside extData value sourcingCenter"
									+ sourcingCenter);

					formObject.setValue("SOURCING_CHANNEL", record.get(0)
							.get(0));
					formObject
							.setValue("ACC_HOME_BRANCH", record.get(0).get(1));
					formObject
							.setValue("SOURCING_CENTER", record.get(0).get(2));
					// String
					// UpdateHeaderData="update EXT_AO set ACC_HOME_BRANCH "
					// +
					// "='"+homeBranch+"',SOURCING_CHANNEL = '"+sourcingChannel+"',SOURCING_CENTER = '"+sourcingChannel+"' Where WI_NAME='"+
					// sWorkitemId +"'";
					// log.info("sUpdateDedupe+" + UpdateHeaderData);
					// formObject.saveDataInDB(UpdateHeaderData);
				}
			}

		} catch (Exception e) {
			logError("setHeaderAccRelData", e);
		}
	}

	public void setWMSId() {
		try {
			if (formObject.getValue(WMS_ID).toString().equalsIgnoreCase("")) {
				List<List<String>> list;
				String sQuery = "";
				String sWMSID = "";
				String sID = "";
				String sServiceShortName = "";
				String sHomeBrShortName = "";
				sQuery = "SELECT SEQ_WMSID.nextval as ID from DUAL ";
				log.info("query : " + sQuery);
				list = formObject.getDataFromDB(sQuery);
				if (list != null && !list.isEmpty()) {
					log.info("ID : " + list.get(0).get(0));
					sID = list.get(0).get(0);
				}
				sQuery = "SELECT SHORT_NAME FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL = '"
						+ formObject.getValue(SOURCING_CHANNEL).toString()
						+ "'";
				log.info("sQuery : " + sQuery);
				list = formObject.getDataFromDB(sQuery);
				if (list != null && !list.isEmpty()) {
					log.info("sServiceShortName : " + list.get(0).get(0));
					sServiceShortName = list.get(0).get(0);
				}
				sQuery = "SELECT SHORT_NAME FROM USR_0_HOME_BRANCH WHERE HOME_BRANCH = '"
						+ formObject.getValue(ACC_HOME_BRANCH).toString() + "'";
				log.info("sQuery : " + sQuery);
				list = formObject.getDataFromDB(sQuery);
				if (list != null && !list.isEmpty()) {
					log.info("sHomeBrShortName : " + list.get(0).get(0));
					sHomeBrShortName = list.get(0).get(0);
				}

				if (formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("Category Change Only")) {
					sWMSID = sWMSID + "CC-";
				} else {
					sWMSID = sWMSID + "AO-";
				}

				sWMSID = (sWMSID + sServiceShortName + "-" + sHomeBrShortName
						+ "-" + sID).toUpperCase();

				log.info("WMS ID---" + sWMSID);
				if (sWMSID.length() < 8)
					// {
					// sendMessageValuesList("","Error In Calculating WMS ID");
					// formObject.setStyle(BTN_SAVE_NEXT,DISABLE,FALSE);
					// if(!sendMessageList.isEmpty()){
					// return
					// getReturnMessage(false,"",sendMessageList.get(0).toString()+"###"+
					// sendMessageList.get(1).toString());
					// }
					// // } else {
					// String
					// sUpdateCreateDate="update "+sExtTable+" set CREATEDATE=sysdate Where WI_NAME='"+
					// sWorkitemId +"'";
					// formObject.saveDataInDB(sUpdateCreateDate);
					// createHistory();
					// createAllHistory();
					formObject.setValue(WMS_ID, sWMSID);

			}
		} catch (Exception e) {
			logError("setHeaderAccRelData", e);
		}
	}

	public void populatePersonalData() {

		logInfo("populatePersonalData", "INSIDE");
		String sameAsResi = "";
		String sameAsPerm = "";
		String otherCityResi = "";
		String otherCityPerm = "";
		if (ACTIVITY_DDE_CUST_INFO.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_DDE_ACCOUNT_INFO_CHECK
						.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_APP_ASSESSMENT.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_CUST_SCREEN.equalsIgnoreCase(sActivityName)) {
			sameAsResi = RA_SAMEAS;
			sameAsPerm = PA_SAMEAS;
			otherCityResi = OTHER_RES_CITY;
			// otherCityPerm = OTHER_RESIDENTIAL_CITY;
			otherCityPerm = OTHER_PERM_CITY;
		} else {
			sameAsResi = PA_SAMEAS;
			sameAsPerm = RA_SAMEAS;
			otherCityResi = OTHER_RES_CITY;
			// otherCityPerm = OTHER_RESIDENTIAL_CITY;
			otherCityPerm = OTHER_PERM_CITY;
		}
		int iSelectedRow = 0;
		String sCustNo = "";
		try {
			populateAuditSearch(SEARCH_DETAILS_LVW);
			populateMakaniData();
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			String sCID = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 2);
			logInfo("populatePersonalData", "sCustNo----" + sCustNo);
			String sQuery = "SELECT CUST_MARITAL_OTHERS,OTHER_CORR_CITY,OTHER_PERM_CITY,OTHER_RESI_CITY,MAIDEN_NAME,CUST_SHORT_NAME,"
					+ "CURR_RELATION_TYPE,NEW_RELATION_TYPE, EIDA_NO,CUST_FULL_NAME,PREFIX_OTHER,CORR_PO_BOX,"
					+ "CORR_FLOOR,CORR_STREET,CORR_EMAIL,CORR_PHONE,CORR_OFF_PHONE,CORR_MOB,PER_BUILDING,PER_VILLA,"
					+ "PER_LANDMARK,PASS_NO, VISA_NO,PROFIT_CENTER_CODE,RFERRED_BY,REFFER_STAFF_ID,IS_UPDATE_SIGN,RES_CITY "
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '" + sCustNo + "'";
			logInfo("populatePersonalData", "PopulatePersonalData sQuery11: "
					+ sQuery);
			List<List<String>> result = formObject.getDataFromDB(sQuery);
			String[] setValues = { PD_MARITALSTATUSOTHER, OTHER_CORR_CITY,
					otherCityResi, otherCityPerm, PD_MOTHERMAIDENNAME,
					FCR_SHORTNAME, PD_CUSTRELTYPE, PD_NEWRELTYPE, PD_EIDANO,
					PD_FULLNAME, PD_OTHERS, CP_POBOXNO, CP_FLOOR, CP_STREET,
					CP_EMAIL, CP_PHONENO, CP_TELEOFFICE, CP_MOBILE,
					PA_BUILDINGNAME, PA_VILLAFLATNO, PA_STREET, HD_PASSPORT_NO,
					HD_VISA_NO, IDS_PROF_CENTER_CODE, IDS_REF_BY_CUST,
					REF_BY_STAFF, IS_SIGN_UPDATE ,RA_CITY};
			setValuesFromDB(result, setValues);
			sQuery = "SELECT SAME_AS_PERMANENT ,SAME_AS_RESIDENTIAL , CORR_CITY, PER_CITY," // RES
																							// >
																							// PER
																							// //
																							// PASS_TYPE
																							// change
																							// to
																							// MANUAL_PASS_TYPE
																							// CQRN-0000188395
																							// 13/01/2022
					+ " CORR_STATE,CORR_CNTRY,PER_COUNTRY,PER_STATE,"
					+ "PER_OTHER, CUST_MARITAL_STATUS,RELIGION,CUST_SEG,PREFIX,CUST_DOB,NATIONALITY,GENDER,"
					+ "DATE_ATTAINING_MAJORITY,PASS_ISSUE_DATE ,PASS_EXP_DATE, VISA_ISSUE_DATE,VISA_EXP_DATE,EIDA_EXPIRY,RM_CODE," //Added by Shivanshu ATP-377
					+ "RM_NAME,PROFESSION_CODE,RES_EIDA,NIGEXCEPTIONMAKER,NIGEXCEPTIONCHECKKER,RES_CITY,CORR_OTHER,"
					+ "OTHER_PERM_CITY,BENEFIT_OTHER,CORR_CNTRY_CODE,CORR_OFF_CNTRY_CODE,"
					+ "CORR_MOB_CNTRY_CODE,RES_VILLA,RES_LANDMARK,RES_STATE,RES_OTHER,RES_CNTRY,"
					+ "MANUAL_PASS_TYPE,VISA_STATUS,IS_SALARY_TRANSFER,IS_MORTAGAGE,IS_INSURANCE,"
					+ "IS_TRB,IS_OTHERS,IS_PREVILEGE_TP,IS_TRAVEL,IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT,"
					+ "IS_EXCELLENCY_TP,PROMO_CODE,EXELLENCY_CENTER,IS_VVIP, IS_BENEFIT_OTHER,"
					+ " RES_BUILDING ,PER_BUILDING, PER_VILLA,PER_LANDMARK"
					+ " FROM USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '" + sCustNo + "'";
			logInfo("populatePersonalData", "sQuery USR_0_CUST_TXN: " + sQuery);
			List<List<String>> sOutput2 = formObject.getDataFromDB(sQuery);
			String[] formVariable = { sameAsResi, sameAsPerm, CP_CITY, RA_CITY,
					CORR_STATE, CORR_CNTRY, RES_CNTRY, RES_STATE, RA_OTHERS,
					MARITAL_STATUS, RELIGION, PD_CUSTSEGMENT, CUST_PREFIX,
					PD_DOB, CUST_NATIONALITY, CUST_GENDER,
					PD_DATEOFATTAININGMAT, HD_PASS_ISS_DATE, HD_PASS_EXP_DATE,
					HD_VISA_ISSUE_DATE, HD_EXP_DATE,EIDA_EXPIRY_DATE, RM_CODE, RM_NAME,//Added by Shivanshu ATP-377
					PROF_CODE, DRP_RESEIDA, NIG_MAKER, NIG_CHECKER, PA_CITY };
			setValuesFromDB(sOutput2, formVariable);
			if (sOutput2 != null && sOutput2.size() > 0) {// if(result.size() >
															// 0 &&
															// result.get(0) !=
															// null){
				if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_CPD_CHECKER.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_CONTACT_CENTER_CPD
								.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_LEVEL_11.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_LEVEL_12.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_LEVEL_13.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_LEVEL_14.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_CLOSE_REQUEST
								.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_RM.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_WORK_EXIT.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_QUERY.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_MAIL_ROOM.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_BULK_EOD_CHECKER
								.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_DELIVERY_MAKER
								.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_DELIVERY_CHECKER
								.equalsIgnoreCase(sActivityName)
						|| ACTIVITY_PHYSICAL_RECON
								.equalsIgnoreCase(sActivityName)) {
					formObject.setValue(CPD_RISK_ASSESS_MARKS, sOutput2.get(0)
							.get(28));
				} else {
					formObject.setValue(CP_OTHERS, sOutput2.get(0).get(28));
				}
				/*
				 * formObject.setValue(IDS_CB_VVIP, result.get(0).get(28));
				 * formObject.setValue(IDS_OTH_CB_OTHERS,
				 * result.get(0).get(29));
				 * formObject.setValue(IDS_BNFT_CB_OTHERS,
				 * result.get(0).get(24));
				 */
				logInfo("populatePersonalData",
						"result size : " + sOutput2.size());
				if (sOutput2.size() == 0) { // PASS_TYPE change to
											// MANUAL_PASS_TYPE CQRN-0000188395
											// 13/01/2022
					sQuery = "SELECT IS_SALARY_TRANSFER,IS_MORTAGAGE,IS_INSURANCE,IS_TRB,IS_OTHERS,IS_PREVILEGE_TP,IS_TRAVEL,IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT,"
							+ "IS_EXCELLENCY_TP,MANUAL_PASS_TYPE,VISA_STATUS,PER_BUILDING,PER_VILLA,PER_LANDMARK,PER_CITY,PER_STATE,PER_COUNTRY,PROMO_CODE,"
							+ "EXELLENCY_CENTER,OTHER_RESI_CITY,PER_OTHER FROM USR_0_CUST_WMS WHERE CUST_ID= '"
							+ sCID + "'";

					result = formObject.getDataFromDB(sQuery);
					logInfo("populatePersonalData", "sQuery13----" + sQuery);
					logInfo("populatePersonalData", "sOutput----" + result);
					List<List<String>> sOutput3 = formObject
							.getDataFromDB(sQuery);
					String[] formVar2 = { IDS_CB_SAL_TRANSFER,
							IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
							IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_CB_TP,
							IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT,
							IDS_PC_CB_SHOPPING, IDS_PC_CB_ENTERTAINMENT,
							IDS_PC_BN_TP, MANUAL_PASSTYPE, MANUAL_VISASTATUS,
							RA_BUILDINGNAME, RA_VILLAFLATNO, IDS_OTH_CB_OTHERS,
							IDS_BNFT_CB_OTHERS, RA_STREET, RA_CITY, RES_STATE,
							RES_CNTRY, PRO_CODE, EXCELLENCY_CNTR, otherCityResi };
					setValuesFromDB(sOutput3, formVar2);
				} else if (sOutput2 != null && sOutput2.size() > 0) {
					logInfo("populatePersonalData", "below values: "
							+ sOutput2.get(0).get(55) + "--"
							+ sOutput2.get(0).get(30) + "--"
							+ sOutput2.get(0).get(41) + "--"
							+ sOutput2.get(0).get(42) + "--"
							+ sOutput2.get(0).get(43) + "--"
							+ sOutput2.get(0).get(44) + "--"
							+ sOutput2.get(0).get(45) + "--"
							+ sOutput2.get(0).get(54) + "--"
							+ sOutput2.get(0).get(44) + "--"
							+ sOutput2.get(0).get(47) + "--"
							+ sOutput2.get(0).get(48) + "--"
							+ sOutput2.get(0).get(49) + "--"
							+ sOutput2.get(0).get(50) + "--"
							+ sOutput2.get(0).get(51) + "--"
							+ sOutput2.get(0).get(40) + "--"
							+ sOutput2.get(0).get(41) + "--"
							+ sOutput2.get(0).get(56) + "--"
							+ sOutput2.get(0).get(34) + "--"
							+ sOutput2.get(0).get(55) + "--"
							+ sOutput2.get(0).get(30) + "--"
							+ sOutput2.get(0).get(35) + "--"
							+ sOutput2.get(0).get(27) + "--"
							+ sOutput2.get(0).get(36) + "--"
							+ sOutput2.get(0).get(38) + "--"
							+ sOutput2.get(0).get(52) + "--"
							+ sOutput2.get(0).get(53) + "--"
							+ sOutput2.get(0).get(29));

					formObject.setValue(IDS_OTH_CB_OTHERS,
							sOutput2.get(0).get(55));
					formObject.setValue(IDS_BNFT_CB_OTHERS, sOutput2.get(0)
							.get(30));
					formObject.setValue(IDS_CB_SAL_TRANSFER, sOutput2.get(0)
							.get(41));
					formObject.setValue(IDS_CB_MORTGAGES,
							sOutput2.get(0).get(42));
					formObject.setValue(IDS_CB_INSURANCE,
							sOutput2.get(0).get(43));
					formObject.setValue(IDS_CB_TRB, sOutput2.get(0).get(44));
					formObject.setValue(IDS_CB_OTHERS, sOutput2.get(0).get(45));
					formObject.setValue(IDS_CB_VVIP, sOutput2.get(0).get(54));
					formObject.setValue(IDS_PC_CB_TP, sOutput2.get(0).get(44));
					formObject.setValue(IDS_PC_CB_TRAVEL,
							sOutput2.get(0).get(47));
					formObject.setValue(IDS_PC_CB_SPORT, sOutput2.get(0)
							.get(48));
					formObject.setValue(IDS_PC_CB_SHOPPING, sOutput2.get(0)
							.get(49));
					formObject.setValue(IDS_PC_CB_ENTERTAINMENT, sOutput2
							.get(0).get(50));
					formObject.setValue(IDS_PC_BN_TP, sOutput2.get(0).get(51));
					formObject.setValue(MANUAL_PASSTYPE, sOutput2.get(0)
							.get(39));
					formObject.setValue(MANUAL_VISASTATUS,
							sOutput2.get(0).get(40));
					formObject.setValue(PA_BUILDINGNAME, sOutput2.get(0)
							.get(56));
					formObject
							.setValue(PA_VILLAFLATNO, sOutput2.get(0).get(34));
					formObject.setValue(PA_STREET, sOutput2.get(0).get(35));
					formObject.setValue(PA_CITY, sOutput2.get(0).get(27));
					formObject.setValue(PERM_STATE, sOutput2.get(0).get(36)); // PERM_STATE
					formObject.setValue(PERM_CNTRY, sOutput2.get(0).get(38)); // PERM_CNTRY
					formObject.setValue(PRO_CODE, sOutput2.get(0).get(52));
					formObject.setValue(EXCELLENCY_CNTR, sOutput2.get(0)
							.get(53));
					formObject.setValue(otherCityResi, sOutput2.get(0).get(29));
					formObject.setValue(RA_BUILDINGNAME, sOutput2.get(0)
							.get(57));
					formObject
							.setValue(RA_VILLAFLATNO, sOutput2.get(0).get(58));
					formObject.setValue(RA_STREET, sOutput2.get(0).get(59));
					if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_CPD_CHECKER
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_CONTACT_CENTER_CPD
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_LEVEL_11
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_LEVEL_12
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_LEVEL_13
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_LEVEL_14
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_CLOSE_REQUEST
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_RM.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_WORK_EXIT
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_QUERY.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_MAIL_ROOM
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_BULK_EOD_CHECKER
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_DELIVERY_MAKER
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_DELIVERY_CHECKER
									.equalsIgnoreCase(sActivityName)
							|| ACTIVITY_PHYSICAL_RECON
									.equalsIgnoreCase(sActivityName)) {
						formObject.setValue(RA_OTHERS, sOutput2.get(0).get(37));
					} else {
						formObject.setValue(PA_OTHERS, sOutput2.get(0).get(37));
					}
				}
			}
			logInfo("populatePersonalData", "after setting MANUAL_PASSTYPE : "
					+ formObject.getValue(MANUAL_PASSTYPE).toString());
			logInfo("populatePersonalData",
					"after setting MANUAL_VISASTATUS : "
							+ formObject.getValue(MANUAL_VISASTATUS).toString());
		} catch (Exception e) {
			logError("populatePersonalData", e);
		}
	}

	public void populateMakaniData() {
		logInfo("populateMakaniData", "INSIDE");
		String makaniResi = "";
		String makaniPerm = "";
		/*
		 * if(ACTIVITY_DDE_CUST_INFO.equalsIgnoreCase(sActivityName) ||
		 * ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName) ||
		 * ACTIVITY_DDE_ACCOUNT_INFO_CHECK.equalsIgnoreCase(sActivityName) ||
		 * ACTIVITY_APP_ASSESSMENT.equalsIgnoreCase(sActivityName) ||
		 * ACTIVITY_CUST_SCREEN.equalsIgnoreCase(sActivityName)) { makaniResi =
		 * CONTACT_DETAILS_MAKANI_NO; makaniPerm = RES_MAKANI; } else {
		 * makaniResi = RES_MAKANI; makaniPerm = CONTACT_DETAILS_MAKANI_NO; }
		 */
		makaniResi = RES_MAKANI;
		makaniPerm = CONTACT_DETAILS_MAKANI_NO;
		int iSelectedRow = 0;
		String sCustNo = "";
		String sQuery = "";
		try {
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			sQuery = "Select corr_makani,res_makani,per_makani FROM USR_0_CUST_TXN WHERE WI_NAME= "
					+ "'"
					+ sWorkitemId
					+ "' "
					+ "AND CUST_SNO= '"
					+ sCustNo
					+ "'";
			logInfo("populateMakaniData", "sQuery PopulateMakaniData" + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				logInfo("populateMakaniData", "sOutput PopulateMakaniData----"
						+ sOutput);
				formObject.setValue(COR_MAKANI, sOutput.get(0).get(0));
				formObject.setValue(makaniPerm, sOutput.get(0).get(1));
				formObject.setValue(makaniResi, sOutput.get(0).get(2));
			}
		} catch (Exception e) {
			logError("populateMakaniData", e);
		}
	}

	public void populateRiskData() {
		logInfo("populateRiskData", "INSIDE");
		int iSelectedRow = 0;
		String sCustNo = "";
		try {
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			String sCID = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 2);
			String sQuery = "SELECT CUST_ID,WMS_ID,WI_NAME,CUST_SNO,ACC_COVERED_IN_FORM,EMP_PROFESSION_NAME_OTHER,"
					+ " EMP_OTHERS,EMP_ID,IS_TML,IS_NON_TML,EMP_POSITION,EMP_NO_YRS_BIZ,EMP_CITY_CODE,EMP_PHONE,"
					+ "EMP_SAL, EMP_ANNUAL_INCOME,IS_SALARY_AED,IS_INVEST_AED,IS_INHERITENCE_AED,IS_REAL_INCOME,"
					+ "IS_ASSET_SALE, IS_OTHERS_INCOME,SALARY_AED,INVEST_RETURN_AED,INHERITENCE_AED,REAL_INCOME,"
					+ "ASSET_SALE,OTHER_INCOME,EMP_NATURE_OF_BUSINESS,DETAILS_REAL_ESTATE,DETAILS_INVESTMENT,"
					+ "DETAILS_CASH_EQUIVALENT,DETAILS_ESTIMETED_NETWORTH,MARKET_VALUE_ESTATE,MARKET_VALUE_INVESTMENT,"
					+ "MARKET_VALUE_CASH,MARKET_VALUE_NETWORTH,MONTHLY_INC_ESTATE,MONTHLY_INC_INVESTMENT,"
					+ "MONTHLY_INC_CASH,MONTHLY_INC_NETWORTH,MONTHLY_DEPOSIT_CASH,MONTHLY_DEPOSIT_CHEQUE,"
					+ "MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH,MONTHLY_WITHDRAWL_CHEQUE,"
					+ "MONTHLY_WITHDRAWL_TRANSFER,FINANCIAL_ACT_COUNTRIES,INTERNATIONAL_ACT_NATURE,BANK_NAME_1,"
					+ "BANK_NAME_2,BANK_NAME_3,BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,STAFF_MET_CUSTOMER,"
					+ "LINE_MANAGER_STAFF,UNIT_HEAD_PEP,UNIT_HEAD_INCREASED_RISK,ADD_COMMENTS_DDE,EXISTING_SINCE,"
					+ "KYC_PREPARE_DATE,EMP_DOJ,ACC_RELATIONSHIP_PURPOSE,EMP_PROFESSION_NAME,EMP_NAME,EMPLOYEE_TYPE, "
					+ "STAFF_FLAG,EMP_COUNTRY_CODE, IS_CUST_DETAIL_CHANGE,EIDA_PRESENT,Birth_country,PURPOSE_TAX,"
					+ "SIGN_STYLE,IS_UAE_RESIDENT, DEALS_ARMAMENT, PEP,HAWALA,IS_HOLDING_GREENCARD,IS_US_TAX_LIABLE,"
					+ "IS_US_TIN_PRESENT,IS_US_CLASSIFICATION,IS_US_RESIDENT, IS_VVIP_Customer,OVERALL_RISK_DDE,"
					+ "SPECIAL_CATAGORY,EMP_STATUS,SMS_FLAG,IB_FLAG,IVR_FLAG,STAFF_FLAG_EXISTING,"
					+ "ESTATEMENT_REGISTERED,CHEQUEBOOK_BLOCK,SIGNATUREPRESENTFLAG ,PHOTOPRESENTFLAG ,"
					+ "CUSTOMER_OPEN_DATE,TOUCHPOINTS,MIB_FLAG,IS_POA_US_PERSON,IS_US_INDICIA_FOUND,"
					+ "DOCUMENT_TO_BE_COLLECTED,CLASSIFICATION_DATE,W8_SIGNUP_DATE,CHANGE_IN_FATCA_3WAY_INPUTS,"
					+ "US_INDICIA_FOUND_WEBSERVICE,FATCAMAIN,FATCAMINI,FATCA_MAINTAIN_OPTION "
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '" + sCustNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateRiskData", "sQuery---" + sQuery);
			logInfo("populateRiskData", "sOutput---" + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				// ED_LEN_OF_SERVCE
				formObject.setValue(ED_LEN_OF_SERVCE, sOutput.get(0).get(11));
				formObject.setValue(GI_ACC_NO_COVERED, sOutput.get(0).get(4));
				formObject.setValue(ED_OTHER, sOutput.get(0).get(5));
				formObject.setValue(ED_EMPNAME, sOutput.get(0).get(6));
				formObject.setValue(ED_EMPLYID, sOutput.get(0).get(7));
				formObject.setValue(ED_CB_TML, sOutput.get(0).get(8));
				formObject.setValue(ED_CB_NON_TML, sOutput.get(0).get(9));
				formObject.setValue(ED_PHNE_NO, sOutput.get(0).get(12));
				formObject.setValue("TEXT75", sOutput.get(0).get(13));
				formObject.setValue(ED_MONTHLY_INCM, sOutput.get(0).get(14));
				logInfo("populateRiskData", "incsahil Output.get(0).get(15)---"
						+ sOutput.get(0).get(15));
				formObject.setValue(ED_ANNUAL_INC, sOutput.get(0).get(15));
				formObject.setValue(ED_CB_SAL_AED, sOutput.get(0).get(16));
				formObject.setValue(ED_SAL_AED, sOutput.get(0).get(22));
				formObject.setValue("TEXT113", sOutput.get(0).get(29));
				formObject.setValue("TEXT106", sOutput.get(0).get(30));
				formObject.setValue("TEXT101", sOutput.get(0).get(31));
				formObject.setValue("TEXT96", sOutput.get(0).get(32));
				formObject.setValue("TEXT112", sOutput.get(0).get(33));
				formObject.setValue("TEXT107", sOutput.get(0).get(34));
				formObject.setValue("TEXT102", sOutput.get(0).get(35));
				formObject.setValue("TEXT97", sOutput.get(0).get(36));
				formObject.setValue("TEXT111", sOutput.get(0).get(37));
				formObject.setValue("TEXT108", sOutput.get(0).get(38));
				formObject.setValue("TEXT103", sOutput.get(0).get(39));
				formObject.setValue("TEXT98", sOutput.get(0).get(40));
				formObject.setValue(FERS_EMD_CASH_ATM, sOutput.get(0).get(41));
				formObject.setValue(FERS_EMD_CHQ_DRFT, sOutput.get(0).get(42));
				formObject.setValue(FERS_EMD_TRNSFR_ONLN, sOutput.get(0)
						.get(43));
				formObject.setValue(FERS_EMW_CASH_ATM, sOutput.get(0).get(44));
				formObject.setValue(FERS_EMW_CHQ_DRFT, sOutput.get(0).get(45));
				formObject.setValue(FERS_EMW_TRNSFR_ONLN, sOutput.get(0)
						.get(46));
				formObject.setValue(FERS_GEO_CNTRY_FINANCL,
						sOutput.get(0).get(47));
				formObject.setValue(FERS_NATRE_ACTVTY_FT, sOutput.get(0)
						.get(48));
				formObject.setValue(BR_BANK_NAME_1, sOutput.get(0).get(31));
				formObject.setValue(BR_BANK_NAME_2, sOutput.get(0).get(50));
				formObject.setValue(BR_BANK_NAME_3, sOutput.get(0).get(51));
				formObject.setValue(BR_CITY_CNTRY_1, sOutput.get(0).get(52));
				formObject.setValue(BR_CITY_CNTRY_2, sOutput.get(0).get(53));
				formObject.setValue(BR_CITY_CNTRY_3, sOutput.get(0).get(54));
				formObject.setValue(BR_STAFF_WHO_NAME_STMP,
						sOutput.get(0).get(55));
				formObject.setValue(BR_BUSN_GRP_HEAD, sOutput.get(0).get(56));
				formObject.setValue(BR_LINE_MAN_NAME_STMP,
						sOutput.get(0).get(57));
				formObject.setValue(BR_BUSN_UNIT_HEAD, sOutput.get(0).get(58));
				formObject.setValue(RA_ADDTNL_CMNT, sOutput.get(0).get(59));
				formObject
						.addItemInCombo(GI_EXST_SINCE, sOutput.get(0).get(60));
				formObject.setValue(GI_EXST_SINCE, sOutput.get(0).get(60));
				formObject.addItemInCombo(GI_DATE_KYC_PREP,
						sOutput.get(0).get(61));
				formObject.setValue(GI_DATE_KYC_PREP, sOutput.get(0).get(61));
				formObject.addItemInCombo(ED_DATE_OF_JOING,
						sOutput.get(0).get(62));
				formObject.setValue(ED_DATE_OF_JOING, sOutput.get(0).get(62));
				formObject.setValue(PROFESION, sOutput.get(0).get(64));
				formObject.setValue(EMPNAME, sOutput.get(0).get(65));
				formObject.setValue(ED_SET_FLG, sOutput.get(0).get(67));
				formObject.setValue(EMP_PH_CODE, sOutput.get(0).get(68));
				formObject.setValue(PD_ANY_CHNG_CUST_INFO,
						sOutput.get(0).get(69));
				formObject.setValue(PD_CUSTSEGMENT2, sOutput.get(0).get(70));
				formObject.setValue(CNTRY_OF_BIRTH, sOutput.get(0).get(71));
				formObject.setValue(RA_PRPSE_TAX_EVSN, sOutput.get(0).get(72));
				formObject.setValue(SMS_FLAG, sOutput.get(0).get(87));
				formObject.setValue(IB_FLAG, sOutput.get(0).get(88));
				formObject.setValue(IVR_FLAG, sOutput.get(0).get(89));
				formObject
						.setValue(STAFF_FLAG_EXISTING, sOutput.get(0).get(90));
				formObject.setValue(ESTATEMENT_REGISTERED,
						sOutput.get(0).get(91));
				formObject.setValue(CHEQUEBOOK_BLOCK, sOutput.get(0).get(92));
				formObject.setValue(SIGNATUREPRESENTFLAG, sOutput.get(0)
						.get(93));
				formObject.setValue(PHOTOPRESENTFLAG, sOutput.get(0).get(94));
				formObject.setValue(CUSTOMER_OPEN_DATE, sOutput.get(0).get(95));
				formObject.setValue(TOUCHPOINTS, sOutput.get(0).get(96));
				formObject.setValue(MIB_FLAG, sOutput.get(0).get(97));
				// FATCA FIELDS
				formObject.setValue(POACOMBO, sOutput.get(0).get(98));
				formObject.setValue(INDICIACOMBO, sOutput.get(0).get(99));
				formObject.setValue(US_INDICIA_MDM, sOutput.get(0).get(104));
				formObject.setValue(COMBODOC, sOutput.get(0).get(100));
				formObject.setValue(FATCAOPTION, sOutput.get(0).get(107));
				formObject.addItemInCombo(DATEPICKERCUST,
						sOutput.get(0).get(101));
				formObject.setValue(DATEPICKERCUST, sOutput.get(0).get(101));
				formObject
						.addItemInCombo(DATEPICKERW8, sOutput.get(0).get(102));
				formObject.setValue(DATEPICKERW8, sOutput.get(0).get(102));
				formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, sOutput.get(0)
						.get(103));
				formObject.setValue(FATCAMAIN, sOutput.get(0).get(105));
				formObject.setValue(FATCAMINI, sOutput.get(0).get(106));
				formObject.setValue(HD_THREE, sOutput.get(0).get(84));
			}
			// FATCA Fields
			if (sOutput.size() == 0) {
				sQuery = "SELECT IS_VVIP_CUSTOMER,EMPLOYEE_TYPE, IS_UAE_RESIDENT,SIGN_STYLE,PURPOSE_TAX,PEP,HAWALA,"
						+ "DEALS_ARMAMENT,IS_HOLDING_GREENCARD,IS_US_RESIDENT,IS_US_TIN_PRESENT,BIRTH_COUNTRY,"
						+ "IS_US_TAX_LIABLE,IS_US_CLASSIFICATION,SPECIAL_CATAGORY,EMP_STATUS,CURR_RELATION_TYPE,"
						+ "EMP_POSITION,EMP_NO_YRS_BIZ,EMP_NATURE_OF_BUSINESS,INVEST_RETURN_AED,INHERITENCE_AED,"
						+ "REAL_INCOME,ASSET_SALE,OTHER_INCOME,IS_INVEST_AED,IS_INHERITENCE_AED,IS_REAL_INCOME,"
						+ "IS_ASSET_SALE, IS_OTHERS_INCOME,ACC_RELATIONSHIP_PURPOSE FROM USR_0_CUST_WMS "
						+ "WHERE CUST_ID= '" + sCID + "'";
				logInfo("populateRiskData", "sQuery 2---" + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("populateRiskData", "sOutput 2---" + sOutput);
				if (sOutput.size() > 0) {
					formObject.setValue(ED_LEN_OF_SERVCE, sOutput.get(0)
							.get(18));
					formObject.setValue(CNTRY_OF_BIRTH, sOutput.get(0).get(11));
					formObject.setValue(RA_PRPSE_TAX_EVSN, sOutput.get(0)
							.get(4));
					formObject.setValue(RA_IS_UAE_RESIDENT,
							sOutput.get(0).get(2));// newly added
					formObject.setValue(RA_IS_CUST_DEALNG_ARMAMNT,
							sOutput.get(0).get(7));
					formObject.setValue(RA_IS_CUST_PEP, sOutput.get(0).get(5));
					formObject.setValue(RA_IS_CUST_DEALNG_HAWALA, sOutput
							.get(0).get(6));
					formObject.setValue(FAT_US_PERSON, sOutput.get(0).get(8));
					formObject.setValue(FAT_LIABLE_TO_PAY_TAX, sOutput.get(0)
							.get(12));// newly added
					formObject.setValue(FAT_SSN, sOutput.get(0).get(10));// newly
																			// added
					formObject.setValue(FAT_CUST_CLASSIFICATION, sOutput.get(0)
							.get(13));// newly added
					formObject.setValue(CRS_RES_PERM_ADRS_US, sOutput.get(0)
							.get(9));// newly added
					formObject.setValue(GI_IS_CUST_VIP, sOutput.get(0).get(0));
					// formObject.setValue(HD_THREE,getTagValues(sOutput,"OVERALL_RISK_DDE"));
					formObject.setValue(SPECIAL_CAT, sOutput.get(0).get(14));
					formObject.setValue(EMP_STATUS, sOutput.get(0).get(15));
					formObject.setValue(ED_EMP_TYPE, sOutput.get(0).get(1));
					formObject.setValue(SIGN_STYLE1, sOutput.get(0).get(3));
					formObject.setValue(ED_NATURE_OF_BUSNS,
							sOutput.get(0).get(19));
					// formObject.setValue(ED_ANNUAL_INC,
					// sOutput.get(0).get(18));
					formObject.setValue(ED_LEN_OF_SERVCE, sOutput.get(0)
							.get(18));
					formObject.setValue(ED_POSITN_DESGNT, sOutput.get(0)
							.get(17));
					formObject.setValue(ED_INVSTMNT_RETN_AED, sOutput.get(0)
							.get(20));
					formObject.setValue(ED_INHT_AED, sOutput.get(0).get(21));
					formObject
							.setValue(ED_REAL_INC_AED, sOutput.get(0).get(22));
					formObject
							.setValue(ED_SALE_OF_ASST, sOutput.get(0).get(23));
					formObject.setValue(ED_OTHERS, sOutput.get(0).get(24));
					formObject.setValue(ED_CB_INVSTMNT_RETN_AED, sOutput.get(0)
							.get(25));
					formObject.setValue(ED_CB_INHT_AED, sOutput.get(0).get(26));
					formObject.setValue(ED_CB_REAL_INC_AED,
							sOutput.get(0).get(27));
					formObject.setValue(ED_CB_SALE_OF_ASST,
							sOutput.get(0).get(28));
					formObject.setValue(ED_CB_OTHERS, sOutput.get(0).get(29));
					formObject.setValue(GI_PURPOSE_ACC_REL,
							sOutput.get(0).get(30));
				}
			} else {
				logInfo("populateRiskData", "sOutput.get(0).get(79): "
						+ sOutput.get(0).get(79));
				formObject.setValue(CNTRY_OF_BIRTH, sOutput.get(0).get(71));
				formObject.setValue(RA_PRPSE_TAX_EVSN, sOutput.get(0).get(72));
				formObject.setValue(RA_IS_UAE_RESIDENT, sOutput.get(0).get(74));// newly
																				// added
				formObject.setValue(RA_IS_CUST_DEALNG_ARMAMNT, sOutput.get(0)
						.get(75));
				formObject.setValue(RA_IS_CUST_PEP, sOutput.get(0).get(76));
				formObject.setValue(RA_IS_CUST_DEALNG_HAWALA, sOutput.get(0)
						.get(77));
				formObject.setValue(FAT_US_PERSON, sOutput.get(0).get(78));
				formObject.setValue(FAT_LIABLE_TO_PAY_TAX,
						sOutput.get(0).get(79));// newly added
				formObject.setValue(FAT_SSN, sOutput.get(0).get(80));// newly
																		// added
				formObject.setValue(FAT_CUST_CLASSIFICATION, sOutput.get(0)
						.get(81));// newly added
				formObject.setValue(CRS_RES_PERM_ADRS_US, sOutput.get(0)
						.get(82));// newly added
				formObject.setValue(GI_IS_CUST_VIP, sOutput.get(0).get(83));
				// formObject.setValue(HD_THREE,getTagValues(sOutput,"OVERALL_RISK_DDE"));
				formObject.setValue(SPECIAL_CAT, sOutput.get(0).get(85));
				formObject.setValue(EMP_STATUS, sOutput.get(0).get(86));
				formObject.setValue(ED_EMP_TYPE, sOutput.get(0).get(66));
				formObject.setValue(SIGN_STYLE1, sOutput.get(0).get(73));
				formObject.setValue(ED_NATURE_OF_BUSNS, sOutput.get(0).get(28));
				logInfo("populateRiskData",
						"incsahil sOutput.get(0).get(11)---"
								+ sOutput.get(0).get(11));
				formObject.setValue(ED_ANNUAL_INC, sOutput.get(0).get(15));
				formObject.setValue(ED_POSITN_DESGNT, sOutput.get(0).get(10));
				formObject.setValue(ED_INVSTMNT_RETN_AED, sOutput.get(0)
						.get(23));
				formObject.setValue(ED_INHT_AED, sOutput.get(0).get(24));
				formObject.setValue(ED_REAL_INC_AED, sOutput.get(0).get(25));
				formObject.setValue(ED_SALE_OF_ASST, sOutput.get(0).get(26));
				formObject.setValue(ED_OTHERS, sOutput.get(0).get(27));
				formObject.setValue(ED_CB_INVSTMNT_RETN_AED, sOutput.get(0)
						.get(17));
				formObject.setValue(ED_CB_INHT_AED, sOutput.get(0).get(18));
				formObject.setValue(ED_CB_REAL_INC_AED, sOutput.get(0).get(19));
				formObject.setValue(ED_CB_SALE_OF_ASST, sOutput.get(0).get(20));
				formObject.setValue(ED_CB_OTHERS, sOutput.get(0).get(21));
				formObject.setValue(GI_PURPOSE_ACC_REL, sOutput.get(0).get(63));
			}
		} catch (Exception e) {
			logError("populateRiskData", e);
			;
		}
	}

	public String returnVisaStatus() {
		logInfo("returnVisaStatus",
				"INSIDE VISA STATUS: "
						+ getFinalData(
								formObject.getValue(CHECKBOX_VISA_STATUS_FCR)
										.toString(),
								formObject.getValue(CHECKBOX_VISA_STATUS_EIDA)
										.toString(),
								formObject
										.getValue(CHECKBOX_VISA_STATUS_MANUAL)
										.toString(),
								formObject.getValue(FCR_VISASTATUS).toString(),
								formObject.getValue(EIDA_VISASTATUS).toString(),
								formObject.getValue(MANUAL_VISASTATUS)
										.toString()));
		return getFinalData(formObject.getValue(CHECKBOX_VISA_STATUS_FCR)
				.toString(), formObject.getValue(CHECKBOX_VISA_STATUS_EIDA)
				.toString(), formObject.getValue(CHECKBOX_VISA_STATUS_MANUAL)
				.toString(), formObject.getValue(FCR_VISASTATUS).toString(),
				formObject.getValue(EIDA_VISASTATUS).toString(), formObject
						.getValue(MANUAL_VISASTATUS).toString());
	}

	public String getFinalData(String sFCRCBControl, String sEIDACBControl,
			String sManualCBControl, String sFCRValue, String sEIDAValue,
			String sManualValue) {
		if (TRUE.equalsIgnoreCase(sFCRCBControl)) {
			if (!sFCRValue.equalsIgnoreCase("")) {
				return sFCRValue;
			}
		} else if (TRUE.equalsIgnoreCase(sEIDACBControl)) {
			if (!sEIDAValue.equalsIgnoreCase("")) {
				return sEIDAValue;
			}
		} else if (TRUE.equalsIgnoreCase(sManualCBControl)) {
			if (!sManualValue.equalsIgnoreCase("")) {
				return sManualValue;
			}
		}
		return "";
	}

	public void populateKYCData() {
		logInfo("populateKYCData", "In PopulateKYCData");
		int iSelectedRow = 0;
		String sCustNo = "";
		try {
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			logInfo("populateKYCData", "sCustNo"+ sCustNo);
			String sCID = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 2);
			String sQuery = "SELECT ACC_COVERED_IN_FORM,EMP_PROFESSION_NAME_OTHER,EMP_OTHERS,EMP_ID, EMP_CITY_CODE,"
					+ "EMP_PHONE,EMP_SAL,EMP_ANNUAL_INCOME,SALARY_AED,MARKET_VALUE_NETWORTH,MONTHLY_INC_NETWORTH,"
					+ "STAFF_MET_CUSTOMER,LINE_MANAGER_STAFF,UNIT_HEAD_PEP,UNIT_HEAD_INCREASED_RISK,ADD_COMMENTS_DDE,"
					+ "NO_YEARS_UAE,OWNERSHIP_PERCENTAGE,NO_BRANCH,COMP_WEBSITE,PURPOSE_CROSS_BORDER_PAYMENT,"
					+ "NO_CROSS_BORDER_PAY,VALUE_CROSS_BORDER_PAY,COUNTRIES_PAYMENT,BANKING_IN_UAE,PEP_LIST,"
					+ "SRC_OF_WEALTH,SOURCE_OF_FUNDS,SALARY_TRANSFER,DEALS_IN_WMD,FINANCIAL_BROKERS,NOTARY_PUBLIC,"
					// +
					// "EMP_COUNTRY,EMP_STREET,EMP_CITY,EMP_POBOX,EMP_OTHER_CITY,EMP_STATE,EMP_OTHER_STATE "
					// + "FROM USR_0_CUST_TXN " //FB
					+ "EMP_COUNTRY,EMP_STREET,EMP_CITY,EMP_POBOX,EMP_OTHER_CITY,EMP_STATE,EMP_OTHER_STATE,"
					+ "OTHER_PERK_ALLOWANCES_AED,"
					+ "ADDITIONAL_SOURCES_INCOME_AED,EST_TOTAL_INCOME_PER_ANNUM,SOCIAL_MEDIA_INFLUNCER,"
					+ "CHANNELINDICATOR,DUAL_NATIONALITY,ACC_IN_ANTHR_BNK_UAE,ACC_RELATIONSHIP_PURPOSE,PRIMARYSRCCTRY,"
					+ "IS_UAE_RESIDENT,PEP,ACCOPENPURPOSE,POA_NATIONALITY,POA_RESIDENCY" //Shivanshu ATP-455
					+ " FROM USR_0_CUST_TXN " //CHANNELINDICATOR,DUAL_NATIONALITY,ACC_IN_ANTHR_BNK_UAE,ACC_RELATIONSHIP_PURPOSE
					+ "WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '"
					+ sCustNo + "'";
			logInfo("populateKYCData", "sQuery###"+ sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				formObject.setValue(GI_ACC_NO_COVERED, sOutput.get(0).get(0));
				formObject.setValue(ED_OTHER, sOutput.get(0).get(1));
				formObject.setValue(ED_EMPNAME, sOutput.get(0).get(2));
				formObject.setValue(ED_EMPLYID, sOutput.get(0).get(3));
				formObject.setValue(ED_PHNE_NO, sOutput.get(0).get(4));
				formObject.setValue("TEXT75", sOutput.get(0).get(5));
				formObject.setValue(ED_MONTHLY_INCM, sOutput.get(0).get(6));
				logInfo("populateKYCData", "incsahil sOutput.get(0).get(7)"
						+ sOutput.get(0).get(7));
				formObject.setValue(ED_ANNUAL_INC, sOutput.get(0).get(7));
				formObject.setValue(ED_SAL_AED, sOutput.get(0).get(8));
				formObject.setValue("TEXT97", sOutput.get(0).get(9));
				formObject.setValue("TEXT98", sOutput.get(0).get(10));
				formObject.setValue("TEXT99", sOutput.get(0).get(11));
				formObject.setValue("TEXT88", sOutput.get(0).get(12));
				formObject.setValue("TEXT87", sOutput.get(0).get(13));
				formObject.setValue("TEXT91", sOutput.get(0).get(14));
				formObject.setValue(RA_ADDTNL_CMNT, sOutput.get(0).get(15));
				formObject.setValue(GI_YEARS_IN_UAE, sOutput.get(0).get(16));
				formObject.setValue(ED_PERC_OF_OWNRSHP, sOutput.get(0).get(17));
				formObject.setValue(ED_NO_UAE_OVRS_BRNCH, sOutput.get(0)
						.get(18));
				formObject.setValue(ED_COMP_WEBSITE, sOutput.get(0).get(19));
				formObject.setValue(ED_PURPSE_CRS_BRDR_PAYMENT, sOutput.get(0)
						.get(20));
				formObject.setValue(ED_ANTCPATD_CRS_BRDER_PYMT, sOutput.get(0)
						.get(21));
				formObject.setValue(ED_ANTCPATD_MNTHVAL_BRDER_PYMT, sOutput
						.get(0).get(22));
				formObject.setValue(ED_CNTRY_PYMT_RECV, sOutput.get(0).get(23));
				formObject.setValue(RA_RSN_BNKNG_UAE, sOutput.get(0).get(24));
				formObject.setValue(RA_LIST_OF_CUST_PEP, sOutput.get(0).get(25));
//				formObject.setValue(RA_CUST_SRC_WEALTH, sOutput.get(0).get(26));   --- Comment For AO Source of Wealth Multiple Dropdown
				formObject.setValue(AO_INCOME_SRC, sOutput.get(0).get(27));
				formObject.setValue(SALARY_TRANSFER, sOutput.get(0).get(28));
				formObject.setValue(DEALS_IN_WMD, sOutput.get(0).get(29));
				formObject.setValue(FINANCIAL_BROKERS, sOutput.get(0).get(30));
				formObject.setValue(NOTARY_PUBLIC, sOutput.get(0).get(31));
				formObject.setValue(SOCIAL_MEDIA_INFLUNCER,
						sOutput.get(0).get(42));
				formObject.setValue(EMP_COUNTRY, sOutput.get(0).get(32));
				formObject.setValue(EMP_STREET, sOutput.get(0).get(33));
				formObject.setValue(EMP_CITY, sOutput.get(0).get(34));
				formObject.setValue(EMP_PO_BOX, sOutput.get(0).get(35));
				formObject.setValue(EMP_CITY_OTHERS, sOutput.get(0).get(36));
				formObject.setValue(EMP_STATE, sOutput.get(0).get(37));
				formObject.setValue(EMP_STATE_OTHERS, sOutput.get(0).get(38));
				formObject.setValue(OTHER_PERK_ALLOWANCES_AED, sOutput.get(0)
						.get(39));// FB
				/*
				 * formObject.setValue(ADDITIONAL_SOURCES_INCOME_AED, sOutput.get(0).get(40));
				 */
				formObject.setValue(EST_TOTAL_INCOME_PER_ANNUM, sOutput.get(0)
						.get(41));
				//Jamshed
				formObject.setValue(CHANNEL_RISK_AO, sOutput.get(0).get(43));
				formObject.setValue(DUAL_NATIONALITY, sOutput.get(0).get(44));
				formObject.setValue(ACC_IN_ANTHR_BNK_UAE, sOutput.get(0).get(45));
				formObject.setValue(GI_PURPOSE_ACC_REL, sOutput.get(0).get(46));
				formObject.setValue(PRIMARY_SRC_CTRY, sOutput.get(0).get(47));
				formObject.setValue(RESIDENCY_STATUS, sOutput.get(0).get(48));
				formObject.setValue(ARE_U_PEP, sOutput.get(0).get(49));
				formObject.setValue("Others", sOutput.get(0).get(50));
				formObject.setValue(POA_NATIONALITY, sOutput.get(0).get(51));
				formObject.setValue(POA_RESIDENCY, sOutput.get(0).get(52)); // Shivanshu ATP-455

				sQuery = "SELECT EXISTING_SINCE,KYC_PREPARE_DATE,ACC_RELATIONSHIP_PURPOSE,EMP_PROFESSION_NAME,EMP_NAME,"
						+ "EMPLOYEE_TYPE, STAFF_FLAG,EMP_DOJ,EMP_COUNTRY_CODE,IS_CUST_DETAIL_CHANGE,IS_TML,IS_NON_TML,"
						+ "IS_SALARY_AED,IS_INVEST_AED,IS_INHERITENCE_AED,IS_REAL_INCOME,IS_ASSET_SALE,IS_OTHERS_INCOME,"
						+ "SPECIAL_CATAGORY,EMP_STATUS,DETAILS_REAL_ESTATE,DETAILS_INVESTMENT,DETAILS_CASH_EQUIVALENT,"
						+ "DETAILS_ESTIMETED_NETWORTH,MARKET_VALUE_ESTATE,MARKET_VALUE_INVESTMENT,MARKET_VALUE_CASH,"
						+ "MONTHLY_INC_ESTATE,MONTHLY_INC_INVESTMENT,MONTHLY_INC_CASH,BANK_NAME_1,BANK_NAME_2,BANK_NAME_3,"
						+ "BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,MONTHLY_DEPOSIT_CASH,MONTHLY_DEPOSIT_CHEQUE,"
						+ "MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH,MONTHLY_WITHDRAWL_CHEQUE,"
						+ "MONTHLY_WITHDRAWL_TRANSFER,FINANCIAL_ACT_COUNTRIES,INTERNATIONAL_ACT_NATURE,EMP_POSITION,"
						+ "EMP_NO_YRS_BIZ,EMP_NATURE_OF_BUSINESS,INVEST_RETURN_AED,INHERITENCE_AED,REAL_INCOME,ASSET_SALE,"
						+ "OTHER_INCOME,IS_CROSS_BORDER_PAYMENT,IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,"
						+ "IS_GEN_TRADE_COMP,IS_STONE_DEALER,IS_COMMODITY_BROKER,IS_REAL_ESTATE_BROKER,IS_SELF_EMPLOYED,"
						+ "IS_SELF_EMPLOYED_OTHER,SELF_EMPLOYED_OTHER,RES_EIDA,NIGEXCEPTIONMAKER,NIGEXCEPTIONCHECKKER,"
						+ "NIGEXCEPTIONCPDCHECKER,NIGEXCEPTIONCPDMAKER,"
						+ "CHANNELINDICATOR,DUAL_NATIONALITY,ACC_IN_ANTHR_BNK_UAE,PEP,ACCOPENPURPOSE,POA_NATIONALITY,POA_RESIDENCY" //Shivanshu ATP-455
						+ " FROM USR_0_CUST_TXN " //CHANNELINDICATOR,DUAL_NATIONALITY,ACC_IN_ANTHR_BNK_UAE Jamshed
						+ "WHERE WI_NAME= '"
						+ sWorkitemId
						+ "' AND CUST_SNO= '" + sCustNo + "'";
				logInfo("populateKYCData", "sQuery---" + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("populateKYCData", "sOutput---" + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					formObject.setValue(PROFESION, sOutput.get(0).get(3));
					formObject.addItemInCombo(GI_EXST_SINCE, sOutput.get(0)
							.get(0));
					formObject.setValue(GI_EXST_SINCE, sOutput.get(0).get(0));
					formObject.addItemInCombo(GI_DATE_KYC_PREP, sOutput.get(0).get(1));
					formObject.setValue(GI_DATE_KYC_PREP, sOutput.get(0).get(1));
					formObject.addItemInCombo(ED_DATE_OF_JOING, sOutput.get(0)
							.get(7));
					formObject
							.setValue(ED_DATE_OF_JOING, sOutput.get(0).get(7));
					formObject.setValue(EMPNAME, sOutput.get(0).get(4));
					formObject.setValue(ED_EMP_TYPE, sOutput.get(0).get(5));
					formObject.setValue(ED_SET_FLG, sOutput.get(0).get(6));
					formObject.setValue(EMP_PH_CODE, sOutput.get(0).get(8));
					formObject.setValue(PD_ANY_CHNG_CUST_INFO, sOutput.get(0)
							.get(9));
					formObject.setValue(ED_CB_TML, sOutput.get(0).get(10));
					formObject.setValue(ED_CB_NON_TML, sOutput.get(0).get(11));
					formObject.setValue(ED_CB_SAL_AED, sOutput.get(0).get(12));
					formObject.setValue(SPECIAL_CAT, sOutput.get(0).get(18));
					formObject.setValue(EMP_STATUS, sOutput.get(0).get(19));
					formObject.setValue(ED_CUST_CRS_BRDR_PAYMENT, sOutput
							.get(0).get(52));
					formObject.setValue(RA_IS_CUST_WRKNG_UAE, sOutput.get(0)
							.get(53));
					formObject.setValue(RA_IS_CUST_WRKNG_NON_UAE, sOutput
							.get(0).get(54));
					formObject.setValue(RA_CB_GEN_TRDNG_CMPNY, sOutput.get(0)
							.get(55));
					formObject.setValue(RA_CB_PRECIOUS_STONE_DEALER, sOutput
							.get(0).get(56));
					formObject.setValue(RA_CB_BULLN_COMMDTY_BROKR,
							sOutput.get(0).get(57));
					formObject.setValue(RA_CB_REAL_STATE_BROKR, sOutput.get(0)
							.get(58));
					formObject.setValue(RA_CB_USD_AUTO_DEALER, sOutput.get(0)
							.get(59));
					formObject.setValue(RA_CB_OTHERS, sOutput.get(0).get(60));
					formObject.setValue(BN_OTHERS, sOutput.get(0).get(61));
					formObject.setValue(DRP_RESEIDA, sOutput.get(0).get(62));
					formObject.setValue(NIG_MAKER, sOutput.get(0).get(63));
					formObject.setValue(NIG_CHECKER, sOutput.get(0).get(64));
					formObject.setValue(NIG_CPDMAKER, sOutput.get(0).get(66));
					formObject.setValue(NIG_CPDCHECKER, sOutput.get(0).get(65));
					//Jamshed
					formObject.setValue(CHANNEL_RISK_AO, sOutput.get(0).get(67));
					formObject.setValue(DUAL_NATIONALITY, sOutput.get(0).get(68));
					formObject.setValue(ACC_IN_ANTHR_BNK_UAE, sOutput.get(0).get(69));
					formObject.setValue(ARE_U_PEP, sOutput.get(0).get(70));
					formObject.setValue(GI_PURPOSE_ACC_REL, sOutput.get(0).get(2));
					formObject.setValue("Others", sOutput.get(0).get(71));
					formObject.setValue(POA_NATIONALITY, sOutput.get(0).get(72));
                                        formObject.setValue(POA_RESIDENCY, sOutput.get(0).get(73)); //Shivanshu ATP-455

				}
			} else {
				sQuery = "SELECT DETAILS_REAL_ESTATE,DETAILS_INVESTMENT,DETAILS_CASH_EQUIVALENT,"
						+ "DETAILS_ESTIMETED_NETWORTH,MARKET_VALUE_ESTATE,MARKET_VALUE_INVESTMENT,MARKET_VALUE_CASH,"
						+ "MONTHLY_INC_ESTATE,MONTHLY_INC_INVESTMENT,MONTHLY_INC_CASH,BANK_NAME_1,BANK_NAME_2,"
						+ "BANK_NAME_3,BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,MONTHLY_DEPOSIT_CASH,"
						+ "MONTHLY_DEPOSIT_CHEQUE,MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH,"
						+ "MONTHLY_WITHDRAWL_CHEQUE,MONTHLY_WITHDRAWL_TRANSFER,FINANCIAL_ACT_COUNTRIES,"
						+ "INTERNATIONAL_ACT_NATURE,EMP_POSITION,EMP_NO_YRS_BIZ,EMP_NATURE_OF_BUSINESS,"
						+ "INVEST_RETURN_AED,INHERITENCE_AED,REAL_INCOME,ASSET_SALE,OTHER_INCOME,IS_INVEST_AED,"
						+ "IS_INHERITENCE_AED,IS_REAL_INCOME,IS_ASSET_SALE,IS_OTHERS_INCOME,"
						+ "ACC_RELATIONSHIP_PURPOSE FROM USR_0_CUST_WMS WHERE CUST_ID= '"
						+ sCID + "'";
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("populateKYCData", "else sQuery---" + sQuery);
				logInfo("populateKYCData", "else sOutput---" + sOutput);
				if (null != sOutput && sOutput.size() > 0
						&& null != sOutput.get(0)) {
					formObject.setValue("TEXT113", sOutput.get(0).get(0));
					formObject.setValue("TEXT106", sOutput.get(0).get(1));
					formObject.setValue("TEXT101", sOutput.get(0).get(2));
					formObject.setValue("TEXT96", sOutput.get(0).get(3));
					formObject.setValue("TEXT112", sOutput.get(0).get(4));
					formObject.setValue("TEXT107", sOutput.get(0).get(5));
					formObject.setValue("TEXT102", sOutput.get(0).get(6));
					formObject.setValue("TEXT111", sOutput.get(0).get(7));
					formObject.setValue("TEXT108", sOutput.get(0).get(8));
					formObject.setValue("TEXT103", sOutput.get(0).get(9));
					formObject.setValue(BR_BANK_NAME_1, sOutput.get(0).get(10));
					formObject.setValue(BR_BANK_NAME_2, sOutput.get(0).get(11));
					formObject.setValue(BR_BANK_NAME_3, sOutput.get(0).get(12));
					formObject
							.setValue(BR_CITY_CNTRY_1, sOutput.get(0).get(13));
					formObject
							.setValue(BR_CITY_CNTRY_2, sOutput.get(0).get(14));
					formObject
							.setValue(BR_CITY_CNTRY_3, sOutput.get(0).get(15));
					formObject.setValue(FERS_EMD_CASH_ATM,
							sOutput.get(0).get(16));
					formObject.setValue(FERS_EMD_CHQ_DRFT,
							sOutput.get(0).get(17));
					formObject.setValue(FERS_EMD_TRNSFR_ONLN, sOutput.get(0)
							.get(18));
					formObject.setValue(FERS_EMW_CASH_ATM,
							sOutput.get(0).get(19));
					formObject.setValue(FERS_EMW_CHQ_DRFT,
							sOutput.get(0).get(20));
					formObject.setValue(FERS_EMW_TRNSFR_ONLN, sOutput.get(0)
							.get(21));
					formObject.setValue(FERS_GEO_CNTRY_FINANCL, sOutput.get(0)
							.get(22));
					formObject.setValue(FERS_NATRE_ACTVTY_FT, sOutput.get(0)
							.get(23));
					formObject.setValue(ED_POSITN_DESGNT, sOutput.get(0)
							.get(24));
					formObject.setValue(ED_LEN_OF_SERVCE, sOutput.get(0)
							.get(25));
					formObject.setValue(ED_NATURE_OF_BUSNS,
							sOutput.get(0).get(26));
					formObject.setValue(ED_INVSTMNT_RETN_AED, sOutput.get(0)
							.get(27));
					formObject.setValue(ED_INHT_AED, sOutput.get(0).get(28));
					formObject
							.setValue(ED_REAL_INC_AED, sOutput.get(0).get(29));
					formObject
							.setValue(ED_SALE_OF_ASST, sOutput.get(0).get(30));
					formObject.setValue(ED_OTHERS, sOutput.get(0).get(31));
					formObject.setValue(ED_CB_INVSTMNT_RETN_AED, sOutput.get(0)
							.get(32));
					formObject.setValue(ED_CB_INHT_AED, sOutput.get(0).get(33));
					formObject.setValue(ED_CB_REAL_INC_AED,
							sOutput.get(0).get(34));
					formObject.setValue(ED_CB_SALE_OF_ASST,
							sOutput.get(0).get(35));
					formObject.setValue(ED_CB_OTHERS, sOutput.get(0).get(36));
					formObject.setValue(GI_PURPOSE_ACC_REL,
							sOutput.get(0).get(37));
				}
			}
		} catch (Exception e) {
			logError("populateKYCData", e);
		}
	}

	public void manageManualCheckBoxes() {
		logInfo("CHANGE EVENT",
				"VALUE INSIDE "
						+ formObject.getValue(CHECKBOX_SELECTALL_MANUAL));
		if (TRUE.equalsIgnoreCase(formObject
				.getValue(CHECKBOX_SELECTALL_MANUAL).toString())) {
			logInfo("manageManualCheckBoxes", "In manageManualCheckBoxes");
			formObject.setValue(CHECKBOX_PREFIX_MANUAL, "true");
			formObject.setValue(CHECKBOX_FULLNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_SHORTNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_DOB_MANUAL, "true");
			formObject.setValue(CHECKBOX_PASSPORT_NO_MANUAL, "true");
			formObject.setValue(CHECKBOX_PASS_ISS_DT_MANUAL, "true");
			formObject.setValue(CHECKBOX_PASS_EXP_DT_MANUAL, "true");
			formObject.setValue("CHECK39", "true");
			formObject.setValue(CHECKBOX_NATIONALITY_MANUAL, "true");
			formObject.setValue(CHECKBOX_MOTHERSNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_CORR_POB_MANUAL, "true");
			formObject.setValue(CHECKBOX_CNTRY_OF_CORR_MANUAL, "true");
			formObject.setValue(CHECKBOX_COUNTRY_PER_RES_MANUAL, "true");
			formObject.setValue(CHECKBOX_TELE_MOB_MANUAL, "true");
			formObject.setValue(CHECKBOX_PROFESSION_MANUAL, "true");
			formObject.setValue(CHECKBOX_GENDER_MANUAL, "true");
			formObject.setValue(CHECKMANUAL, "true");
			formObject.setValue(CHECKBOX_FIRSTNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_LASTNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_PASSPORT_TYPE_MANUAL, "true");
			formObject.setValue(CHECKBOX_COB_MANUAL, "true");
			formObject.setValue(HD_SIX, "true");
			formObject.setValue(CHECKBOX_SHORTNAME_MANUAL, "true");
			formObject.setValue(CHECKBOX_VISA_STATUS_MANUAL, "true");
			String sQuery1 = "SELECT CORR_PO_BOX FROM USR_0_CUST_TXN WHERE WI_NAME='"
					+ sWorkitemId + "'";
			logInfo("manageManualCheckBoxes", "sQuery1: " + sQuery1);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery1);
			logInfo("manageManualCheckBoxes", "sOutput: " + sOutput);
			String sCorr_po_box1 = formObject.getValue(MANUAL_ADDRESS)
					.toString();
			String sLodgement_no = formObject.getValue(LODGEMENT_NO).toString();
			String sQuery3 = "SELECT POBOX FROM USR_0_CORR_ADDRESS_INFO WHERE LODGEMENT_REF_NO='"
					+ sLodgement_no + "'";
			sOutput = formObject.getDataFromDB(sQuery3);
			logInfo("manageManualCheckBoxes", "sOutput::" + sOutput);
			if (sOutput.size() > 0 && sOutput != null) {
				String sWeb_po_box = sOutput.get(0).get(0);
				logInfo("manageManualCheckBoxes", "sWeb_po_box......."
						+ sWeb_po_box);
				if (formObject.getValue(MANUAL_ADDRESS).toString().isEmpty()) {
					formObject
							.setValue(MANUAL_ADDRESS, "PO BOX " + sWeb_po_box);
				}
			}
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)) {
				setManualFieldsLock();
			}
		} else {
			formObject.setValue(CHECKBOX_PREFIX_MANUAL, "false");
			formObject.setValue(CHECKBOX_FULLNAME_MANUAL, "false");
			formObject.setValue(CHECKBOX_DOB_MANUAL, "false");
			formObject.setValue(CHECKBOX_PASSPORT_NO_MANUAL, "false");
			formObject.setValue(CHECKBOX_PASS_ISS_DT_MANUAL, "false");
			formObject.setValue(CHECKBOX_PASS_EXP_DT_MANUAL, "false");
			formObject.setValue("CHECK39", "false");
			formObject.setValue(CHECKBOX_VISA_NO_MANUAL, "false");
			formObject.setValue(CHECKBOX_VISA_ISSUE_DATE_MANUAL, "false");
			formObject.setValue(CHECKBOX_VISA_EXPIRY_DATE_MANUAL, "false");
			formObject.setValue(CHECKBOX_NATIONALITY_MANUAL, "false");
			formObject.setValue(CHECKBOX_MOTHERSNAME_MANUAL, "false");
			formObject.setValue(CHECKBOX_EIDANO_MANUAL, "false");
			formObject.setValue(CHECKBOX_CORR_POB_MANUAL, "false");
			formObject.setValue(CHECKBOX_CITY_MANUAL, "false");
			formObject.setValue(CHECKBOX_STATE_MANUAL, "false");
			formObject.setValue(CHECKBOX_CNTRY_OF_CORR_MANUAL, "false");
			formObject.setValue(CHECKBOX_COUNTRY_PER_RES_MANUAL, "false");
			formObject.setValue(CHECKBOX_TELE_RES_MANUAL, "false");
			formObject.setValue(CHECKBOX_TELE_MOB_MANUAL, "false");
			formObject.setValue(CHECKBOX_EMAIL_MANUAL, "false");
			formObject.setValue(CHECKBOX_PROFESSION_MANUAL, "false");
			formObject.setValue(CHECKBOX_GENDER_MANUAL, "false");
			formObject.setValue(CHECKBOX_EMP_NAME_MANUAL, "false");
			formObject.setValue(CHECKMANUAL, "false");
			formObject.setValue(MANUAL_ADDRESS, "PO BOX ");
			formObject.setValue(CHECKBOX_FIRSTNAME_MANUAL, "false");
			formObject.setValue(CHECKBOX_LASTNAME_MANUAL, "false");
			formObject.setValue(CHECKBOX_PASSPORT_TYPE_MANUAL, "false");
			formObject.setValue(CHECKBOX_COB_MANUAL, "false");
			formObject.setValue(HD_SIX, "false");
			formObject.setValue(CHECKBOX_SHORTNAME_MANUAL, "false");
			formObject.setValue(CHECKBOX_VISA_STATUS_MANUAL, "false");
			setManualFieldsLock();
		}
	}

	public void setManualFieldsLock() {
		try {
			logInfo("setManualFieldsLock", "INSIDE");
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PREFIX_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PREFIX, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PREFIX, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_VISA_STATUS_MANUAL).toString())) {
				formObject.setStyle(MANUAL_VISASTATUS, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_VISASTATUS, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_FIRSTNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_FIRSTNAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_FIRSTNAME, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_LASTNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_LASTNAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_LASTNAME, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_LASTNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_LASTNAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_LASTNAME, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PASSPORT_TYPE_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PASSTYPE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PASSTYPE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(CHECKBOX_COB_MANUAL)
					.toString())) {
				formObject.setStyle(MANUAL_COUNTRYBIRTH, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_COUNTRYBIRTH, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(CHECKBOX_DOB_MANUAL)
					.toString())) {
				formObject.setStyle(MANUAL_DOB, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_DOB, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PASSPORT_NO_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PASSPORTNO, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PASSPORTNO, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PASS_ISS_DT_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PASSPORTISSDATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PASSPORTISSDATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PASS_EXP_DT_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PASSPORTEXPDATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PASSPORTEXPDATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue("CHECK39")
					.toString())) {
				formObject.setStyle(PASSPORTEXPPLACE_MANUAL, DISABLE, TRUE);
			} else {
				formObject.setStyle(PASSPORTEXPPLACE_MANUAL, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_VISA_NO_MANUAL).toString())) {
				logInfo("setManualFieldsLock",
						"mohit13 if check3888888888ttttttttt");
				formObject.setStyle(MANUAL_VISANO, DISABLE, TRUE);
			} else {
				logInfo("setManualFieldsLock",
						"mohit13 else check3888888888ttttttttt");
				formObject.setStyle(MANUAL_VISANO, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_VISA_ISSUE_DATE_MANUAL).toString())) {
				formObject.setStyle(MANUAL_VISAISSDATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_VISAISSDATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_VISA_EXPIRY_DATE_MANUAL).toString())) {
				formObject.setStyle(MANUAL_VISAEXPDATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_VISAEXPDATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_MOTHERSNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_MOTHERNAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_MOTHERNAME, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_EIDANO_MANUAL).toString())) {
				formObject.setStyle(MANUAL_EIDANO, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_EIDANO, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_CORR_POB_MANUAL).toString())) {
				formObject.setStyle(MANUAL_ADDRESS, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_ADDRESS, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject
					.getValue(CHECKBOX_CITY_MANUAL).toString())) {
				formObject.setStyle(MANUAL_CITY, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_CITY, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_STATE_MANUAL).toString())) {
				formObject.setStyle(MANUAL_STATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_STATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_CNTRY_OF_CORR_MANUAL).toString())) {
				formObject.setStyle(MANUAL_CNTRY, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_CNTRY, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_COUNTRY_PER_RES_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PER_CNTRY, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PER_CNTRY, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_TELE_RES_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PH, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PH, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_TELE_MOB_MANUAL).toString())) {
				formObject.setStyle(MANUAL_MOBILE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_MOBILE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_EMAIL_MANUAL).toString())) {
				formObject.setStyle(MANUAL_EMAIL, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_EMAIL, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_PROFESSION_MANUAL).toString())) {
				formObject.setStyle(MANUAL_PROFESSION, DISABLE, TRUE);
				formObject.setStyle(BTNPROFESSION, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_PROFESSION, DISABLE, FALSE);
				formObject.setStyle(BTNPROFESSION, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_GENDER_MANUAL).toString())) {
				formObject.setStyle(MANUAL_GENDER, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_GENDER, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_EMP_NAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_EMPLYR_NAME, DISABLE, TRUE);
				formObject.setStyle("BTNEMLOYERNAME", DISABLE, TRUE);
			} else {
				formObject.setStyle("BTNEMLOYERNAME", DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_NATIONALITY_MANUAL).toString())) {
				formObject.setStyle(MANUAL_NATIONALITY, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_NATIONALITY, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(CHECKMANUAL)
					.toString())) {
				formObject.setStyle(MANUAL_RESIDENT, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_RESIDENT, DISABLE, FALSE);
			}
			// yamini
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_FULLNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_NAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_NAME, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_SHORTNAME_MANUAL).toString())) {
				formObject.setStyle(MANUAL_SHORTNAME, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_SHORTNAME, DISABLE, FALSE);
			}
			/*
			 * if(!TRUE.equalsIgnoreCase(formObject.getValue(CHECKBOX_EIDANO_MANUAL
			 * ).toString())) { logInfo("setManualFieldsLock",
			 * "disabling MANUAL_EIDANO"); formObject.setStyle(MANUAL_EIDANO,
			 * DISABLE, TRUE); } else { formObject.setStyle(MANUAL_EIDANO,
			 * DISABLE, FALSE); }
			 */
			if (!TRUE.equalsIgnoreCase(formObject.getValue(
					CHECKBOX_STATE_MANUAL).toString())) {
				formObject.setStyle(MANUAL_STATE, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_STATE, DISABLE, FALSE);
			}
			if (!TRUE.equalsIgnoreCase(formObject
					.getValue(CHECKBOX_CITY_MANUAL).toString())) {
				formObject.setStyle(MANUAL_CITY, DISABLE, TRUE);
			} else {
				formObject.setStyle(MANUAL_CITY, DISABLE, FALSE);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logInfo("setManualFieldsLock", e.toString());
		}
	}

	public void saveIndividualInfo() {
		logInfo("saveIndividualInfo", "INSIDE");
		long start_time = System.currentTimeMillis();
		int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		String custId = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String wmsId = formObject.getValue(WMS_ID).toString();
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String sSignUpdate = "";
		String sFinalShortName = getFinalDataComparison(CHECKBOX_SHORTNAME_FCR,
				CHECKBOX_SHORTNAME_EIDA, CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME, EIDA_SHORTNAME, MANUAL_SHORTNAME).trim();
		if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_DDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
			sSignUpdate = formObject.getValue(IS_SIGN_UPDATE).toString();
		}
		String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,CUST_MARITAL_STATUS,CUST_MARITAL_OTHERS,RELIGION,"
				+ "MAIDEN_NAME,CUST_SHORT_NAME,CURR_RELATION_TYPE,NEW_RELATION_TYPE,PROFESSION_CODE,CUST_SEG,"
				+ "EIDA_NO,PREFIX, CUST_FULL_NAME, CUST_DOB, NATIONALITY, GENDER, PREFIX_OTHER, "
				+ "DATE_ATTAINING_MAJORITY,IS_UPDATE_SIGN,RES_EIDA,EIDA_EXPIRY"; //Eida Expiry Date Column Added by Shivanshu ATP-377
		String value1 = "'"
				+ custId
				+ "'"
				+ (char) 25
				+ "'"
				+ wmsId
				+ "'"
				+ (char) 25
				+ "'"
				+ sWorkitemId
				+ "'"
				+ (char) 25
				+ "'"
				+ sCustNo
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(MARITAL_STATUS).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_MARITALSTATUSOTHER).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RELIGION)
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_MOTHERMAIDENNAME).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ sFinalShortName
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_CUSTRELTYPE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_NEWRELTYPE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PROF_CODE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_CUSTSEGMENT).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_EIDANO).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CUST_PREFIX).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_FULLNAME).toString()
				+ "'"
				+ (char) 25
				+ convertIntoDate(formObject.getValue(PD_DOB).toString())
				+ (char) 25
				+ "'"
				+ formObject.getValue(CUST_NATIONALITY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CUST_GENDER).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PD_OTHERS).toString()
				+ "'"
				+ (char) 25
				+ convertIntoDate(formObject.getValue(PD_DATEOFATTAININGMAT)
						.toString()) + (char) 25 + "'" + sSignUpdate + "'"
				+ (char) 25 + "'" + formObject.getValue(DRP_RESEIDA).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(EIDA_EXPIRY_DATE).toString() //Added by Shivanshu for ATP-337 Eida Expiry Date
				+ "'";
		logInfo("saveIndividualInfo", "Column: " + column1);
		logInfo("saveIndividualInfo", "Value: " + value1);
		insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
		long end_Time = System.currentTimeMillis();
		logInfo("saveIndividualInfo",
				"Diff time---" + Long.toString(end_Time - start_time));
	}

	public void saveIndividualContactInfo() {
		logInfo("saveIndividualContactInfo", "INSIDE");
		String sameAsResi = "";
		String sameAsPerm = "";
		String makaniResi = "";
		String makaniPerm = "";
		String otherCityResi = "";
		String otherCityPerm = "";
		/*
		 * if(ACTIVITY_DDE_CUST_INFO.equalsIgnoreCase(sActivityName) ||
		 * ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
		 * sameAsResi = RA_SAMEAS; sameAsPerm = PA_SAMEAS; makaniResi =
		 * CONTACT_DETAILS_MAKANI_NO; makaniPerm = RES_MAKANI; otherCityResi =
		 * OTHER_RES_CITY; otherCityPerm = OTHER_PERM_CITY; } else { sameAsResi
		 * = PA_SAMEAS; sameAsPerm = RA_SAMEAS; makaniResi = RES_MAKANI;
		 * makaniPerm = CONTACT_DETAILS_MAKANI_NO; otherCityResi =
		 * OTHER_RES_CITY; otherCityPerm = OTHER_PERM_CITY; }
		 */
		sameAsResi = RA_SAMEAS;
		sameAsPerm = PA_SAMEAS;
		makaniResi = CONTACT_DETAILS_MAKANI_NO;
		makaniPerm = RES_MAKANI;
		otherCityResi = OTHER_RES_CITY;
		otherCityPerm = OTHER_PERM_CITY;
		int iSelectedRow = 0;
		String cust_id = "";
		long start_time = System.currentTimeMillis();
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		cust_id = formObject.getTableCellValue(ACC_RELATION, iSelectedRow, 2);
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String corr_state_other = "";
		String sPermanentStateOther = "";
		/*
		 * if(ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
		 * corr_state_other =
		 * formObject.getValue(CPD_RISK_ASSESS_MARKS).toString(); // newly added
		 * //corr_state_other = formObject.getValue(CP_OTHERS).toString();
		 * sPermanentStateOther = formObject.getValue(RA_OTHERS).toString(); }
		 * else {
		 */
		corr_state_other = formObject.getValue(CP_OTHERS).toString();
		// corr_state_other =
		// formObject.getValue(CPD_RISK_ASSESS_MARKS).toString();// newly added
		sPermanentStateOther = formObject.getValue(PA_OTHERS).toString();
		// }
		String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,SAME_AS_PERMANENT,SAME_AS_RESIDENTIAL ,CORR_PO_BOX,CORR_FLOOR,"
				+ "CORR_STREET,CORR_EMAIL,CORR_CITY,CORR_STATE,CORR_OTHER,CORR_CNTRY,CORR_PHONE,CORR_OFF_PHONE,"
				+ " CORR_MOB,PER_BUILDING,PER_VILLA,PER_LANDMARK,PER_CITY,PER_STATE,PER_OTHER,PER_COUNTRY,RES_BUILDING,"
				+ "RES_VILLA,RES_LANDMARK,RES_CITY,RES_STATE,RES_OTHER,RES_CNTRY,PASS_NO, PASS_ISSUE_DATE, PASS_EXP_DATE,"
				+ "VISA_NO, VISA_ISSUE_DATE, VISA_EXP_DATE, VISA_STATUS,IS_SALARY_TRANSFER,IS_MORTAGAGE,IS_INSURANCE,IS_TRB,"
				+ "IS_OTHERS,IS_PREVILEGE_TP,IS_TRAVEL, IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT,IS_EXCELLENCY_TP,PROFIT_CENTER_CODE,"
				+ "RFERRED_BY,RM_CODE,RM_NAME,PROMO_CODE,EXELLENCY_CENTER,REFFER_STAFF_ID,IS_VVIP,OTHER_CORR_CITY,OTHER_RESI_CITY"
				+ ",OTHER_PERM_CITY,IS_BENEFIT_OTHER,BENEFIT_OTHER,corr_makani,per_makani,res_makani";
		String value1 = "'"
				+ cust_id
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(WMS_ID).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ sWorkitemId
				+ "'"
				+ (char) 25
				+ "'"
				+ sCustNo
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(sameAsResi).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(sameAsPerm).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_POBOXNO).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_FLOOR).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_STREET).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_EMAIL)
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_CITY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CORR_STATE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ corr_state_other
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CORR_CNTRY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_PHONENO).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_TELEOFFICE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(CP_MOBILE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RA_BUILDINGNAME).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RA_VILLAFLATNO).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RA_STREET).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RA_CITY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RES_STATE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RA_OTHERS).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(RES_CNTRY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PA_BUILDINGNAME).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PA_VILLAFLATNO).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PA_STREET).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PA_CITY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PERM_STATE).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ sPermanentStateOther
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(PERM_CNTRY).toString()
				+ "'"
				+ (char) 25
				+ "'"
				+ formObject.getValue(HD_PASSPORT_NO).toString()
				+ "'"
				+ (char) 25
				+ convertIntoDate(formObject.getValue(HD_PASS_ISS_DATE)
						.toString())
				+ (char) 25
				+ convertIntoDate(formObject.getValue(HD_PASS_EXP_DATE)
						.toString())
				+ (char) 25
				+ "'"
				+ formObject.getValue(HD_VISA_NO).toString()
				+ "'"
				+ (char) 25
				+ convertIntoDate(formObject.getValue(HD_VISA_ISSUE_DATE)
						.toString()) + (char) 25
				+ convertIntoDate(formObject.getValue(HD_EXP_DATE).toString())
				+ (char) 25 + "'" + returnVisaStatus() + "'" + (char) 25 + "'"
				+ formObject.getValue(IDS_CB_SAL_TRANSFER).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(IDS_CB_MORTGAGES).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(IDS_CB_INSURANCE).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_CB_TRB).toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(IDS_CB_OTHERS).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PC_CB_TP) + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PC_CB_TRAVEL) + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PC_CB_SPORT) + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PC_CB_SHOPPING)
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(IDS_PC_CB_ENTERTAINMENT) + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PC_BN_TP) + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_PROF_CENTER_CODE)
				+ "'" + (char) 25 + "'" + formObject.getValue(IDS_REF_BY_CUST)
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(RM_CODE).toString() + "'" + (char) 25
				+ "'"
				+ formObject.getValue(RM_NAME).toString().replace("'", "")
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(PRO_CODE).toString() + "'" + (char) 25
				+ "'" + formObject.getValue(EXCELLENCY_CNTR).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(REF_BY_STAFF).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(IDS_CB_VVIP).toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(OTHER_CORR_CITY).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(otherCityPerm) + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(otherCityResi).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(IDS_OTH_CB_OTHERS).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(IDS_BNFT_CB_OTHERS).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(COR_MAKANI).toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(makaniPerm).toString() + "'" + (char) 25
				+ "'" + formObject.getValue(makaniResi).toString() + "'";
		insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
		long end_Time = System.currentTimeMillis();
		log.info("Diff time in saveIndividualContactInfo Function---"
				+ Long.toString(end_Time - start_time));
	}

	/* sahil Changes */
	public void populatePrivateClientQuestions() { // PopulatePrivateClientQuestions()
		logInfo("PopulatePrivateClientQuestions",
				"Inside private client question section starts");
		List<List<String>> list;
		String concierge = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String squery2 = "SELECT SECRET_QUESTION,SECRET_ANSWER,CONCIERGE_MEMBER FROM USR_0_CUST_TXN "
					+ "WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND CUST_SNO='"
					+ iSelectedRow + "'";
			list = formObject.getDataFromDB(squery2);
			logInfo("populatePrivateClientQuestions squery2 data: ", ""
					+ formObject.getDataFromDB(squery2));
			if (list != null && !list.isEmpty()) {
				formObject.setValue(SECRET_QUESTION, list.get(0).get(0)
						.toString());
				formObject.setValue(SECRET_ANS, list.get(0).get(1).toString());
				concierge = list.get(0).get(2);
			}
			if (!concierge.isEmpty()) {
				if (concierge.equalsIgnoreCase("1")) {
					concierge = "Yes";
				} else if (concierge.equalsIgnoreCase("2")) {
					concierge = "No";
				}
			}
			formObject.setValue(CONCIERGE, concierge);
			logInfo("PopulatePrivateClientQuestions",
					"Inside private client question section ends");
		} catch (Exception e) {
			logError("PopulatePrivateClientQuestions", e);
		}
	}

	public void setCustomerRelation() {
		String sAccType = formObject.getValue(ACC_CLASS).toString();
		String sCurrentType = formObject.getValue(PD_CUSTRELTYPE).toString();
		if (sCurrentType.equalsIgnoreCase("")) {
			formObject.setValue(PD_NEWRELTYPE, sAccType);
		} else {
			if (sCurrentType.equalsIgnoreCase(sAccType)) {
				formObject.setValue(PD_NEWRELTYPE, sCurrentType);
			} else {
				formObject.setValue(PD_NEWRELTYPE, "Both");
			}
		}
	}

	public void saveKYCInfo() {
		try {
			logInfo("SaveKYCInfo", "SaveKYCInfo starts");
			long start_time = System.currentTimeMillis();
			logInfo("SaveKYCInfo", "In SaveKYCInfo----");
			int iSelectedRow = 0;
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String cust_id = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 2);
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,IS_CUST_DETAIL_CHANGE,ACC_COVERED_IN_FORM,EMP_PROFESSION_NAME_OTHER,EMP_OTHERS,"
					+ "EMP_ID,IS_TML,IS_NON_TML, EMP_POSITION,EMP_NO_YRS_BIZ,EMP_CITY_CODE,EMP_PHONE,EMP_SAL,EMP_ANNUAL_INCOME,IS_SALARY_AED,"
					+ "IS_INVEST_AED,IS_INHERITENCE_AED,IS_REAL_INCOME,IS_ASSET_SALE,IS_OTHERS_INCOME,SALARY_AED,INVEST_RETURN_AED,"
					+ "INHERITENCE_AED,REAL_INCOME,ASSET_SALE,OTHER_INCOME,EMP_NATURE_OF_BUSINESS,DETAILS_REAL_ESTATE,DETAILS_INVESTMENT,"
					+ "DETAILS_CASH_EQUIVALENT,DETAILS_ESTIMETED_NETWORTH,MARKET_VALUE_ESTATE,MARKET_VALUE_INVESTMENT,MARKET_VALUE_CASH,"
					+ "MARKET_VALUE_NETWORTH,MONTHLY_INC_ESTATE,MONTHLY_INC_INVESTMENT,MONTHLY_INC_CASH,MONTHLY_INC_NETWORTH,"
					+ "MONTHLY_DEPOSIT_CASH,MONTHLY_DEPOSIT_CHEQUE,MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH,MONTHLY_WITHDRAWL_CHEQUE,"
					+ "MONTHLY_WITHDRAWL_TRANSFER,FINANCIAL_ACT_COUNTRIES,INTERNATIONAL_ACT_NATURE,BANK_NAME_1,BANK_NAME_2,BANK_NAME_3,"
					+ "BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,STAFF_MET_CUSTOMER,LINE_MANAGER_STAFF,UNIT_HEAD_PEP,"
					+ "UNIT_HEAD_INCREASED_RISK,ADD_COMMENTS_DDE,EXISTING_SINCE,KYC_PREPARE_DATE,EMP_DOJ,ACC_RELATIONSHIP_PURPOSE,"
					+ "EMP_PROFESSION_NAME,EMP_NAME,EMPLOYEE_TYPE, STAFF_FLAG, EMP_COUNTRY_CODE,EIDA_PRESENT,Birth_country,PURPOSE_TAX,"
					+ "SIGN_STYLE,IS_UAE_RESIDENT, DEALS_ARMAMENT, PEP,HAWALA,IS_HOLDING_GREENCARD,IS_US_TAX_LIABLE,IS_US_TIN_PRESENT,"
					+ "IS_US_CLASSIFICATION,IS_US_RESIDENT, IS_VVIP_Customer,OVERALL_RISK_DDE,special_catagory,emp_status,SMS_FLAG,IB_FLAG,"
					+ "IVR_FLAG,STAFF_FLAG_EXISTING,ESTATEMENT_REGISTERED,CHEQUEBOOK_BLOCK,SIGNATUREPRESENTFLAG ,PHOTOPRESENTFLAG ,"
					+ "CUSTOMER_OPEN_DATE,TOUCHPOINTS,MIB_FLAG,NO_YEARS_UAE,OWNERSHIP_PERCENTAGE,NO_BRANCH,COMP_WEBSITE,"
					+ "PURPOSE_CROSS_BORDER_PAYMENT,NO_CROSS_BORDER_PAY,VALUE_CROSS_BORDER_PAY,COUNTRIES_PAYMENT,BANKING_IN_UAE,PEP_LIST,"
					+ "SRC_OF_WEALTH,IS_CROSS_BORDER_PAYMENT,IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,IS_GEN_TRADE_COMP,IS_STONE_DEALER,"
					+ "IS_COMMODITY_BROKER,IS_REAL_ESTATE_BROKER,IS_SELF_EMPLOYED,SOURCE_OF_FUNDS,IS_POA_US_PERSON,IS_US_INDICIA_FOUND,"
					+ "DOCUMENT_TO_BE_COLLECTED,CLASSIFICATION_DATE,W8_SIGNUP_DATE,CHANGE_IN_FATCA_3WAY_INPUTS,US_INDICIA_FOUND_WEBSERVICE,"
					+ "FATCAMAIN,FATCAMINI,FATCA_MAINTAIN_OPTION,IS_SELF_EMPLOYED_OTHER,SELF_EMPLOYED_OTHER,IS_BENEFIT_OTHER,BENEFIT_OTHER,"
					+ "NIGEXCEPTIONMAKER,NIGEXCEPTIONCHECKKER,SALARY_TRANSFER,DEALS_IN_WMD,FINANCIAL_BROKERS,NOTARY_PUBLIC,"
					+ "EMP_COUNTRY,EMP_STREET,EMP_CITY,EMP_POBOX,EMP_OTHER_CITY,EMP_STATE,EMP_OTHER_STATE"
					+ ",OTHER_PERK_ALLOWANCES_AED,EST_TOTAL_INCOME_PER_ANNUM,SOCIAL_MEDIA_INFLUNCER"
					+ ",ACC_IN_ANTHR_BNK_UAE,DUAL_NATIONALITY,RESIDENT_MANUAL,CHANNELINDICATOR,PRIMARYSRCCTRY,ACCOPENPURPOSE,POA_NATIONALITY,POA_RESIDENCY"; //Shivanshu ATP-455
				
			//added Jamshed
			logInfo("SaveKYCInfo", "OTHER_PERK_ALLOWANCES_AED : "
					+ formObject.getValue(OTHER_PERK_ALLOWANCES_AED).toString());
			logInfo("SaveKYCInfo", "ADDITIONAL_SOURCES_INCOME_AED : "
					+ formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED)
							.toString());
			logInfo("SaveKYCInfo", "EST_TOTAL_INCOME_PER_ANNUM : "
					+ formObject.getValue(EST_TOTAL_INCOME_PER_ANNUM)
							.toString());
			logInfo("SaveKYCInfo", "PRIMARY_SRC_CTRY : "
					+ formObject.getValue(PRIMARY_SRC_CTRY)
							.toString());
			String residentManual=getFinalDataComparison(
					CHECKBOX_COUNTRY_RES_FCR, CHECKBOX_COUNTRY_RES_EIDA,
					CHECKBOX_COUNTRY_RES_MANUAL, FCR_RESIDENT, EIDA_RESIDENT,
					MANUAL_RESIDENT).trim();       //Added for RetailService sourceofIncomeCountry tag.
			logInfo("SaveKYCInfo", "For RESIDENT_MANUAL column residentManual value: "+residentManual);
					
			String value1 = "'"
					+ cust_id
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(WMS_ID).toString().toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sWorkitemId
					+ "'"
					+ (char) 25
					+ "'"
					+ sCustNo
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(GI_ACC_NO_COVERED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_OTHER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_EMPNAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_EMPLYID).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_TML).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_NON_TML).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_POSITN_DESGNT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_LEN_OF_SERVCE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_PHNE_NO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT75").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_MONTHLY_INCM).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_ANNUAL_INC).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_SAL_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_INVSTMNT_RETN_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_INHT_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_REAL_INC_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_SALE_OF_ASST).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CB_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_SAL_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_INVSTMNT_RETN_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_INHT_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_REAL_INC_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_SALE_OF_ASST).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_NATURE_OF_BUSNS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT113").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT106").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT101").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT96").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT112").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT107").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT102").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT97").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT111").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT108").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT103").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("TEXT98").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMD_CASH_ATM).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMD_CHQ_DRFT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMD_TRNSFR_ONLN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMW_CASH_ATM).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMW_CHQ_DRFT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_EMW_TRNSFR_ONLN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_GEO_CNTRY_FINANCL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FERS_NATRE_ACTVTY_FT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_BANK_NAME_1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_BANK_NAME_2).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_BANK_NAME_3).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_CITY_CNTRY_1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_CITY_CNTRY_2).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_CITY_CNTRY_3).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_STAFF_WHO_NAME_STMP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_BUSN_GRP_HEAD).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_LINE_MAN_NAME_STMP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BR_BUSN_UNIT_HEAD).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_ADDTNL_CMNT).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(
							formObject.getValue(GI_EXST_SINCE).toString())
							.toString()
					+ (char) 25
					+ ""
					+ convertIntoDate(
							formObject.getValue(GI_DATE_KYC_PREP).toString())
							.toString()
					+ (char) 25
					+ convertIntoDate(
							formObject.getValue(ED_DATE_OF_JOING).toString())
							.toString()
					+ (char) 25
					+ "'"
					+ formObject.getValue(GI_PURPOSE_ACC_REL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(PROFESION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMPNAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_EMP_TYPE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_SET_FLG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_PH_CODE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CARRYNG_EID_CARD).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CNTRY_OF_BIRTH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_PRPSE_TAX_EVSN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SIGN_STYLE1).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_UAE_RESIDENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_DEALNG_ARMAMNT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_PEP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_DEALNG_HAWALA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_US_PERSON).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_LIABLE_TO_PAY_TAX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_SSN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FAT_CUST_CLASSIFICATION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CRS_RES_PERM_ADRS_US).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(GI_IS_CUST_VIP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(HD_THREE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SPECIAL_CAT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_STATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SMS_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IB_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IVR_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(STAFF_FLAG_EXISTING).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ESTATEMENT_REGISTERED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHEQUEBOOK_BLOCK).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SIGNATUREPRESENTFLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(PHOTOPRESENTFLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CUSTOMER_OPEN_DATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(TOUCHPOINTS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MIB_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(GI_YEARS_IN_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_PERC_OF_OWNRSHP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_NO_UAE_OVRS_BRNCH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_COMP_WEBSITE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_PURPSE_CRS_BRDR_PAYMENT)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_ANTCPATD_CRS_BRDER_PYMT)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_ANTCPATD_MNTHVAL_BRDER_PYMT)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CNTRY_PYMT_RECV).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_RSN_BNKNG_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CUST_SRC_WEALTH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ED_CUST_CRS_BRDR_PAYMENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_REAL_STATE_BROKR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(AO_INCOME_SRC).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(POACOMBO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(INDICIACOMBO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(COMBODOC).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(
							formObject.getValue(DATEPICKERCUST).toString())
							.toString()
					+ (char) 25
					+ convertIntoDate(
							formObject.getValue(DATEPICKERW8).toString())
							.toString()
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(US_INDICIA_MDM).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAMAIN).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAMINI).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FATCAOPTION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(RA_CB_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(BN_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IDS_OTH_CB_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(IDS_BNFT_CB_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NIG_MAKER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NIG_CHECKER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SALARY_TRANSFER)
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(DEALS_IN_WMD)
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FINANCIAL_BROKERS)
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(NOTARY_PUBLIC)
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_COUNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_STREET).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_CITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_PO_BOX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_CITY_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_STATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EMP_STATE_OTHERS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(OTHER_PERK_ALLOWANCES_AED).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EST_TOTAL_INCOME_PER_ANNUM)
							.toString() + "'" + (char) 25 + "'"
					+ formObject.getValue(SOCIAL_MEDIA_INFLUNCER).toString()
					+ "'" 
					+ (char) 25 
					+ "'"
					+ formObject.getValue("ACC_IN_ANTHR_BNK_UAE").toString()
					+ "'"
					+ (char) 25 
					+ "'"
					+ formObject.getValue("DUAL_NATIONALITY").toString()
					+ "'"
					+ (char) 25 
					+ "'"
					+ residentManual  //formObject.getValue("Resident_Manual").toString()
					+ "'"
					+ (char) 25 
					+ "'"
					+ formObject.getValue("CHANNEL_RISK_AO").toString()
					+ "'"
					+ (char) 25
		        	+ "'"
		        	+ formObject.getValue(PRIMARY_SRC_CTRY).toString()
		        	+ "'"
		        	+ (char) 25
		        	+ "'"
		            + formObject.getValue("Others").toString() 
		            + "'"
		            + (char) 25
		        	+ "'"
		            + formObject.getValue(POA_NATIONALITY).toString() 
			    + "'"
			    + (char) 25 //Added by SHivanshu ATP-455
		            + "'"
                            + formObject.getValue(POA_RESIDENCY).toString()
		        	+ "'";
		 
			logInfo("SaveKYCInfo", "OTHER_PERK_ALLOWANCES_AED : "
					+ formObject.getValue(OTHER_PERK_ALLOWANCES_AED).toString());
			logInfo("SaveKYCInfo", "EST_TOTAL_INCOME_PER_ANNUM : "
					+ formObject.getValue(EST_TOTAL_INCOME_PER_ANNUM)
							.toString());
			logInfo("SaveKYCInfo", "PRIMARY_SRC_CTRY : "
					+ formObject.getValue(PRIMARY_SRC_CTRY)
							.toString());
			logInfo("SaveKYCInfo", "columns :  " + column1 + "   values :   "
					+ value1);
			insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
			long end_Time = System.currentTimeMillis();
			logInfo("SaveKYCInfo", "Diff time in SaveKYCInfo Function---"
					+ Long.toString(end_Time - start_time));
		} catch (NumberFormatException e) {
			logError("SaveKYCInfo", e);
		}
	}

	public void insertIntoCustomerTXNTable(String sCustNo, String sWIName,
			String sColumn, String sValue) {
		String sQuery = "";
		int sOutput = -1;
		String sMainCode = "";
		String sCount = "0";
		List<List<String>> list;
		String sWhere = "CUST_SNO='" + sCustNo + "' AND WI_NAME='" + sWIName
				+ "'";
		try {
			sQuery = "SELECT COUNT(WI_NAME) as count FROM USR_0_CUST_TXN WHERE CUST_SNO='"
					+ sCustNo + "' and wi_name ='" + sWIName + "'";
			list = formObject.getDataFromDB(sQuery);
			if (list != null && list.size() > 0) {
				sCount = list.get(0).get(0).toString();
				logInfo("InsertIntoCustomerTXNTable", "sQuery---" + sQuery);
				logInfo("InsertIntoCustomerTXNTable", "sOutput---" + sOutput);
				logInfo("InsertIntoCustomerTXNTable", "sMainCode---"
						+ sMainCode);
				logInfo("InsertIntoCustomerTXNTable", "sCount---" + sCount);
				logInfo("InsertIntoCustomerTXNTable", "sColumn---" + sColumn);
				logInfo("InsertIntoCustomerTXNTable", "sValue---" + sValue);
				if (Integer.parseInt(sCount) > 0) {
					sOutput = updateDataInDB(sCustTxnTable, sColumn, sValue,
							sWhere);
					logInfo("InsertIntoCustomerTXNTable",
							"sOutput Update Cust Table---" + sOutput);
				} else {
					if (sCustNo != null && !sCustNo.equalsIgnoreCase("")) {
						sOutput = insertDataIntoDB(sCustTxnTable, sColumn,
								sValue);
						logInfo("InsertIntoCustomerTXNTable",
								"sOutput Insert Cust Table---" + sOutput);
					}
				}
			}
		} catch (Exception e) {
			logError("insertIntoCustomerTXNTable", e);
		}
	}

	public String setDateValue(String sValue) {
		try {
			logInfo("setDateValue", "sValue: " + sValue);
			if (!sValue.equalsIgnoreCase("")) {
				String[] temp = sValue.split(" ");
				temp = temp[0].split("-");
				sValue = temp[2] + "/" + temp[1] + "/" + temp[0];
				logInfo("setDateValue", "sValue modified:" + sValue);
				return sValue;
			}
			return "";
		} catch (Exception e) {
			logError("setDateValue", e);
		}
		return "";
	}

	public String setDateValue1(String sValue) {
		log.info("in setDateValue1----" + sValue);
		try {
			if (!sValue.equalsIgnoreCase("")) {
				String[] temp = sValue.split(" ");
				temp = temp[0].split("/");
				sValue = temp[0] + "/" + temp[1] + "/" + temp[2];
				return sValue;
			}
			return "";
		} catch (Exception e) {
			logError("", e);
		}
		return "";
	}

	public String setDate(String sValue) {
		log.info("in setDate----" + sValue);
		try {
			if (!sValue.equalsIgnoreCase("")) {
				String[] temp = sValue.split(" ");
				temp = temp[0].split("-");
				sValue = temp[2] + "/" + temp[1] + "/" + temp[0];
				log.info("sValue---" + sValue);
				return sValue;
			}
			return "";
		} catch (Exception e) {
			logError("", e);
		}
		return "";
	}

	// sanal to be checked
	public void setDateValue(String sFieldName, String sFieldName2) {
		try {
			logInfo("setDateValue", "INSIDE");
			String sValue = formObject.getValue(sFieldName2).toString();
			logInfo("setDateValue", "sFieldName: " + sFieldName);
			logInfo("setDateValue", "date field is: " + sValue);
			if (!sValue.equalsIgnoreCase("")) {
				String[] temp = sValue.split(" ");
				temp = temp[0].split("-");
				sValue = temp[2] + "/" + temp[1] + "/" + temp[0];
				logInfo("setDateValue", "modified date field is: " + sValue);
				formObject.setValue(sFieldName, sValue);
			}
		} catch (Exception e) {
			logError("", e);
		}
	}

	public void setValuesFromDB(List<List<String>> listOfValues,
			String[] listOfColumns) {
		logInfo("setValuesFromDB", "Inside");
		if (listOfValues != null && listOfValues.size() > 0) {
			for (int counter = 0; counter < listOfColumns.length; ++counter) {
				logInfo("setValuesFromDB", "FieldName: "
						+ listOfColumns[counter] + ": " + "FieldValue: "
						+ listOfValues.get(0).get(counter));
				if (EIDA_COMBOS.contains(listOfColumns[counter])) {
					formObject.addItemInCombo(listOfColumns[counter],
							listOfValues.get(0).get(counter));
				}
				formObject.setValue(listOfColumns[counter], listOfValues.get(0)
						.get(counter));
			}
		}
	}

	public void addItemInComboFromDB(List<List<String>> listOfValues,
			String[] listOfColumns) {
		logInfo("addItemInComboFromDB", "Inside");
		if (listOfValues != null && listOfValues.size() > 0) {
			for (int counter = 0; counter < listOfColumns.length; ++counter) {
				logInfo("addItemInComboFromDB", "FieldName: "
						+ listOfColumns[counter] + ": " + "FieldValue: "
						+ listOfValues.get(0).get(counter));
				formObject.addItemInCombo(listOfColumns[counter], listOfValues
						.get(0).get(counter));
			}
		}
	}

	/*
	 * public int updateDataInDB(String tableName,String sColumn,String
	 * sValue,String sWhere) { int output = -1; StringBuilder query = new
	 * StringBuilder(); try { query.append("UPDATE "+tableName+" SET ");
	 * String[] columnArray = sColumn.split(","); String[] valueArray =
	 * sValue.split(Character.toString((char)25));
	 * logInfo("updateDataInDB","columnArray : "+Arrays.toString(columnArray));
	 * logInfo("updateDataInDB","valueArray : "+Arrays.toString(valueArray)); if
	 * (columnArray != null){ for (int i = 0 ; i < columnArray.length ; i++){
	 * query.append(columnArray[i]+" = "); if(i == columnArray.length-1)
	 * query.append(valueArray[i]+" "); else query.append(valueArray[i]+" , ");
	 * } } if(sWhere != null && !"".equals(sWhere)){
	 * query.append(" WHERE "+sWhere); }
	 * logInfo("updateDataInDB","Final Update Query : "+query.toString());
	 * output = formObject.saveDataInDB(query.toString()); return output; }
	 * catch (Exception e) { logError("updateDataInDB", e); } return output; }
	 */

	public int updateDataInDB(String tableName, String sColumn, String sValue,
			String sWhere) {
		int output = -1;
		StringBuilder query = new StringBuilder();
		try {
			query.append("UPDATE " + tableName + " SET ");
			String[] columnArray = sColumn.split(",");
			String[] valueArray = sValue.split(Character.toString((char) 25));
			// logInfo("updateDataInDB","columnArray : "+Arrays.toString(columnArray));
			// logInfo("updateDataInDB","valueArray : "+Arrays.toString(valueArray));
			//logInfo("updateDataInDB","columnArray length= "+columnArray.length);
			//logInfo("updateDataInDB","valueArray length= "+valueArray.length);
			System.out.println(valueArray);
			if (columnArray != null) {

				for (int i = 0; i < columnArray.length; i++) {
				//	logInfo("updateDataInDB","columnArray[i]= "+columnArray[i]);
					//logInfo("updateDataInDB","valueArray[i]= "+valueArray[i]);
					System.out.println(valueArray[i]);
					query.append(columnArray[i] + " = ");

					if (i == columnArray.length - 1) {

						if ("'".equalsIgnoreCase(valueArray[i].substring(0, 1)))
							query.append("'"
									+ valueArray[i].substring(1,
											valueArray[i].length() - 1)
											.replaceAll("'", "''") + "' ");
						else
							query.append(valueArray[i].replaceAll("'", "''"));
					} else if ("'".equalsIgnoreCase(valueArray[i].substring(0,
							1)))
						query.append("'"
								+ valueArray[i].substring(1,
										valueArray[i].length() - 1).replaceAll(
										"'", "''") + "' , ");
					else
						query.append(valueArray[i].replaceAll("'", "''") + ",");
				}
			}
			if (sWhere != null && !"".equals(sWhere)) {
				query.append(" WHERE " + sWhere);
			}
			logInfo("updateDataInDB",
					"New Final Update Query : " + query.toString());
			output = formObject.saveDataInDB(query.toString());
			System.out.println(query);
			return output;
		} catch (Exception e) {
			System.out.println("sdfd:" + e.getMessage());
			logError("updateDataInDB", e);
		}
		return output;
	}

	public void populateComparisonFields() {
		try {
			logInfo("populateComparisonFields", "INSIDE");
			formObject.applyGroup(CONTROL_SET_FCR);
			formObject.applyGroup(CONTROL_SET_EIDA);
			int iSelectedRow = 0;
			String sCustNo = "";
			String sSearchType = "";
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			logInfo("populateComparisonFields", "iSelectedRow: " + iSelectedRow);
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			logInfo(" Inside populateComparisonFields sCustNo :", sCustNo);
			String sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME = N'"
					+ sWorkitemId + "' and CUST_SNO = '" + sCustNo + "'";
			logInfo("populateComparisonFields", sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			// int iCount = sOutput.size();
			int iCount = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("populateComparisonFields",
					"wi count: " + String.valueOf(iCount));
			if (iCount > 0) {
				sQuery = "SELECT IS_FCR_PREFIX, IS_FCR_NAME, IS_FCR_SHORTNAME, IS_FCR_DOB, IS_FCR_PASSPORTNO, IS_FCR_PASSPORTISSUEDATE, "
						+ "IS_FCR_PASSPORTEXPDATE, IS_FCR_PASSPORTPLACE, IS_FCR_VISANO, IS_FCR_VISAEXPDATE, IS_FCR_VISAISSUEDATE, IS_FCR_NATIONALITY, "
						+ "IS_FCR_MOTHERNAME, IS_FCR_EIDA, IS_FCR_ADDRESS, IS_FCR_CITY, IS_FCR_STATE, IS_FCR_COUNTRY, IS_FCR_PER_COUNTRY, IS_FCR_PHONE, "
						+ "IS_FCR_MOBILE, IS_FCR_EMAIL, IS_FCR_PROFESSION, IS_FCR_GENDER, IS_FCR_EMPNAME, IS_EIDA_PREFIX, IS_EIDA_NAME, "
						+ "IS_EIDA_SHORTNAME, IS_EIDA_DOB, IS_EIDA_PASSPORTNO, IS_EIDA_PASSPORTISSUEDATE, IS_EIDA_PASSPORTEXPDATE, "
						+ "IS_EIDA_PASSPORTPLACE, IS_EIDA_VISANO, IS_EIDA_VISAEXPDATE, IS_EIDA_VISAISSUEDATE, IS_EIDA_NATIONALITY, "
						+ "IS_EIDA_MOTHERNAME, IS_EIDA_EIDA, IS_EIDA_ADDRESS, IS_EIDA_CITY, IS_EIDA_STATE, IS_EIDA_COUNTRY, IS_EIDA_PER_COUNTRY, "
						+ "IS_EIDA_PHONE, IS_EIDA_MOBILE, IS_EIDA_EMAIL, IS_EIDA_PROFESSION, IS_EIDA_GENDER, IS_EIDA_EMPNAME, IS_MANUAL_PREFIX, "
						+ "IS_MANUAL_NAME, IS_MANUAL_SHORTNAME, IS_MANUAL_DOB, IS_MANUAL_PASSPORTNO, IS_MANUAL_PASSPORTISSUEDATE, "
						+ "IS_MANUAL_PASSPORTEXPDATE, IS_MANUAL_PASSPORTPLACE, IS_MANUAL_VISANO, IS_MANUAL_VISAEXPDATE, IS_MANUAL_VISAISSUEDATE, "
						+ "IS_MANUAL_NATIONALITY, IS_MANUAL_MOTHERNAME, IS_MANUAL_EIDA, IS_MANUAL_ADDRESS, IS_MANUAL_CITY, IS_MANUAL_STATE, "
						+ "IS_MANUAL_COUNTRY, IS_MANUAL_PER_COUNTRY, IS_MANUAL_PHONE, IS_MANUAL_MOBILE, IS_MANUAL_EMAIL, IS_MANUAL_PROFESSION, "
						+ "IS_MANUAL_GENDER, IS_MANUAL_EMPNAME, IS_FCR_ALL, IS_EIDA_ALL, IS_MANUAL_ALL, IS_FCR_RESIDENCE_COUNTRY,"
						+ "IS_EIDA_RESIDENCE_COUNTRY, IS_MANUAL_RESIDENCE_COUNTRY, MANUAL_COUNTRY_RESIDENCE, IS_FCR_PASSTYPE, IS_EIDA_PASSTYPE, IS_MANUAL_PASSTYPE,  "
						+ "IS_FCR_FIRSTNAME, IS_FCR_LASTNAME, IS_FCR_COUNTRYOFBIRTH, IS_FCR_CITYOFBIRTH, IS_EIDA_FIRSTNAME, IS_EIDA_LASTNAME, "
						+ "IS_EIDA_COUNTRYOFBIRTH, IS_EIDA_CITYOFBIRTH, IS_MANUAL_FIRSTNAME, IS_MANUAL_LASTNAME, IS_MANUAL_COUNTRYOFBIRTH, "
						+ "IS_MANUAL_CITYOFBIRTH, MANUAL_PASS_TYPE, FCR_NATIONALITY, FCR_STATE, FCR_COUNTRY, EIDA_COUNTRY, FCR_GENDER, EIDA_GENDER, "
						+ "FCR_PREFIX, FCR_FULL_NAME, FCR_SHORT_NAME, FCR_PASS_NO, FCR_PASS_ISSUE_PLACE, FCR_VISA_NO, FCR_NATIONALITY, MOTHER_NAME_FCR, "
						+ "FCR_EIDA_NO, FCR_ADDRESS, FCR_CITY, FCR_STATE, FCR_COUNTRY, FCR_RESIDENCE_COUNTRY, FCR_PHONE_NO, FCR_MOBILE_NO, FCR_EMAIL,"
						+ "FCR_PROFESSION, FCR_GENDER, FCR_EMP_NAME, EIDA_PREFIX, EIDA_FULL_NAME, EIDA_SHORT_NAME, EIDA_PASS_NO, EIDA_PASS_ISSUE_PLACE,"
						+ "EIDA_VISA_NO, EIDA_NATIONALITY, MOTHER_NAME_EIDA, EIDA_EIDA_NO, EIDA_ADDRESS, EIDA_CITY, EIDA_STATE, EIDA_COUNTRY,"
						+ "EIDA_RESIDENCE_COUNTRY, EIDA_PHONE_NO, EIDA_MOBILE_NO, EIDA_EMAIL, EIDA_PROFESSION, EIDA_GENDER, EIDA_EMP_NAME, "
						+ "MANUAL_FULL_NAME, MANUAL_SHORT_NAME, MANUAL_PASS_NO, MANUAL_PASS_ISSUE_PLACE, MANUAL_VISA_NO, MOTHER_NAME_MANUAL, "
						+ "MANUAL_EIDA_NO, MANUAL_ADDRESS, MANUAL_CITY, MANUAL_PHONE_NO, MANUAL_MOBILE_NO, MANUAL_EMAIL, MANUAL_PROFESSION,"
						+ "MANUAL_EMP_NAME, FCR_DOB, FCR_PASS_EXP_DATE, FCR_PASS_ISSUE_DATE, FCR_VISA_EXP_DATE, FCR_VISA_ISSUE_DATE, EIDA_DOB, "
						+ "EIDA_PASS_EXP_DATE, EIDA_PASS_ISSUE_DATE, EIDA_VISA_EXP_DATE, EIDA_VISA_ISSUE_DATE, MANUAL_PREFIX, MANUAL_NATIONALITY, "
						+ "MANUAL_STATE, MANUAL_COUNTRY, MANUAL_RESIDENCE_COUNTRY, MANUAL_GENDER, SERVICE_PACKAGE, ESTATEMENT_FLAG, FCR_RISK, "
						+ "FCR_COUNTRY_RESIDENCE, EIDA_COUNTRY_RESIDENCE, FCR_PASS_TYPE, EIDA_PASS_TYPE,"
						+ "MANUAL_FIRST_NAME,MANUAL_LAST_NAME,MANUAL_CITY_BIRTH,EIDA_FIRST_NAME,EIDA_LAST_NAME,EIDA_COUNTRY_BIRTH,EIDA_CITY_BIRTH,"
						+ "FCR_FIRST_NAME,FCR_LAST_NAME,FCR_COUNTRY_BIRTH,FCR_CITY_BIRTH,IS_FCR_FIRSTNAME,IS_FCR_LASTNAME,IS_FCR_COUNTRYOFBIRTH,"
						+ "IS_FCR_CITYOFBIRTH,IS_EIDA_FIRSTNAME,IS_EIDA_LASTNAME,IS_EIDA_COUNTRYOFBIRTH,IS_EIDA_CITYOFBIRTH,IS_MANUAL_FIRSTNAME,"
						+ "IS_MANUAL_LASTNAME,IS_MANUAL_COUNTRYOFBIRTH,IS_MANUAL_CITYOFBIRTH, MANUAL_COUNTRY_BIRTH, "
						+ " VISA_FCR,VISA_EIDA,VISA_MANUAL,IS_VISA_FCR,IS_VISA_EIDA,IS_VISA_MANUAL, "
						+ "MANUAL_DOB, MANUAL_PASS_ISSUE_DATE, MANUAL_PASS_EXP_DATE, MANUAL_VISA_EXP_DATE, MANUAL_VISA_ISSUE_DATE "
						+ "FROM USR_0_CUST_TXN WHERE WI_NAME = N'"
						+ sWorkitemId + "' AND CUST_SNO = N'" + sCustNo + "'";
				logInfo("populateComparisonFields", "Query1: " + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("populateComparisonFields", "Query1 Output: " + sOutput);
				setValuesFromDB(sOutput, LIST_OF_COLUMNS);
				setDateValue(FCR_DOB, "FCR_DOB");
				setDateValue(FCR_PASSPORTEXPDATE, "FCR_PASS_EXPIRE");
				setDateValue(FCR_PASSPORTISSDATE, "FCR_PASS_ISSUE");
				setDateValue(FCR_VISAEXPDATE, "FCR_VISA_EXPIRE");
				setDateValue(FCR_VISAISSDATE, "FCR_VISA_ISSUE");
				setDateValue(EIDA_DOB, "EIDA_DOB");
				setDateValue(EIDA_PASSPORTEXPDATE, "EIDA_PASS_EXPIRE");
				setDateValue(EIDA_PASSPORTISSDATE, "EIDA_PASS_ISSUE");
				setDateValue(EIDA_VISAEXPDATE, "EIDA_VISA_EXPIRE");
				setDateValue(EIDA_VISAISSDATE, "EIDA_VISA_ISSUE");
				if ("".equalsIgnoreCase(formObject.getValue(MANUAL_PASSTYPE)
						.toString())) { // changed isempty is wrongly used
										// returning true always
					formObject.setValue(MANUAL_PASSTYPE, "Regular");
				}
				populateCRSData();
				int fieldToFocus = Integer.parseInt(formObject.getValue(
						SELECTED_ROW_INDEX).toString());
				String sAccRelation = formObject.getTableCellValue(
						ACC_RELATION, fieldToFocus, 7).toString();
				String[] triggerEventForFCRControls = { FCR_PASSPORTISSDATE,
						FCR_PASSPORTEXPDATE, FCR_VISANO, FCR_VISAISSDATE,
						FCR_VISAEXPDATE, FCR_NATIONALITY, FCR_EIDANO,
						FCR_PROFESSION, FCR_GENDER, SERVICE_PACKAGE,
						SIGN_STYLE1, FCR_EMPLYR_NAME, FCR_SHORTNAME,
						ED_POSITN_DESGNT, FCR_PER_CNTRY, FCR_RESIDENT,
						PD_EIDANO, FCR_DOB, FCR_PASSPORTNO, FCR_PREFIX,
						FCR_NAME, FCR_MOTHERSNAME, FCR_ADDRESS, FCR_CITY,
						FCR_STATE, FCR_CNTRY, FCR_PH, FCR_MOBILE, FCR_EMAIL,
						ED_MONTHLY_INCM };
				String[] triggerEventForEIDAControls = { EIDA_PASSPORTISSDATE,
						EIDA_PASSPORTEXPDATE, EIDA_VISANO, EIDA_VISAISSDATE,
						EIDA_VISAEXPDATE, EIDA_NATIONALITY, EIDA_EIDANO,
						EIDA_PROFESSION, EIDA_GENDER, SERVICE_PACKAGE,
						SIGN_STYLE1, EIDA_EMPLYR_NAME, EIDA_SHORTNAME,
						ED_POSITN_DESGNT, EIDA_PER_CNTRY, EIDA_RESIDENT,
						PD_EIDANO, EIDA_DOB, EIDA_PASSPORTNO, EIDA_PREFIX,
						EIDA_NAME, EIDA_MOTHERNAME, EIDA_ADDRESS, EIDA_CITY,
						EIDA_STATE, EIDA_CNTRY, EIDA_PH, EIDA_MOBILE,
						EIDA_EMAIL, ED_MONTHLY_INCM };
				String[] triggerEventForManualControls = {
						MANUAL_PASSPORTISSDATE, MANUAL_PASSPORTEXPDATE,
						MANUAL_VISANO, MANUAL_VISAISSDATE, MANUAL_VISAEXPDATE,
						MANUAL_NATIONALITY, MANUAL_EIDANO, MANUAL_PROFESSION,
						MANUAL_GENDER, SERVICE_PACKAGE, SIGN_STYLE1,
						MANUAL_EMPLYR_NAME, MANUAL_SHORTNAME, ED_POSITN_DESGNT,
						MANUAL_PER_CNTRY, MANUAL_RESIDENT, PD_EIDANO,
						MANUAL_DOB, MANUAL_PASSPORTNO, MANUAL_PREFIX,
						MANUAL_NAME, MANUAL_MOTHERNAME, MANUAL_ADDRESS,
						MANUAL_CITY, MANUAL_STATE, MANUAL_CNTRY, MANUAL_PH,
						MANUAL_MOBILE, MANUAL_EMAIL, ED_MONTHLY_INCM };
				for (int i = 0; i < triggerEventForFCRControls.length; i++) {
					logInfo("setFCRValueonLoad", "triggerEventForControls[i]: "
							+ triggerEventForFCRControls[i]);
					fillFCRDataInBelowFields(triggerEventForFCRControls[i],
							formObject.getValue(triggerEventForFCRControls[i])
									.toString());
					fillEIDADataInBelowFields(triggerEventForEIDAControls[i],
							formObject.getValue(triggerEventForEIDAControls[i])
									.toString());
					fillManualDataInBelowFields(
							triggerEventForManualControls[i], formObject
									.getValue(triggerEventForManualControls[i])
									.toString());
					manageChangeinFATCAFields(triggerEventForFCRControls[i],
							sAccRelation);
				}
				
				//Added by krishna
				if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade")) {
						String oldSeg = formObject.getValue(OLD_CUST_SEGMENT).toString();
						if("Aspire".equalsIgnoreCase(oldSeg)||"Simplylife".equalsIgnoreCase(oldSeg)){
							formObject.setStyle(NEW_CUST_SEGMENT, DISABLE, TRUE);
					}
				}	
				
			} else {
				// commented for AO Release by Ayush
				// sQuery =
				// "SELECT SEARCH_TYPE, NAME, MOBILE, EIDA, NATIONALITY, DOB, CID FROM "
				// + "ACC_RELATION_REPEATER "
				// +
				// "WHERE WI_NAME = N'"+sWorkitemId+"' and SNO = N'"+sCustNo+"'";

				sQuery = "SELECT SEARCH_TYPE, NAME, MOBILE, EIDA, NATIONALITY, DOB, CID,EMAIL FROM "
						+ "ACC_RELATION_REPEATER "
						+ "WHERE WI_NAME = N'"
						+ sWorkitemId + "' and SNO = N'" + sCustNo + "'";

				logInfo("populateComaparisonData", "sQuery	" + sQuery);

				sOutput = formObject.getDataFromDB(sQuery);

				logInfo("populateComaparisonData",
						"sOutput	" + sOutput.toString());
				logInfo("checkDuplicate", "Inside.");

				sSearchType = sOutput.get(0).get(0);// "SEARCH_TYPE"
				if (sSearchType.equalsIgnoreCase("FCR")) {
					formObject.setValue(CHECKBOX_SELECTALL_FCR, TRUE);
					manageFCRCheckBoxes();
					formObject.setValue(FCR_NAME, sOutput.get(0).get(1));// "NAME"
					formObject.setValue(FCR_MOBILE, sOutput.get(0).get(2));// "MOBILE"
					formObject.setValue(FCR_EIDANO, sOutput.get(0).get(3));// "EIDA"
					formObject.setValue(FCR_NATIONALITY, sOutput.get(0).get(4));// "NATIONALITY"
					formObject.setValue(FCR_DOB, sOutput.get(0).get(5));// "DOB"
					String sCustomerID = sOutput.get(0).get(6);// "CID"
					setFCRValueonLoad(sCustomerID);
					// commented for AO Release by Ayush
					if (!sOutput.get(0).get(3).equalsIgnoreCase("")) {
						formObject.setValue(CHECKBOX_EIDANO_MANUAL, TRUE);
						formObject.setValue(MANUAL_EIDANO, sOutput.get(0)
								.get(3));
						formObject.setValue(CHECKBOX_EIDANO_FCR, FALSE);
					}
					formObject.setValue(MANUAL_NAME, sOutput.get(0).get(1));// "NAME"
					formObject.setValue(MANUAL_MOBILE, sOutput.get(0).get(2));// "MOBILE"
					formObject.setValue(MANUAL_NATIONALITY,
							sOutput.get(0).get(4));// "NATIONALITY"
					formObject.setValue(MANUAL_DOB, sOutput.get(0).get(5));// "DOB"
					formObject.setValue(MANUAL_EMAIL, sOutput.get(0).get(7));// "EMAIL"

				} else if (sSearchType.equalsIgnoreCase("EIDA")) {
					formObject.setValue(CHECKBOX_SELECTALL_EIDA, TRUE);
					manageEIDACheckBoxes();
					formObject.setValue(EIDA_NAME, sOutput.get(0).get(1));// "NAME"
					formObject.addItemInCombo(EIDA_NATIONALITY, sOutput.get(0)
							.get(4));// "NATIONALITY"
					formObject
							.setValue(EIDA_NATIONALITY, sOutput.get(0).get(4));// "NATIONALITY"
					formObject.setValue(EIDA_DOB, sOutput.get(0).get(5));// "DOB"
					formObject.setValue(EIDA_MOBILE, sOutput.get(0).get(2));// "MOBILE"
					formObject.setValue(EIDA_EIDANO, sOutput.get(0).get(3));// "EIDA"
					String sEIDANo = sOutput.get(0).get(3);
					setEIDAValueonLoad(sEIDANo);
					// commented for AO Release by Ayush
					if (!sOutput.get(0).get(3).equalsIgnoreCase("")) {
						formObject.setValue(CHECKBOX_EIDANO_MANUAL, TRUE);
						formObject.setValue(MANUAL_EIDANO, sOutput.get(0)
								.get(3));
						formObject.setValue(CHECKBOX_EIDANO_FCR, FALSE);
					}
				} else if (sSearchType.equalsIgnoreCase("Manual")) {
					formObject.setValue(CHECKBOX_SELECTALL_MANUAL, TRUE);
					formObject.setValue(MANUAL_NAME, sOutput.get(0).get(1));// "NAME"
					formObject.setValue(MANUAL_NATIONALITY,
							sOutput.get(0).get(4));// "NATIONALITY"
					// formObject.setValue(MANUAL_DOB,sOutput.get(0).get(5));//"DOB"
					// commented for AO Release by Ayush
					formObject.setValue(MANUAL_DOB, formObject
							.getTableCellValue(ACC_RELATION, iSelectedRow, 5));
					formObject.setValue(MANUAL_MOBILE, sOutput.get(0).get(2));// "MOBILE"
					formObject.setValue(MANUAL_EIDANO, sOutput.get(0).get(3));// "EIDA"
					formObject.setValue(MANUAL_EMAIL, sOutput.get(0).get(7));// "EMAIL"
					if (!sOutput.get(0).get(3).equalsIgnoreCase("")) {
						formObject.setValue(CHECKBOX_EIDANO_MANUAL, TRUE);
					}
					formObject.setValue(CHECKBOX_EMAIL_MANUAL, TRUE);

					logInfo("populateComaparisonData", "Manual	");

				}
				formObject.setValue(MANUAL_PASSTYPE, "Regular");
				populateCRSData();
				autoSetFatca(FCR_NATIONALITY);
			}
		} catch (Exception e) {
			logError("populateComparisonFields", e);
		}
	}

	public void checkDuplicate(int iRow) {
		try {
			logInfo("checkDuplicate", "Inside.");
			String sCustID = formObject
					.getTableCellValue(ACC_RELATION, iRow, 2);
			String cid_trim = "";
			cid_trim = sCustID.replaceAll("^0+", "");
			String sMobileNum = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE).trim()
					.toUpperCase();
			String sEida = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO).trim().toUpperCase();
			String sPassport = getFinalDataComparison(CHECKBOX_PASSPORT_NO_FCR,
					CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASSPORT_NO_MANUAL,
					FCR_PASSPORTNO, EIDA_PASSPORTNO, MANUAL_PASSPORTNO).trim()
					.toUpperCase();
			String sNationality = getFinalData(
					formObject.getValue(CHECKBOX_NATIONALITY_FCR).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_EIDA).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString(),
					formObject.getValue(FCR_NATIONALITY).toString(), formObject
							.getValue(EIDA_NATIONALITY).toString(), formObject
							.getValue(MANUAL_NATIONALITY).toString());
			String sNationalityCode = "";
			for (Map.Entry<String, String> entry : countryMap.entrySet()) {
				if (entry.getValue().equalsIgnoreCase(sNationality)) {
					sNationalityCode = entry.getKey();
					break;
				}
			}
			String sDOB = getFinalData(formObject.getValue(CHECKBOX_DOB_FCR)
					.toString(), formObject.getValue(CHECKBOX_DOB_EIDA)
					.toString(), formObject.getValue(CHECKBOX_DOB_MANUAL)
					.toString(), getDateValue(FCR_DOB).toString(),
					getDateValue(EIDA_DOB), getDateValue(MANUAL_DOB));
			String whereCls = "";
			String whereCls1 = "";
			String whereCls2 = "";
			String whereClsMobile = "";
			boolean found1 = false;
			if (!cid_trim.trim().equalsIgnoreCase("")) {
				whereCls = " a.cust_id='" + cid_trim + "' ";
				found1 = true;
			}
			int countMobile = 0;
			if (!sMobileNum.trim().equalsIgnoreCase("")) {
				if (found1)
					whereClsMobile = whereCls + " or  (UPPER(cust_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";
				else
					whereClsMobile = " (UPPER(cust_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";
				countMobile = auditSearchMobileFCUBS(whereClsMobile,
						sDedupeTable, LVW_DEDUPE_RESULT);
			}
			if (!sPassport.trim().equalsIgnoreCase("")) {
				if (found1)
					whereCls += " or  (UPPER(cust_pass_no)='"
							+ sPassport.toUpperCase()
							+ "' AND  UPPER(cust_nationality)='"
							+ sNationalityCode.toUpperCase()
							+ "' AND  cust_dob=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy')))";
				else
					whereCls += " (UPPER(cust_pass_no)='"
							+ sPassport.toUpperCase()
							+ "' AND  UPPER(cust_nationality)='"
							+ sNationalityCode.toUpperCase()
							+ "' AND  cust_dob=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy')))";
				found1 = true;
			}
			if (!sEida.trim().equalsIgnoreCase("") && !sEida.equalsIgnoreCase("XXXXXXXX00XXXXX") && !sEida.equalsIgnoreCase("000000000000000")) {
				if (found1) {
					whereCls += " or A.eida_no='" + sEida + "'";
				} else {
					whereCls += " A.eida_no='" + sEida + "'";
				}
			}
			boolean found2 = false;
			if (!cid_trim.trim().equalsIgnoreCase("")) {

				whereCls1 = "CUSTOMER_ID='" + cid_trim + "' ";
				found2 = true;
			}
			if (!sMobileNum.trim().equalsIgnoreCase("")) {
				if (found2)
					whereCls1 += " or (UPPER(customer_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";
				else
					whereCls1 += "(UPPER(customer_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";

				found2 = true;
			}
			if (!sPassport.trim().equalsIgnoreCase("")) {
				if (found2)
					whereCls1 += " or (UPPER(passport_number)='"
							+ sPassport.toUpperCase()
							+ "'  AND  UPPER(passport_nationality)='"
							+ sNationalityCode.toUpperCase()
							+ "' AND  passport_dob_date=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy')))";
				else
					whereCls1 += "(UPPER(passport_number)='"
							+ sPassport.toUpperCase()
							+ "'  AND  UPPER(passport_nationality)='"
							+ sNationalityCode.toUpperCase()
							+ "' AND  passport_dob_date=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy')))";
				found2 = true;
			}
			if (!sEida.trim().equalsIgnoreCase("") && !sEida.equalsIgnoreCase("XXXXXXXX00XXXXX") && !sEida.equalsIgnoreCase("000000000000000")) {
				if (found2)
					whereCls1 += " or eida_number='" + sEida + "'";
				else
					whereCls1 += " eida_number='" + sEida + "'";
			}
			boolean found = false;
			if (!cid_trim.trim().equalsIgnoreCase("")) {
				whereCls2 = " cust_id='" + cid_trim + "' ";
				found = true;
			}
			if (!sMobileNum.trim().equalsIgnoreCase("")) {
				if (found)
					whereCls2 += " or (upper(final_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";
				else
					whereCls2 += " (upper(final_mobile_no)='"
							+ sMobileNum.toUpperCase() + "') ";

				found = true;
			}
			if (!sPassport.trim().equalsIgnoreCase("")) {
				if (found)
					whereCls2 += " or (upper(final_Pass_no)='"
							+ sPassport.toUpperCase()
							+ "' AND upper(final_Nationality)='"
							+ sNationality.toUpperCase()
							+ "' AND upper(final_Dob)=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy')))";
				else
					whereCls2 += " (upper(final_Pass_no)='"
							+ sPassport.toUpperCase()
							+ "' AND upper(final_Nationality)='"
							+ sNationality.toUpperCase()
							+ "' AND upper(final_Dob)=Trunc(To_Date('" + sDOB
							+ "','dd/mm/yyyy'))) ";
				found = true;
			}
			if (!sEida.trim().equalsIgnoreCase("") && !sEida.equalsIgnoreCase("XXXXXXXX00XXXXX") && !sEida.equalsIgnoreCase("000000000000000")) {
				if (found)
					whereCls2 += " or final_eida_no='" + sEida + "'";
				else
					whereCls2 += " final_eida_no='" + sEida + "'";
			}
			if (!whereCls2.equalsIgnoreCase("")) {
				whereCls2 = "("
						+ whereCls2
						+ ")  AND   exists (select 1 from ext_ao b where curr_ws_name in "
						+ " ('RM','QDE_Cust_Info','QDE_Acc_Info_Chk','QDE_ Account_Info',"
						+ "'Product Approver','Level4 Approved','Level3 Approved','Level2 Approved',"
						+ "'Level1 Approved','DDE_Cust_Info','DDE_Account_Info','DDE_Acc_Info_Chk',"
						+ "'Customer_Screen','CPD Maker','CPD Checker','Contact_Center_CPD','Contact Center Team',"
						+ "'Compliance Approver','Application_Assessment','Account_Relation') and b.wi_name = a.wi_name)";
			}
			logInfo("checkDuplicate", "where clause: " + whereCls);
			logInfo("checkDuplicate", "where clause1: " + whereCls1);
			logInfo("checkDuplicate", "where clause2: " + whereCls2);
			savePopulateSearch(countMobile, whereCls, whereCls1, whereCls2,
					LVW_DEDUPE_RESULT, sDedupeTable);
		} catch (Exception e) {
			logError("checkDuplicate", e);
		}
	}

	public boolean resetRekey() {
		String sColumn = "RE_KEY_CHECK,RE_KEY_CHECK_CPD";
		String sWhere = "WI_NAME ='" + sWorkitemId + "'";
		String sValue = "'false'" + (char) 25 + "'false'";
		String sBankRelation = formObject.getTableCellValue(ACC_RELATION, 0, 7);
		int sOutput = updateDataInDB(sCustTxnTable, sColumn, sValue, sWhere);
		return true;
	}

	public void populateHiddenDataQDE() {
		logInfo("populateHiddenDataQDE", "inside populateHiddenDataQDE");
		int iSelectedRow = 0;
		String sCustNo = "";
		try {
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater(ACC_RELATION);
			iSelectedRow = Integer.parseInt(formObject.getValue(
					"SELECTED_ROW_INDEX").toString()) + 1;
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			String sQuery = "SELECT CUST_SHORT_NAME,EMP_POSITION,STAFF_FLAG,EMP_SAL,CUST_MARITAL_STATUS,TO_CHAR(EMP_DOJ,'dd/mm/yyyy') "
					+ "AS EMP_DOJ, EMP_ID,TO_CHAR(EXISTING_SINCE,'dd/mm/yyyy') AS EXISTING_SINCE,CORR_PO_BOX,CORR_FLOOR,"
					+ "CORR_STREET,CORR_EMAIL,CORR_CITY,CORR_STATE, CORR_OTHER, CORR_CNTRY, CORR_OFF_PHONE,"
					+ "RES_BUILDING,RES_VILLA,RES_LANDMARK,RES_CITY,RES_STATE, RES_OTHER,RES_CNTRY,EMP_PHONE,EIDA_EXPIRY " //Added by Shivanshu ATP-377 for Eida Expiry Date
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '" + sCustNo + "'";
			logInfo("populateHiddenDataQDE", sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null) {
				setValuesFromDB(sOutput, new String[] { FCR_SHORTNAME,
						ED_POSITN_DESGNT, ED_SET_FLG, ED_MONTHLY_INCM,
						MARITAL_STATUS, ED_DATE_OF_JOING, ED_EMPLYID,
						GI_EXST_SINCE, CP_POBOXNO, CP_FLOOR, CP_STREET,
						CP_EMAIL, CP_CITY, CORR_STATE, CP_OTHERS, CORR_CNTRY,
						CP_TELEOFFICE, PA_BUILDINGNAME, PA_VILLAFLATNO,
						PA_STREET, PA_CITY, RES_STATE, RA_OTHERS, RES_CNTRY,
						"TEXT75",EIDA_EXPIRY_DATE });  //Added by Shivanshu ATP-377 for Eida Expiry Date
			}
		} catch (Exception e) {
			logError("Exception in [populateHiddenDataQDE]", e);
		}
	}

	public void populateRiskDataQDE() {
		logInfo("In populate risk data qde  ", "");
		int iSelectedRow = 0;
		String sCustNo = "";
		try {
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater(ACC_RELATION);
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0);
			String sCID = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 2);
			String sQuery = "SELECT IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,BANKING_IN_UAE,PEP_LIST,CUST_SEG,"
					+ "IS_VVIP_CUSTOMER,PASS_TYPE,VISA_STATUS,EMPLOYEE_TYPE, IS_UAE_RESIDENT,SIGN_STYLE,"
					+ "PURPOSE_TAX,PEP,HAWALA,DEALS_ARMAMENT,IS_HOLDING_GREENCARD,IS_US_RESIDENT,IS_US_TIN_PRESENT,"
					+ "BIRTH_COUNTRY,IS_US_TAX_LIABLE,IS_US_CLASSIFICATION,SPECIAL_CATAGORY,EMP_STATUS,"
					+ "CURR_RELATION_TYPE,RM_CODE,RM_NAME,SMS_FLAG,IB_FLAG,IVR_FLAG,STAFF_FLAG_EXISTING,"
					+ "ESTATEMENT_REGISTERED,CHEQUEBOOK_BLOCK,SIGNATUREPRESENTFLAG ,PHOTOPRESENTFLAG ,"
					+ "CUSTOMER_OPEN_DATE,TOUCHPOINTS,MIB_FLAG,IS_GEN_TRADE_COMP,IS_STONE_DEALER,"
					+ "IS_COMMODITY_BROKER,IS_REAL_ESTATE_BROKER,IS_SELF_EMPLOYED,SRC_OF_WEALTH,IS_POA_US_PERSON,"
					+ "IS_US_INDICIA_FOUND,DOCUMENT_TO_BE_COLLECTED,CLASSIFICATION_DATE,W8_SIGNUP_DATE,"
					+ "CHANGE_IN_FATCA_3WAY_INPUTS,US_INDICIA_FOUND_WEBSERVICE,FATCAMAIN,FATCAMINI,FATCA_MAINTAIN_OPTION,"
					+ "IS_SELF_EMPLOYED_OTHER,SELF_EMPLOYED_OTHER,NIGEXCEPTIONMAKER,NIGEXCEPTIONCHECKKER,EMP_SAL,"
					+ "RES_EIDA,SALARY_TRANSFER,DEALS_IN_WMD,FINANCIAL_BROKERS,NOTARY_PUBLIC,SOCIAL_MEDIA_INFLUNCER,"
					+ "CHANNELINDICATOR,DUAL_NATIONALITY,ACC_IN_ANTHR_BNK_UAE,ACC_RELATIONSHIP_PURPOSE,SOURCE_OF_FUNDS,"
					+ "PRIMARYSRCCTRY,ACCOPENPURPOSE,POA_NATIONALITY,POA_RESIDENCY" //added by Shivanshu ATP-455
					+ " FROM "
					+ "USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId + "' AND CUST_SNO= '" + sCustNo + "'";
			log.info("sQuery : " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput == null && sOutput.isEmpty()) {
				sQuery = "SELECT IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,BANKING_IN_UAE,PEP_LIST,CUST_SEG,"
						+ "IS_VVIP_CUSTOMER,PASS_TYPE,VISA_STATUS,EMPLOYEE_TYPE, IS_UAE_RESIDENT,SIGN_STYLE,"
						+ "PURPOSE_TAX,PEP,HAWALA,DEALS_ARMAMENT,SPECIAL_CATAGORY,EMP_STATUS,CURR_RELATION_TYPE "
						+ "FROM USR_0_CUST_WMS WHERE CUST_ID= '" + sCID + "'";
				sOutput = formObject.getDataFromDB(sQuery);
			}
			log.info("sOutput :" + sOutput);

			setValuesFromDB(sOutput, new String[] { RA_IS_CUST_WRKNG_UAE,
					RA_IS_CUST_WRKNG_NON_UAE, RA_RSN_BNKNG_UAE,
					RA_LIST_OF_CUST_PEP, CUST_SEGMENT1, CUST_VVIP,
					MANUAL_PASSTYPE, VISA_STATUS, EMPLYR_TYPE1,
					RESIDENCY_STATUS, SIGN_STYLE1, TAX_EVASION, ARE_U_PEP,
					HAWALA, DEALS_IN_ARMAMENT, FAT_US_PERSON,
					CRS_RES_PERM_ADRS_US, FAT_SSN, CNTRY_OF_BIRTH,
					FAT_LIABLE_TO_PAY_TAX, FAT_CUST_CLASSIFICATION,
					SPECIAL_CAT, EMP_STATUS, "TEXT5", RM_CODE, RM_NAME,
					SMS_FLAG, IB_FLAG, IVR_FLAG, STAFF_FLAG_EXISTING,
					ESTATEMENT_REGISTERED, CHEQUEBOOK_BLOCK,
					SIGNATUREPRESENTFLAG, PHOTOPRESENTFLAG, CUSTOMER_OPEN_DATE,
					TOUCHPOINTS, MIB_FLAG, RA_CB_GEN_TRDNG_CMPNY,
					RA_CB_PRECIOUS_STONE_DEALER, RA_CB_BULLN_COMMDTY_BROKR,
					RA_CB_REAL_STATE_BROKR, RA_CB_USD_AUTO_DEALER,
					RA_CUST_SRC_WEALTH, POACOMBO, INDICIACOMBO, COMBODOC,
					DATEPICKERCUST, DATEPICKERW8, CHANGE_IN_FATCA_3WAY_INPUTS,
					US_INDICIA_MDM, FATCAMAIN, FATCAMINI, FATCAOPTION,
					RA_CB_OTHERS, RA_CB_OTHERS_FLD, NIG_MAKER, NIG_CHECKER,
					ED_MONTHLY_INCM, DRP_RESEIDA, SALARY_TRANSFER,
					DEALS_IN_WMD, FINANCIAL_BROKERS, NOTARY_PUBLIC,
					SOCIAL_MEDIA_INFLUNCER,CHANNEL_RISK_AO,DUAL_NATIONALITY,
					ACC_IN_ANTHR_BNK_UAE,GI_PURPOSE_ACC_REL,AO_INCOME_SRC,
					PRIMARY_SRC_CTRY,"Others",POA_NATIONALITY,POA_RESIDENCY});//Shivanshu ATP-455
			// IDS_CB_VVIP,GI_YEARS_IN_UAE
			logInfo("populateRiskDataQDE", "new fields of kyc");
		} catch (Exception e) {
			logError("Exception in populateRiskDataQDE", e);
		}
	}

	@SuppressWarnings("unchecked")
	public void populateCRSData() {
		try {
			logInfo("populateCRSData", "Inside");
			formObject.setValue(CRS_CHECKBOX, "true");
			logInfo("populateCRSData", "SELECTED_ROW_INDEX: "
					+ formObject.getValue(SELECTED_ROW_INDEX).toString());
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sQuery = "SELECT COUNT(WI_NAME) FROM USR_0_CRS_DETAILS WHERE WI_NAME = N'"
					+ sWorkitemId
					+ "' AND "
					+ "ACC_RELATION_SNO = N'"
					+ (iSelectedRow + 1) + "'";
			logInfo("populateCRSData", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateCRSData", "sOutput: " + sOutput.toString());
			int count = Integer.parseInt(sOutput.get(0).get(0));

			String sQuery2 = "SELECT COUNT(1) AS COUNT FROM ACC_RELATION_REPEATER WHERE WI_NAME = N'"
					+ sWorkitemId + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			int count2 = Integer.parseInt(sOutput.get(0).get(0));

			if ((count == 0) && (count2 >= 2)) {
				formObject.clearTable(CRS_TAXCOUNTRYDETAILS);
				logInfo("populateCRSData ",
						"CRS_TAXCOUNTRYDETAILS cleartable done 1");
			} else if (count > 0) {
				formObject.clearTable(CRS_TAXCOUNTRYDETAILS);
				logInfo("populateCRSData ",
						"CRS_TAXCOUNTRYDETAILS cleartable done 2");
				sOutput = formObject
						.getDataFromDB("SELECT FIRST_NAME, LAST_NAME, BIRTHCITY, CRSCERTIFICATIONFORMOBTAINED, CRSCLASSIFICATION,"
								+ "CRSCLASSIFICATIONDATE, CRSCERTIFICATIONDATE, SNO, TAXRESIDENCYCOUNTRY, TINNUMBER, REASON_NOTPROVIDINGTIN, "
								+ "REASON_DESC,CRS_INVEST_SCHEME,CRS_JURISDICTION,CRS_INCOME_TAX_OTHR_CNTRY,"
								+ "CRS_INCOME_TAX_CNTRY1,CRS_INCOME_TAX_CNTRY2,CRS_INCOME_TAX_CNTRY3 FROM USR_0_CRS_DETAILS WHERE WI_NAME = N'"
								+ sWorkitemId
								+ "' AND "
								+ "ACC_RELATION_SNO = N'"
								+ (iSelectedRow + 1)
								+ "' ORDER BY SNO");
				logInfo("populateCRSData",
						"query: SELECT FIRST_NAME, LAST_NAME, BIRTHCITY, CRSCERTIFICATIONFORMOBTAINED, CRSCLASSIFICATION,"
								+ "CRSCLASSIFICATIONDATE, CRSCERTIFICATIONDATE, SNO, TAXRESIDENCYCOUNTRY, TINNUMBER, REASON_NOTPROVIDINGTIN, "
								+ "REASON_DESC,CRS_INVEST_SCHEME,CRS_JURISDICTION,CRS_INCOME_TAX_OTHR_CNTRY,"
								+ "CRS_INCOME_TAX_CNTRY1,CRS_INCOME_TAX_CNTRY2,CRS_INCOME_TAX_CNTRY3 "
								+ " FROM USR_0_CRS_DETAILS WHERE WI_NAME = N'"
								+ sWorkitemId
								+ "' AND "
								+ "ACC_RELATION_SNO = N'"
								+ (iSelectedRow + 1)
								+ "' ORDER BY SNO");
				logInfo("populateCRSData", "sOutput: " + sOutput);
				setValuesFromDB(sOutput, new String[] { CRS_FIRSTNAME,
						CRS_LASTNAME, CRS_CITYOFBIRTH });
				logInfo("populateCRSData",
						"CRS_CERTIFICATION_OBTAINED to be set: "
								+ sOutput.get(0).get(3));
				if ((sOutput.size() > 0) && !sOutput.get(0).get(3).isEmpty()) { // CRSCERTIFICATIONFORMOBTAINED
					if (sOutput.get(0).get(3).equalsIgnoreCase("yes")) {
						formObject.setValue(CRS_CERTIFICATION_OBTAINED, "Yes");
					} else if (sOutput.get(0).get(3).equalsIgnoreCase("no")) {
						formObject.setValue(CRS_CERTIFICATION_OBTAINED, "No");
					}

				}
				if (sOutput != null && sOutput.size() > 0) {
					formObject.setValue(CRS_CLASSIFICATION,
							sOutput.get(0).get(4));// CRSCLASSIFICATION
					formObject.setValue(CRS_DATECLASSIFICATION,
							setDateValue1(sOutput.get(0).get(5)));// CRSCLASSIFICATIONDATE
					formObject.setValue(CRS_DATECERTIFICATION,
							setDateValue1(sOutput.get(0).get(6)));// CRSCERTIFICATIONDATE
					formObject.setValue(TAX_SCHEME_OBTAINED, sOutput.get(0)
							.get(12));
					formObject.setValue(RESI_UNDER_JUD, sOutput.get(0).get(13));
					formObject.setValue(SUB_PERSONAL_TAX, sOutput.get(0)
							.get(14));
					formObject.setValue(PER_INC_TAX_CON_1,
							sOutput.get(0).get(15));
					formObject.setValue(PER_INC_TAX_CON_2,
							sOutput.get(0).get(16));
					formObject.setValue(PER_INC_TAX_CON_3,
							sOutput.get(0).get(17));
				}
				String taxresidencycountry = sOutput.get(0).get(8); // "TAXRESIDENCYCOUNTRY"
				logInfo("populateCRSData", "taxresidencycountry: "
						+ taxresidencycountry);
				if (null != taxresidencycountry
						&& !taxresidencycountry.isEmpty()) {
					loadListView(
							formObject.getDataFromDB("SELECT SNO, TAXRESIDENCYCOUNTRY, TINNUMBER, REASON_NOTPROVIDINGTIN,"
									+ " REASON_DESC FROM USR_0_CRS_DETAILS WHERE WI_NAME = N'"
									+ sWorkitemId
									+ "' AND "
									+ "ACC_RELATION_SNO = N'"
									+ (iSelectedRow + 1) + "' order by sno"),
							"Sno,Country_Of_Tax_Residency,TaxPayer_Identification_Number,Reason_For_Not_Providing_TIN,"
									+ "Reason_Description,",
							CRS_TAXCOUNTRYDETAILS);
				}
			} else {
				formObject.clearTable(CRS_TAXCOUNTRYDETAILS);
				logInfo("populateCRSData ",
						"CRS_TAXCOUNTRYDETAILS cleartable done 3");
				String cust_relation = formObject.getTableCellValue(
						ACC_RELATION, iSelectedRow, 8);// acc_relation.cust_relation
				if (cust_relation.equalsIgnoreCase("Heirs")) {
					formObject.setValue(CRS_CLASSIFICATION, "OUT OF SCOPE");
				} else {
					formObject.setValue(CRS_CLASSIFICATION,
							"UPDATED-DOCUMENTED");
				}
				try {
					Calendar calendar = Calendar.getInstance();
					SimpleDateFormat simpledateformat = new SimpleDateFormat(
							DATEFORMAT);
					String sCurrentDate = simpledateformat.format(calendar
							.getTime());

					if (formObject.getValue(CRS_DATECLASSIFICATION).toString()
							.equalsIgnoreCase("")) {
						formObject.setValue(CRS_DATECLASSIFICATION,
								sCurrentDate);
					}
					if (formObject.getValue(CRS_DATECERTIFICATION).toString()
							.equalsIgnoreCase("")) {
						formObject
								.setValue(CRS_DATECERTIFICATION, sCurrentDate);
					}
				} catch (Exception ex) {
					logError("populateCRSData", ex);
				}
				if (TRUE.equalsIgnoreCase(formObject.getValue(
						CHECKBOX_FIRSTNAME_MANUAL).toString())) {
					formObject.setValue(CRS_FIRSTNAME,
							formObject.getValue(MANUAL_FIRSTNAME).toString());
				}
				if (TRUE.equalsIgnoreCase(formObject.getValue(
						CHECKBOX_LASTNAME_MANUAL).toString())) {
					formObject.setValue(CRS_LASTNAME,
							formObject.getValue(MANUAL_LASTNAME).toString());
				}
			}
		} catch (Exception e) {
			logError("populateCRSData", e);
		}
	}

	public void loadBlackListData() {
		try {
			String sValues = "";
			int resAPInsert = 0;
			String sQuery = "";
			String sOutput1 = "";
			int iListViewRows = 0;
			List<List<String>> sOutput = null;
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			formObject.clearTable(CHECK_TYPE_LVW);
			formObject.clearTable(SANC_SCRN_HD2_LVW);
			formObject.clearTable(SANC_CNTRL_BNK_BAD_LVW);
			long start_Time3 = 0;
			if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN_QDE)) {
				sQuery = "SELECT FINAL_FULL_NAME,FINAL_DOB,FINAL_NATIONALITY FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUST_SNO='" + iSelectedRow + "'";
				logInfo("sQuery", sQuery);
				sOutput = formObject.getDataFromDB(sQuery);

				String sName = (sOutput.get(0).get(0)).trim().toUpperCase();
				String sDOB = sOutput.get(0).get(1);
				String sCountry = (sOutput.get(0).get(2)).trim();

				sQuery = "SELECT COUNT(WI_NAME) as COUNT_WI FROM USR_0_BLACKLIST_DATA WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND SEARCHED_CUST_NAME='"
						+ sName
						+ "' AND SEARCHED_CUST_DOB='"
						+ sDOB
						+ "' AND SEARCHED_CUST_NATIONALITY='" + sCountry + "'";
				logInfo("sQuery", sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					long start_Time = System.currentTimeMillis();
					sOutput1 = callBlacklist();
					long start_Time1 = System.currentTimeMillis();
					log.info("Blacklist Fetch "
							+ Long.toString(start_Time1 - start_Time));
					sOutput1 = sOutput1.replaceAll("null", "");
					String sMatchRecvd = getTagValues(sOutput1, "matchCount");
					String sColumn = "BLACKLIST_TYPE,CUST_ID,CUST_NAME,CUST_TYPE,DOB,EMP_NAME,GENDER,MOBILE_NO,MOTHER_NAME,NATIONALITY,NOTES,PASSPORT_NO,POBOX_NO,REG_DATE,VISA_NO,PHONE_NO,CUST_SNO,WI_NAME,SEARCHED_CUST_NAME,SEARCHED_CUST_DOB,SEARCHED_CUST_NATIONALITY";
					if (!sMatchRecvd.equalsIgnoreCase("")
							&& !sMatchRecvd.equalsIgnoreCase("0")) {
						int iTotalMatch = Integer.parseInt(sMatchRecvd);
						String[] sAllRecord = getTagValue(sOutput1, "Records")
								.split(";");
						String[] sEachReacord;
						String sRecord = "";
						String sNationality = "";
						formObject
								.saveDataInDB("delete from USR_0_BLACKLIST_DATA where WI_NAME='"
										+ sWorkitemId
										+ "' and CUST_SNO='"
										+ iSelectedRow + "'");
						long start_Time2 = System.currentTimeMillis();
						log.info("Blacklist Delete "
								+ Long.toString(start_Time2 - start_Time1));
						try {
							for (int i = 0; i < iTotalMatch; i++) {
								log.info("Count---" + i);
								sRecord = sAllRecord[i] + ",END";
								sRecord = sRecord.replaceAll("#col#", ";");
								sEachReacord = sRecord.split(",");
								if (!sEachReacord[9].equalsIgnoreCase("")) {
									sQuery = "SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE='"
											+ sEachReacord[9] + "'";
									sOutput = formObject.getDataFromDB(sQuery);
									sNationality = sOutput.get(0).get(0);
								}
								sValues = "'"
										+ sEachReacord[0].replaceAll("'", "''")
										+ "','"
										+ sEachReacord[1]
										+ "','"
										+ sEachReacord[2].replaceAll("'", "''")
										+ "','"
										+ sEachReacord[3]
										+ "','"
										+ sEachReacord[4]
										+ "','"
										+ sEachReacord[5].replaceAll("'", "''")
										+ "','"
										+ sEachReacord[6]
										+ "','"
										+ sEachReacord[7]
										+ "','"
										+ sEachReacord[8].replaceAll("'", "''")
										+ "','"
										+ sNationality
										+ "','"
										+ sEachReacord[10]
												.replaceAll("'", "''") + "','"
										+ sEachReacord[11] + "','"
										+ sEachReacord[12] + "','"
										+ sEachReacord[14] + "','"
										+ sEachReacord[15] + "','"
										+ sEachReacord[16] + "','"
										+ iSelectedRow + "','" + sWorkitemId
										+ "','" + sName + "','" + sDOB + "','"
										+ sCountry + "'";
								logInfo("sValues", sValues);
								resAPInsert = formObject
										.saveDataInDB("insert into USR_0_BLACKLIST_DATA ("
												+ sColumn
												+ ") values ("
												+ sValues + ")");
							}
							start_Time3 = System.currentTimeMillis();
							log.info("Blacklist Insert time "
									+ Long.toString(start_Time3 - start_Time2));
						} catch (Exception e) {
							logError("loadBlackListData", e);
						}
					} else if (!sMatchRecvd.equalsIgnoreCase("0")) {
						// Commented by Abhay as Blacklist is Obsolete
						// 04_01_2021
						// JOptionPane.showMessageDialog(null,"Unable to fetch blacklist data");
					}
				}
			}
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT') ORDER BY CUST_NAME";
			logInfo("Loading Internal Blacklist", sQuery);
			loadListView(formObject.getDataFromDB(sQuery), "0,1,2,3,4,5",
					CHECK_TYPE_LVW);
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT') ORDER BY CUST_NAME";
			logInfo("Loading External Blacklist", sQuery);
			loadListView(formObject.getDataFromDB(sQuery), "0,1,2,3,4,5",
					SANC_SCRN_HD2_LVW);
			long start_Time4 = System.currentTimeMillis();
			logInfo("Blacklist Load time ",
					Long.toString(start_Time4 - start_Time3));
			iListViewRows = getGridCount(CHECK_TYPE_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CHK_MATCH_FOUND, "Verified False Positive");
			}
			iListViewRows = getGridCount(SANC_SCRN_HD2_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(SANC_SCRN_MATCH, "Verified False Positive");
			}
			iListViewRows = getGridCount(SANC_CNTRL_BNK_BAD_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(SANC_SCRN_MATCH_FOUND,
						"Verified False Positive");
			}
		} catch (Exception e) {
			logError("loadBlackListData", e);
		}
	}

	public String callBlacklist() {
		List<List<String>> sOutput1 = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sOutput = sOutput1.get(0).get(0);
		sOutput = getBlacklistInputXML(getTagValues(sOutput, "ID"), "TP906079");
		// sOutput=ExecuteWebserviceAll(sOutput);
		log.info("CallBlacklist-----" + sOutput);
		return sOutput;
	}

	public String getBlacklistInputXML(String sSeqNo, String sUserName) {
		int iNo = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString()) + 1;
		String sQuery = "SELECT FINAL_FULL_NAME, FINAL_NATIONALITY, FINAL_DOB, FINAL_PASS_NO, FINAL_VISA_NO, FINAL_ADDRESS, FINAL_PHONE_NO, FINAL_MOBILE_NO,MAIDEN_NAME  FROM USR_0_CUST_TXN WHERE WI_NAME ='"
				+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
		logInfo("getBlacklistInputXML", sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		log.info("sOutput---" + sOutput);
		sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY='"
				+ sOutput.get(0).get(1) + "'";
		List<List<String>> sTableOutput = formObject.getDataFromDB(sQuery);
		String sNationality = sTableOutput.get(0).get(0);
		// String sDOB =setDate(sOutput.get(0).get(2));
		String sDOB = sOutput.get(0).get(2);
		sQuery = "SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='searchCriteria') AS SEARCHCRITERIA,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='nameSearchMode') AS NAMESEARCHMODE,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='listType') AS LISTTYPE FROM DUAL";
		sTableOutput = formObject.getDataFromDB(sQuery);
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Black_List</Calltype>" + "<customerName>"
				+ sOutput.get(0).get(0)
				+ "</customerName>"
				+ "<nationality>"
				+ sNationality
				+ "</nationality>"
				+ "<dateOfBirth>"
				+ sDOB
				+ "</dateOfBirth>"
				+ "<passportNumber>"
				+ sOutput.get(0).get(3)
				+ "</passportNumber>"
				+ "<resVisaNumber>"
				+ sOutput.get(0).get(4)
				+ "</resVisaNumber>"
				+ "<POBox>"
				+ sOutput.get(0).get(5)
				+ "</POBox>"
				+ "<telephoneNumber>"
				+ sOutput.get(0).get(6)
				+ "</telephoneNumber>"
				+ "<mobileNumber>"
				+ sOutput.get(0).get(7)
				+ "</mobileNumber>"
				+ "<motherMaidenName>"
				+ sOutput.get(0).get(8)
				+ "</motherMaidenName>"
				+ "<registrationDate></registrationDate>"
				+ "<registrationNumber></registrationNumber>"
				+ "<tradeLicenseNumber></tradeLicenseNumber>"
				+ "<searchCriteria>"
				+ sTableOutput.get(0).get(0)
				+ "</searchCriteria>"
				+ "<nameSearchMode>"
				+ sTableOutput.get(0).get(1)
				+ "</nameSearchMode>"
				+ "<listType>"
				+ sTableOutput.get(0).get(2)
				+ "</listType>"
				+ "<REF_NO>"
				+ sSeqNo
				+ "</REF_NO>"
				+ "<USER>"
				+ sUserName
				+ "</USER>" + "<WiName>" + sWorkitemId + "</WiName>";
		return sInputXML;
	}

	public void manageFCRCheckBoxes() {
		if (formObject.getValue(CHECKBOX_SELECTALL_FCR).toString()
				.equalsIgnoreCase(TRUE)) {
			String[] fieldNames = { CHECKBOX_PREFIX_FCR, CHECKBOX_FULLNAME_FCR,
					CHECKBOX_SHORTNAME_FCR, CHECKBOX_DOB_FCR,
					CHECKBOX_PASSPORT_NO_FCR, CHECKBOX_PASS_ISS_DT_FCR,
					CHECKBOX_PASS_EXP_DT_FCR, "CHECK17", CHECKBOX_VISA_NO_FCR,
					CHECKBOX_VISA_ISSUE_DATE_FCR,
					CHECKBOX_VISA_EXPIRY_DATE_FCR, CHECKBOX_NATIONALITY_FCR,
					CHECKBOX_MOTHERSNAME_FCR, CHECKBOX_EIDANO_FCR,
					CHECKBOX_CORR_POB_FCR, CHECKBOX_CITY_FCR,
					CHECKBOX_STATE_FCR, CHECKBOX_COUNTRY_PER_RES_FCR,
					CHECKBOX_TELE_RES_FCR, CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_EMAIL_FCR, CHECKBOX_PROFESSION_FCR,
					CHECKBOX_CNTRY_OF_CORR_FCR, CHECKBOX_GENDER_FCR,
					CHECKBOX_EMP_NAME_FCR, CHECKFCR, CHECKBOX_FIRSTNAME_FCR,
					CHECKBOX_LASTNAME_FCR, HD_FOUR, CHECKBOX_COB_FCR,
					CHECKBOX_PASSPORT_TYPE_FCR, CHECKBOX_VISA_STATUS_FCR,
					CHECKBOX_COUNTRY_RES_FCR };
			checkCheckBoxes(fieldNames);
		} else {
			String[] fieldNames = { CHECKBOX_PREFIX_FCR, CHECKBOX_FULLNAME_FCR,
					CHECKBOX_SHORTNAME_FCR, CHECKBOX_DOB_FCR,
					CHECKBOX_PASSPORT_NO_FCR, CHECKBOX_PASS_ISS_DT_FCR,
					CHECKBOX_PASS_EXP_DT_FCR, "CHECK17", CHECKBOX_VISA_NO_FCR,
					CHECKBOX_VISA_ISSUE_DATE_FCR,
					CHECKBOX_VISA_EXPIRY_DATE_FCR, CHECKBOX_NATIONALITY_FCR,
					CHECKBOX_MOTHERSNAME_FCR, CHECKBOX_EIDANO_FCR,
					CHECKBOX_CORR_POB_FCR, CHECKBOX_CITY_FCR,
					CHECKBOX_STATE_FCR, CHECKBOX_COUNTRY_PER_RES_FCR,
					CHECKBOX_TELE_RES_FCR, CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_EMAIL_FCR, CHECKBOX_PROFESSION_FCR,
					CHECKBOX_CNTRY_OF_CORR_FCR, CHECKBOX_GENDER_FCR,
					CHECKBOX_EMP_NAME_FCR, CHECKFCR, CHECKBOX_FIRSTNAME_FCR,
					CHECKBOX_LASTNAME_FCR, HD_FOUR, CHECKBOX_COB_FCR,
					CHECKBOX_PASSPORT_TYPE_FCR, CHECKBOX_VISA_STATUS_FCR,
					CHECKBOX_COUNTRY_RES_FCR };
			uncheckCheckBoxes(fieldNames);
		}
	}

	public void checkCheckBoxes(String[] fieldNames) {
		for (String fieldName : fieldNames) {
			formObject.setValue(fieldName, TRUE);
		}
	}

	public void uncheckCheckBoxes(String[] fieldNames) {
		for (String fieldName : fieldNames) {
			formObject.setValue(fieldName, FALSE);
		}
	}

	public void setFCRValueonLoad(String sCustomerID) {
		logInfo("setFCRValueonLoad", "Inside");
		long startTime = System.currentTimeMillis();
		try {
			String[] sAllAccount;
			String[] sEachAccountInfo;
			int iFinalCode = 0;
			String sMessage = "";
			String sMode = formObject.getValue(DATA_ENTRY_MODE).toString();
			String outputXml = fetchFCRCustomer(sCustomerID,"GetCustomerDetails");
			//shahbaz
			populateLastKycDate(outputXml);
			outputXml = outputXml.replaceAll("&", "#amp#");
			String sReturnCode = getTagValues(outputXml, "returnCode");
			String sQuery = "";
			List<List<String>> sCatOutput;
			String sUAEStates = UAESTATES;// NGFUserResourceMgr.getResourceString_val("UAESTATES");
			String sState = "";
			String sCity = "";
			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				iFinalCode = iFinalCode + 1;
				outputXml = outputXml.replaceAll("null", "");
				formObject.setValue(FCR_PASSPORTISSDATE,setDateValue1(getTagValue(outputXml,"PssportIssueDate")));// Check this tag
                         	formObject.setValue(FCR_PASSPORTEXPDATE,setDateValue1(getTagValue(outputXml,"PassportExpDate")));
				formObject.setValue(FCR_VISANO,getTagValue(outputXml, "VisaNo"));
				formObject.setValue(FCR_VISAISSDATE,setDateValue1(getTagValue(outputXml, "VisaIssueDate")));
				formObject.setValue(FCR_VISAEXPDATE,setDateValue1(getTagValue(outputXml, "VisaExpDate")));
				formObject.setValue(FCR_NATIONALITY,getTagValue(outputXml, "Nationality").replaceAll("#Comma#", ","));
				formObject.setValue(FCR_EIDANO,getTagValue(outputXml, "EIDA_NO"));
				formObject.setValue(FCR_PROFESSION,getTagValue(outputXml, "Profession"));
				formObject.setValue(FCR_GENDER,getTagValue(outputXml, "Gender").toUpperCase());
				formObject.setValue(SERVICE_PACKAGE,getTagValue(outputXml, "SCPackageCode"));
				formObject.setValue(SIGN_STYLE1,getTagValue(outputXml, "SignatureType"));
				formObject.setValue(FCR_EMPLYR_NAME,getTagValue(outputXml, "EmpName"));
				formObject.setValue(FCR_SHORTNAME,getTagValue(outputXml, "ShortName"));
				formObject.setValue(ED_POSITN_DESGNT,(getTagValue(outputXml, "Designation").replaceAll(
                                                          "#col#", ";")).replaceAll("#Comma#", ","));
				formObject.setValue(ED_SET_FLG,getTagValue(outputXml, "StaffFlag"));
				formObject.setValue(ED_MONTHLY_INCM,getTagValue(outputXml, "SalaryAmount"));
				formObject.setValue(MARITAL_STATUS,getTagValue(outputXml, "MaritalStatus"));
				formObject.addItemInCombo(ED_DATE_OF_JOING,setDateValue1(getTagValue(outputXml, "DateofJoining")));
				formObject.setValue(ED_DATE_OF_JOING,setDateValue1(getTagValue(outputXml, "DateofJoining")));
				formObject.setValue(ED_EMPLYID,getTagValue(outputXml, "EmployeeID"));
				formObject.setValue(FCR_PER_CNTRY,getTagValue(outputXml, "ResCountry"));
				formObject.setValue(FCR_RESIDENT,getTagValue(outputXml, "ResCountry"));
				if (!sMode.equalsIgnoreCase("Quick Data Entry")) {
					formObject.setValue(PD_EIDANO,
							getTagValue(outputXml, "EIDA_NO"));
					String sTML = getTagValue(outputXml, "TMLFlag");
					if (!sTML.equalsIgnoreCase("")) {
						if (sTML.equalsIgnoreCase("Yes")) {
							formObject.setValue(ED_CB_TML, "True");
						} else {
							formObject.setValue(ED_CB_TML, "false");
						}
					}
				}
				if (!getTagValue(outputXml, "UDF").equalsIgnoreCase("")) {
					String[] sAllUDF = getTagValue(outputXml, "UDF").split(";");
					String[] sEachUDF;
					for (int i = 0; i < sAllUDF.length; i++) {
						sEachUDF = (sAllUDF[i] + ",END").split(",");
						if (sEachUDF[0].equalsIgnoreCase("Client Risk Classification")) {
							List<List<String>> sOutput = formObject.getDataFromDB("SELECT RISK_VALUE FROM USR_0_RISK_VALUES WHERE RISK_CODE = '"+ sEachUDF[1] + "'");
							formObject.setValue(FCR_RISK,getTagValue(outputXml, "RISK_VALUE"));
							logInfo("setFCRvalueOnload", "fetchFCRCustomer sCustomerID "+ sOutput);

							//DCRA CHANGE FOR UPGRADE AND CCO
							if(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade")||
							   formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")) {
								int iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
								int iProcessedCustomer=Integer.parseInt((String) formObject.getValue(SELECTED_ROW_INDEX))+1;
								String sWsName = formObject.getValue(CURR_WS_NAME).toString();
								if(sOutput != null && sOutput.size() > 0) {
									logInfo("updateRiskAssessmentData", "KrishnaPandey");
									String sriskColumn = "SNO,CUST_CUR_RISK_BANK,CUST_CUR_RISK,WI_NAME,WS_NAME";
									String sriskValue = "'" + (iSelectedRow+1) + "','" + sOutput.get(0).get(0) + "','" + sOutput.get(0).get(0) + "','" + sWorkitemId + "','" + sWsName + "'";
									insert_Into_Usr_0_Risk_Data(sriskColumn, sriskValue);
								}
							}
						}
					}
				}
			} else {
				sMessage = getTagValue(outputXml, "td");
			}
			logInfo("setFCRvalueOnload", "fetchFCRCustomer sCustomerID "+ sCustomerID);
			outputXml = fetchFCRCustomer(sCustomerID, "GetCustomerSummary");
			logInfo("setFCRvalueOnload", "GetCustomerSummary OUTXML "
					+ outputXml);
			outputXml = outputXml.replaceAll("&", "#amp#");
			sReturnCode = getTagValues(outputXml, "returnCode");
			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				iFinalCode = iFinalCode + 1;
				outputXml = outputXml.replaceAll("null", "");
				formObject.setValue(FCR_PREFIX,
						getTagValue(outputXml, "Prefix"));
				formObject.setValue(FCR_NAME,
						getTagValue(outputXml, "FullName"));
				formObject.setValue(FCR_DOB,
						setDateValue1(getTagValue(outputXml, "DOB")));
				formObject.setValue(FCR_PASSPORTNO,
						getTagValue(outputXml, "PassportNO"));
				formObject.setValue(PASSPORTEXPPLACE_FCR, "");
				formObject.setValue(FCR_MOTHERSNAME,
						getTagValue(outputXml, "MotherName"));
				formObject.setValue(FCR_ADDRESS,
						getTagValue(outputXml, "POBox"));
				formObject.setValue(FCR_CITY, (getTagValue(outputXml, "City")
						.replaceAll("#col#", ";")).replaceAll("#Comma#", ","));
				formObject.setValue(FCR_STATE, (getTagValue(outputXml, "State")
						.replaceAll("#col#", ";")).replaceAll("#Comma#", ","));
				formObject.setValue(FCR_CNTRY,
						getTagValue(outputXml, "Country"));
				formObject.setValue(FCR_PH, getTagValue(outputXml, "Phone"));
				formObject.setValue(FCR_MOBILE,
						getTagValue(outputXml, "Mobile"));
				formObject.setValue(FCR_EMAIL, getTagValue(outputXml, "Email"));
				formObject.setValue(ESTATEMENT_FLAG,
						getTagValue(outputXml, "EStatementSubFlag"));
				formObject.setValue(RM_CODE, getTagValue(outputXml, "RMCode"));
				formObject.setValue(RM_NAME, getTagValue(outputXml, "RMName")
						.replace("'", "").toUpperCase());
				formObject.setValue(SMS_FLAG,
						getTagValue(outputXml, "SMSBanking"));
				formObject.setValue(IB_FLAG,
						getTagValue(outputXml, "InternetBanking"));
				formObject.setValue(MIB_FLAG,
						getTagValue(outputXml, "MIBRegStatus"));
				formObject.setValue(STAFF_FLAG_EXISTING,
						getTagValue(outputXml, "StaffFlag"));
				formObject.setValue(IVR_FLAG, getTagValue(outputXml, "IVR"));
				formObject.setValue(CUSTOMER_OPEN_DATE,
						getTagValue(outputXml, "DateofCIDOpening"));
				formObject.setValue(TOUCHPOINTS,
						getTagValue(outputXml, "TotalTouchpoint"));
				formObject.addItemInCombo(GI_EXST_SINCE,
						getTagValue(outputXml, "DateofCIDOpening"));
				formObject.setValue(GI_EXST_SINCE,
						getTagValue(outputXml, "DateofCIDOpening"));
				try {
					String accHomeBranch = getTagValue(outputXml,
							"domicileBranchName");
					String sUpdateaccHome = "UPDATE " + sExtTable
							+ " set ACCHOMEBRNCH_WL = '"
							+ accHomeBranch.replace("#Comma#", ",")
							+ "' Where WI_NAME = N'" + sWorkitemId + "'";
					formObject.saveDataInDB(sUpdateaccHome);
				} catch (Exception e) {
					logError("", e);
				}

				sQuery = "SELECT CUST_SEGMENT FROM USR_0_CUST_SEGMENT WHERE UNIQUE_ID = "
						+ "(SELECT CUST_CATEGORY_CODE FROM USR_0_CUST_CAT WHERE UPPER(CUST_CATEGORY_DESC) "
						+ "= UPPER('"
						+ getTagValue(outputXml, "CustCategory")
						+ "'))";
				logInfo("setFCRvalueOnload", "sQuery : " + sQuery);
				sCatOutput = formObject.getDataFromDB(sQuery);
				logInfo("setFCRvalueOnload", "sMode : " + sMode);
				logInfo("setFCRvalueOnload", "sCatOutput : " + sCatOutput);
				if (sMode.equalsIgnoreCase("Quick Data Entry")) {
					logInfo("setFCRvalueOnload", "inside if");
					formObject.setValue(PD_CUSTRELTYPE,getTagValue(outputXml, "CustIslamicFlag"));
				/*  if (sCatOutput.size() > 0) {
					formObject.setValue(CUST_SEGMENT1, sCatOutput.get(0).get(0));// CUST_SEGMENT
					}
				*/  //Added by krishna  Issue For new New Account With Category Change
					String  privateClient ="";
					String Query ="select private_client from ext_ao where wi_name='"+sWorkitemId+"'";
					logInfo("On load QDE_Cust_Info","pri_query= "+ Query);
					List<List<String>> List =formObject.getDataFromDB(Query); 
					if (List != null && List.size() > 0) {
						privateClient =List.get(0).get(0); 
						logInfo("On load QDE_Cust_Info","private_clnt_flg= "+ privateClient);
					}
					if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("New Account With Category Change")
							&& privateClient.equalsIgnoreCase("Y")) {
						if (sCatOutput.size() > 0) {
							formObject.setValue(OLD_CUST_SEGMENT, sCatOutput.get(0).get(0));// "CUST_SEGMENT")
						}
					}else {
						if (sCatOutput.size() > 0) {
							formObject.setValue(CUST_SEGMENT1, sCatOutput.get(0).get(0));// "CUST_SEGMENT")
						}
					}
					if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade")) {
						if (sCatOutput.size() > 0) {
							formObject.setValue(OLD_CUST_SEGMENT, sCatOutput.get(0).get(0));
							String oldSeg = sCatOutput.get(0).get(0);
							if("Aspire".equalsIgnoreCase(oldSeg)||"Simplylife".equalsIgnoreCase(oldSeg)){
								formObject.setStyle(NEW_CUST_SEGMENT, DISABLE, TRUE);
							}
						}
					}	
				} else {
					logInfo("setFCRvalueOnload", "inside else");
				 String  privateClient ="";
					String Query ="select private_client from ext_ao where wi_name='"+sWorkitemId+"'";
					logInfo("On load QDE_Cust_Info","pri_query= "+ Query);
					List<List<String>> List =formObject.getDataFromDB(Query); 
					if (List != null && List.size() > 0) {
				     privateClient =List.get(0).get(0); 
				     logInfo("On load QDE_Cust_Info","private_clnt_flg= "+ privateClient);
					}
				    if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("New Account With Category Change")
					    && privateClient.equalsIgnoreCase("Y")) {
						if (sCatOutput.size() > 0) {
							formObject.setValue(OLD_CUST_SEGMENT, sCatOutput.get(0).get(0));// "CUST_SEGMENT")
						}
					}else {
					if (sCatOutput.size() > 0) {
						formObject.setValue(PD_CUSTSEGMENT, sCatOutput.get(0).get(0));// "CUST_SEGMENT")
					}
					}
					formObject.setValue(PD_CUSTRELTYPE,
							getTagValue(outputXml, "CustIslamicFlag"));
					formObject.setValue(CUST_PREFIX,
							getTagValue(outputXml, "Prefix"));
					formObject.setValue(PD_FULLNAME,
							getTagValue(outputXml, "FullName"));
					formObject.setValue(PD_DOB,
							setDateValue1(getTagValue(outputXml, "DOB")));
					formObject.setValue(PD_MOTHERMAIDENNAME,
							getTagValue(outputXml, "MotherName"));
				}try {
					if (!getTagValue(outputXml, "Address").equalsIgnoreCase("")) {
						String[] sAllAddress = getTagValue(outputXml, "Address")
								.split(";");
						String[] sEachAddressInfo;
						String sAddressType = "";
						String sAddress = "";
						for (int i = 0; i < sAllAddress.length; i++) {
							sAddress = sAllAddress[i] + ",END";
							sEachAddressInfo = sAddress.split(",");
							sAddressType = sEachAddressInfo[0];
							logInfo("setFCRvalueOnload", "sAddress: "
									+ sAddress);
							if (sAddressType.equalsIgnoreCase("Correspondence Address")) { // ifs
																					// changed
																					// to
																					// else
																					// if
																					// Sanal
																					// Grover
								logInfo("setFCRvalueOnload",
										"Correspondence Address");
								formObject.setValue(CP_POBOXNO,
										(sEachAddressInfo[11].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(CP_FLOOR,
										(sEachAddressInfo[1].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(CP_STREET,
										(sEachAddressInfo[2].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(CORR_CNTRY,
										(sEachAddressInfo[6].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(CP_EMAIL,
										(sEachAddressInfo[7].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								logInfo("setFCRvalueOnload",
										"sEachAddressInfo[6]: "
												+ sEachAddressInfo[6] + ", "
												+ "sEachAddressInfo[10]: "
												+ sEachAddressInfo[10]
												+ ", sEachAddressInfo[4]: "
												+ sEachAddressInfo[4]);
								sState = (sEachAddressInfo[10].replaceAll(
										"#col#", ";")).replaceAll("#Comma#",
										",").toUpperCase();
								sCity = (sEachAddressInfo[4].replaceAll(
										"#col#", ";")).replaceAll("#Comma#",
										",").toUpperCase();
								logInfo("setFCRvalueOnload", "sState: "
										+ sState + ", sCity: " + sCity);
								if (sUAEStates.indexOf(sState) != -1) {
									logInfo("setFCRvalueOnload",
											"set corr state");
									formObject.setValue(CORR_STATE, sState);
								} else {
									formObject.setValue(CORR_STATE, OTHERS);
									if (sActivityName
											.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)
											|| sActivityName
													.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)) {
										formObject.setValue(
												CPD_RISK_ASSESS_MARKS, sState);
									} else {
										formObject.setValue(CP_OTHERS, sState);
									}
								}

								if (formObject
										.getValue(CORR_CNTRY)
										.toString()
										.equalsIgnoreCase(
												"UNITED ARAB EMIRATES")) {
									logInfo("setFCRvalueOnload",
											"set corr city");
									formObject.setValue(CP_CITY, sCity);
								} else {
									logInfo("setFCRvalueOnload",
											"set corr city as others");
									formObject.setValue(CP_CITY, OTHERS);
									formObject.setValue(OTHER_CORR_CITY, sCity);
								}
							} else if (sAddressType.equalsIgnoreCase("Permanent Address")) {
								formObject.setValue(PA_BUILDINGNAME,
										(sEachAddressInfo[11].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(PA_VILLAFLATNO,
										(sEachAddressInfo[1].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(PA_STREET,
										(sEachAddressInfo[2].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								// formObject.setValue(PA_CITY,(sEachAddressInfo[4].replaceAll("#col#",
								// ";")).replaceAll("#Comma#", ","));
								// formObject.setValue(RES_CNTRY,(sEachAddressInfo[6].replaceAll("#col#",
								// ";")).replaceAll("#Comma#", ","));
								formObject.setValue(PERM_CNTRY,
										(sEachAddressInfo[6].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));
								formObject.setValue(FCR_PER_CNTRY,
										(sEachAddressInfo[6].replaceAll(
												"#col#", ";")).replaceAll(
												"#Comma#", ","));

								sState = (sEachAddressInfo[10].replaceAll(
										"#col#", ";")).replaceAll("#Comma#",
										",").toUpperCase();
								sCity = (sEachAddressInfo[4].replaceAll(
										"#col#", ";")).replaceAll("#Comma#",
										",");

								if (sUAEStates.indexOf(sState) != -1) {
									formObject.setValue(PERM_STATE, sState);
								} else {
									formObject.setValue(PERM_STATE, OTHERS);
									formObject.setValue(PA_OTHERS, sState);
								}
								if (formObject.getValue(PERM_CNTRY).toString().equalsIgnoreCase("UNITED ARAB EMIRATES")) {
									formObject.setValue(PA_CITY, sCity);
								} else {
									formObject.setValue(PA_CITY, OTHERS);
									formObject.setValue(OTHER_RESIDENTIAL_CITY,sCity);
									formObject.setValue(RA_CITY, OTHERS);
								}
							} else if (sAddressType
									.equalsIgnoreCase("Office Address")) {
								/*
								 * formObject.setValue(CP_TELEOFFICE,
								 * sEachAddressInfo
								 * [8].replaceAll("#Comma#",","));
								 * formObject.setValue
								 * ("TEXT75",sEachAddressInfo[
								 * 8].replaceAll("#Comma#",","));
								 */
								// formObject.setValue(EMP_COUNTRY,
								// sOutput.get(0).get(32));
								logInfo("setfcaronload", "employer address"
										+ sEachAddressInfo);
								formObject.setValue(EMP_STREET,
										sEachAddressInfo[1].replaceAll(
												"#Comma#", ","));
								formObject.setValue(EMP_CITY,
										sEachAddressInfo[2].replaceAll(
												"#Comma#", ","));
								formObject.setValue(EMP_PO_BOX,
										sEachAddressInfo[4].replaceAll(
												"#Comma#", ","));
								// formObject.setValue(EMP_CITY_OTHERS,
								// sEachAddressInfo[8].replaceAll("#Comma#",",");
								formObject.setValue(EMP_STATE,
										sEachAddressInfo[6].replaceAll(
												"#Comma#", ","));
								// formObject.setValue(EMP_STATE_OTHERS,
								// sEachAddressInfo[8].replaceAll("#Comma#",","));
							}
						}
					}
				} catch (Exception e) {
					logError("", e);
				}

				if (!getTagValue(outputXml, "Account").equalsIgnoreCase("")) {
					sAllAccount = getTagValue(outputXml, "Account").split(";");
					String sValues = "";
					String sTableName = "USR_0_PRODUCT_EXISTING";
					String sColumnName = "WI_NAME,ACC_TYPE,ACC_NO,ACC_TITLE,ACC_STATUS,BRANCH_CODE,BRANCH_NAME,PRODUCT_CODE,PRODUCT_NAME,CURRENCY,CUSTOMER_ID,ACC_BALANCE,ACCOUNT_TYPE";
					formObject
							.saveDataInDB("DELETE FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME = '"
									+ sWorkitemId
									+ "'  AND CUSTOMER_ID = '"
									+ sCustomerID + "'");
					for (int i = 0; i < sAllAccount.length; i++) {
						sEachAccountInfo = sAllAccount[i].split(",");
						sValues = "'" + sWorkitemId + "','"
								+ sEachAccountInfo[0] + "','"
								+ sEachAccountInfo[1] + "','"
								+ sEachAccountInfo[2] + "','"
								+ sEachAccountInfo[3] + "','"
								+ sEachAccountInfo[4] + "','"
								+ sEachAccountInfo[5] + "','"
								+ sEachAccountInfo[6] + "','"
								+ sEachAccountInfo[7] + "','"
								+ sEachAccountInfo[9] + "','" + sCustomerID
								+ "','" + sEachAccountInfo[8] + "','"
								+ sEachAccountInfo[10] + "'";
						log.info("sValues---" + sValues);
						int result = insertDataIntoDB(sTableName, sColumnName,
								sValues);
					}
				}

				if (!getTagValue(outputXml, "Creditcard").equalsIgnoreCase("")) {
					sAllAccount = getTagValue(outputXml, "Creditcard").split(
							";");
					String sValues = "";
					String sTableName = "USR_0_CREDITCARD_EXISTING";
					String sColumnName = "WI_NAME,CARD_NO,EMBOSS_NAME,CARD_TYPE,PRODUCT_NAME,VPLUS_ACC_NO";

					for (int i = 0; i < sAllAccount.length; i++) {
						sEachAccountInfo = sAllAccount[i].split(",");
						formObject
								.saveDataInDB("DELETE FROM USR_0_CREDITCARD_EXISTING WHERE WI_NAME = '"
										+ sWorkitemId
										+ "' AND CARD_NO ='"
										+ sEachAccountInfo[1] + "'");
						sValues = "'" + sWorkitemId + "','"
								+ sEachAccountInfo[0] + "','"
								+ sEachAccountInfo[1] + "','"
								+ sEachAccountInfo[2] + "','"
								+ sEachAccountInfo[3] + "','"
								+ sEachAccountInfo[4] + "'";
						int result = insertDataIntoDB(sTableName, sColumnName,
								sValues);
					}
				}
			} else {
				sMessage = getTagValue(outputXml, "td");
			}
			if (iFinalCode == 0) { // Sanal Pending
				sendMessageValuesList("", sMessage);
			} else if (iFinalCode == 1) {
				sendMessageValuesList("",
						"Unable to fetch complete customer details from FCR");
			}
			outputXml = callCustomerMISDetails(sCustomerID);
			outputXml = outputXml.replace("&", "#amp#");
			sReturnCode = getTagValues(outputXml, "returnCode");

			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				outputXml = outputXml.replaceAll("null", "");
				formObject.setValue(SIGNATUREPRESENTFLAG,
						getTagValue(outputXml, "CustomerSignaturePresent"));
				formObject.setValue(PHOTOPRESENTFLAG,
						getTagValue(outputXml, "CustomerPhotoPresent"));
				String sPriCustomerID = getTagValue(outputXml, "CustomerId");

				if (!getTagValue(outputXml, "RelDetail").equalsIgnoreCase("")) {
					sAllAccount = getTagValue(outputXml, "RelDetail")
							.split(";");
					String sTableName = "USR_0_EXISTING_CUST_RELATION";
					String sColumnName = "WI_NAME,PRIMARY_CUST_ID,SECONDARY_CUST_ID,CUST_NAME,RELATION_CODE,RELATION_TEXT,INV_RELATION_CODE,INV_RELATION_TEXT,RELATION_FLAG";

					formObject
							.saveDataInDB("DELETE FROM USR_0_EXISTING_CUST_RELATION WHERE WI_NAME = N'"
									+ sWorkitemId
									+ "' AND PRIMARY_CUST_ID = '"
									+ sPriCustomerID + "'");
					for (int i = 0; i < sAllAccount.length; i++) {
						sEachAccountInfo = sAllAccount[i].split(",");
						String sValues = "'" + sWorkitemId + "','"
								+ sPriCustomerID + "','" + sEachAccountInfo[3]
								+ "','" + sEachAccountInfo[0] + "','"
								+ sEachAccountInfo[4] + "','"
								+ sEachAccountInfo[5] + "','"
								+ sEachAccountInfo[1] + "','"
								+ sEachAccountInfo[2] + "','"
								+ sEachAccountInfo[6] + "'";
						int result = insertDataIntoDB(sTableName, sColumnName,
								sValues);
					}
				}
			} else {
				sendMessageValuesList("",
						"Unable to fetch customer MIS details from FCR");
			}

			outputXml = callFetchFATCADetails(sCustomerID);
			outputXml = outputXml.replaceAll("&", "#amp#");
			sReturnCode = getTagValues(outputXml, "returnCode");

			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				outputXml = outputXml.replaceAll("null", "");
				String sCustomerInfo = getTagValues(outputXml, "CustomerInfo");
				if (!sCustomerInfo.equalsIgnoreCase("")) {
					Calendar sCurrentCalendar = Calendar.getInstance(); // change
																		// 29-05-2022
																		// Gauta
																		// set
																		// current
																		// date
					SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
							DATEFORMAT);
					String sClassficaitondate = simpleDateFormat
							.format(sCurrentCalendar.getTime());
					log.info("CustomerInfo---" + sCustomerInfo);
					formObject.setValue(FAT_US_PERSON,
							getTagValue(sCustomerInfo, "USpassportholder"));
					formObject.setValue(FAT_LIABLE_TO_PAY_TAX,
							getTagValue(sCustomerInfo, "USTaxLiable"));
					formObject.setValue(FAT_SSN,
							getTagValue(sCustomerInfo, "TINorSSN"));
					formObject.setValue(FATCAOPTION, "UPD");
					formObject.addItemInCombo(DATEPICKERCUST,
							sClassficaitondate);// getTagValue(sCustomerInfo,"customerFATCAClsfctnDate"));
					formObject.setValue(DATEPICKERCUST, sClassficaitondate);// getTagValue(sCustomerInfo,"customerFATCAClsfctnDate"));
					formObject.addItemInCombo(DATEPICKERW8,
							getTagValue(sCustomerInfo, "W8_Sign_Date"));
					formObject.setValue(DATEPICKERW8,
							getTagValue(sCustomerInfo, "W8_Sign_Date"));
					formObject.setValue(US_INDICIA_MDM,
							getTagValue(sCustomerInfo, "USIndiaciaFound"));
					formObject.setValue(FCR_COUNTRYBIRTH,
							getTagValue(sCustomerInfo, "countryOfBirth"));
					formObject
							.setValue(
									POACOMBO,
									getTagValue(sCustomerInfo,
											"POAtoPersonwithUSAddr"));
					formObject.setValue(FAT_CUST_CLASSIFICATION,
							getTagValue(sCustomerInfo, "customerFATCAClsfctn"));
					String sDocCollected = getTagValue(sCustomerInfo,
							"documentCollected");
					if (!getTagValue(sCustomerInfo, "USIndiaciaFound")
							.equalsIgnoreCase("")) {
						formObject.setValue(COMBODOC, sDocCollected);
						if (getListCount(COMBODOC) == 2) {
							formObject.setStyle(COMBODOC, DISABLE, TRUE);
						} else {
							formObject.setStyle(COMBODOC, DISABLE, FALSE);
						}
						if (formObject.getValue(US_INDICIA_MDM).toString()
								.equalsIgnoreCase("No")) {
							formObject.setValue(
									INDICIACOMBO,
									getTagValue(sCustomerInfo,
											"USIndiaciaFound"));
						} else {
							formObject.setValue(INDICIACOMBO, "YES");
						}
					}
					formObject.setValue(COMBODOC,
							getTagValue(sCustomerInfo, "documentCollected"));
					int fieldToFocus = Integer.parseInt(formObject.getValue(
							SELECTED_ROW_INDEX).toString());
					String sAccRelation = formObject.getTableCellValue(
							ACC_RELATION, fieldToFocus, 7).toString();
					String[] triggerEventForFatcaControls = { FAT_US_PERSON,
							FAT_LIABLE_TO_PAY_TAX, POACOMBO };
					for (int i = 0; i < triggerEventForFatcaControls.length; i++) {
						logInfo("setFCRValueonLoad",
								"triggerEventForFatcaControls[i]: "
										+ triggerEventForFatcaControls[i]);
						manageChangeinFATCAFields(
								triggerEventForFatcaControls[i], sAccRelation);
						autoSetFatca(triggerEventForFatcaControls[i]);
					}
					logInfo("setFCRValueonLoad", "fatcamini value: "
							+ formObject.getValue(FATCAMINI).toString());
				} else {
					formObject.setValue(FATCAOPTION, "ADD");
				}
			} else {
				sendMessageValuesList("",
						"Unable to fetch customer FATCA details from FCR");
			}

			long endTime = System.currentTimeMillis();
			long diff1 = endTime - startTime;
			logInfo("setFCRValueonLoad", "FCR LOAD TIME: " + startTime);
			sQuery = "SELECT EIDANO FROM USR_0_EIDACARD_DETAILS WHERE WI_NAME = N'"
					+ sWorkitemId + "' AND CUST_ID = N'" + sCustomerID + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				if (!sOutput.get(0).get(0).equalsIgnoreCase("")) {
					setEIDAValueonLoad(sOutput.get(0).get(0));// "EIDANO"
				}
			}
			outputXml = callBanquaService();
			outputXml = outputXml.replace("&", "#amp#");
			sReturnCode = getTagValues(outputXml, "returnCode");
			if (sReturnCode.equalsIgnoreCase("0")
					|| sReturnCode.equalsIgnoreCase("2")) {
				outputXml = outputXml.replace("null", "");
				if (!getTagValue(outputXml, "Accounts").equalsIgnoreCase("")) {
					sAllAccount = getTagValue(outputXml, "Accounts").split(";");
					int iCount = 0;
					String sTableName = "USR_0_BANQUADETAILS";
					String sColumnName = "WI_NAME,CUSTOMER_ID,ACC_NO,CURRENCY,FREQUENCY,PAID_PREMIUM,POLICY_ACC_VALUE,POLICY_NO,POLICY_STARTDATE,POLICY_STATUS,POLICY_VALUE,PREMIUM_AMT,PRODUCT_NAME,PROVIDER_NAME,POLICY_TERM";
					sCustomerID = getTagValues(outputXml, "CustomerId");
					String[] sTemp;
					String sDate = "";
					for (int i = 0; i < sAllAccount.length; i++) {
						sEachAccountInfo = sAllAccount[i].split(",");
						sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_BANQUADETAILS WHERE WI_NAME = N'"
								+ sWorkitemId
								+ "' and ACC_NO = '"
								+ sEachAccountInfo[0] + "'";
						sOutput = formObject.getDataFromDB(sQuery);
						if (sOutput != null && sOutput.size() > 0) {
							log.info("sOutput Existing Acc---" + sOutput);
							iCount = Integer.parseInt(sOutput.get(0).get(0));
						}
						if (iCount == 0) {
							if (!sEachAccountInfo[6].equalsIgnoreCase("")) {
								sTemp = sEachAccountInfo[6].split("/");
								sDate = sTemp[0] + "/"
										+ getMonthAlpha(sTemp[1]) + "/"
										+ sTemp[2];
							}
							String sValues = "'" + sWorkitemId + "','"
									+ sCustomerID + "','" + sEachAccountInfo[0]
									+ "','" + sEachAccountInfo[1] + "','"
									+ sEachAccountInfo[2] + "','"
									+ sEachAccountInfo[3] + "','"
									+ sEachAccountInfo[4] + "','"
									+ sEachAccountInfo[5] + "','" + sDate
									+ "','" + sEachAccountInfo[7] + "','"
									+ sEachAccountInfo[8] + "','"
									+ sEachAccountInfo[9] + "','"
									+ sEachAccountInfo[10] + "','"
									+ sEachAccountInfo[11] + "','"
									+ sEachAccountInfo[12] + "'";
							int result = insertDataIntoDB(sTableName,
									sColumnName, sValues);
						}
					}
				}
			}
			String cust_segment = "";
			String custcat = "";
			if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
				cust_segment = CUST_SEGMENT1;
			} else {
				cust_segment = PD_CUSTSEGMENT;
			}
			sQuery = "select cust_category_type as CUST_CAT  from  usr_0_cust_cat b, usr_0_cust_segment c where c.cust_segment = '"
					+ formObject.getValue(cust_segment)
					+ "' and b.cust_category_code=c.unique_id ";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setFCRValueonLoad", "cust_category_type query: " + sQuery);
			logInfo("setFCRValueonLoad", "cust_category_type output: "
					+ sOutput.toString());
			if (sOutput != null && sOutput.size() > 0) {
				custcat = sOutput.get(0).get(0);
			}
			String crsOutput = fetchCSRCustomer(sCustomerID, custcat);
			logInfo("setFCRValueonLoad", "crsOutput: " + crsOutput);
			if (null != crsOutput && !crsOutput.isEmpty()) {
				crsOutput = crsOutput.replaceAll("null", "");
				logInfo("setFCRValueonLoad", "crsOutput after replacing null: "
						+ crsOutput);
				sReturnCode = getTagValues(crsOutput, "returnCode");
				logInfo("setFCRValueonLoad", "sReturnCode: " + sReturnCode);
				if (sReturnCode.equalsIgnoreCase("0")
						|| sReturnCode.equalsIgnoreCase("2")) {
					formObject.setValue(MANUAL_FIRSTNAME,
							getTagValues(crsOutput, "FirstName"));
					formObject.setValue(MANUAL_LASTNAME,
							getTagValues(crsOutput, "LastName"));
					formObject.setValue(CITYBIRTH_MANUAL,
							getTagValues(crsOutput, "CityOfBirth"));
					sQuery = "SELECT classification_desc AS COUNT_WI FROM usr_0_crs_cls_types WHERE classification_id='"
							+ getTagValues(crsOutput, "ClassificationId") + "'";
					sOutput = formObject.getDataFromDB(sQuery);
					String crsClass = "";
					if (sOutput != null && sOutput.size() > 0) {
						crsClass = sOutput.get(0).get(0);
					}
					formObject.setValue(CRS_CLASSIFICATION, crsClass);
					if (getTagValues(crsOutput, "CRSObtained")
							.equalsIgnoreCase("Y")) {
						formObject.setValue(CRS_CERTIFICATION_OBTAINED, "Yes");
					} else {
						formObject.setValue(CRS_CERTIFICATION_OBTAINED, "No");
					}

					// DUE
					if (getTagValues(crsOutput, "ResOtherThanUAE")
							.equalsIgnoreCase("Y")) {
						formObject.setValue(RESI_UNDER_JUD, "Yes");
					} else {
						formObject.setValue(RESI_UNDER_JUD, "No");
					}
					if (getTagValues(crsOutput, "TaxPayerInOtherCountry")
							.equalsIgnoreCase("Y")) {
						formObject.setValue(SUB_PERSONAL_TAX, "Yes");
					} else {
						formObject.setValue(SUB_PERSONAL_TAX, "No");
					}
					if (getTagValues(crsOutput, "UaeResUnderInvestScheme")
							.equalsIgnoreCase("Y")) {
						formObject.setValue(TAX_SCHEME_OBTAINED, "Yes");
					} else {
						formObject.setValue(TAX_SCHEME_OBTAINED, "No");
					}
					formObject.setValue(
							PER_INC_TAX_CON_1,
							getCodeFromCountry(
									getTagValues(crsOutput, "TaxCountry1"), 1));
					formObject.setValue(
							PER_INC_TAX_CON_2,
							getCodeFromCountry(
									getTagValues(crsOutput, "TaxCountry2"), 1));
					formObject.setValue(
							PER_INC_TAX_CON_3,
							getCodeFromCountry(
									getTagValues(crsOutput, "TaxCountry3"), 1));

					insertDataIntoDB(
							"usr_0_CRS_debug_table",
							"wi_name,crs_class,crs_obtained",
							"'"
									+ sWorkitemId
									+ "','" // change required Gautam 02/12/2021
									+ crsClass + "','"
									+ getTagValues(crsOutput, "CRSObtained")
									+ "'");
					logInfo("setFCRValueonLoad",
							"crsOutput-indexOf(GridRecord): "
									+ crsOutput.indexOf("GridRecord"));
					if (crsOutput.indexOf("GridRecord") > -1) {
						XMLParser xmlResponse = new XMLParser(crsOutput);
						int start = xmlResponse.getStartIndex("CRSGridRecords",
								0, 0);
						int deadEnd = xmlResponse.getEndIndex("CRSGridRecords",
								start, 0);
						int noOfFields = xmlResponse.getNoOfFields(
								"GridRecord", start, deadEnd);
						logInfo("setFCRValueonLoad", "no. of GridRecords: "
								+ noOfFields);
						int end = 0;
						JSONArray jsonArray = new JSONArray();
						for (int i = 0; i < noOfFields; i++) {
							start = xmlResponse.getStartIndex("GridRecord",
									end, 0);
							end = xmlResponse.getEndIndex("GridRecord", start,
									0);
							logInfo("setFCRValueonLoad",
									"FOR GridRecord: "
											+ xmlResponse.getValueOf(
													"GridRecord", start, end));
							try {
								if (null != xmlResponse.getValueOf(
										"countryTaxRes", start, end)
										&& !xmlResponse.getValueOf(
												"countryTaxRes", start, end)
												.isEmpty()) {
									JSONObject jsonObject = new JSONObject();
									jsonObject.put("Sno", i + 1);
									jsonObject.put("Country_Of_Tax_Residency",
											countryMap.get(xmlResponse
													.getValueOf(
															"countryTaxRes",
															start, end)));
									jsonObject.put(
											"TaxPayer_Identification_Number",
											xmlResponse.getValueOf("TIN",
													start, end));
									sQuery = "SELECT reason_id||reason_desc AS COUNT_WI FROM usr_0_crs_tin_reasons "
											+ "WHERE reason_id='"
											+ xmlResponse.getValueOf(
													"reasonNoTin", start, end)
											+ "'";
									List<List<String>> sOutput1 = formObject
											.getDataFromDB(sQuery);
									String tinreason = "";
									if (sOutput1.size() > 0) {
										tinreason = sOutput1.get(0).get(0);
									}
									jsonObject.put(
											"Reason_For_Not_Providing_TIN",
											tinreason);
									jsonObject.put("Reason_Description",
											xmlResponse.getValueOf(
													"reasonDesc", start, end));
									jsonArray.add(jsonObject);
								}
							} catch (Exception e) {
								logError("setFCRValueonLoad", e);
							}
						}
						logInfo("setFCRValueonLoad", "jsonarray: " + jsonArray);
						formObject.addDataToGrid(CRS_TAXCOUNTRYDETAILS,
								jsonArray);
					}
					checkCRS();
					saveCRSDetails();
				}
			}
			logInfo("", "getkyc started");
			String sQuerykyc = "SELECT DEALS_IN_WMD,SALARY_TRANSFER FROM BPM_KYC_QUESTIONS_TXN WHERE CUST_ID = '"
					+ sCustomerID + "'";
			logInfo("", "sQuerykyc : " + sQuerykyc);
			List<List<String>> sOutputKyc = formObject.getDataFromDB(sQuerykyc);
			logInfo("", "sOutputKyc : " + sOutputKyc);
			if (sOutputKyc != null && sOutputKyc.size() > 0) {
				formObject.setValue(DEALS_IN_WMD, sOutputKyc.get(0).get(0));
				formObject.setValue(SALARY_TRANSFER, sOutputKyc.get(0).get(1));

			}
			logInfo("", "getkyc ends");

			String[] triggerEventForControls = { FCR_PASSPORTISSDATE,
					FCR_PASSPORTEXPDATE, FCR_VISANO, FCR_VISAISSDATE,
					FCR_VISAEXPDATE, FCR_NATIONALITY, FCR_EIDANO,
					FCR_PROFESSION, FCR_GENDER, SERVICE_PACKAGE, SIGN_STYLE1,
					FCR_EMPLYR_NAME, FCR_SHORTNAME, ED_POSITN_DESGNT,
					FCR_PER_CNTRY, FCR_RESIDENT, PD_EIDANO, FCR_RISK, FCR_DOB,
					FCR_PASSPORTNO, FCR_PREFIX, FCR_NAME, FCR_MOTHERSNAME,
					FCR_ADDRESS, FCR_CITY, FCR_STATE, FCR_CNTRY, FCR_PH,
					FCR_MOBILE, FCR_EMAIL, ED_MONTHLY_INCM };
			for (int i = 0; i < triggerEventForControls.length; i++) {
				logInfo("setFCRValueonLoad", "triggerEventForControls[i]: "
						+ triggerEventForControls[i]);
				fillFCRDataInBelowFields(triggerEventForControls[i], formObject
						.getValue(triggerEventForControls[i]).toString());
			}
			logInfo("setFCRValueonLoad", "fatcamini value: "
					+ formObject.getValue(FATCAMINI).toString());
		} catch (Exception e) {
			logError("setFCRValueonLoad", e);
		}
	}

	public String fetchFCRCustomer(String sCustID, String sTxn) {
		logInfo("fetchFCRCustomer", "INSIDE");
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
		logInfo("fetchFCRCustomer", "sOutput: " + sOutput);
		String inputXml = getFCRInputXML(sCustID, sOutput.get(0).get(0),
				"TP906079", sTxn);
		logInfo("fetchFCRCustomer", "inputXml: " + inputXml);
		String outputXml = socket.connectToSocket(inputXml);
		logInfo("fetchFCRCustomer", "outputXml: " + outputXml);

		return outputXml;
	}

	public String getFCRInputXML(String sCustID, String sSeqNo,
			String sUserName, String sTxn) {
		String inputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Customer_Information</Calltype>" + "<Customer>"
				+ "<CUST_ID>" + sCustID + "</CUST_ID>" + "<REF_NO>" + sSeqNo
				+ "</REF_NO>" + "<txnType>" + sTxn + "</txnType>" + "<USER>"
				+ sUserName + "</USER>" + "<WiName>" + sWorkitemId
				+ "</WiName>" + "</Customer><EngineName>" + sEngineName
				+ "</EngineName>" + "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		return inputXml;
	}

	public String callCustomerMISDetails(String sCustID) {
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String inputXml = getCustMISXML(sCustID, sOutput.get(0).get(0),
				"TP906079");
		String outputXml = socket.connectToSocket(inputXml);
		return outputXml;
	}

	public String getCustMISXML(String sCustID, String sSeqNo, String sUserName) {
		String inputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Customer_MIS_Information</Calltype>"
				+ "<Customer>" + "<CUST_ID>" + sCustID + "</CUST_ID>"
				+ "<CustomerSignatureFlag>N</CustomerSignatureFlag>"
				+ "<CustomerSignatureType>1</CustomerSignatureType>"
				+ "<REF_NO>" + sSeqNo + "</REF_NO>" + "<USER>" + sUserName
				+ "</USER>" + "<WiName>" + sWorkitemId + "</WiName>"
				+ "</Customer><EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		return inputXml;
	}

	public String callFetchFATCADetails(String sCustID) {
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String inputXml = getCustFATCAXML(sCustID, sOutput.get(0).get(0),
				"TP906079");
		String outputXml = socket.connectToSocket(inputXml);
		return outputXml;
	}

	public String getCustFATCAXML(String sCustID, String sSeqNo,
			String sUserName) {
		String inputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>FetchFATCADetails</Calltype>" + "<Customer>"
				+ "<CUST_ID>" + sCustID + "</CUST_ID>"
				+ "<CUST_INFO_TYPE>FATCADetails</CUST_INFO_TYPE>" + "<REF_NO>"
				+ sSeqNo + "</REF_NO>" + "<USER>" + sUserName + "</USER>"
				+ "<WiName>" + sWorkitemId + "</WiName>"
				+ "</Customer><EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		return inputXml;
	}

	public String callBanquaService() {
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String inputXml = getBanquaInputXML(sOutput.get(0).get(0), "TP906079");
		String outputXml = socket.connectToSocket(inputXml);
		return outputXml;
	}

	public String getBanquaInputXML(String sSeqNo, String sUserName) {
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sCustID = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);// "acc_relation.cid"
		String inputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>cust_banca</Calltype>" + "<CUST_ID>" + sCustID
				+ "</CUST_ID>" + "<REF_NO>" + sSeqNo + "</REF_NO>" + "<USER>"
				+ sUserName + "</USER>" + "<WiName>" + sWorkitemId
				+ "</WiName>" + "<EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		;
		return inputXml;
	}

	public void setEIDAValueonLoad(String sEidaNo) {
		try {
			String sQuery = "SELECT (SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE = "
					+ " (SELECT COUNTRY_CODE FROM USR_0_EIDA_COUNTRY WHERE EIDA_CODE =NATIONALITY)) NATIONALITY, CUST_NAME, EIDANO, DOB,"
					+ "PASSPORTNO, PASSPORTISSDATE, PASSPORTEXPDATE, PASSPORTEXPPLACE, MOTHERNAME, ADDRESS, CITY, STATE, MOBILE, PHONE_NO,"
					+ "EMAIL, PROFESSION, PREFIX, EMP_NAME, GENDER, VISA_NO, VISA_EXP_DATE, VISA_ISSUE_DATE FROM USR_0_EIDACARD_DETAILS"
					+ " WHERE WI_NAME = N'"
					+ sWorkitemId
					+ "' AND EIDANO = N'"
					+ sEidaNo + "'";
			logInfo("setEIDAValueonLoad", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setEIDAValueonLoad", "sOutput: " + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				formObject.addItemInCombo(EIDA_NATIONALITY,
						sOutput.get(0).get(0).toUpperCase());// NATIONALITY
				formObject.setValue(EIDA_NATIONALITY, sOutput.get(0).get(0)
						.toUpperCase());// NATIONALITY
				formObject.setValue(EIDA_NAME, sOutput.get(0).get(1));// CUST_NAME
				formObject.setValue(EIDA_EIDANO, sOutput.get(0).get(2));// EIDANO
				formObject.setValue(EIDA_DOB, sOutput.get(0).get(3));// DOB
				formObject.setValue(EIDA_PASSPORTNO, sOutput.get(0).get(4));// PASSPORTNO
				formObject
						.setValue(EIDA_PASSPORTISSDATE, sOutput.get(0).get(5));// PASSPORTISSDATE
				formObject
						.setValue(EIDA_PASSPORTEXPDATE, sOutput.get(0).get(6));// PASSPORTEXPDATE
				// formObject.setValue(PASSPORTEXPPLACE_EIDA,sOutput.get(0).get(7));//PASSPORTEXPPLACE
				formObject.setValue(EIDA_MOTHERNAME, sOutput.get(0).get(8));// MOTHERNAME
				formObject.setValue(EIDA_ADDRESS, sOutput.get(0).get(9));// ADDRESS
				formObject.addItemInCombo(EIDA_CITY, sOutput.get(0).get(10)
						.toUpperCase());// CITY
				formObject.setValue(EIDA_CITY, sOutput.get(0).get(10)
						.toUpperCase());// CITY
				formObject.addItemInCombo(EIDA_STATE, sOutput.get(0).get(11)
						.toUpperCase());// STATE
				formObject.setValue(EIDA_STATE, sOutput.get(0).get(11)
						.toUpperCase());// STATE
				formObject.setValue(EIDA_MOBILE, sOutput.get(0).get(12));// MOBILE
				formObject.setValue(EIDA_PH, sOutput.get(0).get(13));// PHONE_NO
				formObject.setValue(EIDA_EMAIL, sOutput.get(0).get(14));// EMAIL
				formObject.setValue(EIDA_PROFESSION, sOutput.get(0).get(15));// PROFESSION
				formObject.addItemInCombo(EIDA_PREFIX, sOutput.get(0).get(16));
				formObject.setValue(EIDA_PREFIX, sOutput.get(0).get(16));// PREFIX
				formObject.setValue(EIDA_EMPLYR_NAME, sOutput.get(0).get(17));// EMP_NAME
				formObject.setValue(EIDA_GENDER, sOutput.get(0).get(18));// GENDER
				formObject.setValue(EIDA_VISANO, sOutput.get(0).get(19));// VISA_NO
				formObject.setValue(EIDA_VISAEXPDATE, sOutput.get(0).get(20));// VISA_EXP_DATE
				formObject.setValue(EIDA_VISAISSDATE, sOutput.get(0).get(21));// VISA_ISSUE_DATE

				if (formObject.getValue(DATA_ENTRY_MODE).toString()
						.equalsIgnoreCase("Detail Data Entry")) {
					int iAge = calculateAge(sOutput.get(0).get(3));// "DOB"
					log.info("iAge---" + iAge);
					if (iAge < 21) {
						String[] sDOB = sOutput.get(0).get(3).split(" ");
						String sDateOfMajority = sDOB[2] + "/" + sDOB[1] + "/"
								+ (Integer.parseInt(sDOB[0]) + 21);
						formObject.setValue(PD_DATEOFATTAININGMAT,
								sDateOfMajority);
					}
				}
			}
		} catch (Exception e) {
			logError("", e);
		}
	}

	public String fetchCSRCustomer(String sCustID, String sTxn) {
		logInfo("fetchCSRCustomer", "INSIDE");
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		logInfo("fetchCSRCustomer", "sOutput: " + sOutput.toString());
		String inputXml = getCRSInputXML(sCustID, sOutput.get(0).get(0),
				"TP906079", sTxn);
		logInfo("fetchCSRCustomer", "inputXml: " + inputXml);
		String outputXml = socket.connectToSocket(inputXml);
		logInfo("fetchCSRCustomer", "outputXml: " + outputXml);
		return outputXml;
	}

	public String getCRSInputXML(String sCustID, String sSeqNo,
			String CustType, String sTxn) {
		logInfo("getCRSInputXML", "INSIDE");
		String inputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>FetchCRSDetails</Calltype>"
				+ "<useCase>duediligence</useCase>" + "<Customer>" + "<CustID>"
				+ sCustID + "</CustID>" + "<REF_NO>" + sSeqNo + "</REF_NO>"
				+ "<CustType>" + sTxn + "</CustType>" + "<USER>" + sUserName
				+ "</USER>" + "<WiName>" + sWorkitemId + "</WiName>"
				+ "</Customer><EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		return inputXml;
	}

	public void manageEIDACheckBoxes() {
		if (formObject.getValue(CHECKBOX_SELECTALL_EIDA).toString()
				.equalsIgnoreCase(TRUE)) {
			String[] fieldNames = { CHECKBOX_PREFIX_EIDA,
					CHECKBOX_FULLNAME_EIDA, CHECKBOX_SHORTNAME_EIDA,
					CHECKBOX_DOB_EIDA, CHECKBOX_PASSPORT_NO_EIDA,
					CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_EXP_DT_EIDA,
					"CHECK62", CHECKBOX_VISA_NO_EIDA,
					CHECKBOX_VISA_ISSUE_DATE_EIDA,
					CHECKBOX_VISA_EXPIRY_DATE_EIDA, CHECKBOX_NATIONALITY_EIDA,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_EIDANO_EIDA,
					CHECKBOX_CORR_POB_EIDA, CHECKBOX_CITY_EIDA,
					CHECKBOX_STATE_EIDA, CHECKBOX_CNTRY_OF_CORR_EIDA,
					CHECKBOX_COUNTRY_PER_RES_EIDA, CHECKBOX_TELE_RES_EIDA,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_EMAIL_EIDA,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_GENDER_EIDA,
					CHECKBOX_EMP_NAME_EIDA, CHECKEIDA, CHECKBOX_FIRSTNAME_EIDA,
					CHECKBOX_LASTNAME_EIDA, CHECKBOX_PASSPORT_TYPE_EIDA,
					CHECKBOX_COB_EIDA, HD_FIVE, CHECKBOX_VISA_STATUS_EIDA };
			checkCheckBoxes(fieldNames);
		} else {
			String[] fieldNames = { CHECKBOX_PREFIX_EIDA,
					CHECKBOX_FULLNAME_EIDA, CHECKBOX_SHORTNAME_EIDA,
					CHECKBOX_DOB_EIDA, CHECKBOX_PASSPORT_NO_EIDA,
					CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_EXP_DT_EIDA,
					"CHECK62", CHECKBOX_VISA_NO_EIDA,
					CHECKBOX_VISA_ISSUE_DATE_EIDA,
					CHECKBOX_VISA_EXPIRY_DATE_EIDA, CHECKBOX_NATIONALITY_EIDA,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_EIDANO_EIDA,
					CHECKBOX_CORR_POB_EIDA, CHECKBOX_CITY_EIDA,
					CHECKBOX_STATE_EIDA, CHECKBOX_CNTRY_OF_CORR_EIDA,
					CHECKBOX_COUNTRY_PER_RES_EIDA, CHECKBOX_TELE_RES_EIDA,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_EMAIL_EIDA,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_GENDER_EIDA,
					CHECKBOX_EMP_NAME_EIDA, CHECKEIDA, CHECKBOX_FIRSTNAME_EIDA,
					CHECKBOX_LASTNAME_EIDA, CHECKBOX_PASSPORT_TYPE_EIDA,
					CHECKBOX_COB_EIDA, HD_FIVE, CHECKBOX_VISA_STATUS_EIDA };
			uncheckCheckBoxes(fieldNames);
		}
	}

	public boolean saveComparisonData() {
		logInfo("saveComparisonData", "inside");
		try {
			long start_time = System.currentTimeMillis();
			int iSelectedRow = 0;
			String cust_id = "";
			String sFinalPrefix = "";
			String sFinalName = "";
			String sFinalShortName = "";
			String sFinalDOB = "";
			String sFinalPassportNo = "";
			String sFinalPassportIssueDate = "";
			String sFinalPassportExpDate = "";
			String sFinalPassportIssuePlace = "";
			String sFinalVisaNo = "";
			String sFinalVisaIssueDate = "";
			String sFinalVisaExpDate = "";
			String sFinalNationality = "";
			String sFinalMotherName = "";
			String sFinalEIDANo = "";
			String sFinalAddress = "";
			String sFinalCity = "";
			String sFinalState = "";
			String sFinalCountry = "";
			String sFinalPermanentCountry = "";
			String sFinalPhone = "";
			String sFinalMobile = "";
			String sFinalEmail = "";
			String sFinalProfession = "";
			String sFinalGender = "";
			String sFinalEmpName = "";
			String sFinalResidentNew = "";
			String sFinalPassType = "";
			String sFinalFirstName = "";
			String sFinalLastName = "";
			String sFinalCountryOfBirth = "";
			String sFinalCityOfBirth = "";
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			cust_id = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					2);
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			sFinalName = getFinalDataComparison(CHECKBOX_FULLNAME_FCR,
					CHECKBOX_FULLNAME_EIDA, CHECKBOX_FULLNAME_MANUAL, FCR_NAME,
					EIDA_NAME, MANUAL_NAME).trim();
			sFinalShortName = getFinalDataComparison(CHECKBOX_SHORTNAME_FCR,
					CHECKBOX_SHORTNAME_EIDA, CHECKBOX_SHORTNAME_MANUAL,
					FCR_SHORTNAME, EIDA_SHORTNAME, MANUAL_SHORTNAME).trim();
			sFinalVisaNo = getFinalDataComparison(CHECKBOX_VISA_NO_FCR,
					CHECKBOX_VISA_NO_EIDA, CHECKBOX_VISA_NO_MANUAL, FCR_VISANO,
					EIDA_VISANO, MANUAL_VISANO);
			sFinalEIDANo = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO);
			sFinalPhone = getFinalDataComparison(CHECKBOX_TELE_RES_FCR,
					CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_RES_MANUAL, FCR_PH,
					EIDA_PH, MANUAL_PH);
			sFinalEmail = getFinalDataComparison(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL);
			sFinalMotherName = getFinalDataComparison(CHECKBOX_MOTHERSNAME_FCR,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_MOTHERSNAME_MANUAL,
					FCR_MOTHERSNAME, EIDA_MOTHERNAME, MANUAL_MOTHERNAME);
			sFinalMobile = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE);
			sFinalPassportNo = getFinalDataComparison(CHECKBOX_PASSPORT_NO_FCR,
					CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASSPORT_NO_MANUAL,
					FCR_PASSPORTNO, EIDA_PASSPORTNO, MANUAL_PASSPORTNO);
			sFinalEmpName = getFinalDataComparison(CHECKBOX_EMP_NAME_FCR,
					CHECKBOX_EMP_NAME_EIDA, CHECKBOX_EMP_NAME_MANUAL,
					FCR_EMPLYR_NAME, EIDA_EMPLYR_NAME, MANUAL_EMPLYR_NAME);
			sFinalAddress = getFinalDataComparison(CHECKBOX_CORR_POB_FCR,
					CHECKBOX_CORR_POB_EIDA, CHECKBOX_CORR_POB_MANUAL,
					FCR_ADDRESS, EIDA_ADDRESS, MANUAL_ADDRESS);
			sFinalPassportIssuePlace = getFinalDataComparison("CHECK17",
					"CHECK62", "CHECK39", PASSPORTEXPPLACE_FCR,
					PASSPORTEXPPLACE_EIDA, PASSPORTEXPPLACE_MANUAL);
			sFinalProfession = getFinalDataComparison(CHECKBOX_PROFESSION_FCR,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_PROFESSION_MANUAL,
					FCR_PROFESSION, EIDA_PROFESSION, MANUAL_PROFESSION);
			sFinalFirstName = getFinalDataComparison(CHECKBOX_FIRSTNAME_FCR,
					CHECKBOX_FIRSTNAME_EIDA, CHECKBOX_FIRSTNAME_MANUAL,
					FCR_NAME, EIDA_NAME, MANUAL_NAME);
			sFinalLastName = getFinalDataComparison(CHECKBOX_LASTNAME_FCR,
					CHECKBOX_LASTNAME_EIDA, CHECKBOX_LASTNAME_MANUAL, FCR_NAME,
					EIDA_NAME, MANUAL_NAME);
			sFinalCountryOfBirth = getFinalDataComparison(CHECKBOX_COB_FCR,
					CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
					EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH);
			sFinalCityOfBirth = formObject.getValue(CITYBIRTH_MANUAL)
					.toString();
			sFinalCity = getFinalData(formObject.getValue(CHECKBOX_CITY_FCR)
					.toString(), formObject.getValue(CHECKBOX_CITY_EIDA)
					.toString(), formObject.getValue(CHECKBOX_CITY_MANUAL)
					.toString(), formObject.getValue(FCR_CITY).toString(),
					formObject.getValue(EIDA_CITY).toString(), formObject
							.getValue(MANUAL_CITY).toString());
			sFinalState = getFinalData(formObject.getValue(CHECKBOX_STATE_FCR)
					.toString(), formObject.getValue(CHECKBOX_STATE_EIDA)
					.toString(), formObject.getValue(CHECKBOX_STATE_MANUAL)
					.toString(), formObject.getValue(FCR_STATE).toString(),
					formObject.getValue(EIDA_STATE).toString(), formObject
							.getValue(MANUAL_STATE).toString());
			sFinalNationality = getFinalData(
					formObject.getValue(CHECKBOX_NATIONALITY_FCR).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_EIDA).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString(),
					formObject.getValue(FCR_NATIONALITY).toString(), formObject
							.getValue(EIDA_NATIONALITY).toString(), formObject
							.getValue(MANUAL_NATIONALITY).toString());
			sFinalCountry = getFinalData(
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_FCR).toString(),
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_EIDA).toString(),
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_MANUAL)
							.toString(), formObject.getValue(FCR_CNTRY)
							.toString(), formObject.getValue(EIDA_CNTRY)
							.toString(), formObject.getValue(MANUAL_CNTRY)
							.toString());
			sFinalPermanentCountry = getFinalData(
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_FCR)
							.toString(),
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_EIDA)
							.toString(),
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_MANUAL)
							.toString(), formObject.getValue(FCR_PER_CNTRY)
							.toString(), formObject.getValue(EIDA_PER_CNTRY)
							.toString(), formObject.getValue(MANUAL_PER_CNTRY)
							.toString());
			sFinalGender = getFinalData(formObject
					.getValue(CHECKBOX_GENDER_FCR).toString(), formObject
					.getValue(CHECKBOX_GENDER_EIDA).toString(), formObject
					.getValue(CHECKBOX_GENDER_MANUAL).toString(), formObject
					.getValue(FCR_GENDER).toString(),
					formObject.getValue(EIDA_GENDER).toString(), formObject
							.getValue(MANUAL_GENDER).toString());
			sFinalPassportIssueDate = getFinalData(
					formObject.getValue(CHECKBOX_PASS_ISS_DT_FCR).toString(),
					formObject.getValue(CHECKBOX_PASS_ISS_DT_EIDA).toString(),
					formObject.getValue(CHECKBOX_PASS_ISS_DT_MANUAL).toString(),
					formObject.getValue(FCR_PASSPORTISSDATE).toString(),
					formObject.getValue(EIDA_PASSPORTISSDATE).toString(),
					formObject.getValue(MANUAL_PASSPORTISSDATE).toString());
			sFinalPassportExpDate = getFinalData(
					formObject.getValue(CHECKBOX_PASS_EXP_DT_FCR).toString(),
					formObject.getValue(CHECKBOX_PASS_EXP_DT_EIDA).toString(),
					formObject.getValue(CHECKBOX_PASS_EXP_DT_MANUAL).toString(),
					formObject.getValue(FCR_PASSPORTEXPDATE).toString(),
					formObject.getValue(EIDA_PASSPORTEXPDATE).toString(),
					formObject.getValue(MANUAL_PASSPORTEXPDATE).toString());
			sFinalPrefix = getFinalData(formObject
					.getValue(CHECKBOX_PREFIX_FCR).toString(), formObject
					.getValue(CHECKBOX_PREFIX_EIDA).toString(), formObject
					.getValue(CHECKBOX_PREFIX_MANUAL).toString(), formObject
					.getValue(FCR_PREFIX).toString(),
					formObject.getValue(EIDA_PREFIX).toString(), formObject
							.getValue(MANUAL_PREFIX).toString());
			sFinalVisaIssueDate = getFinalData(
					formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_FCR)
							.toString(),
					formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_EIDA)
							.toString(),
					formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_MANUAL)
							.toString(), formObject.getValue(FCR_VISAISSDATE)
							.toString(), formObject.getValue(EIDA_VISAISSDATE)
							.toString(), formObject
							.getValue(MANUAL_VISAISSDATE).toString());
			sFinalVisaExpDate = getFinalData(
					formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_FCR)
							.toString(),
					formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_EIDA)
							.toString(),
					formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_MANUAL)
							.toString(), formObject.getValue(FCR_VISAEXPDATE)
							.toString(), formObject.getValue(EIDA_VISAEXPDATE)
							.toString(), formObject
							.getValue(MANUAL_VISAEXPDATE).toString());
			sFinalResidentNew = getFinalData(formObject.getValue(CHECKFCR)
					.toString(), formObject.getValue(CHECKEIDA).toString(),
					formObject.getValue(CHECKMANUAL).toString(), formObject
							.getValue(FCR_RESIDENT).toString(), formObject
							.getValue(EIDA_RESIDENT).toString(), formObject
							.getValue(MANUAL_RESIDENT).toString());
			sFinalDOB = getFinalData(formObject.getValue(CHECKBOX_DOB_FCR)
					.toString(), formObject.getValue(CHECKBOX_DOB_EIDA)
					.toString(), formObject.getValue(CHECKBOX_DOB_MANUAL)
					.toString(), formObject.getValue(FCR_DOB).toString(),
					formObject.getValue(EIDA_DOB).toString(), formObject
							.getValue(MANUAL_DOB).toString());
			logInfo("onTabClick", "sFinalPassType :: Check118 :: "
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_FCR)
							.toString());
			logInfo("onTabClick", "sFinalPassType :: Check115 :: "
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_EIDA)
							.toString());
			logInfo("onTabClick", "sFinalPassType :: Check121 :: "
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_MANUAL)
							.toString());
			logInfo("onTabClick", "sFinalPassType :: passtype_fcr :: "
					+ formObject.getValue(FCR_PASSTYPE).toString());
			logInfo("onTabClick", "sFinalPassType :: psstype_eida :: "
					+ formObject.getValue(EIDA_PSSTYPE).toString());
			logInfo("onTabClick", "sFinalPassType :: passtype_manual :: "
					+ formObject.getValue(MANUAL_PASSTYPE).toString());
			sFinalPassType = getFinalData(
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_FCR).toString(),
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_EIDA).toString(),
					formObject.getValue(CHECKBOX_PASSPORT_TYPE_MANUAL)
							.toString(), formObject.getValue(FCR_PASSTYPE)
							.toString(), formObject.getValue(EIDA_PSSTYPE)
							.toString(), formObject.getValue(MANUAL_PASSTYPE)
							.toString());
			logInfo("onTabClick", "sFinalPassType :: sFinalPassType :: "
					+ sFinalPassType);
			String sVisaType = returnVisaStatus();
			String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,CUST_FULL_NAME,FCR_FULL_NAME,FCR_DOB,FCR_PASS_NO, FCR_PASS_ISSUE_DATE, FCR_PASS_EXP_DATE,FCR_PASS_ISSUE_PLACE,FCR_VISA_NO,FCR_VISA_ISSUE_DATE, FCR_VISA_EXP_DATE, FCR_NATIONALITY,MOTHER_NAME_FCR, FCR_EIDA_NO,FCR_ADDRESS,FCR_CITY,FCR_STATE, FCR_COUNTRY,FCR_PHONE_NO, FCR_MOBILE_NO, FCR_EMAIL,FCR_PROFESSION,FCR_GENDER, EIDA_FULL_NAME,EIDA_DOB ,EIDA_PASS_NO,EIDA_PASS_ISSUE_DATE,EIDA_PASS_EXP_DATE, EIDA_PASS_ISSUE_PLACE,EIDA_VISA_NO, EIDA_VISA_ISSUE_DATE,EIDA_VISA_EXP_DATE,EIDA_NATIONALITY,MOTHER_NAME_EIDA,EIDA_EIDA_NO, EIDA_ADDRESS,EIDA_CITY,EIDA_STATE, EIDA_COUNTRY,EIDA_PHONE_NO,EIDA_MOBILE_NO,EIDA_EMAIL, EIDA_PROFESSION,EIDA_GENDER, MANUAL_FULL_NAME,MANUAL_DOB, MANUAL_PASS_NO,MANUAL_PASS_ISSUE_DATE, MANUAL_PASS_EXP_DATE, MANUAL_PASS_ISSUE_PLACE, MANUAL_VISA_NO,MANUAL_VISA_ISSUE_DATE, MANUAL_VISA_EXP_DATE,MANUAL_NATIONALITY, MOTHER_NAME_MANUAL, MANUAL_EIDA_NO, MANUAL_ADDRESS, MANUAL_CITY, MANUAL_STATE, MANUAL_COUNTRY, MANUAL_PHONE_NO, MANUAL_MOBILE_NO, MANUAL_EMAIL, MANUAL_PROFESSION, MANUAL_GENDER,FCR_PREFIX,EIDA_PREFIX, MANUAL_PREFIX,FCR_EMP_NAME,EIDA_EMP_NAME, MANUAL_EMP_NAME ,FCR_RESIDENCE_COUNTRY,EIDA_RESIDENCE_COUNTRY, MANUAL_RESIDENCE_COUNTRY,IS_FCR_PREFIX, IS_FCR_NAME, IS_FCR_DOB, IS_FCR_PASSPORTNO,IS_FCR_PASSPORTISSUEDATE,IS_FCR_PASSPORTEXPDATE, IS_FCR_PASSPORTPLACE, IS_FCR_VISANO, IS_FCR_VISAEXPDATE,IS_FCR_VISAISSUEDATE,IS_FCR_NATIONALITY,IS_FCR_MOTHERNAME,IS_FCR_EIDA, IS_FCR_ADDRESS,IS_FCR_CITY,IS_FCR_STATE,IS_FCR_COUNTRY,IS_FCR_PER_COUNTRY,IS_FCR_PHONE,IS_FCR_MOBILE,IS_FCR_EMAIL,IS_FCR_PROFESSION,IS_FCR_GENDER,IS_FCR_EMPNAME,IS_EIDA_PREFIX,IS_EIDA_NAME,IS_EIDA_DOB,IS_EIDA_PASSPORTNO,IS_EIDA_PASSPORTISSUEDATE,IS_EIDA_PASSPORTEXPDATE,IS_EIDA_PASSPORTPLACE,IS_EIDA_VISANO,IS_EIDA_VISAEXPDATE,IS_EIDA_VISAISSUEDATE,IS_EIDA_NATIONALITY,IS_EIDA_MOTHERNAME,IS_EIDA_EIDA,IS_EIDA_ADDRESS,IS_EIDA_CITY,IS_EIDA_STATE,IS_EIDA_COUNTRY,IS_EIDA_PER_COUNTRY,IS_EIDA_PHONE,IS_EIDA_MOBILE,IS_EIDA_EMAIL,IS_EIDA_PROFESSION,IS_EIDA_GENDER,IS_EIDA_EMPNAME,IS_MANUAL_PREFIX,IS_MANUAL_NAME,IS_MANUAL_DOB,IS_MANUAL_PASSPORTNO,IS_MANUAL_PASSPORTISSUEDATE,IS_MANUAL_PASSPORTEXPDATE,IS_MANUAL_PASSPORTPLACE,IS_MANUAL_VISANO,IS_MANUAL_VISAEXPDATE,IS_MANUAL_VISAISSUEDATE,IS_MANUAL_NATIONALITY,IS_MANUAL_MOTHERNAME,IS_MANUAL_EIDA,IS_MANUAL_ADDRESS,IS_MANUAL_CITY,IS_MANUAL_STATE,IS_MANUAL_COUNTRY,IS_MANUAL_PER_COUNTRY,IS_MANUAL_PHONE,IS_MANUAL_MOBILE,IS_MANUAL_EMAIL,IS_MANUAL_PROFESSION,IS_MANUAL_GENDER,IS_MANUAL_EMPNAME,IS_FCR_ALL,IS_EIDA_ALL,IS_MANUAL_ALL,FINAL_FULL_NAME,FINAL_NATIONALITY,FINAL_PASS_NO,FINAL_PASS_ISSUE_DATE,FINAL_PASS_EXP_DATE,FINAL_PASS_ISSUE_PLACE,FINAL_VISA_NO,FINAL_VISA_ISSUE_DATE,FINAL_VISA_EXP_DATE,FINAL_DOB,FINAL_ADDRESS,FINAL_CITY,FINAL_STATE,FINAL_COUNTRY,FINAL_PHONE_NO,FINAL_MOBILE_NO,FINAL_EMAIL,FINAL_PROFESSION,FINAL_EIDA_NO,FINAL_GENDER,FINAL_PREFIX,FINAL_EMP_NAME,FINAL_COUNTRY_RESIDENCE,SERVICE_PACKAGE,FINAL_MOTHER_NAME,ESTATEMENT_FLAG,FCR_RISK,IS_FCR_RESIDENCE_COUNTRY,FCR_COUNTRY_RESIDENCE,IS_EIDA_RESIDENCE_COUNTRY,EIDA_COUNTRY_RESIDENCE,IS_MANUAL_RESIDENCE_COUNTRY,MANUAL_COUNTRY_RESIDENCE,FINAL_RESIDENCE_COUNTRY,PASS_TYPE,IS_FCR_PASSTYPE,IS_EIDA_PASSTYPE,IS_MANUAL_PASSTYPE,FCR_PASS_TYPE,EIDA_PASS_TYPE,MANUAL_PASS_TYPE,VISA_FCR,VISA_EIDA,VISA_MANUAL,IS_VISA_FCR,IS_VISA_EIDA,IS_VISA_MANUAL,IS_FCR_SHORTNAME,IS_EIDA_SHORTNAME,IS_MANUAL_SHORTNAME,FCR_SHORT_NAME,EIDA_SHORT_NAME,MANUAL_SHORT_NAME,VISA_STATUS";
			/*
			 * String column1 =
			 * "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,CUST_FULL_NAME,FCR_FULL_NAME,FCR_DOB,FCR_PASS_NO, "
			 * +
			 * "FCR_PASS_ISSUE_DATE, FCR_PASS_EXP_DATE,FCR_PASS_ISSUE_PLACE,FCR_VISA_NO,FCR_VISA_ISSUE_DATE, "
			 * +
			 * "FCR_VISA_EXP_DATE, FCR_NATIONALITY,MOTHER_NAME_FCR, FCR_EIDA_NO,FCR_ADDRESS,FCR_CITY,"
			 * +
			 * "FCR_STATE, FCR_COUNTRY,FCR_PHONE_NO, FCR_MOBILE_NO, FCR_EMAIL,FCR_PROFESSION,FCR_GENDER, "
			 * +
			 * "EIDA_FULL_NAME,EIDA_DOB ,EIDA_PASS_NO,EIDA_PASS_ISSUE_DATE,EIDA_PASS_EXP_DATE, "
			 * +
			 * "EIDA_PASS_ISSUE_PLACE,EIDA_VISA_NO, EIDA_VISA_ISSUE_DATE,EIDA_VISA_EXP_DATE,EIDA_NATIONALITY,"
			 * +
			 * "MOTHER_NAME_EIDA,EIDA_EIDA_NO, EIDA_ADDRESS,EIDA_CITY,EIDA_STATE, EIDA_COUNTRY,EIDA_PHONE_NO,"
			 * +
			 * "EIDA_MOBILE_NO,EIDA_EMAIL, EIDA_PROFESSION,EIDA_GENDER, MANUAL_FULL_NAME,MANUAL_DOB, "
			 * +
			 * "MANUAL_PASS_NO,MANUAL_PASS_ISSUE_DATE, MANUAL_PASS_EXP_DATE, MANUAL_PASS_ISSUE_PLACE, "
			 * +
			 * "MANUAL_VISA_NO,MANUAL_VISA_ISSUE_DATE, MANUAL_VISA_EXP_DATE,MANUAL_NATIONALITY, "
			 * +
			 * "MOTHER_NAME_MANUAL, MANUAL_EIDA_NO, MANUAL_ADDRESS, MANUAL_CITY, MANUAL_STATE, "
			 * +
			 * "MANUAL_COUNTRY, MANUAL_PHONE_NO, MANUAL_MOBILE_NO, MANUAL_EMAIL, MANUAL_PROFESSION, "
			 * +
			 * "MANUAL_GENDER,FCR_PREFIX,EIDA_PREFIX, MANUAL_PREFIX,FCR_EMP_NAME,EIDA_EMP_NAME, "
			 * +
			 * "MANUAL_EMP_NAME ,FCR_RESIDENCE_COUNTRY,EIDA_RESIDENCE_COUNTRY, MANUAL_RESIDENCE_COUNTRY,"
			 * +
			 * "IS_FCR_PREFIX, IS_FCR_NAME, IS_FCR_DOB, IS_FCR_PASSPORTNO,IS_FCR_PASSPORTISSUEDATE,"
			 * +
			 * "IS_FCR_PASSPORTEXPDATE, IS_FCR_PASSPORTPLACE, IS_FCR_VISANO, IS_FCR_VISAEXPDATE,"
			 * +
			 * "IS_FCR_VISAISSUEDATE,IS_FCR_NATIONALITY,IS_FCR_MOTHERNAME,IS_FCR_EIDA, IS_FCR_ADDRESS,"
			 * +
			 * "IS_FCR_CITY,IS_FCR_STATE,IS_FCR_COUNTRY,IS_FCR_PER_COUNTRY,IS_FCR_PHONE,IS_FCR_MOBILE,"
			 * +
			 * "IS_FCR_EMAIL,IS_FCR_PROFESSION,IS_FCR_GENDER,IS_FCR_EMPNAME,IS_EIDA_PREFIX,IS_EIDA_NAME,"
			 * +
			 * "IS_EIDA_DOB,IS_EIDA_PASSPORTNO,IS_EIDA_PASSPORTISSUEDATE,IS_EIDA_PASSPORTEXPDATE,"
			 * +
			 * "IS_EIDA_PASSPORTPLACE,IS_EIDA_VISANO,IS_EIDA_VISAEXPDATE,IS_EIDA_VISAISSUEDATE,"
			 * +
			 * "IS_EIDA_NATIONALITY,IS_EIDA_MOTHERNAME,IS_EIDA_EIDA,IS_EIDA_ADDRESS,IS_EIDA_CITY,"
			 * +
			 * "IS_EIDA_STATE,IS_EIDA_COUNTRY,IS_EIDA_PER_COUNTRY,IS_EIDA_PHONE,IS_EIDA_MOBILE,"
			 * +
			 * "IS_EIDA_EMAIL,IS_EIDA_PROFESSION,IS_EIDA_GENDER,IS_EIDA_EMPNAME,IS_MANUAL_PREFIX,"
			 * +
			 * "IS_MANUAL_NAME,IS_MANUAL_DOB,IS_MANUAL_PASSPORTNO,IS_MANUAL_PASSPORTISSUEDATE,"
			 * +
			 * "IS_MANUAL_PASSPORTEXPDATE,IS_MANUAL_PASSPORTPLACE,IS_MANUAL_VISANO,IS_MANUAL_VISAEXPDATE,"
			 * +
			 * "IS_MANUAL_VISAISSUEDATE,IS_MANUAL_NATIONALITY,IS_MANUAL_MOTHERNAME,IS_MANUAL_EIDA,"
			 * +
			 * "IS_MANUAL_ADDRESS,IS_MANUAL_CITY,IS_MANUAL_STATE,IS_MANUAL_COUNTRY,IS_MANUAL_PER_COUNTRY,"
			 * +
			 * "IS_MANUAL_PHONE,IS_MANUAL_MOBILE,IS_MANUAL_EMAIL,IS_MANUAL_PROFESSION,IS_MANUAL_GENDER,"
			 * +
			 * "IS_MANUAL_EMPNAME,IS_FCR_ALL,IS_EIDA_ALL,IS_MANUAL_ALL,FINAL_FULL_NAME,FINAL_NATIONALITY,"
			 * +
			 * "FINAL_PASS_NO,FINAL_PASS_ISSUE_DATE,FINAL_PASS_EXP_DATE,FINAL_PASS_ISSUE_PLACE,FINAL_VISA_NO,"
			 * +
			 * "FINAL_VISA_ISSUE_DATE,FINAL_VISA_EXP_DATE,FINAL_DOB,FINAL_ADDRESS,FINAL_CITY,FINAL_STATE,"
			 * +
			 * "FINAL_COUNTRY,FINAL_PHONE_NO,FINAL_MOBILE_NO,FINAL_EMAIL,FINAL_PROFESSION,FINAL_EIDA_NO,"
			 * +
			 * "FINAL_GENDER,FINAL_PREFIX,FINAL_EMP_NAME,FINAL_COUNTRY_RESIDENCE,SERVICE_PACKAGE,"
			 * +
			 * "FINAL_MOTHER_NAME,ESTATEMENT_FLAG,FCR_RISK,IS_FCR_RESIDENCE_COUNTRY,FCR_COUNTRY_RESIDENCE,"
			 * +
			 * "IS_EIDA_RESIDENCE_COUNTRY,EIDA_COUNTRY_RESIDENCE,IS_MANUAL_RESIDENCE_COUNTRY,"
			 * +
			 * "MANUAL_COUNTRY_RESIDENCE,FINAL_RESIDENCE_COUNTRY,PASS_TYPE,IS_FCR_PASSTYPE,IS_EIDA_PASSTYPE,"
			 * +
			 * "IS_MANUAL_PASSTYPE,FCR_PASS_TYPE,EIDA_PASS_TYPE,MANUAL_PASS_TYPE,VISA_FCR,VISA_EIDA,"
			 * +
			 * "VISA_MANUAL,IS_VISA_FCR,IS_VISA_EIDA,IS_VISA_MANUAL,IS_FCR_SHORTNAME,IS_EIDA_SHORTNAME,"
			 * 
			 * +
			 * "IS_MANUAL_SHORTNAME,FCR_SHORT_NAME,EIDA_SHORT_NAME,MANUAL_SHORT_NAME,VISA_STATUS"
			 * ;
			 */
			// commented for AO Release by Ayush
			logInfo("onTabClick",
					"sFinalDOB	"
							+ sFinalDOB
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 5));
			logInfo("onTabClick",
					"sFinalName 	"
							+ sFinalName
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 1));
			logInfo("onTabClick",
					"sFinalEIDANo	"
							+ sFinalEIDANo
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 4));
			logInfo("onTabClick",
					"sFinalEmail	"
							+ sFinalEmail
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 10));
			logInfo("onTabClick",
					"sFinalMobile	"
							+ sFinalMobile
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 3));
			logInfo("onTabClick",
					"sFinalNationality	"
							+ sFinalNationality
							+ "	"
							+ formObject.getTableCellValue(ACC_RELATION,
									iSelectedRow, 6));

			if (sFinalDOB.equalsIgnoreCase("")) {
				sFinalDOB = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 5);
			} else if (sFinalName.equalsIgnoreCase("")) {
				sFinalName = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 1);
			} else if (sFinalEIDANo.equalsIgnoreCase("")) {
				sFinalEIDANo = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 4);
				logInfo("onTabClick"," inside else if sFinalEIDANo : "+sFinalEIDANo);
			} else if (sFinalEmail.equalsIgnoreCase("")) {
				sFinalEmail = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 10);
			} else if (sFinalMobile.equalsIgnoreCase("")) {
				sFinalMobile = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 3);
			} else if (sFinalNationality.equalsIgnoreCase("")) {
				sFinalNationality = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 6);
			}

			String value1 = "'"
					+ cust_id
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(WMS_ID).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sWorkitemId
					+ "'"
					+ (char) 25
					+ "'"
					+ sCustNo
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalName
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_NAME)
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(FCR_DOB).toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PASSPORTNO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(FCR_PASSPORTISSDATE)
							.toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(FCR_PASSPORTEXPDATE)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(PASSPORTEXPPLACE_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_VISANO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(FCR_VISAISSDATE)
							.toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(FCR_VISAEXPDATE)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_NATIONALITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_MOTHERSNAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_EIDANO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_ADDRESS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_CITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_STATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_MOBILE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_EMAIL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PROFESSION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_GENDER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_NAME)
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(EIDA_DOB).toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PASSPORTNO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(EIDA_PASSPORTISSDATE)
							.toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(EIDA_PASSPORTEXPDATE)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(PASSPORTEXPPLACE_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_VISANO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(EIDA_VISAISSDATE)
							.toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(EIDA_VISAEXPDATE)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_NATIONALITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_MOTHERNAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_EIDANO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_ADDRESS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_CITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_STATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_MOBILE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_EMAIL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PROFESSION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_GENDER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_NAME).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(MANUAL_DOB)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PASSPORTNO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(
							MANUAL_PASSPORTISSDATE).toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(
							MANUAL_PASSPORTEXPDATE).toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(
							PASSPORTEXPPLACE_MANUAL).toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_VISANO).toString()
					+ "'"
					+ (char) 25
					+ convertIntoDate(formObject.getValue(MANUAL_VISAISSDATE)
							.toString())
					+ (char) 25
					+ convertIntoDate(formObject.getValue(MANUAL_VISAEXPDATE)
							.toString())
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_NATIONALITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_MOTHERNAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_EIDANO).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_ADDRESS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_CITY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_STATE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PH).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_MOBILE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_EMAIL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PROFESSION).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_GENDER).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PREFIX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PREFIX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PREFIX).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_EMPLYR_NAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_EMPLYR_NAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_EMPLYR_NAME).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PER_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PER_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PER_CNTRY).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PREFIX_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_FULLNAME_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_DOB_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_NO_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_ISS_DT_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_EXP_DT_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("CHECK17").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_NO_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_FCR)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_FCR)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_NATIONALITY_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_MOTHERSNAME_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EIDANO_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CORR_POB_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CITY_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_STATE_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CNTRY_OF_CORR_FCR)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_COUNTRY_PER_RES_FCR)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_RES_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_MOB_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMAIL_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PROFESSION_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_GENDER_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMP_NAME_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PREFIX_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_FULLNAME_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_DOB_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_NO_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_ISS_DT_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_EXP_DT_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("CHECK62").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_NO_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_EIDA)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_EIDA)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_NATIONALITY_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_MOTHERSNAME_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CORR_POB_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CITY_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_STATE_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CNTRY_OF_CORR_EIDA)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_COUNTRY_PER_RES_EIDA)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_RES_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_MOB_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMAIL_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PROFESSION_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_GENDER_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMP_NAME_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PREFIX_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_FULLNAME_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_DOB_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_NO_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_ISS_DT_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASS_EXP_DT_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue("CHECK39").toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_NO_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_NATIONALITY_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_MOTHERSNAME_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CORR_POB_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CITY_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_STATE_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_CNTRY_OF_CORR_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_COUNTRY_PER_RES_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_RES_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_TELE_MOB_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMAIL_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PROFESSION_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_GENDER_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_EMP_NAME_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_SELECTALL_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_SELECTALL_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_SELECTALL_MANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalName
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalNationality
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPassportNo
					+ "'"
					+ (char) 25
					+ convertIntoDate(sFinalPassportIssueDate)
					+ (char) 25
					+ convertIntoDate(sFinalPassportExpDate)
					+ (char) 25
					+ "'"
					+ sFinalPassportIssuePlace
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalVisaNo
					+ "'"
					+ (char) 25
					+ convertIntoDate(sFinalVisaIssueDate)
					+ (char) 25
					+ convertIntoDate(sFinalVisaExpDate)
					+ (char) 25
					+ convertIntoDate(sFinalDOB)
					+ (char) 25
					+ "'"
					+ sFinalAddress
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalCity
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalState
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalCountry
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPhone
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalMobile
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalEmail
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalProfession
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalEIDANo
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalGender
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPrefix
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalEmpName
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPermanentCountry
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(SERVICE_PACKAGE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalMotherName
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(ESTATEMENT_FLAG).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_RISK).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKFCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_RESIDENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKEIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_RESIDENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKMANUAL).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_RESIDENT).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalResidentNew
					+ "'"
					+ (char) 25
					+ "'"
					+ sFinalPassType
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_FCR)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_EIDA)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_PASSPORT_TYPE_MANUAL)
							.toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_PASSTYPE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_PSSTYPE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_PASSTYPE).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(FCR_VISASTATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(EIDA_VISASTATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(MANUAL_VISASTATUS).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_STATUS_FCR).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_STATUS_EIDA).toString()
					+ "'"
					+ (char) 25
					+ "'"
					+ formObject.getValue(CHECKBOX_VISA_STATUS_MANUAL)
							.toString() + "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_SHORTNAME_FCR).toString()
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_SHORTNAME_EIDA).toString()
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_SHORTNAME_MANUAL).toString()
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(FCR_SHORTNAME).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(EIDA_SHORTNAME).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(MANUAL_SHORTNAME).toString() + "'"
					+ (char) 25 + "'" + sVisaType + "'";
			logInfo("short name", "formObject.getValue(MANUAL_SHORTNAME) : "
					+ formObject.getValue(MANUAL_SHORTNAME));
			insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
			String column2 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,MANUAL_FIRST_NAME,MANUAL_LAST_NAME,MANUAL_COUNTRY_BIRTH,MANUAL_CITY_BIRTH,EIDA_FIRST_NAME,"
					+ "EIDA_LAST_NAME,EIDA_COUNTRY_BIRTH,EIDA_CITY_BIRTH,FCR_FIRST_NAME,FCR_LAST_NAME,FCR_COUNTRY_BIRTH,FCR_CITY_BIRTH,FINAL_FIRST_NAME,"
					+ "FINAL_LAST_NAME,BIRTH_COUNTRY,FINAL_CITY_BIRTH,IS_FCR_FIRSTNAME,IS_FCR_LASTNAME,IS_FCR_COUNTRYOFBIRTH,IS_FCR_CITYOFBIRTH,"
					+ "IS_EIDA_FIRSTNAME,IS_EIDA_LASTNAME,IS_EIDA_COUNTRYOFBIRTH,IS_EIDA_CITYOFBIRTH,IS_MANUAL_FIRSTNAME,IS_MANUAL_LASTNAME,"
					+ "IS_MANUAL_COUNTRYOFBIRTH,IS_MANUAL_CITYOFBIRTH";
			String value2 = "'" + cust_id + "'" + (char) 25 + "'"
					+ formObject.getValue(WMS_ID) + "'" + (char) 25 + "'"
					+ sWorkitemId + "'" + (char) 25 + "'" + sCustNo + "'"
					+ (char) 25 + "'" + formObject.getValue(MANUAL_FIRSTNAME)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(MANUAL_LASTNAME) + "'" + (char) 25
					+ "'" + formObject.getValue(MANUAL_COUNTRYBIRTH) + "'"
					+ (char) 25 + "'" + formObject.getValue(CITYBIRTH_MANUAL)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(EIDA_FIRSTNAME) + "'" + (char) 25
					+ "'" + formObject.getValue(EIDA_LASTNAME) + "'"
					+ (char) 25 + "'" + formObject.getValue(EIDA_COUNTRYBIRTH)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CITYBIRTH_EIDA) + "'" + (char) 25
					+ "'" + formObject.getValue(FCR_FIRSTNAME) + "'"
					+ (char) 25 + "'" + formObject.getValue(FCR_LASTNAME) + "'"
					+ (char) 25 + "'" + formObject.getValue(FCR_COUNTRYBIRTH)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CITYBIRTH_FCR) + "'" + (char) 25
					+ "'" + sFinalFirstName + "'" + (char) 25 + "'"
					+ sFinalLastName + "'" + (char) 25 + "'"
					+ sFinalCountryOfBirth + "'" + (char) 25 + "'"
					+ sFinalCityOfBirth + "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_FIRSTNAME_FCR) + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_LASTNAME_FCR) + "'"
					+ (char) 25 + "'" + formObject.getValue(CHECKBOX_COB_FCR)
					+ "'" + (char) 25 + "'" + formObject.getValue(HD_FOUR)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_FIRSTNAME_EIDA) + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_LASTNAME_EIDA) + "'"
					+ (char) 25 + "'" + formObject.getValue(CHECKBOX_COB_EIDA)
					+ "'" + (char) 25 + "'" + formObject.getValue(HD_FIVE)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_FIRSTNAME_MANUAL) + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_LASTNAME_MANUAL) + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_COB_MANUAL) + "'"
					+ (char) 25 + "'" + formObject.getValue(HD_SIX) + "'"
					+ (char) 25 + "'";
			logInfo("onTabClick", "---Compare columns---: " + column2);
			logInfo("onTabClick", "---Compare values---: " + value2);
			insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column2, value2);
			if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)
					|| ACTIVITY_DDE_CUST_INFO.equalsIgnoreCase(sActivityName)
					|| (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName) && "New WMS ID"
							.equalsIgnoreCase(formObject.getValue(SCAN_MODE)
									.toString()))) {
				formObject.setTableCellValue(ACC_RELATION, iSelectedRow, 1,
						sFinalName);
				formObject.setTableCellValue(ACC_RELATION, iSelectedRow, 5,
						sFinalDOB);
				formObject.setTableCellValue(ACC_RELATION, iSelectedRow, 3,
						sFinalMobile);
				formObject.setTableCellValue(ACC_RELATION, iSelectedRow, 4,
						sFinalEIDANo);
				logInfo("onTabClick","sFinalEIDANo : "+sFinalEIDANo);
				formObject.setTableCellValue(ACC_RELATION, iSelectedRow, 6,
						sFinalNationality);
				formObject.setValue(TXT_CUSTOMERNAME, sFinalName);
				formObject.setValue(TXT_DOB, sFinalDOB);
				formObject.setValue(TXT_CUSTOMERID, cust_id);
			}
			long end_Time = System.currentTimeMillis();
			logInfo("onTabClick", "Diff time in saveComparisonData Function---"
					+ Long.toString(end_Time - start_time));
		} catch (Exception e) {
			logError("saveComparisonData", e);
			;
		}
		return true;
	}

	public void setEIDA() {
		try {
			logInfo("setEIDA", "INSIDE");
			String eidaNo = formObject.getValue(PD_EIDANO).toString();
			disableControls(new String[] { DRP_RESEIDA, RA_CARRYNG_EID_CARD });
			if (eidaNo.equals("") || eidaNo.equals(null)) {
				formObject.setValue(RA_CARRYNG_EID_CARD, "No");
				formObject.setValue(DRP_RESEIDA, "Yes");
			} else {
				formObject.setValue(RA_CARRYNG_EID_CARD, "Yes");
				formObject.setValue(DRP_RESEIDA, "No");
			}
		} catch (Exception e) {
			logError("setEIDA", e);
		}
	}

	public void Frame32_CPD_Disable() {
		disableControls(new String[] { BR_BANK_NAME_1, BR_BANK_NAME_2,
				BR_BANK_NAME_3, BR_CITY_CNTRY_1, BR_CITY_CNTRY_2,
				BR_CITY_CNTRY_3 });
	}

	public void Frame31_CPD_Disable() {
		try {
			disableControls(new String[] { "Text113", "Text106", "Text101",
					"Text96", "Text112", "Text107", "Text102", "Text97",
					"Text111", "Text108", "Text103", "Text98" });
		} catch (Exception e) {
			logError("Frame31_CPD_Disable", e);
		}
	}

	public void Frame30_CPD_Disable() {
		disableControls(new String[] { FERS_EMD_CASH_ATM, FERS_EMD_CHQ_DRFT,
				FERS_EMD_TRNSFR_ONLN, FERS_EMW_CASH_ATM, FERS_EMW_CHQ_DRFT,
				FERS_EMW_TRNSFR_ONLN, FERS_GEO_CNTRY_FINANCL,
				FERS_NATRE_ACTVTY_FT });
	}

	public void Frame27_CPD_Disable() {
		disableControls(new String[] { PROFESION, ED_EMPLYID, ED_DATE_OF_JOING,
				EMP_PH_CODE, ED_PHNE_NO, "Text75", ED_OTHER, ED_EMP_TYPE,
				ED_POSITN_DESGNT, EMPNAME, ED_SET_FLG, ED_NATURE_OF_BUSNS,
				ED_MONTHLY_INCM, ED_EMPNAME, ED_LEN_OF_SERVCE, ED_ANNUAL_INC,
				ED_CB_TML, ED_CB_NON_TML, ED_CB_SAL_AED,
				ED_CB_INVSTMNT_RETN_AED, ED_CB_INHT_AED, ED_CB_OTHERS,
				ED_CB_SALE_OF_ASST, ED_CB_REAL_INC_AED, ED_REAL_INC_AED,
				ED_INVSTMNT_RETN_AED, ED_SALE_OF_ASST, ED_INHT_AED, ED_OTHERS,
				ED_PERC_OF_OWNRSHP, ED_COMP_WEBSITE, ED_NO_UAE_OVRS_BRNCH,
				ED_PURPSE_CRS_BRDR_PAYMENT, ED_ANTCPATD_CRS_BRDER_PYMT,
				ED_ANTCPATD_MNTHVAL_BRDER_PYMT, ED_CNTRY_PYMT_RECV,
				ED_CUST_CRS_BRDR_PAYMENT, AO_INCOME_SRC,
				OTHER_PERK_ALLOWANCES_AED, ADDITIONAL_SOURCES_INCOME_AED,
				EST_TOTAL_INCOME_PER_ANNUM, SALARY_TRANSFER, EMP_COUNTRY,
				EMP_STREET, EMP_PO_BOX, EMP_STATE, EMP_CITY,PRIMARY_SRC_CTRY });
	}

	public void Frame28_CPD_Disable() {
		disableControls(new String[] { GI_DATE_KYC_PREP, GI_EXST_SINCE,
				GI_IS_CUST_VIP, GI_PURPOSE_ACC_REL, GI_ACC_NO_COVERED,
				"Text75", GI_YEARS_IN_UAE, ED_EMP_TYPE });
	}

	public void Frame21_CPD_Disable() {
		disableControls(new String[] { HD_PASSPORT_NO, HD_VISA_NO,
				HD_PASS_TYPE, "Combo34" });
	}

	public void Frame20_CPD_Disable() {
		disableControls(new String[] { CP_POBOXNO, CP_FLOOR, CP_CITY,
				OTHER_CORR_CITY, CP_EMAIL, CP_PHONENO, CORR_STATE, CP_STREET,
				CP_OTHERS, CP_MOBILE, CORR_CNTRY, CP_TELEOFFICE, RA_SAMEAS,
				PA_BUILDINGNAME, PA_VILLAFLATNO, PA_CITY,
				OTHER_RESIDENTIAL_CITY, PA_STREET, PA_OTHERS, PA_SAMEAS,
				RA_BUILDINGNAME, RA_VILLAFLATNO, RA_CITY,
				CONTACT_DETAILS_CITY_OTHERS, PERM_STATE, RES_STATE, RA_STREET,
				PERM_CNTRY, RES_CNTRY, OTHER_PERM_CITY });
		if (sActivityName.equalsIgnoreCase("DDE_Acc_Info_Chk")
				|| sActivityName.equalsIgnoreCase("Customer_Screen")
				|| sActivityName.equalsIgnoreCase("DDE_Cust_Info")
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
			disableControls(new String[] { CPD_RISK_ASSESS_MARKS, PA_OTHERS });
		} else {
			disableControls(new String[] { CP_OTHERS, RA_OTHERS });
		}
	}

	public void Frame18_CPD_Disable() {
		disableControls(new String[] { CUST_PREFIX, PD_MARITALSTATUSOTHER,
				PD_OTHERS, PD_CUSTSEGMENT, PD_FULLNAME, PD_MOTHERMAIDENNAME,
				PD_SHORTNAME, PD_EIDANO, MARITAL_STATUS, RELIGION });
	}

	public void Frame22_CPD_Disable() {
		disableControls(new String[] { RM_CODE, RM_NAME, BTNRMNAME, BTNRMCODE,
				BTN_RM_CODE, BTN_RM_NAME, EXCELLENCY_CNTR, PRO_CODE,
				IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES, IDS_CB_INSURANCE,
				IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP, IDS_BNFT_CB_TP,
				IDS_PC_CB_TP, IDS_PC_CB_ENTERTAINMENT, IDS_PC_CB_SHOPPING,
				IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL, IDS_PC_BN_TP,
				IDS_REF_BY_CUST, BTN_FCR_SRCH, STAFF_REFER_BTN,
				IDS_PROF_CENTER_CODE, "ref_by_staff", IDS_OTH_CB_OTHERS,
				IDS_BNFT_CB_OTHERS });
	}

	public void frame23_CPD_Disable() {// sanction screening no const available
		if (sActivityName.equalsIgnoreCase("DDE_Acc_Info_Chk")
				|| sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk")
				|| sActivityName.equalsIgnoreCase("QDE_ Account_Info")
				|| sActivityName.equalsIgnoreCase("Customer_Screen")
				|| sActivityName.equalsIgnoreCase("Customer_Screen_QDE")
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
			disableControls(new String[] { MATCH_FOUND,
					"intrnl_blcklict_cmnts", "name_cro", "period_exp_cro",
					"nation_cro", "dept_cro", "dob_cro", "pass_no_cro",
					SANC_SCRN_MATCH_FOUND, "Text161", MATCH, "Combo2",
					"wrld_chck_cmnts", "cust_cid", "cust_name",
					"cust_cur_risk", "cust_cur_risk_bank", "cust_prev_risk",
					"cust_fcr_risk", RISK_CLASSIFICATION, "cust_com_app",
					"AO_CRO_BANK_DECISION", "Combo7", "Command46", "Command19",
					"add_cro", "delete_cro", "modify_cro", "Command13",
					"Command22", "cntrl_bank_url", "Command57", "Command58",
					SANCT_RISK_ASSESS_MARKS });
		} else {
			disableControls(new String[] { MATCH_FOUND,
					"intrnl_blcklict_cmnts", "name_cro", "period_exp_cro",
					"nation_cro", "dept_cro", "pass_no_cro", "Combo11",
					"Text161", MATCH, "wrld_chck_cmnts", "Combo8", "cust_cid",
					"cust_name", "cust_cur_risk", "cust_cur_risk_bank",
					"cust_prev_risk", "cust_fcr_risk", RISK_CLASSIFICATION,
					"cust_com_app", "AO_CRO_BANK_DECISION", "Combo7",
					SANCT_RISK_ASSESS_MARKS, "Command46", "Command19",
					"add_cro", "delete_cro", "modify_cro", "Command13",
					"Command22", "cntrl_bank_url", "Command57", "Command63" });

		}
	}

	public void Frame25_CPD_Disable() {
		disableControls(new String[] { RA_CARRYNG_EID_CARD, SIGN_STYLE1,
				RA_IS_CUST_DEALNG_HAWALA, HD_THREE, RA_IS_UAE_RESIDENT,
				CRS_RES_PERM_ADRS_US, RA_ADDTNL_CMNT, RA_PRPSE_TAX_EVSN,
				RA_IS_CUST_DEALNG_ARMAMNT, SPECIAL_CAT, EMP_STATUS,
				RA_IS_CUST_PEP, IS_SIGN_UPDATE, RA_RSN_BNKNG_UAE,
				RA_LIST_OF_CUST_PEP, RA_CUST_SRC_WEALTH, RA_IS_CUST_WRKNG_UAE,
				RA_IS_CUST_WRKNG_NON_UAE, DEALS_IN_WMD, RA_CB_USD_AUTO_DEALER,
				RA_OTHERS, EMP_STATUS, SIGN_STYLE1 });
		disableControls(BUSINESS_NATURE_SECTION);
	}

	public void Frame32_CPD_ENable() {
		enableControls(new String[] { BR_BANK_NAME_1, BR_BANK_NAME_2,
				BR_BANK_NAME_3, BR_CITY_CNTRY_1, BR_CITY_CNTRY_2,
				BR_CITY_CNTRY_3 });
	}

	public void Frame31_CPD_ENable() {// hidden fields unable to find
		disableControls(new String[] { "Text113", "Text106", "Text101",
				"Text96", "Text112", "Text107", "Text102", "Text97", "Text111",
				"Text108", "Text103", "Text98" });
	}

	public void Frame30_CPD_ENable() {
		enableControls(new String[] { FERS_EMD_CASH_ATM, FERS_EMD_CHQ_DRFT,
				FERS_EMD_TRNSFR_ONLN, FERS_EMW_CASH_ATM, FERS_EMW_CHQ_DRFT,
				FERS_EMW_TRNSFR_ONLN, FERS_GEO_CNTRY_FINANCL,
				FERS_NATRE_ACTVTY_FT });
	}

	public void Frame27_CPD_ENable() {
		logInfo("Frame27_CPD_ENable", "Inside");
		enableControls(new String[] { ED_EMPLYID, ED_DATE_OF_JOING,
				EMP_PH_CODE, ED_PHNE_NO, "Text75", ED_OTHER, ED_POSITN_DESGNT,
				ED_SET_FLG, ED_NATURE_OF_BUSNS, ED_MONTHLY_INCM, ED_EMPNAME,
				ED_LEN_OF_SERVCE, ED_ANNUAL_INC, ED_CB_SAL_AED,
				ED_CB_INVSTMNT_RETN_AED, ED_CB_INHT_AED, ED_CB_OTHERS,
				ED_CB_SALE_OF_ASST, ED_CB_REAL_INC_AED, ED_PERC_OF_OWNRSHP,
				ED_COMP_WEBSITE, ED_NO_UAE_OVRS_BRNCH,
				ED_PURPSE_CRS_BRDR_PAYMENT, ED_ANTCPATD_CRS_BRDER_PYMT,
				ED_ANTCPATD_MNTHVAL_BRDER_PYMT, ED_CNTRY_PYMT_RECV,
				ED_CUST_CRS_BRDR_PAYMENT, AO_INCOME_SRC, SALARY_TRANSFER,
				EMP_COUNTRY, EMP_STREET, EMP_PO_BOX, EMP_STATE, EMP_CITY,
				OTHER_PERK_ALLOWANCES_AED, ADDITIONAL_SOURCES_INCOME_AED,
				EST_TOTAL_INCOME_PER_ANNUM,PRIMARY_SRC_CTRY });

		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			disableControls(new String[] { ED_NATURE_OF_BUSNS,
					ED_PERC_OF_OWNRSHP, ED_NO_UAE_OVRS_BRNCH, ED_COMP_WEBSITE });
			enableControls(new String[] { ED_EMP_TYPE });
		} else if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			formObject.setValue(ED_EMP_TYPE, "");
			disableControls(new String[] { ED_EMP_TYPE });
			enableControls(new String[] { ED_NATURE_OF_BUSNS,
					ED_PERC_OF_OWNRSHP, ED_NO_UAE_OVRS_BRNCH, ED_COMP_WEBSITE });
		} else {
			disableControls(new String[] { ED_NATURE_OF_BUSNS,
					ED_PERC_OF_OWNRSHP, ED_NO_UAE_OVRS_BRNCH, ED_COMP_WEBSITE });
			formObject.setValue(ED_EMP_TYPE, "");
			disableControls(new String[] { ED_EMP_TYPE });
		}
		if (formObject.getValue(ED_CUST_CRS_BRDR_PAYMENT).toString()
				.equalsIgnoreCase("Yes")) {
			enableControls(new String[] { ED_PURPSE_CRS_BRDR_PAYMENT,
					ED_ANTCPATD_CRS_BRDER_PYMT, ED_ANTCPATD_MNTHVAL_BRDER_PYMT,
					ED_CNTRY_PYMT_RECV });
		} else {
			disableControls(new String[] { ED_PURPSE_CRS_BRDR_PAYMENT,
					ED_ANTCPATD_CRS_BRDER_PYMT, ED_ANTCPATD_MNTHVAL_BRDER_PYMT,
					ED_CNTRY_PYMT_RECV });
		}

		if (formObject.getValue(ED_CB_INVSTMNT_RETN_AED).toString()
				.equalsIgnoreCase("true")) {
			formObject.setStyle(ED_INVSTMNT_RETN_AED, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_INVSTMNT_RETN_AED, DISABLE, TRUE);
		}

		if (formObject.getValue(ED_CB_INHT_AED).toString()
				.equalsIgnoreCase("true")) {
			formObject.setStyle(ED_INHT_AED, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_INHT_AED, DISABLE, TRUE);
		}

		if (formObject.getValue(ED_CB_REAL_INC_AED).toString()
				.equalsIgnoreCase("true")) {
			formObject.setStyle(ED_REAL_INC_AED, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_REAL_INC_AED, DISABLE, TRUE);
		}

		if (formObject.getValue(ED_CB_SALE_OF_ASST).toString()
				.equalsIgnoreCase("true")) {
			formObject.setStyle(ED_SALE_OF_ASST, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_SALE_OF_ASST, DISABLE, TRUE);
		}

		if (formObject.getValue(ED_CB_OTHERS).toString()
				.equalsIgnoreCase("true")) {
			formObject.setStyle(ED_OTHERS, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_OTHERS, DISABLE, TRUE);
		}

		if (formObject.getValue(ED_EMP_TYPE).toString()
				.equalsIgnoreCase("ADCB")) {
			formObject.setStyle(ED_SET_FLG, DISABLE, FALSE);
		} else {
			formObject.setStyle(ED_SET_FLG, DISABLE, TRUE);
		}
	}

	public void Frame28_CPD_ENable() {
		enableControls(new String[] { GI_DATE_KYC_PREP, GI_PURPOSE_ACC_REL,
				GI_ACC_NO_COVERED, GI_YEARS_IN_UAE });
		formObject.setStyle(GI_IS_CUST_VIP, DISABLE, TRUE);
	}

	public void Frame21_CPD_ENable() {
		enableControls(new String[] { HD_PASS_TYPE, "Combo34" });
	}

	public void Frame20_CPD_ENable() {
		logInfo("Frame20_CPD_ENable", "INSIDE");
		enableControls(new String[] { PERM_CNTRY, CP_FLOOR, CP_STREET,
				CP_OTHERS, CP_TELEOFFICE, RA_SAMEAS, PA_BUILDINGNAME,
				PA_VILLAFLATNO, PA_CITY, PA_STREET, RES_CNTRY, RES_STATE });
		if (formObject.getValue(CORR_STATE).toString().equalsIgnoreCase(OTHERS)) {
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				formObject.setStyle(CPD_RISK_ASSESS_MARKS, DISABLE, FALSE);
			} else {
				formObject.setStyle(CP_OTHERS, DISABLE, FALSE);
			}
		} else {
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				formObject.setStyle(CPD_RISK_ASSESS_MARKS, DISABLE, TRUE);
			} else {
				logInfo("Frame20_CPD_ENable", "disabling CP_OTHERS");
				formObject.setStyle(CP_OTHERS, DISABLE, TRUE);
			}
		}
		if (formObject.getValue(RES_STATE).toString().equalsIgnoreCase(OTHERS)) {
			formObject.setStyle(RA_OTHERS, DISABLE, FALSE);
		} else {
			formObject.setStyle(RA_OTHERS, DISABLE, TRUE);
		}
		if (formObject.getValue(PERM_STATE).toString().equalsIgnoreCase(OTHERS)) {
			formObject.setStyle(PA_OTHERS, DISABLE, FALSE);
		} else {
			formObject.setStyle(PA_OTHERS, DISABLE, TRUE);
		}
		enableControls(new String[] { PA_SAMEAS, RA_BUILDINGNAME,
				RA_VILLAFLATNO, RA_CITY, PERM_STATE, RA_STREET });// RA_OTHERS
	}
 //ATP -377
	public void Frame18_CPD_ENable() {
		enableControls(new String[] { PD_MARITALSTATUSOTHER, PD_OTHERS,
				PD_CUSTSEGMENT, PD_SHORTNAME,EIDA_EXPIRY_DATE });
	}

	public void setTemp_usr_0_product_selected() {
		try {
			String sCurrDBselect1 = "";
			setProductCurrencyComboOnFormLoad();
			logInfo("setTemp_usr_0_product_selected",
					"Inside setTemp_usr_0_product_selected...");
			int iRows = getGridCount(PRODUCT_QUEUE);
			logInfo("setTemp_usr_0_product_selected", " iRows...." + iRows);
			int jjj = 9;
			String sQuery = "select PROD_CODE,CURRENCY from usr_0_product_selected "
					+ "where wi_name='"
					+ sWorkitemId
					+ "' order by insertionorderid";
			logInfo("setTemp_usr_0_product_selected",
					"setTemp_usr_0_product_selected sQuery..." + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setTemp_usr_0_product_selected",
					"setTemp_usr_0_product_selected sOutput..." + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					sCurrDBselect1 = sCurrDBselect1 + sOutput.get(i).get(1)
							+ ",";
				}
			}
			String[] sCurrDBselect = sCurrDBselect1.split(",");
			for (int i = 0; i < iRows; i++) {
				String sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE,
						i, 1);
				logInfo("setTemp_usr_0_product_selected", "sProdCode: " + i
						+ ", " + sProdCode);
				String sCid = formObject
						.getTableCellValue(PRODUCT_QUEUE, i, 14);
				logInfo("setTemp_usr_0_product_selected", "sCID..." + sCid);
				if (!sProdCode.equalsIgnoreCase("")) {
					String sCurr = formObject.getTableCellValue(PRODUCT_QUEUE,
							i, 3);
					logInfo("setTemp_usr_0_product_selected", "sCurr...i=" + i
							+ " " + sCurr);
					sCurr = (sCurr == null) ? "" : sCurr;
					if (sCurr.equalsIgnoreCase("")
							|| sCurr.equalsIgnoreCase("null") || sCurr == null
							|| sCurr.equalsIgnoreCase(null) || sCurr.isEmpty()
							|| sCurrDBselect[i].equalsIgnoreCase("")
							|| sCurrDBselect[i].equalsIgnoreCase("null")
							|| sCurrDBselect[i] == null
							|| sCurrDBselect[i].isEmpty()) {
						logInfo("setTemp_usr_0_product_selected",
								"inside currency is null.....");
						jjj = i + 1;
						logInfo("setTemp_usr_0_product_selected", "jjj...."
								+ jjj);
						String sQueryy = "select PROD_CODE from usr_0_prod_sel_temp "
								+ "where wi_name='"
								+ sWorkitemId
								+ "' and sno='" + sCid + "'";
						logInfo("setTemp_usr_0_product_selected",
								"sQueryy  ..." + sQueryy);
						List<List<String>> sOutputt = formObject
								.getDataFromDB(sQueryy);
						logInfo("setTemp_usr_0_product_selected", "sOutputt..."
								+ sOutputt);
						String sCurrDB = "";
						if (sOutputt != null && sOutputt.size() > 0) {
							sCurrDB = sOutputt.get(0).get(0);
						}
						logInfo("setTemp_usr_0_product_selected", "sCurrDB..."
								+ sCurrDB);
						setProductCurrencyComboLoadDisable(i + 1);
						try {
							formObject.setTableCellValue(PRODUCT_QUEUE, i, 3,
									sCurrDB);
						} catch (Exception e) {
							logError("setTemp_usr_0_product_selected", e);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("setTemp_usr_0_product_selected", e);
		}
	}

	public void manageManualFields(String sControl1, String sControl2) {
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase("true")) {
			formObject.setStyle(sControl2, DISABLE, FALSE);
			if (sControl1.equalsIgnoreCase(CHECKBOX_CORR_POB_MANUAL)) {
				if (formObject.getValue(sControl2).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(sControl2, "PO BOX ");
				}
			}
		} else {
			formObject.setStyle(sControl2, DISABLE, TRUE);
			if (sControl1.equalsIgnoreCase(CHECKBOX_CORR_POB_MANUAL)) {
				formObject.setValue(sControl2, "");
			}
		}
	}

	public void setProductCurrencyComboLoadDisable(Integer integ) {
		try {
			String sProdCode1 = "";
			String sCurr = "";
			logInfo("setProductCurrencyComboLoadDisable", "INSIDE");
			String sQuery = "";
			String sAccClass = formObject.getValue(ACC_HOME_BRANCH).toString();
			logInfo("setProductCurrencyComboLoadDisable", "sAccClass...."
					+ sAccClass);
			String sQueryy = "select PROD_CODE from usr_0_product_selected "
					+ "where wi_name='" + sWorkitemId + "' and cid='" + integ
					+ "'";
			logInfo("setProductCurrencyComboLoadDisable", "sQueryy  ..."
					+ sQueryy);
			List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
			logInfo("setProductCurrencyComboLoadDisable", "sOutputt..."
					+ sOutputt);
			if (sOutputt != null && sOutputt.size() > 0) {
				for (int i = 0; i < sOutputt.size(); i++) {
					sProdCode1 = sProdCode1 + sOutputt.get(i).get(0) + ",";
				}
			}
			String sProdCode[] = sProdCode1.split(",");
			if (sOutputt.size() == 0) {
				logInfo("setProductCurrencyComboLoadDisable",
						"iNoOfProd is zero");
			} else if (sOutputt != null && sOutputt.size() > 0) {
				for (int i = 0; i < sOutputt.size(); i++) {
					logInfo("setProductCurrencyComboLoadDisable",
							"sProdCode value of " + i + " is " + sProdCode[i]);
					if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
						sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE "
								+ "from USR_0_PRODUCT_OFFERED_CPD B,USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c"
								+ " where a.product_code= b.product_code "
								+ "and UPPER(b.WI_NAME) = UPPER('"
								+ sWorkitemId
								+ "') "
								+ "and c.HOME_BRANCH='"
								+ sAccClass
								+ "' "
								+ "and b.product_code='"
								+ sProdCode[i] + "' order by 1";
						logInfo("setProductCurrencyComboLoadDisable",
								"sQuery else ..." + sQuery);
					} else {
						sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE "
								+ "from USR_0_PRODUCT_OFFERED B,USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c"
								+ " where a.product_code= b.product_code "
								+ "and UPPER(b.WI_NAME) = UPPER('"
								+ sWorkitemId
								+ "') and c.HOME_BRANCH='"
								+ sAccClass
								+ "'"
								+ " and b.product_code='"
								+ sProdCode[i] + "' order by 1";
						logInfo("setProductCurrencyComboLoadDisable",
								"sQuery else ..." + sQuery);
					}
					List<List<String>> sOutput = formObject
							.getDataFromDB(sQuery);
					logInfo("setProductCurrencyComboLoadDisable", "sOutput..."
							+ sOutput);
					if (sOutput != null && sOutput.size() > 0) {
						for (int j = 0; j < sOutput.size(); j++) {
							sCurr = sCurr + sOutput.get(i).get(0) + ",";
						}
					}
					logInfo("setProductCurrencyComboLoadDisable", "sCurr: "
							+ sCurr);
					String sTemp[] = sCurr.split(",");
					formObject.clearTableCellCombo(PRODUCT_QUEUE, integ - 1, 3);
					for (int j = 0; j < sTemp.length; j++) {
						logInfo("setProductCurrencyComboLoadDisable",
								"adding in row: " + String.valueOf(integ - 1)
										+ ", curr: " + sTemp[j]);
						formObject.addItemInTableCellCombo(PRODUCT_QUEUE,
								integ - 1, 3, sTemp[j]);
						logInfo("setProductCurrencyComboLoadDisable",
								"succesful for i =" + i);
					}
					logInfo("setProductCurrencyComboLoadDisable",
							"existing inner for loop setProductCurrencyComboLoadDisable....");
				}
			}
			logInfo("setProductCurrencyComboLoadDisable",
					"existing function setProductCurrencyComboLoadDisable....");
		} catch (Exception e) {
			logError("setProductCurrencyComboLoadDisable", e);
		}
	}

	public void fieldValueUsr_0_Risk_Data() {
		try {
			logInfo("fieldValueUsr_0_Risk_Data",
					"inside fieldValueUsr_0_Risk_Data.....");
			int iSelectedRow = 0;
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater(ACC_RELATION);
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			logInfo("fieldValueUsr_0_Risk_Data", "sNo...." + sNo);
			if (formObject.getValue(SANCT_RISK_CURRENT_RSK_SYSTEM).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_CUR_RISK) as CUST_CUR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' and CUST_CUR_RISK is not null "
						+ "and ws_name not in ('CPD Maker','CPD Checker')) and wi_name='"
						+ sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQueryy: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustCurRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustCurRisk...CH_19042017.." + sCustCurRisk);
					if (sOutputt != null && sOutputt.size() > 0) {
						formObject.setValue(SANCT_RISK_CURRENT_RSK_SYSTEM,
								sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_CURRENT_RSK_BANK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' and CUST_CUR_RISK_BANK is not null "
						+ "and ws_name not in ('CPD Maker','CPD Checker')) and wi_name='"
						+ sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				// addDataInComboFromQuery(sQueryy,SANCT_RISK_CURRENT_RSK_BANK);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt != null && sOutputt.size() > 0) {
					String sCustCurRiskBank = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustCurRiskBank...CH_19042017.."
									+ sCustCurRiskBank);
					if (!sCustCurRiskBank.equalsIgnoreCase("")) {
						logInfo("fieldValueUsr_0_Risk_Data",
								"before changing Neutral Risk to Neutral...");
						enableControls(new String[] {
								SANCT_RISK_CURRENT_RSK_BANK,
								SANCT_CHKBOX_COMPL_AP });
						if (sCustCurRiskBank.equalsIgnoreCase("Neutral Risk")) {
							logInfo("fieldValueUsr_0_Risk_Data",
									"----changing Neutral Risk to Neutral----...");
							sCustCurRiskBank = "Neutral";
						}
						formObject.setValue(SANCT_RISK_CURRENT_RSK_BANK,
								sCustCurRiskBank);
						disableControls(new String[] {
								SANCT_RISK_CURRENT_RSK_BANK,
								SANCT_CHKBOX_COMPL_AP });
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_PREVIOUS_RSK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_PREV_RISK) as CUST_PREV_RISK from usr_0_risk_data"
						+ " where (entrydatetime) in (select max(entrydatetime)"
						+ " from usr_0_risk_data  where wi_name='"
						+ sWorkitemId
						+ "' "
						+ "AND SNO='"
						+ sNo
						+ "' and CUST_PREV_RISK is not null "
						+ "and ws_name not in ('CPD Maker','CPD Checker'))"
						+ " and wi_name='" + sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustPrevRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustPrevRisk...CH_19042017.." + sCustPrevRisk);
					if (!sCustPrevRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_PREVIOUS_RSK,
								sCustPrevRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_FCR_RSK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_FCR_RISK) as CUST_FCR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' and CUST_FCR_RISK is not null"
						+ " and ws_name not in ('CPD Maker','CPD Checker')) and wi_name='"
						+ sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustFcrRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustFcrRisk...CH_19042017.." + sCustFcrRisk);
					if (!sCustFcrRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_FCR_RSK, sCustFcrRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_RSK_CLSF).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(risk_classification) as risk_classification "
						+ "from usr_0_risk_data where (entrydatetime) in (select max(entrydatetime) "
						+ "from usr_0_risk_data  where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' "
						+ "and risk_classification is not null and ws_name in ('CPD Maker','CPD Checker'))"
						+ " and wi_name='" + sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustCurRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustCurRisk...cpd...CH_19042017.." + sCustCurRisk);
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_RSK_CLSF, sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(CPDRISK_CLASSIFICATION).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(cpdrisk_classification) as cpdrisk_classification "
						+ "from USR_0_RISK_ASSESSMENT_DATA_CPD where (entrydatetime) in (select max(entrydatetime) "
						+ "from USR_0_RISK_ASSESSMENT_DATA_CPD  where wi_name='"
						+ sWorkitemId
						+ "' "
						+ "AND SNO='"
						+ sNo
						+ "' and risk_classification is not null "
						+ "and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name='" + sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustCurRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustCurRisk...cpd...CH_19042017.." + sCustCurRisk);
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPDRISK_CLASSIFICATION,
								sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(CPD_CUR_RISK_BANK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK "
						+ "from usr_0_risk_data where (entrydatetime) in (select max(entrydatetime)"
						+ " from usr_0_risk_data  where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' "
						+ "and CUST_CUR_RISK_BANK is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name='" + sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustCurRiskBank = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustCurRiskBank...cpd..CH_19042017.."
									+ sCustCurRiskBank);
					if (!sCustCurRiskBank.equalsIgnoreCase("")) {
						logInfo("fieldValueUsr_0_Risk_Data",
								"before changing Neutral Risk to Neutral...");
						enableControls(new String[] { "CPD_CUR_RISK_BANK",
								"COMPLIANCE_APPROVAL_CPD" });
						if (sCustCurRiskBank.equalsIgnoreCase("Neutral Risk")) {
							logInfo("fieldValueUsr_0_Risk_Data",
									"----changing Neutral Risk to Neutra11111l----...");
							sCustCurRiskBank = "Neutral";
						}
						formObject
								.setValue(CPD_CUR_RISK_BANK, sCustCurRiskBank);
						disableControls(new String[] { "CPD_CUR_RISK_BANK",
								"COMPLIANCE_APPROVAL_CPD" });
					}
				}
			}
			if (formObject.getValue(CPD_PREV_RISK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_PREV_RISK) as CUST_PREV_RISK from usr_0_risk_data"
						+ " where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' and CUST_PREV_RISK is not null and"
						+ " ws_name in ('CPD Maker','CPD Checker')) and wi_name='"
						+ sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustPrevRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustPrevRisk...cpd...CH_19042017.."
									+ sCustPrevRisk);
					if (!sCustPrevRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPD_PREV_RISK, sCustPrevRisk);
					}
				}
			}
			if (formObject.getValue(CPD_FCR_RISK).toString()
					.equalsIgnoreCase("")) {
				logInfo("fieldValueUsr_0_Risk_Data", "sActivityName..."
						+ sActivityName);
				String sQueryy = "select max(CUST_FCR_RISK) as CUST_FCR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' AND SNO='"
						+ sNo
						+ "' "
						+ "and CUST_FCR_RISK is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name='" + sWorkitemId + "'";
				List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sQuery: " + sQueryy);
				logInfo("fieldValueUsr_0_Risk_Data", "sOutput: " + sOutputt);
				if (sOutputt.size() > 0 && sOutputt != null) {
					String sCustFcrRisk = sOutputt.get(0).get(0);
					logInfo("fieldValueUsr_0_Risk_Data",
							"sCustFcrRisk...cpd...CH_19042017.." + sCustFcrRisk);
					if (!sCustFcrRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPD_FCR_RISK, sCustFcrRisk);
					}
				}
			}
		} catch (Exception e) {
			logError("fieldValueUsr_0_Risk_Data", e);
		}
	}

	public void setProductCurrencyComboOnFormLoad() {
		try {
			String sCurrDB = "";
			String sProdCodeDB = "";
			logInfo("setProductCurrencyComboOnFormLoad",
					"Inside setProductCurrencyComboOnFormLoad...");
			int iRows = getGridCount(PRODUCT_QUEUE);
			logInfo("setProductCurrencyComboOnFormLoad", " iRows...." + iRows);
			String sQuery = "select PROD_CODE,CURRENCY from usr_0_product_selected "
					+ "where wi_name='"
					+ sWorkitemId
					+ "' order by insertionorderid";
			logInfo("setProductCurrencyComboOnFormLoad", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setProductCurrencyComboOnFormLoad", "sOutput: " + sOutput);
			/*
			 * if(sOutput!=null && sOutput.size()>0){ for(int i=0;
			 * i<sOutput.size(); i++){ sCurrDB = sOutput.get(i).get(0);
			 * sProdCodeDB = sOutput.get(i).get(1);
			 * formObject.setTableCellValue(PRODUCT_QUEUE, i,3,sCurrDB);
			 * formObject.setTableCellValue(PRODUCT_QUEUE, i,1,sProdCodeDB);
			 * 
			 * } }
			 */
			for (int i = 0; i < iRows; i++) {
				String sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE,
						i, 1);
				if (sProdCode.equalsIgnoreCase(sOutput.get(i).get(0))) {
					setProductCurrencyComboLoadDisable(i + 1);
					logInfo("setProductCurrencyComboOnFormLoad",
							"sOutput.get(i).get(1): " + sOutput.get(i).get(1));
					formObject.setTableCellValue(PRODUCT_QUEUE, i, 3, sOutput
							.get(i).get(1));
					logInfo("setProductCurrencyComboOnFormLoad",
							"curr value of row "
									+ i
									+ ": "
									+ formObject.getTableCellValue(
											PRODUCT_QUEUE, i, 3));
				}
			}
		} catch (Exception e) {
			logError("setProductCurrencyComboOnFormLoad", e);
		}
	}

	public void Frame22_CPD_ENable() {
		logInfo("Frame22_CPD_ENable", "INSIDE Frame22_CPD_ENable");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sRelation = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 7);// ACC_RELATION.BANK_RELATION
		if (sRelation.equalsIgnoreCase("New")) {
			enableControls(new String[] { EXCELLENCY_CNTR, PRO_CODE,
					EXCELLENCY_CNTR, PRO_CODE, IDS_REF_BY_CUST, BTN_FCR_SRCH,
					STAFF_REFER_BTN });
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				enableControls(new String[] { PRO_CODE, BTNRMNAME,
						EXCELLENCY_CNTR, BTNRMCODE });
			}
			enableControls(new String[] { RM_CODE, RM_NAME });
			manageInternalSection();
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			enableControls(new String[] { PRO_CODE, RM_CODE, RM_NAME });
		}
		// Ended
	}

	public void riskAssessmentSectionEnable() {// Frame25_CPD_ENable
		logInfo("riskAssessmentSectionEnable", "INSIDE");
		enableControls(new String[] { RA_CARRYNG_EID_CARD, SIGN_STYLE1,
				RA_IS_CUST_DEALNG_HAWALA, HD_THREE, CRS_RES_PERM_ADRS_US,
				RA_ADDTNL_CMNT, RA_PRPSE_TAX_EVSN, RA_IS_CUST_DEALNG_ARMAMNT,
				SPECIAL_CAT, EMP_STATUS, RA_IS_CUST_PEP, RA_CARRYNG_EID_CARD,
				SIGN_STYLE1, RA_IS_CUST_DEALNG_HAWALA, HD_THREE,
				CRS_RES_PERM_ADRS_US, RA_PRPSE_TAX_EVSN,
				RA_IS_CUST_DEALNG_ARMAMNT, SPECIAL_CAT, EMP_STATUS,
				RA_IS_CUST_PEP, IS_SIGN_UPDATE, RA_RSN_BNKNG_UAE,
				RA_LIST_OF_CUST_PEP, RA_CUST_SRC_WEALTH, RA_IS_CUST_WRKNG_UAE,
				RA_IS_CUST_WRKNG_NON_UAE, DEALS_IN_WMD });
		enableControls(BUSINESS_NATURE_SECTION);
		if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
				.equalsIgnoreCase("No")) {
			formObject.setStyle(RA_RSN_BNKNG_UAE, DISABLE, FALSE);
		} else {
			formObject.setStyle(RA_RSN_BNKNG_UAE, DISABLE, TRUE);
		}
		if (formObject.getValue(RA_IS_CUST_PEP).toString()
				.equalsIgnoreCase("Yes")) {
			formObject.setStyle(RA_LIST_OF_CUST_PEP, DISABLE, FALSE);
		} else {
			formObject.setStyle(RA_LIST_OF_CUST_PEP, DISABLE, TRUE);
		}
		logInfo("riskAssessmentSectionEnable", "getValue(EMP_STATUS): "
				+ formObject.getValue(EMP_STATUS).toString());
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			disableControls(BUSINESS_NATURE_SECTION);
			enableControls(new String[] { RA_IS_CUST_WRKNG_UAE,
					RA_IS_CUST_WRKNG_NON_UAE });
		} else if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			enableControls(BUSINESS_NATURE_SECTION);
			disableControls(new String[] { RA_IS_CUST_WRKNG_UAE,
					RA_IS_CUST_WRKNG_NON_UAE });
		} else {
			disableControls(BUSINESS_NATURE_SECTION);
			disableControls(new String[] { RA_IS_CUST_WRKNG_UAE,
					RA_IS_CUST_WRKNG_NON_UAE });

			if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Salaried")) {
				enableControls(new String[] { RA_IS_CUST_WRKNG_UAE,
						RA_IS_CUST_WRKNG_NON_UAE });
			}
		}
	}

	public void FrameFATCA_CPD_Enable() {
		logInfo("FrameFATCA_CPD_Enable", "INSIDE");
		enableControls(new String[] { CNTRY_OF_BIRTH, POACOMBO, FAT_US_PERSON });
		if (formObject.getValue(FATCAMINI).toString().equalsIgnoreCase("Yes")) {
			formObject.setStyle(BTN_VALIDATE, DISABLE, FALSE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, TRUE);
		} else if (formObject.getValue(FATCAMAIN).toString()
				.equalsIgnoreCase("Yes")) {
			formObject.setStyle(BTN_VALIDATE, DISABLE, TRUE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, FALSE);
			// formObject.setStyle(DATEPICKERCUST, DISABLE, FALSE);
		} else {
			formObject.setStyle(BTN_VALIDATE, DISABLE, TRUE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, TRUE);
		}

		if (formObject.getValue(FAT_US_PERSON).toString()
				.equalsIgnoreCase("Yes")) {
			String sNationality = getFinalDataComparison(
					CHECKBOX_NATIONALITY_FCR, CHECKBOX_NATIONALITY_EIDA,
					CHECKBOX_NATIONALITY_MANUAL, FCR_NATIONALITY,
					EIDA_NATIONALITY, MANUAL_NATIONALITY).trim();

			if (sNationality.equalsIgnoreCase("UNITED STATES")) {
				formObject.setStyle(FAT_US_PERSON, DISABLE, TRUE);
			}
			formObject.setStyle(FAT_US_PERSON, DISABLE, TRUE);
		} else {
			logInfo("FrameFATCA_CPD_Enable", "fatca disabled from here 7152");
			formObject.setStyle(FAT_LIABLE_TO_PAY_TAX, DISABLE, FALSE);
		}

		if (formObject.getValue(COMBODOC).toString().equalsIgnoreCase("W8BEN")) {
			formObject.setStyle(DATEPICKERW8, DISABLE, FALSE);
		} else if (formObject.getValue(COMBODOC).toString()
				.equalsIgnoreCase("W9")) {
			formObject.setStyle(FAT_SSN, DISABLE, FALSE);
		} else {
			formObject.setStyle(DATEPICKERW8, DISABLE, TRUE);
			formObject.setStyle(FAT_SSN, DISABLE, TRUE);
		}
		formObject.setStyle(BTN_VALIDATE, DISABLE, FALSE);
	}

	public void enableFATCACPD() { // FrameFATCA_CPD_Enable
		logInfo("enableFATCACPD", "INSIDE");
		enableControls(new String[] { CNTRY_OF_BIRTH, POACOMBO, FAT_US_PERSON });
		if (formObject.getValue(FATCAMINI).toString().equalsIgnoreCase("Yes")) {
			formObject.setStyle(BTN_VALIDATE, DISABLE, FALSE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, TRUE);
		} else if (formObject.getValue(FATCAMAIN).toString()
				.equalsIgnoreCase("Yes")) {
			formObject.setStyle(BTN_VALIDATE, DISABLE, TRUE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, FALSE);
		} else {
			formObject.setStyle(BTN_VALIDATE, DISABLE, TRUE);
			formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, TRUE);
		}
		if (formObject.getValue(FAT_US_PERSON).toString()
				.equalsIgnoreCase("Yes")) {
			String sNationality = getFinalDataComparison(
					CHECKBOX_NATIONALITY_FCR, CHECKBOX_NATIONALITY_EIDA,
					CHECKBOX_NATIONALITY_MANUAL, FCR_NATIONALITY,
					EIDA_NATIONALITY, MANUAL_NATIONALITY).trim();
			if (sNationality.equalsIgnoreCase("UNITED STATES")) {
				formObject.setStyle(FAT_US_PERSON, DISABLE, TRUE);
			}
			formObject.setStyle(FAT_LIABLE_TO_PAY_TAX, DISABLE, TRUE);
		} else {
			logInfo("enableFATCACPD", "fatca disabled from here 7186");
			formObject.setStyle(FAT_LIABLE_TO_PAY_TAX, DISABLE, FALSE);
		}
		if (formObject.getValue(COMBODOC).toString().equalsIgnoreCase("W8BEN")) {
			formObject.setStyle(DATEPICKERW8, DISABLE, FALSE);
		} else if (formObject.getValue(COMBODOC).toString()
				.equalsIgnoreCase("W9")) {
			formObject.setStyle(FAT_SSN, DISABLE, FALSE);
		} else {
			formObject.setStyle(DATEPICKERW8, DISABLE, TRUE);
			formObject.setStyle(FAT_SSN, DISABLE, TRUE);
		}
	}

	public String getApplicationRiskInputXML(int sNo) {
		String empSatus = "";
		String employerName = "";
		String empSalary = "";
		String sTML = "";
		String finalNationality = "";
		String resiCountry = "";

		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = sOutput.get(0).get(0);
		String sQuery = "SELECT FINAL_RESIDENCE_COUNTRY,FINAL_NATIONALITY,FINAL_EMP_NAME FROM"
				+ " USR_0_CUST_TXN WHERE WI_NAME ='"
				+ sWorkitemId
				+ "' AND CUST_SNO ='" + sNo + "'";
		sOutput = formObject.getDataFromDB(sQuery);
		if (sOutput != null && sOutput.size() > 0) {
			empSatus = formObject.getValue(EMP_STATUS).toString();
			employerName = sOutput.get(0).get(2);
			empSalary = formObject.getValue(ED_MONTHLY_INCM).toString();
			logInfo("getApplicationRiskInputXML",
					"Application Resk calculation employerName" + employerName
							+ "emp status " + empSatus + "empSalary"
							+ empSalary);
			List<List<String>> TtmNonTml = formObject
					.getDataFromDB("SELECT CD_STATUS FROM USR_0_EMPLOYER_MASTER "
							+ "WHERE EMP_NAME ='" + employerName + "'");

			if (sOutput.get(0).get(0).equalsIgnoreCase("1")) {
				sTML = "Yes";
			} else {
				sTML = "No";
			}
			resiCountry = sOutput.get(0).get(0).toUpperCase();
			finalNationality = sOutput.get(0).get(1).toUpperCase();
		}
		String sInputXML = "<?xml version=\"1.0\"?><APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Application_Eligibility</Calltype>" + "<Customer>"
				+ "<resident_Country>"
				+ resiCountry
				+ "</resident_Country>"
				+ "<empStatus>"
				+ empSatus
				+ "</empStatus>"
				+ "<nationality>"
				+ finalNationality
				+ "</nationality>"
				+ "<salary>"
				+ empSalary
				+ "</salary>"
				+ "<tml_Nontml>"
				+ sTML
				+ "</tml_Nontml>"
				+ "<REF_NO>"
				+ sSeqNo
				+ "</REF_NO>"
				+ "<userName>"
				+ sUserName
				+ "</userName>"
				+ "<WiName>"
				+ sWorkitemId
				+ "</WiName>"
				+ "</Customer><EngineName>"
				+ sEngineName
				+ "</EngineName>"
				+ "<SessionId>"
				+ sSessionId
				+ "</SessionId>"
				+ "</APWebService_Input>";
		logInfo("getApplicationRiskInputXML",
				"Input xml of getApplicationRiskInputXML : " + sInputXML);
		return sInputXML;
	}

	public String getIndRiskInputXML(int sNo) {
		logInfo("getIndRiskInputXML", "Inside");
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
		String sSeqNo = sOutput.get(0).get(0);
		logInfo("getIndRiskInputXML", "sSeqNo: " + sSeqNo);
		String sQuery = "SELECT DEALS_ARMAMENT,HAWALA,FINAL_RESIDENCE_COUNTRY,PEP,PURPOSE_TAX,"
				+ "FINAL_NATIONALITY,(CASE WHEN upper(IS_GEN_TRADE_COMP) ='TRUE' THEN 'Yes' "
				+ "WHEN upper(IS_STONE_DEALER) ='TRUE' THEN 'Yes' WHEN upper(IS_COMMODITY_BROKER) ='TRUE' THEN 'Yes' "
				+ "WHEN upper(IS_REAL_ESTATE_BROKER) ='TRUE' THEN 'Yes' WHEN upper(IS_SELF_EMPLOYED) ='TRUE' "
				+ "THEN 'Yes' WHEN upper(FINANCIAL_BROKERS) ='TRUE' THEN 'Yes' WHEN upper(NOTARY_PUBLIC) ='TRUE' THEN 'Yes' "
				+ "WHEN upper(SOCIAL_MEDIA_INFLUNCER) ='TRUE' THEN 'Yes' ELSE 'No' END)"
				+ " AS EMP_NATURE_OF_BUSINESS,EMP_STATUS,IS_WORK_DEFENCE_UAE"
				+ ",IS_WORK_DEFENCE_NONUAE,DEALS_IN_WMD,SALARY_TRANSFER FROM USR_0_CUST_TXN WHERE WI_NAME ='"
				+ sWorkitemId + "' " + "AND CUST_SNO ='" + sNo + "'";
		logInfo("getIndRiskInputXML", "sQuery::" + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		String sInputXML = "";
		if (sOutput != null && sOutput.size() > 0) {
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Individual_Risk</Calltype>" + "<Customer>"
					+ "<country_of_residence>"
					+ sOutput.get(0).get(2).toUpperCase()
					+ "</country_of_residence>"
					+ "<nationality>"
					+ sOutput.get(0).get(5).toUpperCase()
					+ "</nationality>"
					+ "<pep_question>"
					+ sOutput.get(0).get(3)
					+ "</pep_question>"
					+ "<hawala_question>"
					+ sOutput.get(0).get(1)
					+ "</hawala_question>"
					+ "<arms_dealer_question>"
					+ sOutput.get(0).get(0)
					+ "</arms_dealer_question>"
					+ "<tax_evasion_question>"
					+ sOutput.get(0).get(4)
					+ "</tax_evasion_question>"
					+ "<Business_nature>"
					+ sOutput.get(0).get(6)
					+ "</Business_nature>"
					+ "<Employment_Status>"
					+ sOutput.get(0).get(7)
					+ "</Employment_Status>"
					+ "<IS_UAE_ENTITY>"
					+ sOutput.get(0).get(8)
					+ "</IS_UAE_ENTITY>"
					+ "<IS_NON_UAE_ENTITY>"
					+ sOutput.get(0).get(9)
					+ "</IS_NON_UAE_ENTITY>"
					+ "<deals_in_wmd_question>"
					+ sOutput.get(0).get(10)
					+ "</deals_in_wmd_question>"
					+ "<Salary_transfer>"
					+ sOutput.get(0).get(11)
					+ "</Salary_transfer>"
					+ "<internal_Black_List></internal_Black_List>"
					+ "<central_Bank_Black_List></central_Bank_Black_List>"
					+ "<world_Check></world_Check>"
					+ "<ikYC_Risk_Assessment></ikYC_Risk_Assessment>"
					+ "<country_Blacklist_Status></country_Blacklist_Status>"
					+ "<nationality_Blacklist_Sta></nationality_Blacklist_Sta>"
					+ "<residency_Status></residency_Status>"
					+ "<risk_Categoy_Int1></risk_Categoy_Int1>"
					+ "<risk_Categoy_Int2></risk_Categoy_Int2>"
					+ "<risk_Category_Final></risk_Category_Final>"
					+ "<name_Screening_Eligibilit></name_Screening_Eligibilit>"
					+ "<final_Eligibility_Analysi></final_Eligibility_Analysi>"
					+ "<REF_NO>"
					+ sSeqNo
					+ "</REF_NO>"
					+ "<userName>"
					+ sUserName
					+ "</userName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "</Customer><EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "</APWebService_Input>";
		}
		logInfo("getIndRiskInputXML", "sInputXML: " + sInputXML);
		return sInputXML;
	}

	public void frame81_CPD_Disable() {
		logInfo("frame81_CPD_Disable", "INSIDE");
		String[] listOfFields = { HD_FCR_SEARCH, SEARCH_DOB,
				SEARCH_NATIONALITY, HD_EMAIL, HD_DEBIT_NO, HD_CREDIT_NO,
				SEARCH_MOB_NO, SEARCH_CID, HD_CUST_IC, NEW_CUST_NAME,
				NEW_CUST_DOB, NEW_CUST_NATIONALITY, BTN_ADD_CUST_INFO,
				SEARCH_ADD_EIDA_INFO, BTN_ADD_MANUALLY, BTN_EIDA_INFO,
				BTN_SEARCH_CUSTOMER, BTN_SEARCH_CLEAR, SEARCH_ADD_CUST_INFO };
		disableControls(listOfFields);
		if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)
				|| sActivityName
						.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO_CHECK)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN_QDE)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
			String[] listOfFields1 = { HD_NAME, PD_CUSTSEGMENT };
			disableControls(listOfFields1);
			// formObject.setNGEnable("ListView2",false);
		} else {
			String[] listOfFields1 = { HD_NAME, SEARCH_PASS_NO, HD_CREDIT_NO };
			disableControls(listOfFields1);
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			formObject.setStyle(OPERATING_INST, DISABLE, FALSE);
		} else {
			formObject.setStyle(OPERATING_INST, DISABLE, TRUE);
		}
		// formObject.setNGEnable("Command14",false);
		logInfo("frame81_CPD_Disable", "END");
	}

	public void manageInternalSection() {
		String prof_code = "";
		String cust_seg = formObject.getValue(PD_CUSTSEGMENT).toString();
		// setProfitCode(); Blank method in old code so did not implement
		String profit_code = "select PROFIT_CENTER_CODE from USR_0_CUST_SEGMENT "
				+ "where CUST_SEGMENT = '" + cust_seg + "'";
		List<List<String>> output = formObject.getDataFromDB(profit_code);
		if (output != null && output.size() > 0) {
			prof_code = output.get(0).get(0);
		}
		formObject.setValue(IDS_PROF_CENTER_CODE, prof_code);
		if (formObject.getValue(PD_CUSTSEGMENT).toString()
				.equalsIgnoreCase("Aspire")
				|| formObject.getValue(PD_CUSTSEGMENT).toString()
						.equalsIgnoreCase("Simplylife")) {
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP });
			uncheckCheckBoxes(new String[] { IDS_BNFT_CB_TP, IDS_PC_CB_TP,
					IDS_BNFT_CB_TP, IDS_PC_CB_ENTERTAINMENT,
					IDS_PC_CB_SHOPPING, IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL,
					IDS_PC_BN_TP });
			disableControls(new String[] { IDS_BNFT_CB_TP, IDS_PC_CB_TP,
					IDS_BNFT_CB_TP, IDS_PC_CB_ENTERTAINMENT,
					IDS_PC_CB_SHOPPING, IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL,
					IDS_PC_BN_TP, EXCELLENCY_CNTR });
		} else if (formObject.getValue(PD_CUSTSEGMENT).toString()
				.equalsIgnoreCase("Privilege")
				|| formObject.getValue(PD_CUSTSEGMENT).toString()
						.equalsIgnoreCase("Emirati")) {
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_BNFT_CB_TP, IDS_PC_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT });
			disableControls(new String[] { EXCELLENCY_CNTR });
			uncheckCheckBoxes(new String[] { IDS_PC_BN_TP });
			disableControls(new String[] { IDS_PC_BN_TP });
		} else if (formObject.getValue(PD_CUSTSEGMENT).toString()
				.equalsIgnoreCase("Excellency")
				|| formObject.getValue(PD_CUSTSEGMENT).toString()
						.equalsIgnoreCase("Private Clients")
				|| formObject.getValue(PD_CUSTSEGMENT).toString()
						.equalsIgnoreCase("Emirati Excellency")) {
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, EXCELLENCY_CNTR, IDS_PC_BN_TP });
			uncheckCheckBoxes(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL });
			// formObject.setNGEnable(EXCELLENCY_CNTR, true); Sanal Sahil to
			// check this
			// formObject.setNGLocked(EXCELLENCY_CNTR, true);
			disableControls(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT });
			// formObject.setNGEnable(IDS_PC_BN_TP, true);Sanal Already enabled
		} else {
			uncheckCheckBoxes(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_CB_TP,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL, IDS_PC_BN_TP });
			disableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_CB_TP,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_SPORT, IDS_PC_CB_TRAVEL, IDS_PC_BN_TP });
		}
	}

	public int CalculateAge(String dob) {
		logInfo("CalculateAge", "INSIDE");
		Calendar dobDate = Calendar.getInstance();
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR);
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);

		SimpleDateFormat f = new SimpleDateFormat(DATEFORMAT);
		String d1 = dob;
		try {
			Date formatted1 = f.parse(d1);
			dobDate.setTime(formatted1);
		} catch (ParseException e) {
			logError("", e);
		}
		int year = dobDate.get(Calendar.YEAR);
		int month = dobDate.get(Calendar.MONTH);
		int day = dobDate.get(Calendar.DAY_OF_MONTH);

		int age = curYear - year;
		if (curMonth < month || (month == curMonth && curDay < day)) {
			age--;
		} else if (curMonth > month || (month == curMonth && curDay > day)) {
			age++;
		}
		log.info("age==" + age);
		return age;
	}

	public void manageCustomerChangeCheckboxes(String sBankRelation,
			String sAccRelation) {
		try {
			logInfo("manageCustomerChangeCheckboxes", "INSIDE");
			if (sBankRelation.equalsIgnoreCase("Existing")) {
				formObject.setStyle(PD_ANY_CHNG_CUST_INFO, DISABLE, FALSE);
				if (formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(PD_ANY_CHNG_CUST_INFO, "No");
				}
				uncheckCheckBoxes(new String[] { CK_PER_DET, CHK_CONTACT_DET,
						CHK_PASSPORT_DET, CHK_INTERNAL_SEC, CHK_GEN_INFO,
						CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS,
						CHK_ADD, CHK_BANKING_RELATION, CHECKBOX_FATCA });
				/*
				 * formObject.setNGValue(CK_PER_DET, "false");
				 * formObject.setNGValue(CHK_CONTACT_DET, "false");
				 * formObject.setNGValue(CHK_PASSPORT_DET, "false");
				 * formObject.setNGValue(CHK_INTERNAL_SEC, "false");
				 * formObject.setNGValue(CHK_GEN_INFO, "false");
				 * formObject.setNGValue(CHK_EMP_DETAIL, "false");
				 * formObject.setNGValue(CHK_FUNDING_INFO, "false");
				 * formObject.setNGValue(CHK_RISK_ASS, "false");
				 * formObject.setNGValue(CHK_ADD, "false");
				 * formObject.setNGValue(CHK_BANKING_RELATION, "false");
				 * formObject.setNGValue(CHECKBOX_FATCA, "false");
				 */

				Frame32_CPD_Disable();
				Frame31_CPD_Disable();
				Frame30_CPD_Disable();
				Frame27_CPD_Disable();
				Frame28_CPD_Disable();
				Frame21_CPD_Disable();
				Frame20_CPD_Disable();
				Frame18_CPD_Disable();
				Frame22_CPD_Disable();
				Frame25_CPD_Disable();
				frameFatcaCpdDisable();// FrameFATCA_CPD_Disable();
				formObject.setStyle(CHK_INTERNAL_SEC, DISABLE, TRUE);
				formObject.setStyle(IDS_REF_BY_CUST, DISABLE, TRUE);
				if (formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString()
						.equalsIgnoreCase("Yes")) {
					enableControls(new String[] { RES_CNTRY, CK_PER_DET,
							CHK_CONTACT_DET, CHK_PASSPORT_DET,
							CHK_INTERNAL_SEC, CHK_GEN_INFO, CHK_EMP_DETAIL,
							CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
							CHK_BANKING_RELATION, CHECKBOX_FATCA });
					String sCID = formObject.getTableCellValue(ACC_RELATION, 1,
							2);// "ACC_RELATION.CID"

					if ((formObject
							.getValue(REQUEST_TYPE)
							.toString()
							.equalsIgnoreCase(
									"New Account with Category Change") && sCID
							.equalsIgnoreCase(formObject.getValue(
									TXT_CUSTOMERID).toString()))
							|| formObject.getValue(REQUEST_TYPE).toString()
									.equalsIgnoreCase("Category Change Only")) {
						formObject.setStyle(CHK_INTERNAL_SEC, DISABLE, TRUE);
					} else {
						formObject.setStyle(CHK_INTERNAL_SEC, DISABLE, FALSE);
					}
				} else {
					disableControls(new String[] { RES_CNTRY, CK_PER_DET,
							CHK_CONTACT_DET, CHK_PASSPORT_DET,
							CHK_INTERNAL_SEC, CHK_GEN_INFO, CHK_EMP_DETAIL,
							CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
							CHK_BANKING_RELATION, CHECKBOX_FATCA });
				}
				if (sAccRelation.equalsIgnoreCase("Minor")) {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, FALSE);
				} else {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, TRUE);
				}
			} else if (sBankRelation.equalsIgnoreCase("New")) {
				formObject.setValue(PD_ANY_CHNG_CUST_INFO, "Yes");
				formObject.setStyle(PD_ANY_CHNG_CUST_INFO, DISABLE, TRUE);
				checkCheckBoxes(new String[] { CK_PER_DET, CHK_CONTACT_DET,
						CHK_PASSPORT_DET, CHECKBOX_FATCA, CHK_GEN_INFO,
						CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS,
						CHK_ADD, CHK_BANKING_RELATION });
				formObject.setStyle(PD_ANY_CHNG_CUST_INFO, DISABLE, FALSE);
				Frame32_CPD_ENable();
				Frame31_CPD_ENable();
				Frame30_CPD_ENable();
				Frame27_CPD_ENable();
				Frame28_CPD_ENable();
				Frame21_CPD_ENable();
				Frame20_CPD_ENable();
				Frame18_CPD_ENable();
				Frame22_CPD_ENable();
				riskAssessmentSectionEnable();
				FrameFATCA_CPD_Enable();
				disableControls(new String[] { CK_PER_DET, CHK_CONTACT_DET,
						CHK_PASSPORT_DET, CHK_INTERNAL_SEC, CHK_GEN_INFO,
						CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_ADD,
						CHK_RISK_ASS, CHECKBOX_FATCA, NEW_LINK,
						EXISTING_CARD_NO });
				formObject.setValue(CHK_INTERNAL_SEC, "true");// Sanal need to
																// check if it
																// will work
																// since it has
																// been disabled
				if (sAccRelation.equalsIgnoreCase("Minor")) {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, FALSE);
				} else {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, TRUE);
				}
				manageInternalSection();
			} else {
				uncheckCheckBoxes(new String[] { CK_PER_DET, CHK_CONTACT_DET,
						CHK_PASSPORT_DET, CHK_INTERNAL_SEC, CHK_GEN_INFO,
						CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS,
						CHK_ADD, CHK_BANKING_RELATION, CHECKBOX_FATCA });
				Frame32_CPD_Disable();
				Frame31_CPD_Disable();
				Frame30_CPD_Disable();
				Frame27_CPD_Disable();
				Frame28_CPD_Disable();
				Frame21_CPD_Disable();
				Frame20_CPD_Disable();
				Frame18_CPD_Disable();
				Frame25_CPD_Disable();
				Frame22_CPD_Disable();
				frameFatcaCpdDisable();// FrameFATCA_CPD_Disable();
				enableControls(new String[] { CK_PER_DET, CHK_CONTACT_DET,
						CHK_PASSPORT_DET });
				if (!sBankRelation.equalsIgnoreCase("Existing")) {
					enableControls(new String[] { CHK_INTERNAL_SEC });
				}
				enableControls(new String[] { CHK_GEN_INFO, CHK_EMP_DETAIL,
						CHK_FUNDING_INFO, CHK_ADD, CHK_RISK_ASS,
						CHK_BANKING_RELATION });
				disableControls(new String[] { RES_CNTRY });
				if (sAccRelation.equalsIgnoreCase("Minor")) {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, FALSE);
				} else {
					formObject.setStyle(PD_DATEOFATTAININGMAT, DISABLE, TRUE);
				}
			}
		} catch (Exception e) {
			logError("manageCustomerChangeCheckboxes", e);
		}
	}

	public void frameFatcaCpdDisable() {
		logInfo("frameFatcaCpdDisable", "INSIDE");
		String[] listOfFields = { CNTRY_OF_BIRTH, FAT_US_PERSON,
				FAT_LIABLE_TO_PAY_TAX, FAT_SSN, FAT_CUST_CLASSIFICATION,
				POACOMBO, COMBODOC, INDICIACOMBO, DATEPICKERCUST, DATEPICKERW8,
				BTN_VALIDATE, BTN_VALIDATEFATCA };
		disableControls(listOfFields);
		if ("YES"
				.equalsIgnoreCase(formObject.getValue(INDICIACOMBO).toString())) {
			formObject.setStyle(INDICIACOMBO, DISABLE, FALSE);
		}
		logInfo("", "fatca disabled from here 7489");
	}

	public void setResidentWithoutEidaComboQDE() {
		try {
			logInfo("setResidentWithoutEidaComboQDE", "INSIDE");
			String eidaNo = "";
			if (formObject.getValue(CHECKBOX_EIDANO_FCR).toString()
					.equalsIgnoreCase("true")) {
				eidaNo = formObject.getValue(FCR_EIDANO).toString();
			} else if (formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
					.equalsIgnoreCase("true")) {
				eidaNo = formObject.getValue(EIDA_EIDANO).toString();
			} else if (formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
					.equalsIgnoreCase("true")) {
				eidaNo = formObject.getValue(MANUAL_EIDANO).toString();
			}
			// EnableCombos(DRP_RESEIDA);
			logInfo("setResidentWithoutEidaComboQDE", "Eida Value : " + eidaNo);
			if (eidaNo == null || eidaNo.isEmpty()) {
				formObject.setValue(DRP_RESEIDA, "Yes");
			} else {
				formObject.setValue(DRP_RESEIDA, "No");
			}
		} catch (Exception e) {
			logError("setResidentWithoutEidaComboQDE", e);
		}
	}

	public void deleteECBCallsDetails() {
		logInfo("setResidentWithoutEidaComboQDE",
				"*************** Inside deleteECBCalls *************");
		try {
			String sQueryCalls = "DELETE FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME ='"
					+ sWorkitemId
					+ "'"
					+ " AND (CALL_NAME LIKE 'BRMS_ECB_EXCLUSION%' OR CALL_NAME LIKE 'ECB_VALIDATION%'"
					+ " OR CALL_NAME LIKE 'BRMS_ELIGIBILITY%' OR CALL_NAME LIKE 'BRMS_JOINTCUSTOMER%'"
					+ " OR CALL_NAME LIKE 'CHEQUEBOOK_HANDOFF%')";
			logInfo("deleteECBCallsDetails", "sQuery---" + sQueryCalls);
			int outputCalls = formObject.saveDataInDB(sQueryCalls);
			logInfo("deleteECBCallsDetails",
					"DELETE FROM USR_0_INTEGRATION_CALLS : " + outputCalls);
			String sQueryECB = "DELETE FROM CHQBOOKVALIDATIONDATA WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			logInfo("deleteECBCallsDetails", "sQuery---" + sQueryECB);
			int outputECB = formObject.saveDataInDB(sQueryECB);
			logInfo("deleteECBCallsDetails",
					"DELETE FROM CHQBOOKVALIDATIONDATA : " + outputECB);
			String sQuery = "DELETE FROM CHEQUEBOOKHANDOFFDATA WHERE WORKITEMNO ='"
					+ sWorkitemId + "' and PROCESSFLAG='U'";
			logInfo("deleteECBCallsDetails", "sQuery---" + sQuery);
			int output = formObject.saveDataInDB(sQuery);
			logInfo("deleteECBCallsDetails",
					"DELETE FROM CHEQUEBOOKHANDOFFDATA : " + output);
			// sQuery=
			// "DELETE FROM USR_0_ECB_EXCLUSION WHERE WORKITEMNO ='"+sWorkitemId+"'";//Commented
			// for invalid column on 27042023(Performanceissue) by Ameena
			sQuery = "DELETE FROM USR_0_ECB_EXCLUSION WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			logInfo("deleteECBCallsDetails", "sQuery---" + sQuery);
			output = formObject.saveDataInDB(sQuery);
			logInfo("deleteECBCallsDetails",
					"DELETE FROM USR_0_ECB_EXCLUSION : " + output);

		} catch (Exception e) {
			logError("", e);
		}
	}

	public boolean mandatoryCRSCheck(boolean custSegmentCheck) {
		logInfo("MandatoryCRSCheck", "----------CRS Check------------");
		// NGRepeater objChkRepeater = formObject.getNGRepeater(ACC_RELATION);
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String cust_relation = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 8);
		logInfo("mandatoryCRSCheck", "cust relatiob=" + cust_relation);
		if (!cust_relation.equalsIgnoreCase("Heirs")
				&& !formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("Category Change Only")) {
			if (custSegmentCheck) {
				logInfo("mandatoryCRSCheck", "Inside crs check: "
						+ formObject.getValue(CRS_CERTIFICATION_OBTAINED)
								.toString());
				if (formObject.getValue(CRS_CERTIFICATION_OBTAINED).toString()
						.isEmpty()) {
					sendMessageValuesList(CRS_CERTIFICATION_OBTAINED,
							"Kindly select Yes/No for CRS certification form obtained.");
					return false;
				}
				if (getGridCount(CRS_TAXCOUNTRYDETAILS) < 1) {
					sendMessageValuesList(CRS_TAXCOUNTRYDETAILS,
							"CRS Grid must have at least one record.");
					return false;
				}
			}
		}
//		Added by Shivanshu ATP-472
		String cityBirth =formObject.getValue(CRS_CITYOFBIRTH).toString();
		if (cityBirth.length()<3) {
			sendMessageValuesList(CRS_CITYOFBIRTH, "City of Birth " + CA0205);
			return false;
		}
		return true;
	}

	public Boolean ValidateComparisonData(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sStatus,
			String sFieldName) {
		logInfo("ValidateComparisonData", "INSIDE");
		try {
			if (formObject.getValue(sFCRCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sFCRDataControl).toString()
						.equalsIgnoreCase("")
						&& !sFCRDataControl.equalsIgnoreCase(FCR_EMAIL)) {
					sendMessageValuesList(sFCRDataControl, sMessageID);
					return false;
				} else if (sFCRDataControl.equalsIgnoreCase(FCR_EMAIL)
						&& !formObject.getValue(sFCRDataControl).toString()
								.equalsIgnoreCase("")) {
					if (!validateEmailFormat(FCR_EMAIL)) {
						return false;
					}
				}
			} else if (formObject.getValue(sEIDACBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sEIDADataControl).toString()
						.equalsIgnoreCase("")
						&& !sEIDADataControl.equalsIgnoreCase(EIDA_EMAIL)) {
					sendMessageValuesList(sEIDADataControl, sMessageID);
					return false;
				} else if (sEIDADataControl.equalsIgnoreCase(EIDA_EMAIL)
						&& !formObject.getValue(sEIDADataControl).toString()
								.equalsIgnoreCase("")) {
					if (!validateEmailFormat(EIDA_EMAIL)) {
						return false;
					}
				}
			} else if (sStatus.equalsIgnoreCase("Mandatory")) {
				if (formObject.getValue(sManualCBControl).toString()
						.equalsIgnoreCase("True")) {
					if (formObject.getValue(sManualDataControl).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(sManualDataControl, sMessageID);
						return false;
					}
				} else {
					sendMessageValuesList(sManualCBControl,
							"Please select the relevant checkbox for "
									+ sFieldName + " or Please select "
									+ sFieldName + " in manual data field");
					return false;
				}
				if (sManualDataControl.equalsIgnoreCase(MANUAL_EMAIL)
						&& !formObject.getValue(sManualDataControl).toString()
								.equalsIgnoreCase("")) {
					log.info("******************* in if ^^^^^^^^^^^^^^^");
					if (!validateEmailFormat(MANUAL_EMAIL)) {
						return false;
					}
				}
			} else {
				if (formObject.getValue(sManualCBControl).toString()
						.equalsIgnoreCase("True")) {
					if (formObject.getValue(sManualDataControl).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(sManualDataControl, sMessageID);
						return false;
					}
					if (sManualDataControl.equalsIgnoreCase(MANUAL_EMAIL)
							&& !formObject.getValue(sManualDataControl)
									.toString().equalsIgnoreCase("")) {
						log.info("******************* in if ^^^^^^^^^^^^^^^");
						if (!validateEmailFormat(MANUAL_EMAIL)) {
							return false;
						}
					}
				}
			}
		} catch (Exception e) {
			logError("ValidateComparisonData", e);
		}
		return true;
	}

	public Boolean validateEmailFormat(String Email) {
		String sEmail = formObject.getValue(Email).toString().trim();
		if (sEmail.equals(""))
			return true;
		String at = "@";
		String dot = ".";
		int lat = sEmail.indexOf(at);
		int lstr = sEmail.length();
		if (sEmail.indexOf(at) == -1 || sEmail.indexOf(at) == 0
				|| sEmail.indexOf(at) == lstr || sEmail.indexOf(at) == lstr - 1
				|| sEmail.lastIndexOf(at) == lstr - 1) {
			sendMessageValuesList(Email, CA0105);
			return false;
		}
		if (sEmail.indexOf(dot) == -1 || sEmail.indexOf(dot) == 0
				|| sEmail.indexOf(dot) == lstr
				|| sEmail.indexOf(dot) == lstr - 1
				|| sEmail.lastIndexOf(dot) == lstr - 1) {
			sendMessageValuesList(Email, CA0105);
			return false;
		}
		if (sEmail.indexOf(at, (lat + 1)) != -1) {
			sendMessageValuesList(Email, CA0105);
			return false;
		}
		if (sEmail.substring(lat - 1, lat) == dot
				|| sEmail.substring(lat + 1, lat + 2) == dot) {
			sendMessageValuesList("", CA0105);
			formObject.setValue("ADD_EMAIL", "");
			return false;
		}
		if (sEmail.indexOf(dot, (lat + 2)) == -1) {
			sendMessageValuesList(Email, CA0105);
			return false;
		}
		if (sEmail.indexOf(" ") != -1) {
			sendMessageValuesList(Email, CA0105);
			return false;
		}
		return true;
	}

	public void PopulatePrivateClientQuestions() {
		logInfo("PopulatePrivateClientQuestions",
				"Inside private client question section");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String squery2 = "SELECT SECRET_QUESTION,SECRET_ANSWER,CONCIERGE_MEMBER FROM USR_0_CUST_TXN"
					+ " WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND CUST_SNO='"
					+ iSelectedRow + "'";
			List<List<String>> list = formObject.getDataFromDB(squery2);
			if (list != null && list.size() > 0) {
				formObject.setValue(SECRET_QUESTION, list.get(0).get(0));
				formObject.setValue(SECRET_ANS, list.get(0).get(1));
				String concierge = list.get(0).get(2);

				if (concierge != null) {
					if (concierge.equalsIgnoreCase("1"))
						concierge = "Yes";
					else if (concierge.equalsIgnoreCase("2"))
						concierge = "No";
				}
				formObject.setValue(CONCIERGE, concierge);
			}
		} catch (Exception e) {
			logError("Exception in [PopulatePrivateClientQuestions]", e);
		}
	}

	public void setManualFieldsEnable() {
		log.info("In setManualFieldsEnable");
		String setManualFieldsEnable[] = { MANUAL_PREFIX, MANUAL_NAME,
				MANUAL_FIRSTNAME, MANUAL_LASTNAME, MANUAL_PASSTYPE,
				MANUAL_COUNTRYBIRTH, MANUAL_CITY, MANUAL_VISASTATUS,
				MANUAL_DOB, MANUAL_PASSPORTNO, MANUAL_PASSPORTISSDATE,
				MANUAL_PASSPORTEXPDATE, PASSPORTEXPPLACE_MANUAL,
				MANUAL_NATIONALITY, MANUAL_MOTHERNAME, MANUAL_ADDRESS,
				MANUAL_CNTRY, MANUAL_PER_CNTRY, MANUAL_MOBILE, MANUAL_EMAIL,
				MANUAL_PROFESSION, MANUAL_GENDER, BTNPROFESSION,
				MANUAL_RESIDENT };
		enableControls(setManualFieldsEnable);
	}

	// public void manageFATCAFieldsEnable(String sChangeInCustomerDetail,String
	// sRelation)
	// {
	// log.info("In manageFATCAFieldsEnable");
	// String sFATCAChange =
	// formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS).toString();
	// String sUSClassification =
	// formObject.getValue(FAT_CUST_CLASSIFICATION).toString();
	// String sWhereUSClassification ="";
	// if(sUSClassification.equalsIgnoreCase(""))
	// {
	// sWhereUSClassification ="AND CUSTOMER_US_CLASSIFICATION IS NULL";
	// }
	// else
	// {
	// sWhereUSClassification =
	// "AND CUSTOMER_US_CLASSIFICATION='"+sUSClassification+"'";
	// }
	// String sQuery
	// ="SELECT ENABLE_DISABLE FROM USR_0_FATCA_RULES WHERE CUSTOMER_EXISTING='Yes' AND REQUEST_TYPE='"+formObject.getValue(REQUEST_TYPE)+"' AND IS_CUSTOMER_INFO_CHANGE='"+sChangeInCustomerDetail+"' AND IS_FATCA_DETAIL_CHANGE='"+sFATCAChange+"'"+sWhereUSClassification;
	// List<List<String>> sOutput=null;
	// if(sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO))
	// {
	// if(sRelation.equalsIgnoreCase("New"))
	// {
	// FrameFATCA_CPD_Enable();
	// }
	// else
	// {
	// sOutput=formObject.getDataFromDB(sQuery);
	// log.info("sQuery----"+sQuery+"\n"+"sOutput-----"+sOutput);
	//
	// if((sOutput.get(0).get(0)).equalsIgnoreCase("Yes"))
	// {
	// FrameFATCA_CPD_Enable();
	// }
	// else
	// {
	// frameFatcaCpdDisable();
	// }
	// }
	// }
	// else
	// {
	// if(sRelation.equalsIgnoreCase("New"))
	// {
	// FrameFATCA_CPD_Enable();
	// }
	// else
	// if((formObject.getValue(CHECKBOX_FATCA).toString()).equalsIgnoreCase("true"))
	// {
	// sOutput=formObject.getDataFromDB(sQuery);
	// log.info("sQuery----"+sQuery+"\n"+"sOutput-----"+sOutput);
	// if((sOutput.get(0).get(0)).equalsIgnoreCase("Yes"))
	// {
	// FrameFATCA_CPD_Enable();
	// }
	// else
	// {
	// frameFatcaCpdDisable();
	// }
	// }
	// }
	// }

	public void disableEidaField() {
		formObject.setStyle(CRS_RES_PERM_ADRS_US, "disable", "true");
		formObject.setValue(CRS_RES_PERM_ADRS_US, "No");

		if (!sActivityName.equalsIgnoreCase("QDE_Cust_Info")
				&& !sActivityName.equalsIgnoreCase("QDE_ Account_Info")) {
			formObject.setStyle(RA_CARRYNG_EID_CARD, "disable", "true");
			formObject.setValue(RA_CARRYNG_EID_CARD, "No");
		}
	}

	public void autoSetFatca(String controlName) {
		logInfo("autoSetFatca", "INSIDE");
		if (controlName.equalsIgnoreCase(FCR_NATIONALITY)
				|| controlName.equalsIgnoreCase(EIDA_NATIONALITY)
				|| controlName.equalsIgnoreCase(MANUAL_NATIONALITY)
				|| controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_FCR)
				|| controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_MANUAL)) {
			try {
				String sNationality = getFinalDataComparison(
						CHECKBOX_NATIONALITY_FCR, CHECKBOX_NATIONALITY_EIDA,
						CHECKBOX_NATIONALITY_MANUAL, FCR_NATIONALITY,
						EIDA_NATIONALITY, MANUAL_NATIONALITY).trim();
				if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
					if (sNationality.equalsIgnoreCase("UNITED STATES")) {
						formObject.setValue(FAT_US_PERSON, "YES");
						formObject.setValue(FAT_LIABLE_TO_PAY_TAX, "YES");
						String[] disableFields = { FAT_US_PERSON,
								FAT_LIABLE_TO_PAY_TAX };
						logInfo("autoSetFatca", "fatca disabled from here 7784");
						disableControls(disableFields);
					} else {
						formObject.setValue(FAT_US_PERSON, "");
						formObject.setValue(FAT_LIABLE_TO_PAY_TAX, "");
						String[] enableFields = { FAT_US_PERSON,
								FAT_LIABLE_TO_PAY_TAX };
						enableControls(enableFields);
					}
				} else {
					if (sNationality.equalsIgnoreCase("UNITED STATES")) {
						formObject.setValue(FAT_US_PERSON, "YES");
						formObject.setValue(FAT_LIABLE_TO_PAY_TAX, "YES");
						String[] disableFields = { FAT_US_PERSON,
								FAT_LIABLE_TO_PAY_TAX };
						logInfo("autoSetFatca", "fatca disabled from here 7797");
						disableControls(disableFields);
					} else {
						formObject.setValue(FAT_US_PERSON, "");
						formObject.setValue(FAT_LIABLE_TO_PAY_TAX, "");
						if (formObject.getValue(CHECKBOX_FATCA).toString()
								.equalsIgnoreCase(TRUE)) {
							String[] enableFields = { FAT_US_PERSON,
									FAT_LIABLE_TO_PAY_TAX };
							enableControls(enableFields);
						}
					}
				}
			} catch (Exception e) {
				logError("autoSetFatca", e);
			}

		}
	}

	public boolean checkNatSegment() {
		String sFinalNationality = "";
		String Segment = "";
		try {
			if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)
					|| sActivityName
							.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
				Segment = formObject.getValue(CUST_SEGMENT1).toString();
			} else {
				Segment = formObject.getValue(PD_CUSTSEGMENT).toString();
			}
			log.info("Segment" + Segment);
			sFinalNationality = getFinalData(
					formObject.getValue(CHECKBOX_NATIONALITY_FCR).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_EIDA).toString(),
					formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString(),
					formObject.getValue(FCR_NATIONALITY).toString(), formObject
							.getValue(EIDA_NATIONALITY).toString(), formObject
							.getValue(MANUAL_NATIONALITY).toString());
			log.info("sFinalNationality" + sFinalNationality);
			if (("Emirati Excellency".equalsIgnoreCase(Segment) || "Emirati"
					.equalsIgnoreCase(Segment))
					&& !"UNITED ARAB EMIRATES"
							.equalsIgnoreCase(sFinalNationality)) {
				sendMessageValuesList(CUST_SEGMENT1, Segment
						+ "  only valid for UAE Nationals");
				return false;
			}
		} catch (Exception e) {
			logError("", e);
		}
		return true;
	}

	public Boolean MandatoryiKYC() {
		try {
			if (formObject.getValue(CUST_SEGMENT1).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(CUST_SEGMENT1, CA016);
				return false;
			}
			if (formObject.getValue(CUST_VVIP).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CUST_VVIP, CA036);
				return false;
			}
			if (formObject.getValue(EMP_STATUS).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(EMP_STATUS,
						"Please select employment status");
				return false;
			}
			if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Employed")) {
				if (formObject.getValue(EMPLYR_TYPE1).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(EMPLYR_TYPE1, CA024);
					return false;
				}
			}
			if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Employed")
					|| formObject.getValue(EMP_STATUS).toString()
							.equalsIgnoreCase("Salaried")) {
				if (formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_WRKNG_UAE, CA0146);
					return false;
				}
				if (formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_WRKNG_NON_UAE, CA0147);
					return false;
				}
				if (formObject.getValue(DEALS_IN_WMD).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(
							DEALS_IN_WMD,
							"Please select Is the customer owner/parties of entities involved in manufacturing or trading or dealing in Weapons of Mass Destruction (WMD) and Proliferation of goods and services used in manufacturing of WMD's?");
					return false;
				}

			}

			/*if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Self Employed")) {
				if (formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
						.equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_REAL_STATE_BROKR)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_USD_AUTO_DEALER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(IDS_CB_VVIP).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(FINANCIAL_BROKERS).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(NOTARY_PUBLIC).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(SOCIAL_MEDIA_INFLUNCER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_USD_AUTO_DEALER)
								.toString().equalsIgnoreCase("false")) {
					sendMessageValuesList(BUSINESS_NATURE_SECTION_FRM, CA0150);
					return false;
				}
			}*/
			if (formObject.getValue(RESIDENCY_STATUS).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RESIDENCY_STATUS, CA086);
				return false;
			} else if (formObject.getValue(RESIDENCY_STATUS).toString()
					.equalsIgnoreCase("No")) {
				if (formObject.getValue(RA_RSN_BNKNG_UAE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_RSN_BNKNG_UAE, CA0149);
					return false;
				}
			}
			if (formObject.getValue(SIGN_STYLE1).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SIGN_STYLE1, CA021);
				return false;
			}
			if (formObject.getValue(TAX_EVASION).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(TAX_EVASION, CA029);
				return false;
			}
			if (formObject.getValue(ARE_U_PEP).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ARE_U_PEP, CA027);
				return false;
			}/* else if (formObject.getValue(ARE_U_PEP).toString()
					.equalsIgnoreCase("Yes")) {
				if (formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_LIST_OF_CUST_PEP, CA0148);
					return false;
				}
			}*/
			if (formObject.getValue(HAWALA).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(HAWALA, CA026);
				return false;
			}
			if (formObject.getValue(DEALS_IN_ARMAMENT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(DEALS_IN_ARMAMENT, CA028);
				return false;
			}
		} catch (Exception e) {
			logError("", e);
		}
		return true;
	}

	public boolean mandatoryAtFatca() {
		try {
			if (!(formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("Category Change Only")
					&& (formObject.getValue(FATCAMINI).toString()
							.equalsIgnoreCase("NO") || formObject
							.getValue(FATCAMINI).toString()
							.equalsIgnoreCase("")) && (formObject
					.getValue(FATCAMAIN).toString().equalsIgnoreCase("NO") || formObject
					.getValue(FATCAMAIN).toString().equalsIgnoreCase("")))) {
				if (formObject.getValue(FAT_US_PERSON).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(FAT_US_PERSON, CA031);
					return false;
				}
				if (formObject.getValue(FAT_LIABLE_TO_PAY_TAX).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(FAT_LIABLE_TO_PAY_TAX, CA032);
					return false;
				}
				if (!validateCounrtyBirth(CHECKBOX_COB_FCR, CHECKBOX_COB_EIDA,
						CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
						EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH, CA033, "")) {
					logInfo("mandatoryAtFatca",
							"INSIDE DDE_CUSTACC validateCountryBirth");
					return false;
				}
				// Commented for testing , Needs to be added back
				if (formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS).toString()
						.equalsIgnoreCase("Yes")) {
					if (formObject.getValue(FATCAMINI).toString()
							.equalsIgnoreCase("Yes")) {
						sendMessageValuesList("validate",
								"Please do the Mini FATCA Validations");
						return false;
					}
				}
				if (formObject.getValue(INDICIACOMBO).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(INDICIACOMBO, CA0157);
					return false;
				} else if (formObject.getValue(INDICIACOMBO).toString()
						.equalsIgnoreCase("YES")) {
					if (formObject.getValue(COMBODOC).toString()
							.equalsIgnoreCase("NA")) {
						sendMessageValuesList(INDICIACOMBO, CA0188);
						return false;
					}
				}
				if (formObject.getValue(COMBODOC).toString()
						.equalsIgnoreCase("")) {
					String sFinalCountryOfBirth = getFinalDataComparison(
							CHECKBOX_COB_FCR, CHECKBOX_COB_EIDA,
							CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
							EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH);
					String areYouUS = formObject.getValue(FAT_US_PERSON)
							.toString();
					if (sFinalCountryOfBirth.equalsIgnoreCase("UNITED STATES")
							&& areYouUS.equalsIgnoreCase("YES")) {
						sendMessageValuesList(COMBODOC, CA0158);
						return false;
					}
				} else {
					if (formObject.getValue(COMBODOC).toString()
							.equalsIgnoreCase("W8BEN")) {
						if (formObject.getValue(DATEPICKERW8).toString()
								.equalsIgnoreCase("")) {
							sendMessageValuesList(DATEPICKERW8, CA0160);
							return false;
						}
						if (!validateFutureDate(DATEPICKERW8, "W8 Signup date")) {
							// formObject.NGFocus("DatePickerW8");
							return false;
						}
					}
					if (formObject.getValue(COMBODOC).toString()
							.equalsIgnoreCase("W9")) {
						if ((formObject.getValue(FAT_SSN).toString()
								.equalsIgnoreCase("") || formObject
								.getValue(FAT_SSN) == null)) {
							sendMessageValuesList(FAT_SSN, CA030);
							return false;
						}
					}
				}

				// Commented for testing , Needs to be added back
				if (formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS).toString()
						.equalsIgnoreCase("Yes")
						|| formObject.getValue(CHANGE_IN_FATCA_3WAY_INPUTS)
								.toString().equalsIgnoreCase("")) { // Change
																	// for FATCA
																	// issue
																	// Gautam
																	// 05/12/2021
					if (formObject.getValue(FATCAMAIN).toString()
							.equalsIgnoreCase("Yes")) {
						sendMessageValuesList(BTN_VALIDATEFATCA,
								"Please do the Main FATCA Validations");
						return false;
					}
				}
				if (formObject.getValue(DATEPICKERCUST).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(DATEPICKERCUST, CA0159);
					return false;
				}
			}
		} catch (Exception e) {
			logError("", e);
		}
		return true;
	}

	public Boolean validateFutureDate(String date, String controlName) {
		try {
			log.info("Called validateFutureDate ");
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String scurrentDate = simpledateformat.format(calendar.getTime());
			String sDate = formObject.getValue(date).toString();
			if (sDate.equalsIgnoreCase(""))
				return true;
			log.info("date :" + sDate + "\n " + "scurrentDate " + scurrentDate);
			if (!scurrentDate.equals("")) {
				String[] temp = scurrentDate.split("/");
				if (temp[1].length() == 3) {
					scurrentDate = temp[0] + "/" + getMonthNumber(temp[1])
							+ "/" + temp[2];
				} else {
					scurrentDate = temp[0] + "/" + temp[1] + "/" + temp[2];
				}
			}
			Date currentDate = simpledateformat.parse(scurrentDate);
			Date nDate = simpledateformat.parse(sDate);
			log.info("currentDate :" + currentDate + "\n " + "nDate " + nDate);
			if (nDate.compareTo(currentDate) > 0) {
				sendMessageValuesList(date, controlName + " " + CA014);
				return false;
			} else if (Integer.parseInt(sDate.substring(
					sDate.lastIndexOf("/") + 1, sDate.length())) <= 1900) {
				sendMessageValuesList(date, controlName + " " + CA015);
				return false;
			}
		} catch (Exception exp) {
			log.info("Caught the exception " + exp.getMessage());
			exp.printStackTrace();
		}
		return true;
	}

	public Boolean validateCounrtyBirth(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sControl) {
		logInfo("validateCounrtyBirth", "INSIDE validateCounrtyBirth");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFCRCBControl, sMessageID);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sEIDACBControl, sMessageID);
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			logInfo("validateCounrtyBirth", "INSIDE IT 1");
			if (formObject.getValue(sManualDataControl).toString()
					.equalsIgnoreCase("")
					|| formObject.getValue(sManualDataControl).toString()
							.equalsIgnoreCase("")) {
				logInfo("validateCounrtyBirth", "INSIDE IT 2");
				sendMessageValuesList(sManualCBControl, sMessageID);
				return false;
			}
		}
		logInfo("validateCounrtyBirth", "ITS TRUE");
		return true;
	}

	public Boolean mandatoryiKYC() {
		try {
			if (formObject.getValue(CUST_SEGMENT1).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(CUST_SEGMENT1, CA016);
				return false;
			}
			if (formObject.getValue(CUST_VVIP).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CUST_VVIP, CA036);
				return false;
			}
			if (formObject.getValue(EMP_STATUS).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(EMP_STATUS,
						"Please select employment status");
				return false;
			}

			if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Employed")
					|| formObject.getValue(EMP_STATUS).toString()
							.equalsIgnoreCase("Salaried")) {
				if (formObject.getValue(EMP_STATUS).toString()
						.equalsIgnoreCase("Employed")) {
					if (formObject.getValue(EMPLYR_TYPE1).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(EMPLYR_TYPE1, CA024);
						return false;
					}
				}
				if (formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_WRKNG_UAE, CA0146);
					return false;
				}
				if (formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_WRKNG_NON_UAE, CA0147);
					return false;
				}
				if (formObject.getValue(DEALS_IN_WMD).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(
							DEALS_IN_WMD,
							"Please select Is the customer owner/parties of entities involved in manufacturing or trading or dealing in Weapons of Mass Destruction (WMD) and Proliferation of goods and services used in manufacturing of WMD's?");
					return false;
				}
			}
			/*if (formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Self Employed")) {
				if (formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
						.equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_REAL_STATE_BROKR)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_USD_AUTO_DEALER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(IDS_CB_VVIP).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(FINANCIAL_BROKERS).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(NOTARY_PUBLIC).toString()
								.equalsIgnoreCase("false")
						&& formObject.getValue(SOCIAL_MEDIA_INFLUNCER)
								.toString().equalsIgnoreCase("false")
						&& formObject.getValue(RA_CB_USD_AUTO_DEALER)
								.toString().equalsIgnoreCase("false")) {
					sendMessageValuesList(BUSINESS_NATURE_SECTION_FRM, CA0150);
					return false;
				}
			}*/
			if (formObject.getValue(RESIDENCY_STATUS).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RESIDENCY_STATUS, CA086);
				return false;
			} else if (formObject.getValue(RESIDENCY_STATUS).toString()
					.equalsIgnoreCase("No")) {
				if (formObject.getValue(RA_RSN_BNKNG_UAE).toString()
						.equalsIgnoreCase("")) {
					logInfo("mandatoryiKYC",
							"CHECK FOR List of residency and banking");
					sendMessageValuesList(RA_RSN_BNKNG_UAE, CA0149);
					return false;
				}
			}
			if (formObject.getValue(SIGN_STYLE1).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SIGN_STYLE1, CA021);
				return false;
			}
			if (formObject.getValue(TAX_EVASION).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(TAX_EVASION, CA029);
				return false;
			}
			if (formObject.getValue(ARE_U_PEP).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ARE_U_PEP, CA027);
				return false;
			} /*else if (formObject.getValue(ARE_U_PEP).toString()
					.equalsIgnoreCase("Yes")) {
				if (formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(RA_LIST_OF_CUST_PEP, CA0148);
					return false;
				}
			}*/
			if (formObject.getValue(HAWALA).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(HAWALA, CA026);
				return false;
			}
			if (formObject.getValue(DEALS_IN_ARMAMENT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(DEALS_IN_ARMAMENT, CA028);
				return false;
			}if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") || 
				formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")
				||formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade"))){
			
			if (formObject.getValue(AO_INCOME_SRC).toString().equalsIgnoreCase("") || formObject.getValue(AO_INCOME_SRC).toString() == null) {
				sendMessageValuesList(AO_INCOME_SRC, CA0189);
				return false;
			}
		    if (formObject.getValue(RA_CUST_SRC_WEALTH).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_CUST_SRC_WEALTH, CA0193);
					return false;
				}
			if (formObject.getValue(ACC_IN_ANTHR_BNK_UAE).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(ACC_IN_ANTHR_BNK_UAE, CA0194);
					return false;
			    }
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_PEP, CA0195);
					return false;
				}
		    if (formObject.getValue(RA_IS_UAE_RESIDENT).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_UAE_RESIDENT, CA0196);
					return false;
				}
			if (formObject.getValue(CHANNEL_RISK_AO).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(CHANNEL_RISK_AO, CA0197);
					return false;
			   }
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
				&&(formObject.getValue(POA_NATIONALITY).toString().equalsIgnoreCase("")
							|| formObject.getValue(POA_NATIONALITY).toString() == null)) { //MOdify by Shivanshu ATP-455
				sendMessageValuesList(POA_NATIONALITY,CA0204);
				return false;
			}
			if ( formObject.getValue(PRIMARY_SRC_CNTRY).toString().equalsIgnoreCase("") || formObject.getValue(PRIMARY_SRC_CNTRY).toString() == null) { //Jamshed
				sendMessageValuesList(PRIMARY_SRC_CNTRY,CA0201);
				return false;
			}
//			added by shivanshu ATP-455
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
					&& (formObject.getValue(POA_RESIDENCY).toString().equalsIgnoreCase("")
						|| formObject.getValue(POA_RESIDENCY).toString() == null)) {
					sendMessageValuesList(POA_RESIDENCY,CA0203);
					return false;
			   }
			//Added by Shivanshu ATP-472
			if (formObject.getValue(ED_MONTHLY_INCM).toString().equalsIgnoreCase("0")) {
				sendMessageValuesList(ED_MONTHLY_INCM, "Monthly Income "+CA0207);
				return false;
				}
		   }
		} catch (Exception e) {
			logError("mandatoryiKYC", e);
		}
		return true;
	}

	public void insert_Into_Usr_0_Risk_Data(String sriskColumn,
			String sriskValue) {
		String sQuery_Insert = "";
		try {
			if (!formObject.getValue(SOURCING_CHANNEL).toString()
					.equalsIgnoreCase("LAPS")) {
				logInfo("insert_Into_Usr_0_Risk_Data",
						"inside Insert_Into_Usr_0_Risk_Data.......");
				logInfo("insert_Into_Usr_0_Risk_Data", "sColumn---"
						+ sriskColumn);
				logInfo("insert_Into_Usr_0_Risk_Data", "sValue---" + sriskValue);
				String sTable = "USR_0_RISK_DATA";
				logInfo("insert_Into_Usr_0_Risk_Data", sTable);
				String sSysdateTime = getReqDate();
				logInfo("insert_Into_Usr_0_Risk_Data", "sSysdateTime....."
						+ sSysdateTime);
				sriskValue = sriskValue + ",sysdate";
				logInfo("insert_Into_Usr_0_Risk_Data",
						"updated sriskValue....." + sriskValue);
				sriskColumn = sriskColumn + ",ENTRYDATETIME";
				logInfo("insert_Into_Usr_0_Risk_Data",
						"updated sriskColumn...." + sriskColumn);
				int sOutput = insertDataIntoDB(sTable, sriskColumn, sriskValue);
				logInfo("insert_Into_Usr_0_Risk_Data", "sOutput---" + sOutput);
			}
		} catch (Exception e) {
			logError("Exception in Insert_Into_Usr_0_Risk_Data", e);
		}
	}

	public String getReqDate() {
		Date d = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"dd/MM/yyyy HH:mm:ss");
		String sDate = dateFormat.format(d);
		log.info("sDate---" + sDate);
		return sDate;
	}

	public void calculateResidencyStatus(String sResidencyControl) {
		String sIsFCRNationality = formObject
				.getValue(CHECKBOX_NATIONALITY_FCR).toString();
		String sIsEIDANationality = formObject.getValue(
				CHECKBOX_NATIONALITY_EIDA).toString();
		String sIsManualNationality = formObject.getValue(
				CHECKBOX_NATIONALITY_MANUAL).toString();
		String sFCRNationality = formObject.getValue(FCR_NATIONALITY)
				.toString();
		String sEIDANationality = formObject.getValue(EIDA_NATIONALITY)
				.toString();
		String sManualNationality = formObject.getValue(MANUAL_NATIONALITY)
				.toString();
		String sFinalNationality = getFinalData(sIsFCRNationality,
				sIsEIDANationality, sIsManualNationality, sFCRNationality,
				sEIDANationality, sManualNationality);
		String sIsFCRCountry = formObject.getValue(CHECKFCR).toString();
		String sIsEIDACountry = formObject.getValue(CHECKEIDA).toString();
		String sIsManualCountry = formObject.getValue(CHECKMANUAL).toString();
		String sFCRCountry = formObject.getValue(FCR_RESIDENT).toString();
		String sEIDACountry = formObject.getValue(EIDA_RESIDENT).toString();
		String sManualCountry = "";
		if (formObject.getValue(MANUAL_RESIDENT) != null) {
			sManualCountry = formObject.getValue(MANUAL_RESIDENT).toString();
		}
		String sFinalCountry = getFinalData(sIsFCRCountry, sIsEIDACountry,
				sIsManualCountry, sFCRCountry, sEIDACountry, sManualCountry);
		log.info("sFinalNationality----" + sFinalNationality);
		log.info("sFinalCountry----" + sFinalCountry);
		if (sFinalNationality.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
			formObject.setValue(sResidencyControl, "Yes");
			disableControls(new String[] { sResidencyControl });
		} else if ((sFinalNationality.equalsIgnoreCase("BAHRAIN")
				|| sFinalNationality.equalsIgnoreCase("KUWAIT")
				|| sFinalNationality.equalsIgnoreCase("OMAN")
				|| sFinalNationality.equalsIgnoreCase("QATAR") || sFinalNationality
					.equalsIgnoreCase("SAUDI ARABIA"))
				&& sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
			formObject.setValue(sResidencyControl, "Yes");
			disableControls(new String[] { sResidencyControl });
		} else if (sFinalNationality.equalsIgnoreCase("ZZ")
				&& sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
			formObject.setValue(sResidencyControl, "Yes");
			disableControls(new String[] { sResidencyControl });
		} else {
			if (!sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")
					&& !sFinalCountry.equalsIgnoreCase("")) {
				formObject.setValue(sResidencyControl, "No");
				disableControls(new String[] { sResidencyControl });
			} else {
//				formObject.setValue(sResidencyControl, "Yes"); Commented by SHivanshu for UAE Resident Setting Y in case of NON Resident
				enableControls(new String[] { sResidencyControl });
			}
		}
	}

	public void Frame48_CPD_ENable() {
		String[] enable = { DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK,
				DEL_CITY, DEL_STATE, DEL_CNTRY, DEL_FAX, DEL_ZIP_CODE,
				DEL_EMAIL, DEL_PREF_LANG, DEL_PH, DEL_MOBILE };
		enableControls(enable);
		if (formObject.getValue(DEL_STATE).toString().equalsIgnoreCase(OTHERS)) {
			formObject.setStyle(DEL_STATE_OTHER, DISABLE, FALSE);
		} else {
			formObject.setStyle(DEL_STATE_OTHER, DISABLE, TRUE);
		}
	}

	public void manageNomineeDetails(String sValue) {
		if (sValue.equalsIgnoreCase("Yes")) {
			clearControls(new String[] { DEL_NAME, DEL_PO_BOX, DEL_PO_BOX,
					DEL_LANDMARK, DEL_CITY, DEL_STATE, DEL_STATE_OTHER,
					DEL_CNTRY, DEL_FAX, DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG,
					DEL_PH, DEL_MOBILE });
		} else {
			setMailingAddInToDel();
		}
	}

	public void Frame48_CPD_Disable() {
		String[] disable = { DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK,
				DEL_CITY, DEL_STATE, DEL_STATE_OTHER, DEL_CNTRY, DEL_FAX,
				DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG, DEL_PH, DEL_MOBILE };
		disableControls(disable);
	}

	// yamini
	public void setGender() {
		logInfo("setGender", "INSIDE");
		String val = formObject.getValue(MANUAL_PREFIX).toString();
		logInfo("setGender", val);
		if ("Mr".equalsIgnoreCase(val)) {
			formObject.setValue(MANUAL_GENDER, "Male");
		} else if ("Mrs".equalsIgnoreCase(val) || "Ms".equalsIgnoreCase(val)) {
			formObject.setValue(MANUAL_GENDER, "Female");
		} else {
			formObject.setValue(MANUAL_GENDER, "");
		}
	}

	public void manageCity(String controlName) {

		String sControlValue = formObject.getValue(controlName).toString();
		logInfo("manageCity", "In manageCity");
		if (controlName.equalsIgnoreCase(CP_CITY)) {
			if (sControlValue.equalsIgnoreCase("Others")
					&& formObject.getValue(CHK_CONTACT_DET).toString()
							.equalsIgnoreCase("true")) {
				formObject.setStyle(OTHER_CORR_CITY, DISABLE, FALSE);
			} else if (!sControlValue.equalsIgnoreCase("")) {
				formObject.setValue(OTHER_CORR_CITY, "");
				formObject.setStyle(OTHER_CORR_CITY, DISABLE, TRUE);
			}
		}
		if (controlName.equalsIgnoreCase(PA_CITY)) {
			if (sControlValue.equalsIgnoreCase("Others")
					&& formObject.getValue(CHK_CONTACT_DET).toString()
							.equalsIgnoreCase("true")) {
				if (sActivityName.equalsIgnoreCase("CPD Maker")) {
					formObject.setStyle(OTHER_PERM_CITY, DISABLE, FALSE);
				} else {
					// formObject.setStyle(OTHER_RES_CITY,DISABLE,TRUE);
					formObject.setStyle(OTHER_PERM_CITY, DISABLE, FALSE);
				}
			} else if (!sControlValue.equalsIgnoreCase("")) {
				if (sActivityName.equalsIgnoreCase("CPD Maker")) {
					formObject.setValue(OTHER_PERM_CITY, "");
					formObject.setStyle(OTHER_PERM_CITY, DISABLE, TRUE);
				} else {
					// formObject.setValue(OTHER_RES_CITY,"");
					// formObject.setStyle(OTHER_RES_CITY,DISABLE,TRUE);

					// formObject.setValue("other_perm_city","");
					// formObject.setNGEnable("other_perm_city", false);
					formObject.setValue(OTHER_PERM_CITY, "");
					formObject.setStyle(OTHER_PERM_CITY, DISABLE, TRUE);
				}
			}
		}
		if (controlName.equalsIgnoreCase(RA_CITY)) {
			if (sControlValue.equalsIgnoreCase("Others")
					&& formObject.getValue(CHK_CONTACT_DET).toString()
							.equalsIgnoreCase("true")) {
				if (sActivityName.equalsIgnoreCase("CPD Maker")) {
					formObject.setStyle(OTHER_RES_CITY, DISABLE, FALSE);
				} else {
					// formObject.setStyle(OTHER_PERM_CITY,DISABLE,TRUE);
					formObject.setStyle(OTHER_RES_CITY, DISABLE, FALSE);
				}
			} else if (!sControlValue.equalsIgnoreCase("")) {
				if (sActivityName.equalsIgnoreCase("CPD Maker")) {
					formObject.setValue(OTHER_RES_CITY, "");
					formObject.setStyle(OTHER_RES_CITY, DISABLE, TRUE);
				} else {
					// formObject.setValue(OTHER_PERM_CITY,"");
					// formObject.setStyle(OTHER_PERM_CITY,DISABLE,TRUE);
					formObject.setValue(OTHER_RES_CITY, "");
					formObject.setStyle(OTHER_RES_CITY, DISABLE, TRUE);
				}
			}
		}

		// String sControlValue = formObject.getValue(sControlName).toString();
		// logInfo("manageCity","Inside.");
		// if(CP_CITY.equalsIgnoreCase(sControlName)) {
		// if(OTHERS.equalsIgnoreCase(sControlValue)
		// &&
		// TRUE.equalsIgnoreCase(formObject.getValue(CHK_CONTACT_DET).toString()))
		// {
		// formObject.setStyle(OTHER_CORR_CITY, DISABLE, FALSE);
		// } else if(!sControlValue.isEmpty()) {
		// formObject.setValue(OTHER_CORR_CITY,"");
		// formObject.setStyle(OTHER_CORR_CITY, DISABLE, TRUE);
		// }
		// } else if(PA_CITY.equalsIgnoreCase(sControlName)) {
		// if(OTHERS.equalsIgnoreCase(sControlValue)
		// &&
		// TRUE.equalsIgnoreCase(formObject.getValue(CHK_CONTACT_DET).toString()))
		// {
		// if(sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
		// formObject.setStyle(CONTACT_DETAILS_CITY_OTHERS, DISABLE, FALSE);
		// } else {
		// formObject.setStyle(OTHER_RESIDENTIAL_CITY, DISABLE, FALSE);
		// }
		// } else if(!sControlValue.isEmpty()) {
		// if(sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
		// formObject.setValue(CONTACT_DETAILS_CITY_OTHERS,"");
		// formObject.setStyle(CONTACT_DETAILS_CITY_OTHERS, DISABLE, TRUE);
		// } else {
		// formObject.setValue(OTHER_RESIDENTIAL_CITY,"");
		// formObject.setStyle(OTHER_RESIDENTIAL_CITY, DISABLE, TRUE);
		// }
		// }
		// } else if(RA_CITY.equalsIgnoreCase(sControlName)) {
		// if(OTHERS.equalsIgnoreCase(sControlValue)
		// &&
		// TRUE.equalsIgnoreCase(formObject.getValue(CHK_CONTACT_DET).toString()))
		// {
		// if(ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
		// formObject.setStyle(OTHER_RESIDENTIAL_CITY, DISABLE, FALSE);
		// } else {
		// formObject.setStyle(CONTACT_DETAILS_CITY_OTHERS, DISABLE, FALSE);
		// }
		// } else if(!sControlValue.isEmpty()) {
		// if(ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
		// formObject.setValue(OTHER_RESIDENTIAL_CITY,"");
		// formObject.setStyle(OTHER_RESIDENTIAL_CITY, DISABLE, TRUE);
		// } else {
		// formObject.setValue(CONTACT_DETAILS_CITY_OTHERS,"");
		// formObject.setStyle(CONTACT_DETAILS_CITY_OTHERS, DISABLE, TRUE);
		// }
		// }
		// }
	}

	public void setRMCode() {
		logInfo("setRMCode", "INSIDE setRMCode");
		int fieldToFocus = 1;
		if (!formObject.getValue(SELECTED_ROW_INDEX).toString().isEmpty()) {
			fieldToFocus = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
		}
		logInfo("setRMCode", "fieldToFocus : " + fieldToFocus);
		String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
				fieldToFocus, 7);
		logInfo("setRMCode", "sAccRelation------" + sAccRelation);
		String sRMCOde = "";
		String sRMName = "";
		try {
			if (!"Existing".equalsIgnoreCase(sAccRelation)) {
				String sQuery1 = "";
				List<List<String>> output1;
				if (formObject.getValue(RM_CODE).toString().isEmpty()) {
					sQuery1 = "SELECT RM_CODE FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT='"
							+ formObject.getValue(PD_CUSTSEGMENT).toString()
							+ "'";
					logInfo("setRMCode", "sQuery1" + sQuery1);
					output1 = formObject.getDataFromDB(sQuery1);
					if (output1 != null && output1.size() > 0) {
						sRMCOde = output1.get(0).get(0);
						logInfo("setRMCode", "sRMCOde" + sRMCOde);
						formObject.setValue(RM_CODE, sRMCOde);
					}
				}
				if (formObject.getValue(RM_NAME).toString().isEmpty()) {
					sQuery1 = "Select RM_NAME from USR_0_RM WHERE rm_code = '"
							+ sRMCOde + "'";
					logInfo("setRMCode", "sQuery1" + sQuery1);
					output1 = formObject.getDataFromDB(sQuery1);
					if (output1 != null && output1.size() > 0) {
						sRMName = output1.get(0).get(0);
						logInfo("setRMCode", "sRMName" + sRMName);
						formObject.setValue(RM_NAME, sRMName.replace("'", "")
								.toUpperCase());
					}
				}
			}
		} catch (Exception e) {
			logError("setRMCode", e);
		}
	}

	public void shortnamefunctionality() {
		try {
			logInfo("shortnamefunctionality", "Inside.");
			String fname = getFinalDataComparison(CHECKBOX_FULLNAME_FCR,
					CHECKBOX_FULLNAME_EIDA, CHECKBOX_FULLNAME_MANUAL, FCR_NAME,
					EIDA_NAME, MANUAL_NAME).trim();
			int flength = fname.length();
			logInfo("shortnamefunctionality", "fname: " + fname + ", flength: "
					+ flength);
			if (flength > 20) {
				String[] firstNamewords = fname.split(" ");
				String firstName = firstNamewords[0] + " ";
				String lastName = firstNamewords[firstNamewords.length - 1];
				String shortNametest = firstName.concat(lastName);
				String finalname = new String("");
				int totalength = shortNametest.length();
				String[] nameSplit = shortNametest.split(" ");
				if (totalength > 20) {
					int noofWords = nameSplit.length;
					String namePart = nameSplit[1];
					nameSplit[1] = namePart.charAt(0) + "";
					String shortnametest2 = Arrays.toString(nameSplit);
					shortnametest2 = shortnametest2.substring(1,
							shortnametest2.length() - 1).replace(",", "");
					int totallength2 = shortnametest2.length();
					if (totallength2 > 20) {
						finalname = nameSplit[0];
						logInfo("shortnamefunctionality", "finalname: "
								+ finalname);
						if (finalname.length() > 20) {
							int reductionlength = finalname.length() - 20;
							logInfo("shortnamefunctionality",
									"reductionlength: " + reductionlength);
							char[] finalnamearray = finalname.toCharArray();
							int j;
							for (j = finalnamearray.length - reductionlength; j < finalnamearray.length; j++) {
								finalnamearray[j] = ' ';
							}
							finalname = String.valueOf(finalnamearray);
							logInfo("shortnamefunctionality",
									"1. final short name: " + finalname);
							formObject.setValue(MANUAL_SHORTNAME, finalname);
						} else {
							finalname = nameSplit[0];
							logInfo("shortnamefunctionality",
									"2. final short name: " + finalname);
							formObject.setValue(MANUAL_SHORTNAME, finalname);
						}
					} else {
						finalname = nameSplit[0] + " " + nameSplit[1];
						logInfo("shortnamefunctionality",
								"3. final short name: " + finalname);
						formObject.setValue(MANUAL_SHORTNAME, finalname);
					}
				} else {
					finalname = nameSplit[0] + " " + nameSplit[1];
					logInfo("shortnamefunctionality", "4. final short name: "
							+ finalname);
					formObject.setValue(MANUAL_SHORTNAME, finalname);
				}
			} else {
				logInfo("shortnamefunctionality", "5. final short name: "
						+ fname);
				formObject.setValue(MANUAL_SHORTNAME, fname);
			}
			logInfo("shortnamefunctionality", "short name: "
					+ formObject.getValue(MANUAL_SHORTNAME).toString());
		} catch (Exception e) {
			logError("shortnamefunctionality", e);
		}
	}

	public void manageResidencyAndVisaStatus(String sResidencyControl,
			String sVisaControl) {
		try {
			logInfo("manageResidencyAndVisaStatus", "INSIDE");
			String sIsFCRNationality = formObject.getValue(
					CHECKBOX_NATIONALITY_FCR).toString();
			String sIsEIDANationality = formObject.getValue(
					CHECKBOX_NATIONALITY_EIDA).toString();
			String sIsManualNationality = formObject.getValue(
					CHECKBOX_NATIONALITY_MANUAL).toString();
			String sFCRNationality = formObject.getValue(FCR_NATIONALITY)
					.toString();
			String sEIDANationality = formObject.getValue(EIDA_NATIONALITY)
					.toString();
			String sManualNationality = formObject.getValue(MANUAL_NATIONALITY)
					.toString();
			String sFinalNationality = getFinalData(sIsFCRNationality,
					sIsEIDANationality, sIsManualNationality, sFCRNationality,
					sEIDANationality, sManualNationality);
			String sIsFCRCountry = formObject.getValue(CHECKFCR).toString();
			String sIsEIDACountry = formObject.getValue(CHECKEIDA).toString();
			String sIsManualCountry = formObject.getValue(CHECKMANUAL)
					.toString();
			String sFCRCountry = formObject.getValue(FCR_RESIDENT).toString();
			String sEIDACountry = formObject.getValue(EIDA_RESIDENT).toString();
			String sManualCountry = "";
			if (formObject.getValue(MANUAL_RESIDENT).toString() != null) {
				sManualCountry = formObject.getValue(MANUAL_RESIDENT)
						.toString();
			}
			String sFinalCountry = getFinalData(sIsFCRCountry, sIsEIDACountry,
					sIsManualCountry, sFCRCountry, sEIDACountry, sManualCountry);
			if (sFinalNationality.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.setValue(sResidencyControl, "Yes");
				formObject.setValue(sVisaControl, "Not Required");
				String[] disableFields = { sResidencyControl, sVisaControl };
				disableControls(disableFields);
			} else if ((sFinalNationality.equalsIgnoreCase("BAHRAIN")
					|| sFinalNationality.equalsIgnoreCase("KUWAIT")
					|| sFinalNationality.equalsIgnoreCase("OMAN")
					|| sFinalNationality.equalsIgnoreCase("QATAR") || sFinalNationality
						.equalsIgnoreCase("SAUDI ARABIA"))
					&& sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.setValue(sResidencyControl, "Yes");
				formObject.setValue(sVisaControl, "Not Required");
				String[] disableFields = { sResidencyControl, sVisaControl };
				disableControls(disableFields);
			} else if (sFinalNationality.equalsIgnoreCase("ZZ")
					&& sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.setValue(sResidencyControl, "Yes");
				formObject.setValue(sVisaControl, OTHERS);
				String[] disableFields = { sResidencyControl, sVisaControl };
				disableControls(disableFields);
			} else {
				if (!sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")
						&& !sFinalCountry.isEmpty()) {
					formObject.setValue(sResidencyControl, "No");
					formObject.setValue(sVisaControl, OTHERS);
					String[] disableFields = { sResidencyControl, sVisaControl };
					disableControls(disableFields);
				} else {
					formObject.setValue(sResidencyControl, "Yes");
					formObject.setStyle(sResidencyControl, DISABLE, TRUE);
					formObject.setStyle(sVisaControl, DISABLE, FALSE);
				}
			}
		} catch (Exception e) {
			logError("manageResidencyAndVisaStatus", e);
		}
	}

	public void manageCityStateManual(String sValue) {
		if (!sValue.isEmpty()) {
			setCityMaunal();
			String sIsFCRCountry = formObject.getValue(
					CHECKBOX_CNTRY_OF_CORR_FCR).toString();
			String sIsEIDACountry = formObject.getValue(
					CHECKBOX_CNTRY_OF_CORR_EIDA).toString();
			String sIsManualCountry = formObject.getValue(
					CHECKBOX_CNTRY_OF_CORR_MANUAL).toString();
			String sFCRCountry = formObject.getValue(FCR_CNTRY).toString();
			String sEIDACountry = formObject.getValue(EIDA_CNTRY).toString();
			String sManualCountry = formObject.getValue(MANUAL_CNTRY)
					.toString();
			String sState = formObject.getValue(MANUAL_STATE).toString();
			String sCorrState = formObject.getValue(CORR_STATE).toString();
			String sFinalCountry = getFinalData(sIsFCRCountry, sIsEIDACountry,
					sIsManualCountry, sFCRCountry, sEIDACountry, sManualCountry);
			if (sFinalCountry.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.clearCombo(CORR_STATE);
				formObject.clearCombo(MANUAL_STATE);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(CORR_STATE, states[i]);
					formObject.addItemInCombo(MANUAL_STATE, states[i]);
				}
				formObject.setValue(CORR_STATE, sCorrState);
				formObject.setValue(MANUAL_STATE, sState);
			} else if (!sFinalCountry.isEmpty()) {
				formObject.clearCombo(MANUAL_STATE);
				formObject.clearCombo(CORR_STATE);
				formObject.addItemInCombo(MANUAL_STATE, OTHERTHENUAESTATES);
				formObject.addItemInCombo(CORR_STATE, OTHERTHENUAESTATES);
				formObject.setValue(CORR_STATE, sCorrState);
				formObject.setValue(MANUAL_STATE, sState);
			}
		}
	}

	public void setCityMaunal() {
		String sCity = "";
		if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
			sCity = formObject.getValue(MANUAL_CITY).toString();
			if ("UNITED ARAB EMIRATES".equalsIgnoreCase(formObject.getValue(
					MANUAL_CNTRY).toString())) {
				formObject.clearCombo(MANUAL_CITY);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(MANUAL_CITY, states[i]);
				}
				formObject.setValue(MANUAL_CITY, sCity);
			} else {
				formObject.clearCombo(MANUAL_CITY);
				formObject.addItemInCombo(MANUAL_CITY, "");
				formObject.addItemInCombo(MANUAL_CITY, OTHERS);
				formObject.setValue(MANUAL_CITY, OTHERS);
			}
		} else {
			sCity = formObject.getValue(MANUAL_CITY).toString();
			if (formObject.getValue(MANUAL_CNTRY).toString()
					.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.clearCombo(MANUAL_CITY);
				formObject.clearCombo(CP_CITY);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(MANUAL_CITY, states[i]);
					formObject.addItemInCombo(CP_CITY, states[i]);
				}
				formObject.setValue(MANUAL_CITY, sCity);
				formObject.setValue(CP_CITY, sCity);
			} else {
				formObject.clearCombo(MANUAL_CITY);
				formObject.clearCombo(CP_CITY);
				formObject.addItemInCombo(MANUAL_CITY, OTHERS);
				formObject.addItemInCombo(CP_CITY, OTHERS);
				formObject.setValue(MANUAL_CITY, sCity);
				formObject.setValue(CP_CITY, sCity);
			}
		}
	}

	public void manageChangeinFATCAFields(String controlName, String sRelation) {
		logInfo("manageChangeinFATCAFields", "INSIDE");
		if (controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_MANUAL)
				|| controlName.equalsIgnoreCase(EIDA_NATIONALITY)
				|| controlName.equalsIgnoreCase(MANUAL_NATIONALITY)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(CHECKBOX_CNTRY_OF_CORR_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_CNTRY_OF_CORR_MANUAL)
				|| controlName.equalsIgnoreCase(EIDA_CNTRY)
				|| controlName.equalsIgnoreCase(MANUAL_CNTRY)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(CHECKBOX_TELE_RES_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_TELE_RES_MANUAL)
				|| controlName.equalsIgnoreCase(EIDA_PH)
				|| controlName.equalsIgnoreCase(MANUAL_PH)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(CHECKBOX_TELE_MOB_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_TELE_MOB_MANUAL)
				|| controlName.equalsIgnoreCase(EIDA_MOBILE)
				|| controlName.equalsIgnoreCase(MANUAL_MOBILE)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(CHECKEIDA)
				|| controlName.equalsIgnoreCase(CHECKMANUAL)
				|| controlName.equalsIgnoreCase(EIDA_RESIDENT)
				|| controlName.equalsIgnoreCase(MANUAL_RESIDENT)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(FAT_US_PERSON)
				|| controlName.equalsIgnoreCase(FAT_LIABLE_TO_PAY_TAX)
				|| controlName.equalsIgnoreCase(CNTRY_OF_BIRTH)
				|| controlName.equalsIgnoreCase(POACOMBO)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		} else if (controlName.equalsIgnoreCase(CHECKBOX_COB_EIDA)
				|| controlName.equalsIgnoreCase(CHECKBOX_COB_MANUAL)
				|| controlName.equalsIgnoreCase(EIDA_COUNTRYBIRTH)
				|| controlName.equalsIgnoreCase(MANUAL_COUNTRYBIRTH)) {
			formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS, "Yes");
			formObject.setValue(FATCAMINI, "Yes");
			formObject.setValue(FATCAMAIN, "Yes");
		}
		if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
			manageFATCAFieldsEnable("Yes", sRelation);
		} else if (formObject.getValue(CHECKBOX_FATCA).toString()
				.equalsIgnoreCase(TRUE)) {
			if (formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString()
					.equalsIgnoreCase("Yes")) {
				manageFATCAFieldsEnable(
						formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString(),
						sRelation);
			}
		}
	}

	public void manageFATCAFieldsEnable(String sChangeInCustomerDetail,
			String sRelation) {
		try {
			logInfo("manageFATCAFieldsEnable", "Inside.");
			String sFATCAChange = formObject.getValue(
					CHANGE_IN_FATCA_3WAY_INPUTS).toString();
			String sUSClassification = formObject.getValue(
					FAT_CUST_CLASSIFICATION).toString();
			String sWhereUSClassification = "";
			logInfo("manageFATCAFieldsEnable", sFATCAChange);
			if (sUSClassification.isEmpty()) {
				sWhereUSClassification = "AND CUSTOMER_US_CLASSIFICATION IS NULL";
			} else {
				sWhereUSClassification = "AND CUSTOMER_US_CLASSIFICATION='"
						+ sUSClassification + "'";
			}
			String sQuery = "SELECT ENABLE_DISABLE FROM USR_0_FATCA_RULES WHERE CUSTOMER_EXISTING='Yes' AND "
					+ "REQUEST_TYPE='"
					+ formObject.getValue(REQUEST_TYPE).toString()
					+ "' AND IS_CUSTOMER_INFO_CHANGE='"
					+ sChangeInCustomerDetail
					+ "' AND IS_FATCA_DETAIL_CHANGE='"
					+ sFATCAChange
					+ "'"
					+ sWhereUSClassification;
			logInfo("manageFATCAFieldsEnable", sQuery);
			List<List<String>> sOutput;
			if (ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
				if (sRelation.equalsIgnoreCase("New")) {
					enableFATCACPD();
				} else {
					sOutput = formObject.getDataFromDB(sQuery);
					logInfo("manageFATCAFieldsEnable", "sOutput: " + sOutput);
					logInfo("manageFATCAFieldsEnable", "sOutput.size(): "
							+ sOutput.size());
					if (sOutput != null && sOutput.size() > 0) {
						if (sOutput.get(0).get(0).equalsIgnoreCase("Yes")) {
							enableFATCACPD();
						} else {
							frameFatcaCpdDisable();
						}
					}
				}
			} else {
				if (sRelation.equalsIgnoreCase("New")) {
					enableFATCACPD();
				} else if (formObject.getValue(CHECKBOX_FATCA).toString()
						.equalsIgnoreCase(TRUE)) {
					sOutput = formObject.getDataFromDB(sQuery);
					logInfo("manageFATCAFieldsEnable", "sOutput: " + sOutput);
					logInfo("manageFATCAFieldsEnable", "sOutput.size(): "
							+ sOutput.size());
					if (sOutput != null && sOutput.size() > 0) {
						if (sOutput.get(0).get(0).equalsIgnoreCase("Yes")) {
							enableFATCACPD();
						} else {
							frameFatcaCpdDisable();
						}
					}
				}
			}
		} catch (Exception e) {
			logError("manageFATCAFieldsEnable", e);
			;
		}
	}

	public void manageCustomerDetailChange(String sValue) {
		logInfo("manageCustomerDetailChange", "INSIDE");
		if (sValue.equalsIgnoreCase("No")) {
			uncheckCheckBoxes(new String[] { CK_PER_DET, CHK_CONTACT_DET,
					CHK_PASSPORT_DE, CHK_INTERNAL_SEC, CHK_GEN_INFO,
					CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
					CHK_BANKING_RELATION, CHECKBOX_FATCA });
			String[] disableFields = { CK_PER_DET, CHK_CONTACT_DET,
					CHK_PASSPORT_DE, CHK_INTERNAL_SEC, CHK_GEN_INFO,
					CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
					CHK_BANKING_RELATION, CHECKBOX_FATCA, DRP_RESEIDA ,EIDA_EXPIRY_DATE};
			disableControls(disableFields);
			Frame32_CPD_Disable();
			Frame31_CPD_Disable();
			Frame30_CPD_Disable();
			Frame27_CPD_Disable();
			Frame28_CPD_Disable();
			Frame21_CPD_Disable();
			Frame20_CPD_Disable();
			Frame18_CPD_Disable();
			Frame22_CPD_Disable();
			Frame25_CPD_Disable();
			frameFatcaCpdDisable();
			formObject.setStyle(PERM_CNTRY, DISABLE, TRUE);
		} else if (sValue.equalsIgnoreCase("YES")) {
			enableControls(new String[] { CK_PER_DET, CHK_CONTACT_DET,
					CHK_PASSPORT_DE, CHK_GEN_INFO, CHK_EMP_DETAIL,
					CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
					CHK_BANKING_RELATION, CHECKBOX_FATCA });
			String sCID = formObject.getTableCellValue(ACC_RELATION, 1, 2);
			if ((formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("New Account with Category Change") && sCID
					.equalsIgnoreCase(formObject.getValue(TXT_CUSTOMERID)
							.toString()))
					|| formObject.getValue(REQUEST_TYPE).toString()
							.equalsIgnoreCase("Category Change Only")) {
				formObject.setStyle(CHK_INTERNAL_SEC, DISABLE, TRUE);
			} else {
				formObject.setStyle(CHK_INTERNAL_SEC, DISABLE, FALSE);
			}
		} else if (sValue.isEmpty()) {
			Frame32_CPD_Disable();
			Frame31_CPD_Disable();
			Frame30_CPD_Disable();
			Frame27_CPD_Disable();
			Frame28_CPD_Disable();
			Frame21_CPD_Disable();
			Frame20_CPD_Disable();
			Frame18_CPD_Disable();
			Frame25_CPD_Disable();
			Frame22_CPD_Disable();
			frameFatcaCpdDisable();
			uncheckCheckBoxes(new String[] { CK_PER_DET, CHK_CONTACT_DET,
					CHK_PASSPORT_DE, CHK_INTERNAL_SEC, CHK_GEN_INFO,
					CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
					CHK_BANKING_RELATION, CHECKBOX_FATCA });
			disableControls(new String[] { CK_PER_DET, CHK_CONTACT_DET,
					CHK_PASSPORT_DE, CHK_INTERNAL_SEC, CHK_GEN_INFO,
					CHK_EMP_DETAIL, CHK_FUNDING_INFO, CHK_RISK_ASS, CHK_ADD,
					CHK_BANKING_RELATION, CHECKBOX_FATCA, PERM_CNTRY });
		}
	}

	public void getPromoCode(String Segment) {
		logInfo("getPromoCode", "Inside..");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String sQuery = "select promo_code as PROMO_CODE FROM USR_0_CUST_TXN WHERE WI_NAME ='"
				+ sWorkitemId + "' " + "AND CUST_SNO ='" + iSelectedRow + "'";
		List<List<String>> result = formObject.getDataFromDB(sQuery);
		logInfo("getPromoCode", "soutput sQuery2-" + sQuery);
		logInfo("getPromoCode", "soutput sQuery2-" + result);
		if (result.size() > 0) {
			String squery;
			if (null == result.get(0).get(0) || result.get(0).get(0).isEmpty()) {
				logInfo("getPromoCode", "when promo code is null");
				formObject.clearCombo(PRO_CODE);
				squery = "SELECT DSA_CODE FROM usr_0_promo_code_relation WHERE CUST_SEGMENT ='"
						+ Segment + "'";
				result = formObject.getDataFromDB(squery);
				logInfo("getPromoCode", "soutput sQuery1-" + squery);
				logInfo("getPromoCode", "soutput sQuery1-" + result);
				if (result.size() > 0 && result.get(0) != null) {
					for (int i = 0; i < result.size(); i++) {
						formObject.addItemInCombo(PRO_CODE, result.get(i)
								.get(0));
					}
				}
				formObject.setValue(PRO_CODE, "");
			} else {
				formObject.clearCombo(PRO_CODE);
				squery = "SELECT DSA_CODE FROM usr_0_promo_code_relation WHERE CUST_SEGMENT ='"
						+ Segment + "'";
				result = formObject.getDataFromDB(squery);
				logInfo("getPromoCode", "soutput sQuery3-" + squery);
				logInfo("getPromoCode", "soutput sQuery3-" + result);
				if (result.size() > 0 && result.get(0) != null) {
					for (int i = 0; i < result.size(); i++) {
						formObject.addItemInCombo(PRO_CODE, result.get(i)
								.get(0));
					}
				}
				formObject.setValue(PRO_CODE, result.get(0).get(0));
			}
		}
		if (Segment.equalsIgnoreCase("Emirati Excellency")
				|| Segment.equalsIgnoreCase("Excellency")
				|| Segment.equalsIgnoreCase("Private Clients")) {
			if (Segment.equalsIgnoreCase("Private Clients")) {
				Segment = "Private Center";
			}
			formObject.setStyle(EXCELLENCY_CNTR, DISABLE, FALSE);
			formObject.clearCombo(EXCELLENCY_CNTR);
			String getquery = "SELECT Sourcing_Center FROM usr_0_sourcing_center "
					+ "WHERE SOURCING_CHANNEL ='" + Segment + "'";
			result = formObject.getDataFromDB(sQuery);
			formObject.addItemInCombo(EXCELLENCY_CNTR, result.get(0).get(0));
			formObject.setValue(EXCELLENCY_CNTR, "");
		} else {
			formObject.clearCombo(EXCELLENCY_CNTR);
			formObject.setValue(EXCELLENCY_CNTR, "");
			formObject.setStyle(EXCELLENCY_CNTR, DISABLE, TRUE);
		}
	}

	public void enableFamilyReffered() {
		int iRows = getGridCount(PRODUCT_QUEUE);
		String sAllProduct = "";
		if (iRows == 1) {
			formObject.setStyle(FAMILY_REFFERED, DISABLE, TRUE);
			formObject.setValue(FAMILY_REFFERED, "");
		} else {
			for (int i = 0; i < iRows; i++) {
				sAllProduct = sAllProduct + "'"
						+ formObject.getTableCellValue(PRODUCT_QUEUE, i, 1)
						+ "',";
				formObject.setTableCellValue(PRODUCT_QUEUE, i, 14, i + 1 + "");
			}
			sAllProduct = sAllProduct.substring(0, sAllProduct.length() - 1);
			String sQuery = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER "
					+ "WHERE PRODUCT_CODE IN ("
					+ sAllProduct
					+ ") AND UPPER(SUB_PRODUCT_TYPE) ='EMSA'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (null != sOutput && null != sOutput.get(0)
					&& null != sOutput.get(0).get(0)
					&& sOutput.get(0).get(0).isEmpty()) {
				formObject.setStyle(FAMILY_REFFERED, DISABLE, FALSE);
			} else {
				formObject.setStyle(FAMILY_REFFERED, DISABLE, TRUE);
				formObject.setValue(FAMILY_REFFERED, "");
			}
		}
	}

	public void managePromoCode() {
		logInfo("managePromoCode", "INSIDE");
		String sCustSegment = formObject.getValue(PD_CUSTSEGMENT).toString();
		String sMemberShipWith = "";
		List<List<String>> sOutput;
		if (sCustSegment.equalsIgnoreCase("Privilege")
				|| sCustSegment.equalsIgnoreCase("Excellency")
				|| sCustSegment.equalsIgnoreCase("Private Clients")
				|| sCustSegment.equalsIgnoreCase("Simplylife")
				|| sCustSegment.equalsIgnoreCase("Emirati")
				|| sCustSegment.equalsIgnoreCase("Emirati Excellency")) {
			if (formObject.getValue(IDS_CB_SAL_TRANSFER).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = "Salary Transfer";
			} else if (formObject.getValue(IDS_CB_MORTGAGES).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = "Mortgage";
			} else if (formObject.getValue(IDS_CB_INSURANCE).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = "Insurance";
			} else if (formObject.getValue(IDS_CB_TRB).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = "TRB";
			} else if (formObject.getValue(IDS_CB_OTHERS).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = OTHERS;
			} else if (formObject.getValue(IDS_CB_VVIP).toString()
					.equalsIgnoreCase(TRUE)) {
				sMemberShipWith = "VVIP";
			}
			if (!sMemberShipWith.isEmpty()) {
				if (sMemberShipWith.equalsIgnoreCase("VVIP")) {
					formObject.setValue(PRO_CODE, "");
					formObject.setValue(GI_IS_CUST_VIP, "Yes");
				} else {
					String sQuery = "SELECT DSA_CODE FROM USR_0_PROMO_CODE WHERE FLAG_MNT_STATUS ='A' AND "
							+ "CUST_SEGMENT = (SELECT UNIQUE_ID FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT ='"
							+ sCustSegment
							+ "') AND MEMBERSHIP_WITH = '"
							+ sMemberShipWith + "'";
					sOutput = formObject.getDataFromDB(sQuery);
					if (sOutput.size() > 0 && null != sOutput.get(0)) {
						formObject.setValue(PRO_CODE, sOutput.get(0).get(0));
					}
					formObject.setValue(GI_IS_CUST_VIP, "No");
				}
			} else {
				logInfo("managePromoCode", "set vip No in if");
				formObject.setValue(GI_IS_CUST_VIP, "No");
			}
		} else {
			if (formObject.getValue(IDS_CB_VVIP).toString()
					.equalsIgnoreCase(TRUE)) {
				formObject.setValue(GI_IS_CUST_VIP, "Yes");
			} else {
				logInfo("managePromoCode", "set vip No in else");
				formObject.setValue(GI_IS_CUST_VIP, "No");
			}
		}
	}

	public void visibleOnSegmentBasis(String category) {
		if (category.equalsIgnoreCase("Aspire")
				|| category.equalsIgnoreCase("Simplylife")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP });
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP });
			uncheckCheckBoxes(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP });
			hideControls(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			// formObject.setNGVisible("Label134",false);
			// formObject.setNGVisible("Label128",false);
			// formObject.setNGVisible("Label133",true);
		} else if (category.equalsIgnoreCase("Emirati Excellency")
				|| category.equalsIgnoreCase("Excellency")
				|| category.equalsIgnoreCase("Private Clients")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP,
					IDS_PC_BN_TP });
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_BN_TP });
			uncheckCheckBoxes(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_BN_TP });
			hideControls(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			// formObject.setNGVisible("Label134",false);
			// formObject.setNGVisible("Label133",true);
			// formObject.setNGVisible("Label128",true);
		} else if (category.equalsIgnoreCase("Privilege")
				|| category.equalsIgnoreCase("Emirati")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP,
					IDS_PC_CB_TP, IDS_BNFT_CB_TP, IDS_PC_CB_TRAVEL,
					IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			enableControls(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			uncheckCheckBoxes(new String[] { IDS_CB_SAL_TRANSFER,
					IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB,
					IDS_CB_OTHERS, IDS_CB_VVIP, IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			formObject.setStyle(IDS_PC_BN_TP, VISIBLE, FALSE);
			// formObject.setNGVisible("Label128",false);
			// formObject.setNGVisible("Label134",true);
			// formObject.setNGVisible("Label133",true);
		}
	}

	public void segmentSelectionForExistingcustomer(String seg) {
		if (seg.equalsIgnoreCase("Aspire")
				|| seg.equalsIgnoreCase("Simplylife")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP });
			hideControls(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_PC_BN_TP });
			// formObject.setNGVisible("Label134",false);
			// formObject.setNGVisible("Label128",false);
			// formObject.setNGVisible("Label133",true);
		} else if (seg.equalsIgnoreCase("Private Clients")
				|| seg.equalsIgnoreCase("Excellency")
				|| seg.equalsIgnoreCase("Emirati Excellency")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP,
					IDS_PC_BN_TP });
			hideControls(new String[] { IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT });
			// formObject.setNGVisible("Label134",false);
			// formObject.setNGVisible("Label133",true);
			// formObject.setNGVisible("Label128",true);
		} else if (seg.equalsIgnoreCase("Privilege")
				|| seg.equalsIgnoreCase("Emirati")) {
			showControls(new String[] { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_CB_VVIP,
					IDS_PC_BN_TP, IDS_PC_CB_TP, IDS_BNFT_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT });
			formObject.setStyle(IDS_PC_BN_TP, VISIBLE, FALSE);
			// formObject.setNGVisible("Label128",false);
			// formObject.setNGVisible("Label134",true);
			// formObject.setNGVisible("Label133",true);
		}
	}

	public String getPrimaryCustomerID() {
		logInfo("getPrimaryCustomerID", "INSIDE");
		String sCustomerID = "";
		if (!formObject.getValue(NO_OF_CUST_SEARCHED).toString().isEmpty()) {
			int iSearchedCustomer = Integer.parseInt(formObject.getValue(
					NO_OF_CUST_SEARCHED).toString());
			String sAccRelation = "";
			String sNo = "";
			logInfo("getPrimaryCustomerID", "iSearchedCustomer: "
					+ iSearchedCustomer);
			if (iSearchedCustomer == 1) {
				sNo = "1";
			} else {
				for (int i = 0; i < iSearchedCustomer; i++) {
					sAccRelation = formObject.getTableCellValue(ACC_RELATION,
							i, 9);
					if (sAccRelation.equalsIgnoreCase("SOW")) {
						sNo = "1";
						break;
					} else if (sAccRelation.equalsIgnoreCase("JAF")
							|| sAccRelation.equalsIgnoreCase("JOF")
							|| sAccRelation.equalsIgnoreCase("Minor")) {
						sNo = formObject.getTableCellValue(ACC_RELATION, i, 0);
						break;
					}
				}
			}
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT CUST_ID from USR_0_CUST_TXN WHERE "
							+ "WI_NAME ='" + sWorkitemId + "' AND CUST_SNO='"
							+ sNo + "'");
			logInfo("getPrimaryCustomerID", "sOutput: " + sOutput);

			if (sOutput != null && sOutput.size() > 0) {
				sCustomerID = sOutput.get(0).get(0);
			}
			if (sCustomerID.isEmpty()) {
				sCustomerID = "#" + "CUST_" + sNo + "#";
			}
			/*
			 * if(sOutput.size() == 0 || null == sOutput.get(0).get(0)) {
			 * 
			 * } else {
			 * 
			 * }
			 */
		}
		logInfo("getPrimaryCustomerID", "sCustomerID: " + sCustomerID);
		return sCustomerID;
	}

	public void fetchCurrency(String sAccNo) {
		int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
		String sCustID = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust, 2);
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT DISTINCT CURRENCY FROM USR_0_CURRENCY "
						+ "WHERE CURR_SHORT = (SELECT CURRENCY FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
						+ sWorkitemId + "' AND ACC_NO ='" + sAccNo
						+ "' AND CUSTOMER_ID ='" + sCustID + "')");
		formObject.setValue(SI_CURRENCY, sOutput.get(0).get(0));
		formObject.setStyle(SI_CURRENCY, DISABLE, TRUE);
	}

	public void manageCategoryChangeSection() {
		if (!formObject.getValue(NEW_CUST_SEGMENT).toString().isEmpty()) {
			enableControls(new String[] { IS_SALARY_TRANSFER_CAT_CHANGE,
					IS_MORTAGAGE_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_OTHERS_CAT_CHANGE, IS_VVIP,
					IS_PREVILEGE_TP_CAT_CHANGE, IS_ENTERTAINMENT_CAT_CHANGE,
					IS_SHOPPING_CAT_CHANGE, IS_SPORT_CAT_CHANGE,
					IS_TRAVEL_CAT_CHANGE, IS_EXCELLENCY_TP_CAT_CHANGE,
					IS_CAT_BENEFIT_OTHER });
		}
		if (formObject.getValue(NEW_CUST_SEGMENT).toString()
				.equalsIgnoreCase("Aspire")
				|| formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Simplylife")) {
			showControls(new String[] { IS_SALARY_TRANSFER_CAT_CHANGE,
					IS_MORTAGAGE_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_OTHERS_CAT_CHANGE, IS_VVIP });
			hideControls(new String[] { IS_PREVILEGE_TP_CAT_CHANGE,
					IS_ENTERTAINMENT_CAT_CHANGE, IS_SHOPPING_CAT_CHANGE,
					IS_SPORT_CAT_CHANGE, IS_TRAVEL_CAT_CHANGE,
					IS_EXCELLENCY_TP_CAT_CHANGE });
			// formObject.setNGVisible("Label299",false);
			// formObject.setNGVisible("Label298",false);
			// formObject.setNGVisible("Label297",true);
			getPromoCodeInCategoryChange(formObject.getValue(NEW_CUST_SEGMENT)
					.toString());
		} else if (formObject.getValue(NEW_CUST_SEGMENT).toString()
				.equalsIgnoreCase("Privilege")
				|| formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Emirati")) {
			showControls(new String[] { IS_SALARY_TRANSFER_CAT_CHANGE,
					IS_MORTAGAGE_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_OTHERS_CAT_CHANGE, IS_VVIP,
					IS_PREVILEGE_TP_CAT_CHANGE, IS_ENTERTAINMENT_CAT_CHANGE,
					IS_SHOPPING_CAT_CHANGE, IS_SPORT_CAT_CHANGE,
					IS_TRAVEL_CAT_CHANGE, });
			hideControls(new String[] { IS_EXCELLENCY_TP_CAT_CHANGE });
			formObject.setValue(IS_EXCELLENCY_TP_CAT_CHANGE, FALSE);
			// formObject.setNGVisible("Label299",false);
			// formObject.setNGVisible("Label298",true);
			// formObject.setNGVisible("Label297",true);
			getPromoCodeInCategoryChange(formObject.getValue(NEW_CUST_SEGMENT)
					.toString());
		} else if (formObject.getValue(NEW_CUST_SEGMENT).toString()
				.equalsIgnoreCase("Emirati Excellency")
				|| formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Excellency")
				|| formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Private Clients")) {
			showControls(new String[] { IS_SALARY_TRANSFER_CAT_CHANGE,
					IS_MORTAGAGE_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_OTHERS_CAT_CHANGE, IS_VVIP,
					IS_EXCELLENCY_TP_CAT_CHANGE });
			hideControls(new String[] { IS_PREVILEGE_TP_CAT_CHANGE,
					IS_ENTERTAINMENT_CAT_CHANGE, IS_SHOPPING_CAT_CHANGE,
					IS_SPORT_CAT_CHANGE, IS_TRAVEL_CAT_CHANGE });
			// formObject.setNGVisible("Label299",true);
			// formObject.setNGVisible("Label298",false);
			// formObject.setNGVisible("Label297",true);
			getPromoCodeInCategoryChange(formObject.getValue(NEW_CUST_SEGMENT)
					.toString());
		} else if (formObject.getValue(NEW_CUST_SEGMENT).toString()
				.equalsIgnoreCase("Signatory")) {
			sendMessageValuesList("",
					"Signatory not allowed. Please select another type.");
			formObject.setValue(NEW_CUST_SEGMENT, "");
		}
	}

	public void getPromoCodeInCategoryChange(String Segment) {
		String promocode = formObject.getValue(PROMO_CODE_CAT_CHANGE)
				.toString();
		String Query = "select PROMO_CODE_CAT_CHANGE as PROMO_CODE  from ext_ao where wi_name='"
				+ sWorkitemId + "' ";
		List<List<String>> soutput2 = formObject.getDataFromDB(Query);
		if (soutput2.size() != 0) {
			promocode = soutput2.get(0).get(0);
		}
		String excecenter = formObject.getValue(EXCELLENCY_CENTER_CC)
				.toString();
		formObject.clearCombo(PROMO_CODE_CAT_CHANGE);
		String squery = "SELECT DSA_CODE FROM usr_0_promo_code_relation WHERE CUST_SEGMENT ='"
				+ Segment + "'";
		logInfo("getPromoCode", "soutput sQuery3-" + squery);
		List<List<String>> result = formObject.getDataFromDB(squery);
		logInfo("getPromoCode", "soutput result-" + result);
		if (result.get(0) != null && result.size() > 0) {
			for (int i = 0; i < result.size(); i++) {
				formObject.addItemInCombo(PROMO_CODE_CAT_CHANGE, result.get(i)
						.get(0));
			}
		}
		if (!promocode.isEmpty()) {
			formObject.setValue(PROMO_CODE_CAT_CHANGE, promocode);
		}
		if (Segment.equalsIgnoreCase("Emirati Excellency")
				|| Segment.equalsIgnoreCase("Excellency")
				|| Segment.equalsIgnoreCase("Private Clients")) {
			if (Segment.equalsIgnoreCase("Private Clients")) {
				Segment = "Private Center";
			}
			formObject.clearCombo(EXCELLENCY_CENTER_CC);
			String getquery = "SELECT Sourcing_Center FROM usr_0_sourcing_center WHERE SOURCING_CHANNEL ='"
					+ Segment + "'";
			// formObject.getNGDataFromDataSource(getquery,1,EXCELLENCY_CENTER_CC);
			// addItemsDropDown(EXCELLENCY_CENTER_CC, EXCELLENCY_CENTER_CC);
			loadCombo(getquery, EXCELLENCY_CENTER_CC);
			if (!excecenter.isEmpty()) {
				formObject.setValue(EXCELLENCY_CENTER_CC, excecenter);
			}
			formObject.setStyle(EXCELLENCY_CENTER_CC, DISABLE, FALSE);
		} else {
			formObject.clearCombo(EXCELLENCY_CENTER_CC);
			formObject.setStyle(EXCELLENCY_CENTER_CC, DISABLE, TRUE);
		}
	}

	public void saveStandingInstrInfo() {
		try {
			logInfo("saveStandingInstrInfo", "Inside.");
			String sTableName = "USR_0_STANDING_INSTRUCTION";
			String sColumn = "WI_NAME,DEBIT_ACC_NO,DEBIT_CURRENCY,CREDIT_PRODUCT,FIRST_PAY_DATE,"
					+ "LAST_PAY_DATE,PERIOD, AMOUNT,SNO";
			String sWhere = "";
			int insertStatus = -1;
			String sValue = "";
			int sCount = getGridCount(STND_INST_LVW);
			logInfo("saveStandingInstrInfo", "sCount : " + sCount);
			sWhere = " WI_NAME='" + sWorkitemId + "'";
			logInfo("saveStandingInstrInfo", "sWhere : " + sWhere);
			String query = "DELETE FROM " + sTableName + " WHERE " + sWhere;
			logInfo("saveStandingInstrInfo", "sWhere : " + sWhere);
			formObject.saveDataInDB(query);
			for (int row = 0; row < sCount; row++) {
				sValue = "'"
						+ sWorkitemId
						+ "','"
						+ formObject.getTableCellValue(STND_INST_LVW, row, 0)
						+ "','"
						+ formObject.getTableCellValue(STND_INST_LVW, row, 1)
						+ "','"
						+ formObject.getTableCellValue(STND_INST_LVW, row, 2)
						+ "',"
						+ convertInTo_To_Date(formObject.getTableCellValue(
								STND_INST_LVW, row, 3))
						+ ","
						+ convertInTo_To_Date(formObject.getTableCellValue(
								STND_INST_LVW, row, 4)) + ",'"
						+ formObject.getTableCellValue(STND_INST_LVW, row, 5)
						+ "','"
						+ formObject.getTableCellValue(STND_INST_LVW, row, 6)
						+ "','" + (row + 1) + "'";
				insertStatus = insertDataIntoDB(sTableName, sColumn, sValue);
				logInfo("saveStandingInstrInfo", "insert status: "
						+ insertStatus);
			}
		} catch (Exception e) {
			logError("saveStandingInstrInfo", e);
		}
	}

	public void saveStandInstrInfo() {
		String column = "WMS_ID,WI_NAME,SWEEP_OUT_DEBIT_ACC,SWEEP_OUT_CREDIT_TO,ANY_AMT_ABOVE,SWEEP_OUT_TO,"
				+ "SWEEP_IN_DEBIT_ACC,SWEEP_IN_CREDIT_ACC,SWEEP_IN_ANY_AMT,SWEEP_IN,SWEEP_IN_CURR,SWEEP_OUT,"
				+ "SWEEP_OUT_CURR";
		String value = "'" + formObject.getValue(WMS_ID).toString() + "'"
				+ (char) 25 + "'" + sWorkitemId + "'" + (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_DEB_ACC_NO).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_CRED_ACC_NO).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_AMT_ABV).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_ABV_AMT).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_IN_DEB_ACC_NO).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_IN_CRED_ACC_NO).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_IN_AMT_ABV).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_TRNS).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SWP_OUT_CURRENCY).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(SWP_IN_TRNS).toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(SWP_IN_CURRENCY).toString() + "'";
		insertIntoStandInstructionTable(column, value);
	}

	public void insertIntoStandInstructionTable(String sColumn, String sValue) {
		logInfo("insertIntoStandInstructionTable", "Inside." + sValue);
		String sQuery = "";
		int stat = -1;
		String sCount = "";
		String sWhere = "WI_NAME ='" + sWorkitemId + "'";
		try {
			sQuery = "SELECT COUNT(WI_NAME) as COUNT_WI FROM USR_0_STND_INSTR WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			logInfo("insertIntoStandInstructionTable", "sQuery" + sQuery);
			List<List<String>> result = formObject.getDataFromDB(sQuery);
			logInfo("insertIntoStandInstructionTable", "result" + result);
			if (result != null && result.size() > 0) {
				sCount = result.get(0).get(0);
				if (Integer.parseInt(sCount) > 0) {
					stat = updateDataInDB("USR_0_STND_INSTR", sColumn, sValue,
							sWhere);
					logInfo("insertIntoStandInstructionTable",
							"update status: " + stat);
				} else {
					stat = insertDataIntoDB("USR_0_STND_INSTR", sColumn, sValue);
					logInfo("insertIntoStandInstructionTable",
							"insert status: " + stat);
				}
			}
		} catch (Exception e) {
			logError("insertIntoStandInstructionTable", e);
			;
		}
	}

	public void setFCRDataInBelowFields() {
		formObject.setValue(MANUAL_ADDRESS, "");
		formObject.setValue(CUST_PREFIX, formObject.getValue(FCR_PREFIX)
				.toString());
		formObject.setValue(PD_FULLNAME, formObject.getValue(FCR_NAME)
				.toString());
		formObject.setValue(PD_MOTHERMAIDENNAME,
				formObject.getValue(FCR_MOTHERSNAME).toString());
		formObject.setValue(PD_EIDANO, formObject.getValue(FCR_EIDANO)
				.toString());
		formObject.setValue(CP_CITY, formObject.getValue(FCR_CITY).toString());
		formObject.setValue(CORR_CNTRY, formObject.getValue(FCR_CNTRY)
				.toString());
		formObject.setValue(CORR_STATE, formObject.getValue(FCR_STATE)
				.toString());
		formObject.setValue(CP_PHONENO, formObject.getValue(FCR_PH).toString());
		formObject.setValue(CP_MOBILE, formObject.getValue(FCR_MOBILE)
				.toString());
		formObject
				.setValue(CP_EMAIL, formObject.getValue(FCR_EMAIL).toString());
		formObject.setValue(PD_DOB, formObject.getValue(FCR_DOB).toString());
		formObject.setValue(HD_PASSPORT_NO, formObject.getValue(FCR_PASSPORTNO)
				.toString());
		formObject.setValue(HD_PASS_ISS_DATE,
				formObject.getValue(FCR_PASSPORTISSDATE).toString());
		formObject.setValue(HD_PASS_EXP_DATE,
				formObject.getValue(FCR_PASSPORTEXPDATE).toString());
		formObject.setValue(CUST_NATIONALITY,
				formObject.getValue(FCR_NATIONALITY).toString());
		formObject.setValue(HD_VISA_NO, formObject.getValue(FCR_VISANO)
				.toString());
		formObject.setValue(HD_VISA_ISSUE_DATE,
				formObject.getValue(FCR_VISAISSDATE).toString());
		formObject.setValue(HD_EXP_DATE, formObject.getValue(FCR_VISAEXPDATE)
				.toString());
		formObject.setValue(PROF_CODE, formObject.getValue(FCR_PROFESSION)
				.toString());
		formObject.setValue(PROFESION, formObject.getValue(FCR_PROFESSION)
				.toString());
		formObject.setValue(CUST_GENDER, formObject.getValue(FCR_GENDER)
				.toString());
		formObject.setValue(EMPNAME, formObject.getValue(FCR_EMPLYR_NAME)
				.toString());
		formObject.setValue(PERM_CNTRY, formObject.getValue(FCR_PER_CNTRY)
				.toString());
		formObject.setValue(RES_CNTRY, formObject.getValue(FCR_RESIDENT)
				.toString());
		if (formObject.getValue(FCR_STATE).toString().equalsIgnoreCase(OTHERS)) {
			formObject.setStyle(CP_OTHERS, DISABLE, FALSE);
		}
		List<List<String>> result = formObject
				.getDataFromDB("SELECT CD_STATUS FROM USR_0_EMPLOYER_MASTER "
						+ "WHERE EMP_NAME ='"
						+ formObject.getValue(FCR_EMPLYR_NAME) + "'");
		formObject.setValue(ED_CB_TML, "False");
		formObject.setValue(ED_CB_NON_TML, "False");
		if (result.get(0).get(0).equalsIgnoreCase("1")
				|| result.get(0).get(0).equalsIgnoreCase("2")) {
			formObject.setValue(ED_CB_TML, "True");
		} else {
			formObject.setValue(ED_CB_NON_TML, "True");
		}
	}

	public void manageManualFields(String sControl1, String sControl2,
			String sControl3) {
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase(TRUE)) {
			enableControls(new String[] { sControl2, sControl3 });
		} else {
			disableControls(new String[] { sControl2, sControl3 });
			if (sControl1.equalsIgnoreCase(CHECKBOX_EMP_NAME_MANUAL)
					|| sControl1.equalsIgnoreCase(CHECKBOX_EMP_NAME_FCR)
					|| sControl1.equalsIgnoreCase(CHECKBOX_EMP_NAME_EIDA)) {
				formObject.setValue(EMPNAME, "");
			}
		}
	}

	public void setEIDADataInBelowFields() {
		formObject.setValue(MANUAL_ADDRESS, "");
		formObject.setValue(CUST_PREFIX, formObject.getValue(EIDA_PREFIX)
				.toString());
		formObject.setValue(PD_FULLNAME, formObject.getValue(EIDA_NAME)
				.toString());
		formObject.setValue(HD_PASSPORT_NO, formObject
				.getValue(EIDA_PASSPORTNO).toString());
		formObject.setValue(HD_PASS_ISS_DATE,
				formObject.getValue(EIDA_PASSPORTISSDATE).toString());
		formObject.setValue(HD_PASS_EXP_DATE,
				formObject.getValue(EIDA_PASSPORTEXPDATE).toString());
		formObject.setValue(HD_VISA_NO, formObject.getValue(EIDA_VISANO)
				.toString());
		formObject.setValue(HD_VISA_ISSUE_DATE,
				formObject.getValue(EIDA_VISAISSDATE).toString());
		formObject.setValue(HD_EXP_DATE, formObject.getValue(EIDA_VISAEXPDATE)
				.toString());
		formObject.setValue(CUST_NATIONALITY,
				formObject.getValue(EIDA_NATIONALITY).toString());
		formObject.setValue(PD_MOTHERMAIDENNAME,
				formObject.getValue(EIDA_MOTHERNAME).toString());
		formObject.setValue(PD_EIDANO, formObject.getValue(EIDA_EIDANO)
				.toString());
		formObject.setValue(CP_POBOXNO, formObject.getValue(EIDA_ADDRESS)
				.toString());
		formObject.setValue(CP_CITY, formObject.getValue(EIDA_CITY).toString());
		formObject.setValue(CORR_STATE, formObject.getValue(EIDA_STATE)
				.toString());
		formObject.setValue(CORR_CNTRY, formObject.getValue(EIDA_CNTRY)
				.toString());
		formObject.setValue(PERM_CNTRY, formObject.getValue(EIDA_PER_CNTRY)
				.toString());
		formObject
				.setValue(CP_PHONENO, formObject.getValue(EIDA_PH).toString());
		formObject.setValue(CP_MOBILE, formObject.getValue(EIDA_MOBILE)
				.toString());
		formObject.setValue(CP_EMAIL, formObject.getValue(EIDA_EMAIL)
				.toString());
		formObject.setValue(PROF_CODE, formObject.getValue(EIDA_PROFESSION)
				.toString());
		formObject.setValue(PROFESION, formObject.getValue(EIDA_PROFESSION)
				.toString());
		formObject.setValue(CUST_GENDER, formObject.getValue(EIDA_GENDER)
				.toString());
		formObject.setValue(EMPNAME, formObject.getValue(EIDA_EMPLYR_NAME)
				.toString());
		formObject.setValue(RES_CNTRY, formObject.getValue(EIDA_RESIDENT)
				.toString());
		if (formObject.getValue(EIDA_STATE).toString().equalsIgnoreCase(OTHERS)) {
			formObject.setStyle(CP_OTHERS, DISABLE, FALSE);
		}
		List<List<String>> result = formObject
				.getDataFromDB("SELECT CD_STATUS FROM USR_0_EMPLOYER_MASTER WHERE "
						+ "EMP_NAME ='"
						+ formObject.getValue(EIDA_EMPLYR_NAME).toString()
						+ "'");
		formObject.setValue(ED_CB_TML, "False");
		formObject.setValue(ED_CB_NON_TML, "False");
		if (result != null && result.size() > 0) {
			if (result.get(0).get(0).equalsIgnoreCase("1")
					|| result.get(0).get(0).equalsIgnoreCase("2")) {
				formObject.setValue(ED_CB_TML, "True");
			} else {
				formObject.setValue(ED_CB_NON_TML, "True");
			}
		}
	}

	public void setManualDataInBelowFields() {
		formObject.setValue(CUST_PREFIX, formObject.getValue(MANUAL_PREFIX)
				.toString());
		formObject.setValue(PD_FULLNAME, formObject.getValue(MANUAL_NAME)
				.toString());
		formObject.setValue(PD_DOB, formObject.getValue(MANUAL_DOB).toString());
		formObject.setValue(HD_PASSPORT_NO,
				formObject.getValue(MANUAL_PASSPORTNO).toString());
		formObject.setValue(HD_PASS_ISS_DATE,
				formObject.getValue(MANUAL_PASSPORTISSDATE).toString());
		formObject.setValue(HD_PASS_EXP_DATE,
				formObject.getValue(MANUAL_PASSPORTEXPDATE).toString());
		formObject.setValue(CUST_NATIONALITY,
				formObject.getValue(MANUAL_NATIONALITY).toString());
		formObject.setValue(PD_MOTHERMAIDENNAME,
				formObject.getValue(MANUAL_MOTHERNAME).toString());
		formObject.setValue(CP_POBOXNO, formObject.getValue(MANUAL_ADDRESS)
				.toString());
		formObject.setValue(CORR_CNTRY, formObject.getValue(MANUAL_CNTRY)
				.toString());
		formObject.setValue(PERM_CNTRY, formObject.getValue(MANUAL_PER_CNTRY)
				.toString());
		formObject.setValue(CP_MOBILE, formObject.getValue(MANUAL_MOBILE)
				.toString());
		formObject.setValue(CP_EMAIL, formObject.getValue(MANUAL_EMAIL)
				.toString());
		formObject.setValue(PROF_CODE, formObject.getValue(MANUAL_PROFESSION)
				.toString());
		formObject.setValue(PROFESION, formObject.getValue(MANUAL_PROFESSION)
				.toString());
		formObject.setValue(CUST_GENDER, formObject.getValue(MANUAL_GENDER)
				.toString());
		formObject.setValue(RES_CNTRY, formObject.getValue(MANUAL_RESIDENT)
				.toString());
	}

	public void managePromoCodeCatChange() {
		String sCustSegment = formObject.getValue(NEW_CUST_SEGMENT).toString();
		String sMemberShipWith = "";
		String sOutput = "";
		if (sCustSegment.equalsIgnoreCase("Emirati")
				|| sCustSegment.equalsIgnoreCase("Emirati Excellency")
				|| sCustSegment.equalsIgnoreCase("Privilege")
				|| sCustSegment.equalsIgnoreCase("Excellency")
				|| sCustSegment.equalsIgnoreCase("Private Clients")
				|| sCustSegment.equalsIgnoreCase("Simplylife")) {
			if (formObject.getValue(IS_SALARY_TRANSFER_CAT_CHANGE).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = "Salary Transfer";
			} else if (formObject.getValue(IS_MORTAGAGE_CAT_CHANGE).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = "Mortgage";
			} else if (formObject.getValue(IS_INSURANCE_CAT_CHANGE).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = "Insurance";
			} else if (formObject.getValue(IS_TRB_CAT_CHANGE).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = "TRB";
			} else if (formObject.getValue(IS_OTHERS_CAT_CHANGE).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = OTHERS;
			} else if (formObject.getValue(IS_VVIP).toString()
					.equalsIgnoreCase("True")) {
				sMemberShipWith = "VVIP";
			}
			if (!sMemberShipWith.isEmpty()) {
				if (sMemberShipWith.equalsIgnoreCase("VVIP")) {
					formObject.setValue(PROMO_CODE_CAT_CHANGE, "");
					updateDataInDB("usr_0_cust_txn", IS_VVIP, "'Yes'",
							"WI_NAME='" + sWorkitemId + "' AND cust_sno = '1'");
				} else {
					updateDataInDB("usr_0_cust_txn", IS_VVIP, "'No'",
							"WI_NAME='" + sWorkitemId + "' AND cust_sno = '1'");
					String sQuery = "SELECT DSA_CODE FROM USR_0_PROMO_CODE WHERE FLAG_MNT_STATUS ='A' AND "
							+ "CUST_SEGMENT = (SELECT UNIQUE_ID FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT ='"
							+ sCustSegment
							+ "') AND MEMBERSHIP_WITH = '"
							+ sMemberShipWith + "'";
					List<List<String>> result = formObject
							.getDataFromDB(sQuery);
					if (null != result.get(0).get(0)
							&& !result.get(0).get(0).isEmpty()) {
						formObject.setValue(PROMO_CODE_CAT_CHANGE, result
								.get(0).get(0));
					}
				}
			}
			if (sMemberShipWith.equalsIgnoreCase("")) {
				updateDataInDB("usr_0_cust_txn", IS_VVIP, "'No'", "WI_NAME='"
						+ sWorkitemId + "' AND cust_sno = '1'");
			}
		} else {
			if (formObject.getValue(IS_VVIP).toString()
					.equalsIgnoreCase("True")) {
				updateDataInDB("usr_0_cust_txn", IS_VVIP, "'Yes'", "WI_NAME='"
						+ sWorkitemId + "' AND cust_sno = '1'");
			} else {
				updateDataInDB("usr_0_cust_txn", IS_VVIP, "'No'", "WI_NAME='"
						+ sWorkitemId + "' AND cust_sno = '1'");
			}
		}
	}

	public void toggleCheckboxTP(String sControl1, String sControl2,
			String sControl3, String sControl4, String sControl5) {
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase("true")) {
			uncheckCheckBoxes(new String[] { sControl2, sControl3, sControl4,
					sControl5 });
		} else {
			formObject.setValue(sControl1, "false");
		}
	}

	public void toggleCheckboxTP(String sControl1, String sControl2,
			String sControl3, String sControl4, String sControl5,
			String sControl6) {
		if (formObject.getValue(sControl1).toString().equalsIgnoreCase("true")) {
			uncheckCheckBoxes(new String[] { sControl2, sControl3, sControl4,
					sControl5, sControl6 });
		} else {
			formObject.setValue(sControl1, "false");

		}
	}

	public void setManualFieldsBlank() {
		clearControls(new String[] { MANUAL_NAME, MANUAL_FIRSTNAME,
				MANUAL_LASTNAME, MANUAL_DOB, MANUAL_PASSPORTNO,
				MANUAL_PASSPORTEXPDATE, MANUAL_PASSPORTISSDATE,
				PASSPORTEXPPLACE_MANUAL, MANUAL_VISANO, MANUAL_VISAEXPDATE,
				MANUAL_VISAISSDATE, MANUAL_NATIONALITY, MANUAL_MOTHERNAME,
				MANUAL_EIDANO, MANUAL_ADDRESS, MANUAL_CITY, MANUAL_STATE,
				MANUAL_CNTRY, MANUAL_PH, MANUAL_MOBILE, MANUAL_EMAIL,
				MANUAL_PROFESSION, MANUAL_GENDER, MANUAL_EMPLYR_NAME,
				MANUAL_PER_CNTRY, MANUAL_RESIDENT, MANUAL_VISASTATUS });
	}

	// sanal
	public void setMailingAddInToDel() {
		String sPrimaryCust = getPrimaryCustomerSNO();
		String sQuery = "SELECT FINAL_FULL_NAME,FINAL_ADDRESS,FINAL_CITY,FINAL_EMAIL,FINAL_COUNTRY, FINAL_MOBILE_NO,"
				+ "FINAL_PHONE_NO,FINAL_STATE,"
				+ "CORR_FLOOR,CORR_STREET FROM USR_0_CUST_TXN  WHERE WI_NAME = N'"
				+ sWorkitemId + "' " + "AND CUST_SNO = N'" + sPrimaryCust + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);

		if (formObject.getValue(DEL_NAME).toString().equalsIgnoreCase("")) {// ||
																			// check
																			// pending
			formObject.setValue(DEL_NAME, sOutput.get(0).get(0));// getTagValues(sOutput,"FINAL_FULL_NAME"));
		}
		if (formObject.getValue(DEL_PO_BOX).toString().equalsIgnoreCase("")) {// ||
																				// !formObject.isNGEnable(DEL_PO_BOX)
			formObject.setValue(DEL_PO_BOX, sOutput.get(0).get(1));// "FINAL_ADDRESS")
																	// );
		}
		if (formObject.getValue(DEL_CITY).toString().equalsIgnoreCase("")) {// ||
																			// !formObject.isNGEnable(DEL_CITY)
			formObject.setValue(DEL_CITY, sOutput.get(0).get(2));// "FINAL_CITY"));
		}
		if (formObject.getValue(DEL_EMAIL).toString().equalsIgnoreCase("")) {// ||
																				// !formObject.isNGEnable("DEL_EMAIL")
			formObject.setValue(DEL_EMAIL, sOutput.get(0).get(3));// "FINAL_EMAIL"));
		}
		if (formObject.getValue(DEL_CNTRY).toString().equalsIgnoreCase("")) {// ||
																				// !formObject.isNGEnable("DEL_CNTRY")
			formObject.setValue(DEL_CNTRY, sOutput.get(0).get(4));// "FINAL_COUNTRY")
																	// );
		}
		if (formObject.getValue(DEL_MOBILE).toString().equalsIgnoreCase("")) {// ||
																				// !formObject.isNGEnable("DEL_MOBILE")
			formObject.setValue(DEL_MOBILE, sOutput.get(0).get(5));// "FINAL_MOBILE_NO"));
		}
		if (formObject.getValue(DEL_PH).toString().equalsIgnoreCase("")) {// ||
																			// !formObject.isNGEnable(DEL_PH)
			formObject.setValue(DEL_PH, sOutput.get(0).get(6));// "FINAL_PHONE_NO"));
		}
		if (formObject.getValue(DEL_STATE).toString().equalsIgnoreCase("")) {// ||
																				// !formObject.isNGEnable(DEL_STATE)
			formObject.setValue(DEL_STATE, sOutput.get(0).get(7));// "FINAL_STATE"));
		}
		if (formObject.getValue(DEL_ADDRESS).toString().equalsIgnoreCase(""))// ||
																				// !formObject.isNGEnable(DEL_ADDRESS)
		{
			formObject.setValue(DEL_ADDRESS, sOutput.get(0).get(8));// "CORR_FLOOR"));
		}
		if (formObject.getValue(DEL_LANDMARK).toString().equalsIgnoreCase("")) {// ||ANDMARK)
			formObject.setValue(DEL_LANDMARK, sOutput.get(0).get(9));// "CORR_STREET"));
		}
	}

	public void Frame37_CPD_Disable() {
		formObject.setValue(EXISTING_ETIHAD_CUST, "");
		formObject.setValue(ETIHAD_NO, "");
		disableControls(new String[] { EXISTING_ETIHAD_CUST, ETIHAD_NO,
				BTN_ECD_VALIDATE });
	}

	public void Frame37_CPD_ENable() {
		enableControls(new String[] { EXISTING_ETIHAD_CUST, ETIHAD_NO,
				BTN_ECD_VALIDATE });
	}

	public void CalculateAccTitle() {
		logInfo("CalculateAccTitle", "INSIDE");
		try {
			if (formObject.getValue(ACC_TITLE).toString().equalsIgnoreCase("")) {
				logInfo("CalculateAccTitle",
						"ACC_TITLE: " + formObject.getValue(ACC_TITLE));
				int iSearchedCustomer = Integer.parseInt(formObject.getValue(
						NO_OF_CUST_SEARCHED).toString());
				logInfo("CalculateAccTitle", "iSearchedCustomer: "
						+ iSearchedCustomer);
				String sQuery = "SELECT FINAL_FULL_NAME, FINAL_FIRST_NAME, FINAL_LAST_NAME "
						+ "FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND ";
				List<List<String>> sOutput;
				String sName = "";
				String[] sNameTemp;
				String sNameTemp2 = "";
				if (iSearchedCustomer == 1) {
					sQuery = sQuery + "CUST_SNO='1'";
					logInfo("CalculateAccTitle", "sQuery : " + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					sName = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					logInfo("CalculateAccTitle", "sName : " + sName);
				}
				if (iSearchedCustomer >= 2) {
					sQuery = sQuery
							+ "(CUST_SNO='1' OR CUST_SNO='2') ORDER BY TO_NUMBER(CUST_SNO)";
					sOutput = formObject.getDataFromDB(sQuery);
					for (int i = 0; i < sOutput.size(); i++) {
						sNameTemp2 = sNameTemp2 + "," + sOutput.get(i).get(0);
					}
					logInfo("CalculateAccTitle", "sNameTemp2 : " + sNameTemp2);
					sNameTemp = sNameTemp2.split(",");
					logInfo("CalculateAccTitle", "sNameTemp : " + sNameTemp);
					String sAccRelation = formObject.getTableCellValue(
							ACC_RELATION, 0, 9);
					if (sAccRelation.equalsIgnoreCase("JAF")) {
						sName = sNameTemp[1] + " And " + sNameTemp[2];
					}
					if (sAccRelation.equalsIgnoreCase("JOF")) {
						sName = sNameTemp[1] + " Or " + sNameTemp[2];
					}
					if (sAccRelation.equalsIgnoreCase("Minor")) {
						sName = sNameTemp[1] + " (Minor)";
					}
					if (sAccRelation.equalsIgnoreCase("SOW")) {
						sName = sNameTemp[1];
					}
				}
				logInfo("CalculateAccTitle", "length : " + sName.length());
				if (sName.length() <= 27) {
					formObject.setValue(ACC_TITLE, sName);
				} else {
					int lastSpace = sName.lastIndexOf(" ");
					logInfo("CalculateAccTitle", "lastSpace : " + lastSpace);
					String firstName = sName.split(" ")[0];
					logInfo("CalculateAccTitle", "firstName : " + firstName);
					String middleName = sName.substring(sName.indexOf(" "),
							lastSpace);
					logInfo("CalculateAccTitle", "middleName : " + middleName);
					String lastName = sName.substring(lastSpace + 1);
					String acctTitle = abbreviateName(firstName, middleName,
							lastName);
					formObject.setValue(ACC_TITLE, acctTitle);
				}// Gaurav Berry 13-01-2021 END OPERATING_INST
			}
		} catch (Exception e) {
			logError("Exception in CalculateAccTitle", e);
		}
	}

	private String abbreviateName(String firstName, String middleName,
			String lastName) {
		try {
			int fnLen = firstName.length();
			logInfo("abbreviateName", "fnLen : " + fnLen);
			int mnLen = middleName.length();
			logInfo("abbreviateName", "mnLen : " + mnLen);
			int lnLen = lastName.length();
			logInfo("abbreviateName", "lnLen : " + lnLen);
			int totalLen = fnLen + mnLen + lnLen + 2;// 2 for 2 spaces
			logInfo("abbreviateName", "totalLen : " + totalLen);
			StringBuffer accountTitle = new StringBuffer();
			StringBuffer abbrMiddleName = new StringBuffer("");
			if (totalLen > 35 && mnLen > 1) {
				int reductionLen = totalLen - 35;
				logInfo("abbreviateName", "reductionLen : " + reductionLen);
				logInfo("abbreviateName", "middleName : " + middleName);
				String[] middleNameSplit = middleName.split(" ");
				logInfo("abbreviateName", "middleNameSplit : "
						+ middleNameSplit);
				int noOfWords = middleNameSplit.length;
				logInfo("abbreviateName", "noOfWords : " + noOfWords);
				for (int i = noOfWords - 1; i >= 0; --i) {
					String namePart = middleNameSplit[i];
					logInfo("abbreviateName", "namePart : " + namePart);
					logInfo("abbreviateName", "reductionLen : " + reductionLen);
					if (reductionLen > 0) {
						logInfo("abbreviateName", "if ..");
						logInfo("abbreviateName", "middleNameSplit[i][i] : "
								+ middleNameSplit[i]);
						middleNameSplit[i] = namePart.charAt(0) + "";
						reductionLen = reductionLen - namePart.length() + 1;
						logInfo("abbreviateName", "reductionLen : "
								+ reductionLen);
					} else {
						logInfo("abbreviateName", "else ..");
						middleNameSplit[i] = namePart + "";
						logInfo("abbreviateName", "middleNameSplit[i] : "
								+ middleNameSplit[i]);
					}
				}

				for (String word : middleNameSplit) {
					logInfo("abbreviateName", "word : " + word);
					abbrMiddleName.append(word);
					abbrMiddleName.append(" ");
				}
			} else {
				logInfo("abbreviateName", "middleName : " + middleName);
				abbrMiddleName.append(middleName);
				abbrMiddleName.append(" ");
			}
			logInfo("abbreviateName", "firstName : " + firstName);
			logInfo("abbreviateName", "abbrMiddleName : " + abbrMiddleName);
			logInfo("abbreviateName", "lastName : " + lastName);
			accountTitle.append(firstName);
			accountTitle.append(abbrMiddleName);
			accountTitle.append(lastName);
			logInfo("abbreviateName", "acctitle : " + accountTitle + "");
			return accountTitle + "";
		} catch (Exception e) {
			logError("abbreviateName", e);
		}
		return "";
	}

	public void checkView() {
		try {
			log.info("inside CheckView");
			int iListViewRows = getGridCount(LVW_DEDUPE_RESULT);
			if (!(iListViewRows == 0)) {
				int iSelectedRow = Integer.parseInt(formObject.getValue(
						SELECTED_ROW_INDEX).toString());
				int[] iListViewSelectedRow = null;// formObject.getNGLVWSelectedRows(LVW_DEDUPE_RESULT);//in
													// js
				log.info("iListViewSelectedRow" + iListViewSelectedRow[0]);
				int selected_index = iListViewSelectedRow[0];
				String UpdateDedupe = "update USR_0_CUST_TXN set dedupe_selected_index "
						+ "='"
						+ selected_index
						+ "' Where WI_NAME='"
						+ sWorkitemId
						+ "' "
						+ "and cust_sno='"
						+ iSelectedRow
						+ "'";
				log.info("sUpdateDedupe+" + UpdateDedupe);
				formObject.saveDataInDB(UpdateDedupe);
			}
		} catch (Exception e) {
			log.info("Exception in CheckView" + e.toString());
		}
	}

	public void saveClientQuestionsData() {
		log.info("------------Client questions Data save----------------");
		long start_time = System.currentTimeMillis();
		int iSelectedRow = 0;
		// NGRepeater objChkRepeater = formObject.getNGRepeater(ACC_RELATION);
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		String cust_id = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String wms_id = formObject.getValue(WMS_ID).toString();
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String concierge = formObject.getValue(CONCIERGE).toString();
		if (concierge != null) {
			if (concierge.equalsIgnoreCase("Yes"))
				concierge = "1";
			else if (concierge.equalsIgnoreCase("No"))
				concierge = "2";
			else
				concierge = "";
		}
		String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,SECRET_QUESTION,SECRET_ANSWER,CONCIERGE_MEMBER";
		String value1 = "'" + cust_id + "'" + (char) 25 + "'" + wms_id + "'"
				+ (char) 25 + "'" + sWorkitemId + "'" + (char) 25 + "'"
				+ sCustNo + "'" + (char) 25 + "'"
				+ formObject.getValue(SECRET_QUESTION) + "'" + (char) 25 + "'"
				+ formObject.getValue(SECRET_ANS) + "'" + (char) 25 + "'"
				+ concierge + "'";
		log.info("Column:" + column1);
		log.info("Value:" + value1);
		insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
		long end_Time = System.currentTimeMillis();
		log.info("Diff time in saveClientQuestionsData Function---"
				+ Long.toString(end_Time - start_time));
	}

	public void saveCRSDetails() {
		logInfo("saveCRSDetails",
				"--------------Save CRS Details----------------");
		long start_time = System.currentTimeMillis();
		int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		String cust_id = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		logInfo("saveCRSDetails", "CRS_CERTIFICATION_OBTAINED: "
				+ formObject.getValue(CRS_CERTIFICATION_OBTAINED).toString());
		logInfo("saveCRSDetails",
				"MANUAL_FIRSTNAME: "
						+ formObject.getValue(MANUAL_FIRSTNAME).toString());
		logInfo("saveCRSDetails",
				"MANUAL_LASTNAME: "
						+ formObject.getValue(MANUAL_LASTNAME).toString());
		logInfo("saveCRSDetails", "CRS_DATECLASSIFICATION: "
				+ formObject.getValue(CRS_DATECLASSIFICATION).toString());
		String crsCertiObtained = "";
		if (formObject.getValue(CRS_CERTIFICATION_OBTAINED).toString()
				.equalsIgnoreCase("Yes"))
			crsCertiObtained = "Yes";
		if (formObject.getValue(CRS_CERTIFICATION_OBTAINED).toString()
				.equalsIgnoreCase("No"))
			crsCertiObtained = "No";
		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date date = new Date();
		String currDate = (formatter.format(date));
		clearCRSCustRecord(sCustNo);
		String sFinalCityOfBirth = formObject.getValue(CITYBIRTH_MANUAL)
				.toString();
		logInfo("saveCRSDetails", "sFinalCityOfBirth : " + sFinalCityOfBirth);
		if (getGridCount(CRS_TAXCOUNTRYDETAILS) > 0) {
			setCRSDates();
			for (int i = 0; i < getGridCount(CRS_TAXCOUNTRYDETAILS); i++) {
				int serialNo;
				String countryOfTaxResidency, tin_num, reason_no_tin, reason_desc;
				serialNo = Integer.parseInt(formObject.getTableCellValue(
						CRS_TAXCOUNTRYDETAILS, i, 0));
				countryOfTaxResidency = formObject.getTableCellValue(
						CRS_TAXCOUNTRYDETAILS, i, 1);
				tin_num = formObject.getTableCellValue(CRS_TAXCOUNTRYDETAILS,
						i, 2);
				reason_no_tin = formObject.getTableCellValue(
						CRS_TAXCOUNTRYDETAILS, i, 3);
				reason_desc = formObject.getTableCellValue(
						CRS_TAXCOUNTRYDETAILS, i, 4);
				String column1 = "processdefid, processname, wi_name, cust_id, acc_relation_sno, "
						+ "sno, first_name, last_name, birthcity, taxresidencycountry, tinnumber, "
						+ "reason_notprovidingtin, crscertificationformobtained, crsclassification, "
						+ "crsclassificationdate, crscertificationdate, crsaddmodifydate,reason_desc,"
						+ "CRS_INVEST_SCHEME,CRS_JURISDICTION,CRS_INCOME_TAX_OTHR_CNTRY,"
						+ "CRS_INCOME_TAX_CNTRY1,CRS_INCOME_TAX_CNTRY2,CRS_INCOME_TAX_CNTRY3 ";
				String value1 = sProcessDefId
						+ (char) 25
						+ "'"
						+ sProcessName
						+ "'"
						+ (char) 25
						+ "'"
						+ sWorkitemId
						+ "'"
						+ (char) 25
						+ "'"
						+ cust_id
						+ "'"
						+ (char) 25
						+ "'"
						+ sCustNo
						+ "'"
						+ (char) 25
						+ serialNo
						+ (char) 25
						+ "'"
						+ formObject.getValue(MANUAL_FIRSTNAME).toString()
						+ "'"
						+ (char) 25
						+ "'"
						+ formObject.getValue(MANUAL_LASTNAME).toString()
						+ "'"
						+ (char) 25
						+ "'"
						+ sFinalCityOfBirth
						+ "'"
						+ (char) 25
						+ "'"
						+ countryOfTaxResidency
						+ "'"
						+ (char) 25
						+ "'"
						+ tin_num
						+ "'"
						+ (char) 25
						+ "'"
						+ reason_no_tin
						+ "'"
						+ (char) 25
						+ "'"
						+ crsCertiObtained
						+ "'"
						+ (char) 25
						+ "'"
						+ formObject.getValue(CRS_CLASSIFICATION).toString()
						+ "'"
						+ (char) 25
						+ "to_date('"
						+ formObject.getValue(CRS_DATECLASSIFICATION)
								.toString() + "','dd/mm/yyyy')" + (char) 25
						+ "to_date('"
						+ formObject.getValue(CRS_DATECERTIFICATION).toString()
						+ "','dd/mm/yyyy')" + (char) 25 + "to_date('"
						+ currDate + "','dd/mm/yyyy')" + (char) 25 + "'"
						+ reason_desc.replace("'", "''") + "'" + (char) 25
						+ "'" + formObject.getValue(TAX_SCHEME_OBTAINED) + "'"
						+ (char) 25 + "'" + formObject.getValue(RESI_UNDER_JUD)
						+ "'" + (char) 25 + "'"
						+ formObject.getValue(SUB_PERSONAL_TAX) + "'"
						+ (char) 25 + "'"
						+ formObject.getValue(PER_INC_TAX_CON_1) + "'"
						+ (char) 25 + "'"
						+ formObject.getValue(PER_INC_TAX_CON_2) + "'"
						+ (char) 25 + "'"
						+ formObject.getValue(PER_INC_TAX_CON_3) + "'";
				log.info("Column:" + column1);
				log.info("Value:" + value1);
				insertIntoCRSDetailsTable(sCustNo, serialNo + "", sWorkitemId,
						column1, value1);
			}
		} else {
			String serialNo = "";
			String countryOfTaxResidency = "", tin_num = "", reason_no_tin = "";
			countryOfTaxResidency = "";
			tin_num = "";
			reason_no_tin = "";
			String column1 = "processdefid, processname, wi_name, cust_id, acc_relation_sno, sno, "
					+ "first_name, last_name, birthcity, taxresidencycountry, tinnumber, "
					+ "reason_notprovidingtin, crscertificationformobtained, crsclassification, "
					+ "crsclassificationdate, crscertificationdate, crsaddmodifydate,"
					+ "CRS_INVEST_SCHEME,CRS_JURISDICTION,CRS_INCOME_TAX_OTHR_CNTRY,"
					+ "CRS_INCOME_TAX_CNTRY1,CRS_INCOME_TAX_CNTRY2,CRS_INCOME_TAX_CNTRY3 ";
			String value1 = sProcessDefId + (char) 25 + "'" + sProcessName
					+ "'" + (char) 25 + "'" + sWorkitemId + "'" + (char) 25
					+ "'" + cust_id + "'" + (char) 25 + "'" + sCustNo + "'"
					+ (char) 25 + "'" + serialNo + "'" + (char) 25 + "'"
					+ formObject.getValue(MANUAL_FIRSTNAME).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(MANUAL_LASTNAME).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CITYBIRTH_MANUAL).toString() + "'"
					+ (char) 25 + "'" + countryOfTaxResidency + "'" + (char) 25
					+ "'" + tin_num + "'" + (char) 25 + "'" + reason_no_tin
					+ "'" + (char) 25 + "'" + crsCertiObtained + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CRS_CLASSIFICATION).toString() + "'"
					+ (char) 25 + "to_date('"
					+ formObject.getValue(CRS_DATECLASSIFICATION).toString()
					+ "','dd/mm/yyyy')" + (char) 25 + "to_date('"
					+ formObject.getValue(CRS_DATECERTIFICATION).toString()
					+ "','dd/mm/yyyy')" + (char) 25 + "to_date('" + currDate
					+ "','dd/mm/yyyy')" + (char) 25 + "'"
					+ formObject.getValue(TAX_SCHEME_OBTAINED) + "'"
					+ (char) 25 + "'" + formObject.getValue(RESI_UNDER_JUD)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(SUB_PERSONAL_TAX) + "'" + (char) 25
					+ "'" + formObject.getValue(PER_INC_TAX_CON_1) + "'"
					+ (char) 25 + "'" + formObject.getValue(PER_INC_TAX_CON_2)
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(PER_INC_TAX_CON_3) + "'";
			logInfo("saveCRSDetails", "Column:" + column1);
			logInfo("saveCRSDetails", "Value:" + value1);
			insertIntoCRSDetailsTable(sCustNo, "1", sWorkitemId, column1,
					value1);
		}
		long end_Time = System.currentTimeMillis();
		logInfo("saveCRSDetails",
				"Diff time in saveClientQuestionsData Function---"
						+ Long.toString(end_Time - start_time));
	}

	public void clearCRSCustRecord(String sCustNo) {
		// List sOutput =
		// formObject.getDataFromDB("delete from USR_0_CRS_DETAILS "
		// +
		// "where ACC_RELATION_SNO='"+sCustNo+"' AND WI_NAME='"+sWorkitemId+"'");//Commented
		// for invalid column on 27042023(Performanceissue) by Ameena
		int sOutput = formObject.saveDataInDB("delete from USR_0_CRS_DETAILS "
				+ "where ACC_RELATION_SNO='" + sCustNo + "' AND WI_NAME='"
				+ sWorkitemId + "'");
		log.info("----------Clear Crs Result-----------" + sOutput);
	}

	public void insertIntoCRSDetailsTable(String sCustNo, String sno,
			String sWIName, String sColumn, String sValue) {
		if (!sCustNo.equalsIgnoreCase("")) {
			logInfo("insertIntoCRSDetailsTable", "INSIDE");
			String query = "SELECT COUNT(1) CNT FROM USR_0_CRS_DETAILS WHERE WI_NAME='"
					+ sWorkitemId
					+ "'"
					+ " AND ACC_RELATION_SNO='"
					+ sCustNo
					+ "' AND SNO='" + sno + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(query);
			int result = 0;
			logInfo("insertIntoCRSDetailsTable",
					"count: " + Integer.parseInt(sOutput.get(0).get(0)));
			if (Integer.parseInt(sOutput.get(0).get(0)) > 0) {
				logInfo("insertIntoCRSDetailsTable", "Update: " + result);
				String sWhere = "WI_NAME = '" + sWorkitemId
						+ "' AND ACC_RELATION_SNO='" + sCustNo + "' AND SNO='"
						+ sno + "'";
				result = updateDataInDB("USR_0_CRS_DETAILS", sColumn, sValue,
						sWhere);
			} else {
				logInfo("insertIntoCRSDetailsTable", "Insert:");
				result = insertDataIntoDB("USR_0_CRS_DETAILS", sColumn, sValue);
				logInfo("insertIntoCRSDetailsTable",
						"sOutput Insert CRS Details Table---" + result);
			}
		}
	}

	public boolean checkProdChngForNoEligibility() {
		log.info("inside checkProdChngForNoEligibility");
		boolean res = true;
		String eligibility = getChqBookEligibility();
		if (eligibility != null && !eligibility.equalsIgnoreCase("")
				&& eligibility.equalsIgnoreCase("None")) {
			log.info("*************** Eligibility = N *************");
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater("acc_repeater");
			int iRows = getGridCount(PRODUCT_QUEUE);
			for (int i = 1; i < iRows; i++) {
				String sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE,
						i, 1);
				String sProdDesc = formObject.getTableCellValue(PRODUCT_QUEUE,
						i, 2);
				log.info("Repeater value :: " + i + " :: " + sProdDesc + " :: "
						+ sProdCode);
				String query1 = "SELECT CHEQUE_BOOK FROM USR_0_PRODUCT_SELECTED WHERE PRODUCT_CODE='"
						+ sProdCode + "'";
				log.info("query-----" + query1);
				List<List<String>> output1 = formObject.getDataFromDB(query1);
				String chqBook = output1.get(0).get(0);
				log.info("Chequebook facility :: " + chqBook);
				if (chqBook.equalsIgnoreCase("Yes")) {
					res = false;
					// objChkRepeater.setFocus(i,"PRODUCT_QUEUE.PROD_DESC");
					return res;
				}
			}
		}
		return res;
	}

	public void insertUdfDetails() {
		logInfo("insertUdfDetails", "INSIDE");
		String colNames = "wi_name, cid ,Acc_relation_serialNo,ibd_udf1 , graduation_date, special_customer_identifier,"
				+ "source_code,secret_question, secret_answer , concierge_member";
		String concierge = formObject.getValue(CONCIERGE).toString();
		String sQuery = "";
		List<List<String>> sOutput = null;
		String sMainCode = "";
		String sCount = "";
		if (!(null == concierge || concierge.equalsIgnoreCase(""))) {
			if (concierge.equalsIgnoreCase("Yes"))
				concierge = "1";
			else if (concierge.equalsIgnoreCase("No"))
				concierge = "2";
		} else {
			concierge = "";
		}
		logInfo("insertUdfDetails", "concierge: " + concierge);
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String values = "'" + sWorkitemId + "','"
				+ formObject.getValue(TXT_CUSTOMERID) + "','"
				+ (iProcessedCustomer + 1) + "','EMSA-"
				+ formObject.getValue(TXT_CUSTOMERID) + "','"
				+ getValueFromUDFGrid("Graduation Date") + "','"
				+ getValueFromUDFGrid("Special Customer Identifier") + "','"
				+ formObject.getValue(SOURCE_CODE) + "','"
				+ formObject.getValue(SECRET_QUESTION) + "','"
				+ formObject.getValue(SECRET_ANS) + "','" + concierge + "'";
		logInfo("insertUdfDetails", "values: " + values);
		com.newgen.iforms.user.ao.util.XMLParser xmlDataParser = new com.newgen.iforms.user.ao.util.XMLParser();
		try {
			sQuery = "SELECT COUNT(WI_NAME) FROM USR_0_UDF_DETAILS WHERE ACC_RELATION_SERIALNO='"
					+ (iProcessedCustomer + 1)
					+ "' and wi_name ='"
					+ sWorkitemId + "'";
			logInfo("insertUdfDetails", "sQuery---" + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			sCount = sOutput.get(0).get(0);
			logInfo("insertUdfDetails", "sOutput---" + sOutput);
			logInfo("insertUdfDetails", "sCount---" + sCount);
			logInfo("insertUdfDetails", "sColumn---" + colNames);
			logInfo("insertUdfDetails", "sValue---" + values);
			if (sOutput.size() > 0) {
				if (Integer.parseInt(sCount) > 0) {
					updateUdfDetails();
				} else {
					if (!Integer.toString(iProcessedCustomer).equalsIgnoreCase(
							"")) {
						logInfo("insertUdfDetails",
								"-------------- UDF Insert Called--------------");
						logInfo("insertUdfDetails",
								"insert into usr_0_udf_details " + colNames
										+ " values (" + values + ")");
						formObject
								.saveDataInDB("insert into usr_0_udf_details ("
										+ colNames + ") values (" + values
										+ ")");
					}
				}
			}
		} catch (Exception e) {
			logError("insertUdfDetails", e);
		}
	}

	public void updateUdfDetails() {
		logInfo("updateUdfDetails", "INSIDE");
		String colNames = "wi_name, cid ,Acc_relation_serialNo,ibd_udf1 , graduation_date, "
				+ "special_customer_identifier ,source_code,secret_question, secret_answer , concierge_member";
		String concierge = formObject.getValue(CONCIERGE).toString();
		if (!(null == concierge || concierge.equalsIgnoreCase(""))) {
			if (concierge.equalsIgnoreCase("Yes"))
				concierge = "1";
			else if (concierge.equalsIgnoreCase("No"))
				concierge = "2";
		} else {
			concierge = "";
		}
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String values = "'" + sWorkitemId + "'" + (char) 25 + "'"
				+ formObject.getValue(TXT_CUSTOMERID) + "'" + (char) 25 + "'"
				+ iProcessedCustomer + "'" + (char) 25 + "'EMSA-"
				+ formObject.getValue(TXT_CUSTOMERID) + "'" + (char) 25 + "'"
				+ getValueFromUDFGrid("Graduation Date") + "'" + (char) 25
				+ "'" + getValueFromUDFGrid("Special Customer Identifier")
				+ "'" + (char) 25 + "'" + formObject.getValue(SOURCE_CODE)
				+ "'" + (char) 25 + "'" + formObject.getValue(SECRET_QUESTION)
				+ "'" + (char) 25 + "'" + formObject.getValue(SECRET_ANS) + "'"
				+ (char) 25 + "'" + concierge + "'";
		updateDataInDB("usr_0_udf_details", colNames, values, "wi_name = '"
				+ sWorkitemId + "' and Acc_relation_serialNo ='"
				+ iProcessedCustomer + "'");
		logInfo("updateUdfDetails", "END");
	}

	public String getValueFromUDFGrid(String fieldName) {
		logInfo("getValueFromUDFGrid", "INSIDE ACCINFO_UDF_LIST count: "
				+ getGridCount(ACCINFO_UDF_LIST));
		for (int i = 0; i < getGridCount(ACCINFO_UDF_LIST); i++) {
			if (fieldName.equalsIgnoreCase(formObject.getTableCellValue(
					ACCINFO_UDF_LIST, i, 0))) {
				return formObject.getTableCellValue(ACCINFO_UDF_LIST, i, 1);
			}
		}
		return "";
	}

	public String getChqBookEligibility() {
		String eligibility = "";
		String query = "SELECT  DECODE (CHEQUEBOOK_ELIGIBILITY, 'F', 'Full', 'P', 'Partial', 'N', 'None')"
				+ " AS \"CHEQUEBOOK_ELIGIBILITY\" FROM "
				+ sExternalTable
				+ " WHERE WI_NAME ='" + sWorkitemId + "'";
		log.info("query" + query);
		List<List<String>> list = formObject.getDataFromDB(query);
		if (list != null && list.size() > 0) {
			eligibility = list.get(0).get(0);
			log.info("getChqBookEligibility :: " + eligibility);
		}
		return eligibility;
	}

	public int auditSearchMobileFCUBS(String whereCls, String dBTable,
			String ListView) {
		String sQuery = "";
		int iCount = 0;
		try {
			logInfo("auditSearchMobileFCUBS", "Inside.");
			iCount = returnCount(whereCls, "USR_0_CUST_MASTER_WMS");
			String fcubsDate = "";
			if ("USR_0_AO_SEARCH_AUDIT".equalsIgnoreCase(dBTable)) {
				fcubsDate = "to_char(A.CUST_DOB,'" + DATEFORMAT + "')";
			} else {
				fcubsDate = "to_date(to_char(A.CUST_DOB,'" + DATEFORMAT
						+ "'),'dd/mm/yyyy')";
			}
			if (iCount > 0) {
				if (ListView.equalsIgnoreCase(SEARCH_DETAILS_LVW)) {
					String columns = "CUST_ID,cust_full_name,cust_IC,cust_pass_no,cust_nationality,cust_email,"
							+ "cust_mobile_no,cust_dob,eida_no,memo_severity,memo,system_type,wi_name";
					String values = "";
					sQuery = "SELECT A.CUST_ID AS CUST_ID, A.CUST_FULL_NAME AS CUST_FULL_NAME,CUST_IC, CUST_PASS_NO,"
							+ "(SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE=CUST_NATIONALITY) "
							+ "CUST_NATIONALITY, CUST_EMAIL, CUST_MOBILE_NO,"
							+ fcubsDate
							+ " AS FCUBS_DATE, "
							+ "A.EIDA_NO AS EIDA_NO, MEMO_SEVERITY AS MEMO_SEVERITY, MEMO AS MEMO,"
							+ "'"
							+ fCUBSSystem
							+ "' AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME "
							+ "FROM USR_0_CUST_MASTER A, USR_0_CUST_MASTER_WMS B WHERE A.CUST_ID =B.CUST_ID(+) "
							+ "AND (" + whereCls + ")";
					List<List<String>> result = formObject
							.getDataFromDB(sQuery);
					if (result.size() > 0) {
						for (int count = 0; count < result.size(); count++) {
							values = "'" + result.get(count).get(0) + "','"
									+ result.get(count).get(1) + "','"
									+ result.get(count).get(2) + "','"
									+ result.get(count).get(3) + "','"
									+ result.get(count).get(4) + "','"
									+ result.get(count).get(5) + "','"
									+ result.get(count).get(6) + "','"
									+ result.get(count).get(7) + "','"
									+ result.get(count).get(8) + "','"
									+ result.get(count).get(9) + "','"
									+ result.get(count).get(10) + "','"
									+ result.get(count).get(11) + "','"
									+ result.get(count).get(12) + "'";
							insertDataIntoDB(dBTable, columns, values);
						}
					}
				}
				if (ListView.equalsIgnoreCase(LVW_DEDUPE_RESULT)) {
					String columns = "CUST_SNO,CUST_ID,cust_name,cust_IC,cust_passport,cust_nationality,"
							+ "cust_email,cust_mobile,cust_dob,cust_eida,system_type,wi_name";
					String values = "";
					int iProcessedCustomer = Integer.parseInt(formObject
							.getValue(SELECTED_ROW_INDEX).toString());
					sQuery = "SELECT "
							+ iProcessedCustomer
							+ " AS CUST_SNO,A.CUST_ID AS CUST_ID, A.CUST_FULL_NAME AS "
							+ "CUST_FULL_NAME,CUST_IC, CUST_PASS_NO, (SELECT COUNTRY FROM USR_0_COUNTRY_MAST "
							+ "WHERE COUNTRY_CODE=CUST_NATIONALITY) CUST_NATIONALITY , CUST_EMAIL, CUST_MOBILE_NO,"
							+ fcubsDate
							+ " AS FCUBS_DATE, A.EIDA_NO AS EIDA_NO,'"
							+ fCUBSSystem
							+ "' AS SYSTEM_TYPE,'"
							+ sWorkitemId
							+ "' AS WORKITEM_NAME FROM USR_0_CUST_MASTER A, USR_0_CUST_MASTER_WMS B "
							+ "WHERE A.CUST_ID =B.CUST_ID(+) AND (" + whereCls
							+ ")";
					List<List<String>> result = formObject
							.getDataFromDB(sQuery);
					if (result.size() > 0) {
						for (int count = 0; count < result.size(); count++) {
							values = "'" + result.get(count).get(0) + "','"
									+ result.get(count).get(1) + "','"
									+ result.get(count).get(2) + "','"
									+ result.get(count).get(3) + "','"
									+ result.get(count).get(4) + "','"
									+ result.get(count).get(5) + "','"
									+ result.get(count).get(6) + "','"
									+ result.get(count).get(7) + "','"
									+ result.get(count).get(8) + "','"
									+ result.get(count).get(9) + "','"
									+ result.get(count).get(10) + "','"
									+ result.get(count).get(11) + "'";
							insertDataIntoDB(dBTable, columns, values);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("auditSearchMobileFCUBS", e);
		}
		return iCount;
	}

	public Boolean ValidateComparisonDataCombo(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sStatus,
			String sFieldName) {
		logInfo("ValidateComparisonDataCombo",
				"Inside ValidateComparisonDataCombo");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFCRDataControl, sMessageID);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sEIDADataControl, sMessageID);
				return false;
			}
		} else if (sStatus.equalsIgnoreCase("Mandatory")) {
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sManualDataControl).toString()
						.equalsIgnoreCase("")
						|| formObject.getValue(sManualDataControl).toString()
								.equalsIgnoreCase("")) {
					sendMessageValuesList(sManualDataControl, sMessageID);
					return false;
				}
			} else {
				sendMessageValuesList(sManualCBControl,
						"Please select the manual checkbox for " + sFieldName);
				return false;
			}
		} else {
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sManualDataControl).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(sManualDataControl, sMessageID);
					return false;
				}
			}
		}
		return true;
	}

	public Boolean ValidateComparisonDataComboMob(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sStatus,
			String sFieldName) {
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFieldName,
						"Please select the manual checkbox for " + sFieldName);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFieldName,
						"Please select the manual checkbox for " + sFieldName);
				return false;
			}
		} else if (sStatus.equalsIgnoreCase("Mandatory")) {
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sManualDataControl).toString()
						.equalsIgnoreCase("")) {
					if (!validateMobileNo(CHECKBOX_TELE_MOB_FCR,
							CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
							FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE, CA0126)) {
						return false;
					}
				}
			}
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("False")) {
				sendMessageValuesList(sManualCBControl,
						"Please select the manual checkbox for "
								+ sManualDataControl);
				return false;
			}
		}
		return true;
	}

	public void insertMobileChangeAudit() {
		logInfo("insertMobileChangeAudit", "Inside");
		String Remarks_Audit = "Mobile and Residence number overridden";
		String ws_decision_audit = "overridden";
		String groupname = "";
		String created_by = "";
		String prv_ws_name = formObject.getValue(PREV_WS_NAME).toString();
		String tablename = "DECISION_HISTORY";// USR_0_AO_DEC_HIST
		String columnname = "";
		String values = "";
		String rej_reason = "";
		int resAPInsert = 0;
		String channel = "";
		try {
			// columnname =
			// "wi_name,group_name,USERID,username,prv_ws_name,rej_reason,ws_comments,"
			// + "ws_decision,create_dat,CHANNEL,WS_NAME";
			columnname = "WINAME,GROUP_NAME,USERID,USERNAME,PRV_WS_NAME,REJ_REASON,WS_COMMENTS,WS_DECISION,CREATE_DAT,"
					+ "CHANNEL,WS_NAME";
			created_by = formObject.getUserName().toUpperCase();
			channel = formObject.getValue(SOURCING_CHANNEL).toString();
			String sQuery = "SELECT GROUPNAME,PERSONALNAME FROM PDBGROUP A, PDBGROUPMEMBER B,"
					+ "PDBUSER C WHERE A.GROUPINDEX=B.GROUPINDEX AND B.USERINDEX=C.USERINDEX "
					+ "AND UPPER(USERNAME)='"
					+ created_by
					+ "'  AND GROUPNAME != 'Everyone'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			for (int i = 0; i < sOutput.size(); i++) {
				groupname = groupname + sOutput.get(i).get(0) + ",";
			}
			groupname = groupname.substring(0, groupname.length() - 1);
			String id = sOutput.get(0).get(1);
			logInfo("insertMobileChangeAudit", "sOutput: " + sOutput);
			/*
			 * values =
			 * "'"+sWorkitemId+"','"+groupname+"','"+created_by+"','"+id+"','"+
			 * prv_ws_name
			 * +"','"+rej_reason+"','"+Remarks_Audit+"','"+ws_decision_audit
			 * +"',"+getCurrentDateTime()+",'"+ channel+"','"+sActivityName+"'";
			 */
			values = sWorkitemId + "##" + groupname + "##" + created_by + "##"
					+ id + "##" + prv_ws_name + "##" + rej_reason + "##"
					+ Remarks_Audit + "##" + ws_decision_audit + "##"
					+ getCurrentDateTime() + "##" + channel + "##"
					+ sActivityName;
			logInfo("insertMobileChangeAudit", "columnname: " + columnname);
			logInfo("insertMobileChangeAudit", "values: " + values);
			logInfo("insertMobileChangeAudit", "Remarks: " + Remarks_Audit);
			logInfo("insertMobileChangeAudit", "ws_decision: "
					+ ws_decision_audit);
			// resAPInsert = insertDataIntoDB(tablename,columnname,values);
			resAPInsert = LoadListViewWithHardCodeValues(tablename, columnname,
					values);
			logInfo("insertMobileChangeAudit", "output" + resAPInsert);
		} catch (Exception e) {
			logError("insertMobileChangeAudit", e);
		}
		logInfo("insertMobileChangeAudit", "Outside");
	}

	public String checkCountry() {
		String sFinalCountry = "";
		try {
			String sIsFCRCountry = formObject.getValue(CHECKFCR).toString();
			String sIsEIDACountry = formObject.getValue(CHECKEIDA).toString();
			String sIsManualCountry = formObject.getValue(CHECKMANUAL)
					.toString();
			String sFCRCountry = formObject.getValue(FCR_RESIDENT).toString();
			String sEIDACountry = formObject.getValue(EIDA_RESIDENT).toString();
			String sManualCountry = "";
			if (formObject.getValue(MANUAL_RESIDENT) != null) {
				sManualCountry = formObject.getValue(MANUAL_RESIDENT)
						.toString();
			}
			sFinalCountry = getFinalData(sIsFCRCountry, sIsEIDACountry,
					sIsManualCountry, sFCRCountry, sEIDACountry, sManualCountry);
			log.info("sFinalCountry----" + sFinalCountry);
		} catch (Exception e) {
			logError("", e);
		}
		return sFinalCountry;
	}

	public void setVisaStatus() {
		try {
			logInfo("setVisaStatus", "inside if combo34 *** ");
			if (returnVisaStatus().equalsIgnoreCase("Under Processing")) {
				logInfo("setVisaStatus", "Inside condition");
				String updatequery = "UPDATE USR_0_CUST_TXN set VISA_NO='MDSA' WHERE "
						+ "cust_sno='"
						+ getPrimaryCustomerSNO()
						+ "' AND WI_NAME = '" + sWorkitemId + "'";
				formObject.saveDataInDB(updatequery);
				logInfo("setVisaStatus", "Udate successful" + updatequery);
				formObject.setValue(CHECKBOX_VISA_NO_MANUAL, "true");
				formObject.setValue(CHECKBOX_VISA_NO_FCR, "false");
				formObject.setValue(CHECKBOX_VISA_NO_EIDA, "false");
				if (formObject.getValue(CHECKBOX_SELECTALL_MANUAL).toString()
						.equalsIgnoreCase("true")
						|| formObject.getValue(CHECKBOX_VISA_NO_MANUAL)
								.toString().equalsIgnoreCase("true")) {
					formObject.setValue(MANUAL_VISANO, "MDSA");
					formObject.setStyle(MANUAL_VISANO, "enable", "false");
					formObject.setValue(HD_VISA_NO,
							formObject.getValue(MANUAL_VISANO).toString());
				}
				sendMessageValuesList("", CA0172);
			}
		} catch (Exception e) {
			logError("setVisaStatus", e);
		}
	}

	public void setVisaNoManual() {
		try {
			if ((formObject.getValue(MANUAL_VISANO).toString()
					.equalsIgnoreCase("MDSA"))
					&& (!(returnVisaStatus()
							.equalsIgnoreCase("Under Processing"))))
			// && sOnLoad.equalsIgnoreCase("false") && (!mohit_flag)) //check
			{
				String updateQuery = "UPDATE USR_0_CUST_TXN set VISA_NO='' WHERE cust_sno='"
						+ getPrimaryCustomerSNO()
						+ "'"
						+ " AND WI_NAME = '"
						+ sWorkitemId + "'";
				formObject.saveDataInDB(updateQuery);
				logInfo("setVisaNoManual", "Udate successful" + updateQuery);
				formObject.setValue(CHECKBOX_VISA_NO_MANUAL, "true");
				formObject.setValue(CHECKBOX_VISA_NO_FCR, "false");
				formObject.setValue(CHECKBOX_VISA_NO_EIDA, "false");
				formObject.setStyle(MANUAL_VISANO, "enable", "false");
				if (formObject.getValue(CHECKBOX_SELECTALL_MANUAL).toString()
						.equalsIgnoreCase("true")
						|| formObject.getValue(CHECKBOX_VISA_NO_MANUAL)
								.toString().equalsIgnoreCase("true")) {
					formObject.setValue(MANUAL_VISANO, "");
					formObject.setValue(HD_VISA_NO,
							formObject.getValue(MANUAL_VISANO).toString());
				}
				sendMessageValuesList("", CA0173);
			}
		} catch (Exception e) {
			logError("setVisaNoManual", e);
		}
	}

	public boolean minorDateCompDOB() {
		String arryDOB[] = getFinalDataAndContrl(CHECKBOX_DOB_FCR,
				CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB,
				MANUAL_DOB).split("#");
		String finalDOB = arryDOB[0];
		String arryPassportIssue[] = getFinalDataAndContrl(
				CHECKBOX_PASS_ISS_DT_FCR, CHECKBOX_PASS_ISS_DT_EIDA,
				CHECKBOX_PASS_ISS_DT_MANUAL, FCR_PASSPORTISSDATE,
				EIDA_PASSPORTISSDATE, MANUAL_PASSPORTISSDATE).split("#");
		String finalPassportIssue = arryPassportIssue[0];
		String finalPassportIssueContrl = arryPassportIssue[1];
		String arryVisaIssue[] = getFinalDataAndContrl(
				CHECKBOX_VISA_ISSUE_DATE_FCR, CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAISSDATE,
				EIDA_VISAISSDATE, MANUAL_VISAISSDATE).split("#");
		String finalVisaIssue = arryVisaIssue[0];
		String finalVisaIssueContrl = arryVisaIssue[1];
		boolean rtn = compareDateMMM(finalDOB, finalPassportIssue);
		if (rtn) {
			sendMessageValuesList(finalPassportIssueContrl,
					"DOB Can Not Be Greater Than Passport Issue Date.");
			return false;
		}
		rtn = compareDateMMM(finalDOB, finalVisaIssue);
		if (rtn) {
			sendMessageValuesList(finalVisaIssueContrl,
					"DOB Can Not Be Greater Than Visa Issue Date.");
			return false;
		}
		return true;
	}

	public String getFinalDataAndContrl(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl) {
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				return formObject.getValue(sFCRDataControl) + "#"
						+ sFCRDataControl;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				return formObject.getValue(sEIDADataControl) + "#"
						+ sEIDADataControl;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!formObject.getValue(sManualDataControl).toString()
					.equalsIgnoreCase("")) {
				return formObject.getValue(sManualDataControl) + "#"
						+ sManualDataControl;
			}
		}
		return "";
	}

	public boolean compareDateMMM(String date1, String date2) {
		SimpleDateFormat f = new SimpleDateFormat(DATEFORMAT);
		String d1 = date1;
		String d2 = date2;
		boolean rtn = true;
		try {
			Date formatted1 = f.parse(d1);
			Date formatted2 = f.parse(d2);
			log.info(formatted1);
			log.info(formatted2);
			if (formatted1.before(formatted2)) {
				log.info("date1 is older");
				return false;
			} else if (formatted1.equals(formatted2)) {
				log.info("date1 is older");
				return false;
			}
		} catch (ParseException e) {
			logError("compareDateMMM", e);
		}
		return rtn;
	}

	public void isCatBenefitOther() {
		try {
			logInfo("isCatBenefitOther", "1235 Block");
			if (formObject.getValue(IS_CAT_BENEFIT_OTHER).toString()
					.equalsIgnoreCase("True")) {
				logInfo("isCatBenefitOther", "IF Block");
				formObject.setStyle(CAT_BENEFIT_OTHER, "enable", "false");
				formObject.setValue(IS_SALARY_TRANSFER_CAT_CHANGE, "False");
				formObject.setValue(IS_MORTAGAGE_CAT_CHANGE, "False");
				formObject.setValue(IS_INSURANCE_CAT_CHANGE, "False");
				formObject.setValue(IS_TRB_CAT_CHANGE, "False");
				formObject.setValue(IS_OTHERS_CAT_CHANGE, "False");
				formObject.setValue(IS_VVIP, "False");
				if (formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Privilege")
						|| formObject.getValue(NEW_CUST_SEGMENT).toString()
								.equalsIgnoreCase("Emirati")) {
					formObject.setValue(IS_PREVILEGE_TP_CAT_CHANGE, "False");
					formObject.setValue(IS_ENTERTAINMENT_CAT_CHANGE, "False");
					formObject.setValue(IS_SHOPPING_CAT_CHANGE, "False");
					formObject.setValue(IS_SPORT_CAT_CHANGE, "False");
					formObject.setValue(IS_TRAVEL_CAT_CHANGE, "False");
				} else if (formObject.getValue(NEW_CUST_SEGMENT).toString()
						.equalsIgnoreCase("Emirati Excellency")
						|| formObject.getValue(NEW_CUST_SEGMENT).toString()
								.equalsIgnoreCase("Excellency")
						|| formObject.getValue(NEW_CUST_SEGMENT).toString()
								.equalsIgnoreCase("Private Clients")) {
					formObject.setValue(IS_EXCELLENCY_TP_CAT_CHANGE, "False");
				}
			} else {
				logInfo("isCatBenefitOther", "Else Block");
				formObject.setValue(CAT_BENEFIT_OTHER, "");
				formObject.setStyle(CAT_BENEFIT_OTHER, "enable", "false");
			}
		} catch (Exception e) {
			logError("isCatBenefitOther", e);
		}

	}

	/*
	 * public void manageChangeinFATCAFields(String controlName, String
	 * sRelation) {
	 * logInfo("manageChangeinFATCAFields","In manageChangeinFATCAFields");
	 * if(controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_EIDA)
	 * //||controlName.equalsIgnoreCase(CHECKBOX_NATIONALITY_MANUAL)
	 * ||controlName
	 * .equalsIgnoreCase(EIDA_NATIONALITY)||controlName.equalsIgnoreCase
	 * (MANUAL_NATIONALITY)) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } else
	 * if(controlName.equalsIgnoreCase
	 * ("CHECK52")||controlName.equalsIgnoreCase("CHECK28")||
	 * controlName.equalsIgnoreCase
	 * (EIDA_CNTRY)||controlName.equalsIgnoreCase("cntry_manual")) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } else
	 * if(controlName.equalsIgnoreCase
	 * ("CHECK50")||controlName.equalsIgnoreCase("CHECK25")||
	 * controlName.equalsIgnoreCase
	 * (EIDA_PH)||controlName.equalsIgnoreCase("PH_manual")) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } else
	 * if(controlName.equalsIgnoreCase
	 * (CHECKBOX_TELE_MOB_EIDA)||controlName.equalsIgnoreCase
	 * (CHECKBOX_TELE_MOB_MANUAL)||controlName.equalsIgnoreCase(EIDA_MOBILE)||
	 * controlName.equalsIgnoreCase(MANUAL_MOBILE)) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } else
	 * if(controlName.equalsIgnoreCase
	 * (CHECKEIDA)||controlName.equalsIgnoreCase(CHECKMANUAL)||
	 * controlName.equalsIgnoreCase
	 * (EIDA_RESIDENT)||controlName.equalsIgnoreCase(MANUAL_RESIDENT)) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } else
	 * if(controlName.equalsIgnoreCase
	 * ("Combo50")||controlName.equalsIgnoreCase("Combo48")||
	 * controlName.equalsIgnoreCase
	 * ("cntry_of_birth")||controlName.equalsIgnoreCase("POAcombo")) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); }
	 * 
	 * //Start edit by Shivani -- Fatca 04082020 else
	 * if(controlName.equalsIgnoreCase
	 * ("CHECK119")||controlName.equalsIgnoreCase("CHECK122")||
	 * controlName.equalsIgnoreCase
	 * ("countryBirth_eida")||controlName.equalsIgnoreCase
	 * ("countryBirth_manual")) {
	 * formObject.setValue("Change_In_FATCA_3way_Inputs","Yes");
	 * formObject.setValue("fatcamini","Yes");
	 * formObject.setValue("fatcamain","Yes"); } //End edit by Shivani -- Fatca
	 * 04082020
	 * 
	 * if(sActivityName.equalsIgnoreCase("QDE_CUST_INFO")) {
	 * manageFATCAFieldsEnable("Yes",sRelation); } else
	 * if(formObject.getValue(CHECKBOX_FATCA
	 * ).toString().equalsIgnoreCase("true")) {
	 * if(formObject.getValue("COMBO53").toString().equalsIgnoreCase("Yes")) {
	 * manageFATCAFieldsEnable
	 * (formObject.getValue("COMBO53").toString(),sRelation); } } }
	 * 
	 * public void manageFATCAFieldsEnable(String sChangeInCustomerDetail,String
	 * sRelation) { logInfo("manageFATCAFieldsEnable", "Inside."); String
	 * sFATCAChange =
	 * formObject.getValue("Change_In_FATCA_3way_Inputs").toString(); String
	 * sUSClassification = formObject.getValue("COMBO44").toString(); String
	 * sWhereUSClassification = ""; if(sUSClassification.isEmpty()) {
	 * sWhereUSClassification ="AND CUSTOMER_US_CLASSIFICATION IS NULL"; } else
	 * { sWhereUSClassification =
	 * "AND CUSTOMER_US_CLASSIFICATION='"+sUSClassification+"'"; } String sQuery
	 * =
	 * "SELECT ENABLE_DISABLE FROM USR_0_FATCA_RULES WHERE CUSTOMER_EXISTING='Yes' AND "
	 * + "REQUEST_TYPE='"+formObject.getValue(REQUEST_TYPE).toString()+
	 * "' AND IS_CUSTOMER_INFO_CHANGE='"
	 * +sChangeInCustomerDetail+"' AND IS_FATCA_DETAIL_CHANGE='"
	 * +sFATCAChange+"'"+sWhereUSClassification; List<List<String>> sOutput;
	 * if(ACTIVITY_QDE_CUST_INFO.equalsIgnoreCase(sActivityName)) {
	 * if(sRelation.equalsIgnoreCase("New")) { enableFATCACPD(); } else {
	 * sOutput = formObject.getDataFromDB(sQuery);
	 * if(sOutput.get(0).get(0).equalsIgnoreCase("Yes")) { enableFATCACPD(); }
	 * else { frameFatcaCpdDisable(); } } } else {
	 * if(sRelation.equalsIgnoreCase("New")) { enableFATCACPD(); } else
	 * if(formObject.getValue(CHECKBOX_FATCA).toString().equalsIgnoreCase(TRUE))
	 * { sOutput = formObject.getDataFromDB(sQuery);
	 * if(sOutput.get(0).get(0).equalsIgnoreCase("Yes")) { enableFATCACPD(); }
	 * else { frameFatcaCpdDisable(); } } } }
	 */
	public boolean removeProducts(int selectedIndex) {
		int iRows = getGridCount(PRODUCT_QUEUE);
		String isClkBx = "";
		String sDeleteIndexes = "";
		String sAccNo = "";
		logInfo("removeProducts", "iRows---" + iRows);
		if (iRows == 0) {
			sendMessageValuesList(PRODUCT_QUEUE,
					"Atleast 1 row should be added");
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
			sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE, selectedIndex,
					4);
			logInfo("removeProducts", "sAccNo---" + sAccNo);
			if (!sAccNo.equalsIgnoreCase("")) {
				sendMessageValuesList(
						PRODUCT_QUEUE,
						"Please select the checkbox of the row to"
								+ " be deleted in which account number is blank");
				return false;
			}
			String prodCode = formObject.getTableCellValue(PRODUCT_QUEUE,
					selectedIndex, 1);
			logInfo("removeProducts", "prodCode---" + prodCode);
			int iRowsDebitCard = getGridCount("queue_dc");
			for (int i = 0; i < iRowsDebitCard; i++) {
				String prodGroup = formObject.getTableCellValue(QUEUE_DC, i, 0);
				if (prodGroup.contains("_" + prodCode + "_")) {
					sendMessageValuesList(
							QUEUE_DC,
							"Please remove the rows from Debit Card "
									+ "frame as you are going to change product selection");
					return false;
				}
			}
			/*
			 * if(iRowsDebitCard>0) { sendMessageValuesList(PRODUCT_QUEUE,
			 * "Please remove the rows from Debit Card " +
			 * "frame as you are going to change product selection"); return
			 * false; }
			 */
		}
		/*
		 * for(int i=0; i<iRows;i++) { isClkBx =
		 * formObject.getTableCellValue(PRODUCT_QUEUE, i, 12).toString(); sAccNo
		 * = formObject.getTableCellValue(PRODUCT_QUEUE, i, 4).toString();
		 * if(sAccNo.equalsIgnoreCase("")) {
		 * logInfo("removeProducts","isClkBx---"+isClkBx);
		 * if(isClkBx.equalsIgnoreCase("true")) { sDeleteIndexes =
		 * sDeleteIndexes+i+","; } } }
		 * logInfo("removeProducts","sDeleteIndexes---"+sDeleteIndexes);
		 * if(sDeleteIndexes.equalsIgnoreCase("")) {
		 * sendMessageValuesList(PRODUCT_QUEUE,
		 * "Please select the checkbox of the row to" +
		 * " be deleted in which account number is blank"); return false; } else
		 * { sDeleteIndexes =
		 * sDeleteIndexes.substring(0,sDeleteIndexes.length()-1); String[]
		 * sTempDelete = sDeleteIndexes.split(","); for(int iLoop=0;
		 * iLoop<sTempDelete.length;iLoop++) { logInfo("","In loop"); int[] arr
		 * = null; arr[0] = Integer.parseInt(sTempDelete[iLoop]);
		 * formObject.deleteRowsFromGrid(PRODUCT_QUEUE, arr); for(int innerLoop
		 * =iLoop+1;innerLoop<sTempDelete.length;innerLoop++) {
		 * logInfo("",sTempDelete[innerLoop]); sTempDelete[innerLoop] =
		 * (Integer.parseInt(sTempDelete[innerLoop])-1)+""; } } }
		 */
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
			LoadDebitCardCombo();
		}
		EnableFamilyReffered();
		// updateCustSnoInProductGrid(selectedIndex);
		return true;
	}

	public void LoadDebitCardCombo() {
		HashMap<String, String> hmap = new HashMap<String, String>();
		try {
			logInfo("LoadDebitCardCombo", "Inside");
			int iRows = getGridCount(PRODUCT_QUEUE);
			logInfo("LoadDebitCardCombo", "iRows: " + iRows);
			formObject.clearCombo(ACC_INFO_PG);
			String sQuery = "";
			List<List<String>> sOutput = null;
			String sAllProduct = "";
			String sPrimaryCust = getPrimaryCustomerSNO();
			sQuery = "SELECT CUST_SEG , DECODE(STAFF_FLAG,'Yes','Y','N') AS STAFF_FLAG "
					+ "FROM USR_0_CUST_TXN WHERE CUST_SNO = "
					+ "'"
					+ sPrimaryCust + "' AND WI_NAME ='" + sWorkitemId + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadDebitCardCombo", "sQuery: " + sQuery + "sOutput: "
					+ sOutput);
			String sSegment = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			String sStaff = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(1).toString() : "";
			if (formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("New Account With Category Change")) {
				sSegment = formObject.getValue(NEW_CUST_SEGMENT).toString();
			}
			logInfo("LoadDebitCardCombo", "sSegment: " + sSegment + "sStaff: "
					+ sStaff);
			for (int i = 0; i < iRows; i++) {
				sQuery = "SELECT PRODUCT_DESC,PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE currency_code = "
						+ "'"
						+ formObject.getTableCellValue(PRODUCT_QUEUE, i, 3)
						+ "' "
						+ "and PRODUCT_CODE = '"
						+ formObject.getTableCellValue(PRODUCT_QUEUE, i, 1)
						+ "' "
						+ "AND ATM_FLAG='Y' AND"
						+ " CURRENCY_CODE IN (SELECT DISTINCT CURRENCY_CODE  FROM USR_0_DEBITCARD_MASTER "
						+ "WHERE PROCESS_TYPE ='Onshore'"
						+ " AND CUST_CATEGORY ='"
						+ sSegment
						+ "' AND STAFF_FLAG = '"
						+ sStaff
						+ "') and rownum=1 "
						+ "ORDER BY TO_NUMBER(PRODUCT_CODE)";
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("LoadDebitCardCombo", "sQuery: " + sQuery + "sOutput: "
						+ sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					formObject.addItemInCombo(ACC_INFO_PG, sOutput.get(0)
							.get(0)
							+ "_"
							+ sOutput.get(0).get(1)
							+ "_"
							+ (i + 1));
				}
			}
			formObject.setValue(ACC_INFO_PG, "");
			iRows = getGridCount(ACC_INFO_DC_LVW);
			for (int i = 0; i < iRows; i++) {
				formObject.setStyle("QUEUE_DC.GROUP_TYPE", DISABLE, TRUE); // CHECKCONTOL
																			// IN
																			// JS
				formObject.setStyle("QUEUE_DC.CARD_TYPE", DISABLE, TRUE);
				formObject.setStyle("QUEUE_DC.PROD_GRP", DISABLE, TRUE);
				formObject.setStyle("QUEUE_DC.NEW_LINK", DISABLE, TRUE);
				formObject.setStyle("QUEUE_DC.EMBOSS_NAME", DISABLE, TRUE);
				formObject.setStyle("QUEUE_DC.EXISTING_CARD_NO", DISABLE, TRUE);
				formObject.setStyle("QUEUE_DC.CARD_NO", DISABLE, TRUE);
				/*
				 * objChkRepeater.setEditable(i,"QUEUE_DC.GROUP_TYPE",false);
				 * objChkRepeater.setEditable(i,"QUEUE_DC.CARD_TYPE",false);
				 * objChkRepeater.setEditable(i,"QUEUE_DC.PROD_GRP",false);
				 * objChkRepeater.setEditable(i,"QUEUE_DC.EMBOSS_NAME",false);
				 * objChkRepeater.setEditable(i,"QUEUE_DC.NEW_LINK",false);
				 * objChkRepeater
				 * .setEditable(i,"QUEUE_DC.EXISTING_CARD_NO",false);
				 * objChkRepeater.setEditable(i,"QUEUE_DC.CARD_NO",false);
				 */
			}
		} catch (Exception e) {
			logError("Exception in LoadDebitCardCombo", e);
		} finally {
			hmap.clear();
		}
	}

	public void EnableFamilyReffered() {
		logInfo("EnableFamilyReffered", "INSIDE");
		int iRows = getGridCount(PRODUCT_QUEUE);
		logInfo("EnableFamilyReffered", "PRODUCT_QUEUE count: " + iRows);
		String sAllProduct = "";
		if (iRows == 0) {
			formObject.setStyle(FAMILY_REFFERED, DISABLE, TRUE);
			formObject.setValue(FAMILY_REFFERED, "");
		} else {
			for (int i = 0; i < iRows; i++) {
				sAllProduct = sAllProduct + "'"
						+ formObject.getTableCellValue(PRODUCT_QUEUE, i, 1)
						+ "',";
				formObject.setTableCellValue(PRODUCT_QUEUE, i, 14, i + 1 + "");
			}
			sAllProduct = sAllProduct.substring(0, sAllProduct.length() - 1);
			String sQuery = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER "
					+ "WHERE PRODUCT_CODE IN ("
					+ sAllProduct
					+ ") AND UPPER(SUB_PRODUCT_TYPE) ='EMSA'";
			logInfo("EnableFamilyReffered", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				formObject.setStyle(FAMILY_REFFERED, DISABLE, FALSE);
			} else {
				formObject.setStyle(FAMILY_REFFERED, DISABLE, TRUE);
				formObject.setValue(FAMILY_REFFERED, "");
			}
		}
	}

	public HashMap<String, String> fetchValFromProp() {
		HashMap<String, String> hmap = new HashMap<String, String>();
		try {
			String sreadPropFile = DBCOLUMNS; // check constant
			String ssepKey[] = sreadPropFile.split("\\$");
			for (String element : ssepKey) {
				String sputMap[] = element.split("#");
				logInfo("fetchValFromProp", "sputMap[0]: " + sputMap[0]);
				logInfo("fetchValFromProp", "sputMap[1]: " + sputMap[1]);
				hmap.put(sputMap[1], sputMap[0]);
			}
		} catch (Exception e) {
			logError("fetchValFromProp", e);
		}
		return hmap;
	}

	public String fetchEIDAListInputXML(String sEidaNo, String sCustID) {
		String sQuery = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String sOutputXML = getEIDAListInputXML(sEidaNo, sCustID, sOutput
				.get(0).get(0).toString(), "TP906079");
		logInfo("", "fetchEIDAListInputXML----" + sOutput);
		sOutputXML = socket.connectToSocket(sOutputXML);
		logInfo("", "fetchEIDAListInputXML---- after ExecuteWebserviceAll"
				+ sOutput);
		return sOutputXML;
	}

	public String getEIDAListInputXML(String sEidaNo, String sCustID,
			String sSeqNo, String sUserName) {
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>CustEIDAInfo</Calltype>" + "<Customer>"
				+ "<EIDANum>" + sEidaNo + "</EIDANum>" + "<CustId>" + sCustID
				+ "</CustId>" + "<REF_NO>" + sSeqNo + "</REF_NO>" + "<USER>"
				+ sUserName + "</USER>" + "<WiName>" + sWorkitemId
				+ "</WiName>" + "</Customer>" + "</APWebService_Input>";
		return sInputXML;
	}

	protected String executeEida(String data) {// check
		if (formObject.getValue(CHANNEL_TYPE).toString()
				.equalsIgnoreCase("Direct")) {
			String sResult = data;
			/*
			 * Object [] ain = {sWorkitemId+"#"}; Object getResult;
			 * logInfo("","inside fetch button for EIDA..."+sWorkitemId);
			 * JSObject objJStemp = formObject.getJSObject(); getResult=
			 * objJStemp.call("openEidainForm",ain);
			 * logInfo("","Just below opening EIDA form and getting output"
			 * +getResult); String sResult = getResult.toString();
			 */
			if (sResult.equalsIgnoreCase("")) {
				return "false";
			}
			xmlDataParser = new com.newgen.iforms.user.ao.util.XMLParser();
			xmlDataParser.setInputXML(sResult);
			String valEIDA[] = xmlDataParser.getValueOf("Val").split("#");
			HashMap<String, String> sListView = fetchValFromProp();
			try {
				for (String skey : valEIDA) {
					try {
						String sTemp[] = skey.split("=");
						String sFormField = sListView.get(sTemp[1]);
						if (sFormField.indexOf(EIDA_NATIONALITY) != -1) {
							String sQuery = "SELECT COUNTRY FROM USR_0_COUNTRY_MAST "
									+ "WHERE COUNTRY_CODE = (SELECT COUNTRY_CODE FROM USR_0_EIDA_COUNTRY "
									+ "WHERE EIDA_CODE ='" + sTemp[0] + "')";
							List<List<String>> sOutput = formObject
									.getDataFromDB(sQuery);
							formObject.setValue(sFormField,
									sOutput.get(0).get(0));
						} else if (sFormField.indexOf(EIDA_STATE) != -1) {
							formObject.setValue(sFormField,
									sTemp[0].toUpperCase());
						} else {
							if (sTemp[0].indexOf("+") != -1) {
								sTemp[0] = sTemp[0].substring(1,
										sTemp[0].length());
								formObject.setValue(sFormField, sTemp[0]);
							} else {
								formObject.setValue(sFormField, sTemp[0]);
							}
						}
					} catch (Exception e) {
						logError("", e);
					}
				}
			} catch (Exception e) {
				logError("", e);
			} finally {
				sListView.clear();
			}
		}
		if (formObject.getValue(CHANNEL_TYPE).toString()
				.equalsIgnoreCase("Alternate")
				&& formObject.getValue(DATA_ENTRY_MODE).toString()
						.equalsIgnoreCase("Detail Data Entry")) {
			logInfo("",
					"inside --- if EIDA refresh button is clicked and CHANNEL_TYPE is alternate ");
			if (!formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				sendMessageValuesList(CHECKBOX_EIDANO_MANUAL,
						"Please enter EIDA Number Manually");
			} else if (formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				String sEidaNo = formObject.getValue(MANUAL_EIDANO).toString();
				logInfo("", "EIDA NUMBER MANUAL--------" + sEidaNo);
				if (sEidaNo.equalsIgnoreCase("")) {
					sendMessageValuesList(MANUAL_EIDANO,
							"Please enter EIDA Number");
				} else {
					logInfo("", "before EIDANO_MANUAL.length===15");
					if (formObject.getValue(MANUAL_EIDANO).toString().length() != 15) {
						logInfo("", "inside length is not equal to=====15");
						sendMessageValuesList(MANUAL_EIDANO,
								"The EIDA number should be 15 digits");
					}
					if (formObject.getValue(MANUAL_EIDANO).toString().length() == 15) {
						logInfo("",
								"inside formObject.getValue(EIDANO_MANUAL).length() == 15");
						String sQuery1 = "SELECT CUST_ID FROM USR_0_CUST_TXN WHERE WI_NAME='"
								+ sWorkitemId + "'" + " AND CUST_SNO='1'";
						List<List<String>> sOutput = formObject
								.getDataFromDB(sQuery1);
						logInfo("", "sOutput1-----");
						String sCustID = sOutput.get(0).get(0);
						logInfo("", "calling setEIDAListInputXML------sEidaNo="
								+ sEidaNo + " and sCustID=" + sCustID);
						setEIDAListInputXML(sEidaNo, sCustID);
					}
				}
			}
		}
		return "";
	}

	protected void setEIDAListInputXML(String sEidaNo, String sCustID) {
		logInfo("", "In setEIDAListInputXML---");
		try {
			logInfo("", "In setEIDAListInputXML---try");
			String sOutput = fetchEIDAListInputXML(sEidaNo, sCustID);
			String sReturnCode = getTagValues(sOutput, "returnCode");
			logInfo("", "sReturnCode-----" + sReturnCode);
			if (sReturnCode.equalsIgnoreCase("0")) {
				logInfo("", "inside returncode 00000000696969696969----------");
				String sTable = "usr_0_eida_table";
				String sColumn = "WI_NAME,PREFIX_EIDA,NAME_EIDA,MOTHERNAME_EIDA,EIDANO_EIDA,ADDRESS_EIDA,"
						+ "CNTRY_EIDA,STATE_EIDA,CITY_EIDA,RESIDENT_EIDA,PER_CNTRY_EIDA,PH_EIDA,MOBILE_EIDA,"
						+ "EMAIL_EIDA,DOB_EIDA,PASSPORTNO_EIDA,PASSPORTISSDATE_EIDA,PASSPORTEXPDATE_EIDA,"
						+ "NATIONALITY_EIDA,VISANO_EIDA,VISAISSDATE_EIDA,VISAEXPDATE_EIDA,PREFESSION_EIDA,"
						+ "GENDER_EIDA,EMPLYR_NAME_EIDA";
				String sValues = "";
				String sEidano_eida = getTagValue(sOutput, "eidaNo");
				String sDOB_eida = getTagValue(sOutput, "dateOfBirth");
				logInfo("", "sDOB_eida 19/04/2016=====" + sDOB_eida);
				String sGender_eida = getTagValue(sOutput, "gender");
				String sVisaIssueDate_eida = getTagValue(sOutput, "issueDate");
				logInfo("", "sVisaIssueDate_eida======" + sVisaIssueDate_eida);
				String sVisaExpiryDate_eida = getTagValue(sOutput, "expiryDate");
				logInfo("", "sVisaExpiryDate_eida 19/04/2016===="
						+ sVisaExpiryDate_eida);
				String sMotherName_eida = getTagValue(sOutput, "motherName");
				String sName_eida = getTagValue(sOutput, "name");
				String sNationality_eida = getTagValue(sOutput, "nationality");
				String sPrefession = getTagValue(sOutput, "occupation");
				String sPassportNo_eida = getTagValue(sOutput, "passportNumber");
				String sPassportExpiryDate_eida = getTagValue(sOutput,
						"passportExpiryDate");
				logInfo("", "sPassportExpiryDate_eida ===="
						+ sPassportExpiryDate_eida);
				String sPrefix_eida = getTagValue(sOutput, "title");
				String sCorrpobox_eida = getTagValue(sOutput, "corrPoBox");
				String sCorrCountry_eida = getTagValue(sOutput, "corrCountry");
				String sCorrState_eida = getTagValue(sOutput, "corrState");
				String sCorrCity_eida = getTagValue(sOutput, "corrCity");
				String sCountryofResident_eida = getTagValue(sOutput,
						"countryofResident");
				String sCountryofPerm_eida = getTagValue(sOutput,
						"countryofPerm");
				String sTelephoneResidence_eida = getTagValue(sOutput,
						"telephoneResidence");
				String sTelMobile_eida = getTagValue(sOutput, "telMobile");
				String sEmail_eida = getTagValue(sOutput, "email");
				String sPassportIssueDate_eida = getTagValue(sOutput,
						"passportIssueDate");
				logInfo("", "sPassportIssueDate_eida 19/04/2016===="
						+ sPassportIssueDate_eida);
				String sVisaNo_eida = getTagValue(sOutput, "residentNo");
				String sEmployerName_eida = getTagValue(sOutput, "employerName");
				sValues = "'" + sWorkitemId + "','" + sPrefix_eida + "','"
						+ sName_eida + "','" + sMotherName_eida + "','"
						+ sEidano_eida + "','" + sCorrpobox_eida + "','"
						+ sCorrCountry_eida + "','" + sCorrState_eida + "','"
						+ sCorrCity_eida + "','" + sCountryofResident_eida
						+ "','" + sCountryofPerm_eida + "','"
						+ sTelephoneResidence_eida + "','" + sTelMobile_eida
						+ "','" + sEmail_eida + "'," + "to_date('" + sDOB_eida
						+ "','dd/mm/yyyy'),'" + sPassportNo_eida + "',"
						+ "to_date('" + sPassportIssueDate_eida
						+ "','dd/mm/yyyy')," + "to_date('"
						+ sPassportExpiryDate_eida + "','dd/mm/yyyy'),'"
						+ sNationality_eida + "','" + sVisaNo_eida + "',"
						+ "to_date('" + sVisaIssueDate_eida
						+ "','dd/mm/yyyy')," + "to_date('"
						+ sVisaExpiryDate_eida + "','dd/mm/yyyy'),'"
						+ sPrefession + "','" + sGender_eida + "','"
						+ sEmployerName_eida + "'";
				logInfo("", "Columns ===" + sColumn);
				logInfo("", "values====" + sValues);
				String sQcount = "SELECT COUNT(1) AS COUNT FROM USR_0_EIDA_TABLE WHERE WI_NAME ='"
						+ sWorkitemId + "'";
				logInfo("", "sQcount====" + sQcount);
				List<List<String>> sOcount = formObject.getDataFromDB(sQcount);
				logInfo("", "sOcount=======" + sOcount);
				String sCount = sOcount.get(0).get(0);
				logInfo("", "sCount====" + sCount);
				String maincode = "";
				int souput11 = -1;
				if (Integer.parseInt(sCount) == 0) {
					int sOutput1 = insertDataIntoDB(sTable, sColumn, sValues);
					logInfo("",
							"Values inserted in table usr_0_eida_table ---sOutput1---"
									+ sOutput1);
					logInfo("",
							"Insert call is successful if maincode is 0.....maincode is ===="
									+ maincode);
				} else {
					String sQ1 = "update " + sTable + " set PREFIX_EIDA='"
							+ sPrefix_eida + "',NAME_EIDA='" + sName_eida
							+ "',MOTHERNAME_EIDA='" + sMotherName_eida
							+ "',EIDANO_EIDA='" + sEidano_eida
							+ "',ADDRESS_EIDA='" + sCorrpobox_eida
							+ "',CNTRY_EIDA='" + sCorrCountry_eida
							+ "',STATE_EIDA='" + sCorrState_eida
							+ "',CITY_EIDA='" + sCorrCity_eida
							+ "',RESIDENT_EIDA='" + sCountryofResident_eida
							+ "',PER_CNTRY_EIDA='" + sCountryofPerm_eida
							+ "',PH_EIDA='" + sTelephoneResidence_eida
							+ "',EMAIL_EIDA='" + sEmail_eida
							+ "',DOB_EIDA=to_date('" + sDOB_eida
							+ "','dd/mm/yyyy'),PASSPORTNO_EIDA='"
							+ sPassportNo_eida
							+ "',PASSPORTISSDATE_EIDA=to_date('"
							+ sPassportIssueDate_eida + "','dd/mm/yyyy'),"
							+ "PASSPORTEXPDATE_EIDA=to_date('"
							+ sPassportExpiryDate_eida + "','dd/mm/yyyy'),"
							+ "NATIONALITY_EIDA='" + sNationality_eida
							+ "',VISANO_EIDA='" + sVisaNo_eida + "',"
							+ "VISAISSDATE_EIDA=to_date('"
							+ sVisaIssueDate_eida + "','dd/mm/yyyy'),"
							+ "VISAEXPDATE_EIDA=to_date('"
							+ sVisaExpiryDate_eida + "','dd/mm/yyyy'),"
							+ "PREFESSION_EIDA='" + sPrefession
							+ "',GENDER_EIDA='" + sGender_eida
							+ "',EMPLYR_NAME_EIDA='" + sEmployerName_eida + "'"
							+ ",MOBILE_EIDA ='" + sTelMobile_eida + "'"
							+ "where wi_name='" + sWorkitemId + "'";
					souput11 = formObject.saveDataInDB(sQ1);
					logInfo("", "status-----" + sQ1);
					logInfo("", " boolean souput11 for update query is======"
							+ souput11);
					maincode = "1";
				}
				if (souput11 == 0) {
					logInfo("", "maincode and soutput11 respectively is "
							+ maincode + souput11);
					formObject.setValue(CHECKBOX_SELECTALL_EIDA, "true");
					formObject.setValue(CHECKBOX_SELECTALL_FCR, "false");
					formObject.setValue(CHECKBOX_SELECTALL_MANUAL, "false");
					logInfo("",
							"111111 69 24 46 "
									+ formObject.getValue(
											CHECKBOX_SELECTALL_EIDA).toString()
									+ formObject.getValue(
											CHECKBOX_SELECTALL_FCR).toString()
									+ formObject.getValue(
											CHECKBOX_SELECTALL_MANUAL)
											.toString());
					manageEIDACheckBoxes();
					manageFCRCheckBoxes();
					manageManualCheckBoxes();
					logInfo("",
							"check 69 is set to true and called manageEIDACheckBoxes manageFCRCheckBoxes"
									+ " manageManualCheckBoxes function");
					formObject.addItemInCombo(EIDA_PREFIX, sPrefix_eida);
					formObject.setValue(EIDA_PREFIX, sPrefix_eida);
					formObject.setValue(EIDA_NAME, sName_eida);
					formObject.setValue(EIDA_MOTHERNAME, sMotherName_eida);
					formObject.setValue(EIDA_EIDANO, sEidano_eida);
					formObject.setValue(EIDA_ADDRESS, sCorrpobox_eida);
					formObject.addItemInCombo(EIDA_CNTRY, sCorrCountry_eida);
					formObject.setValue(EIDA_CNTRY, sCorrCountry_eida);
					formObject.addItemInCombo(EIDA_STATE, sCorrState_eida);
					formObject.setValue(EIDA_STATE, sCorrState_eida);
					formObject.addItemInCombo(EIDA_CITY, sCorrCity_eida);
					formObject.setValue(EIDA_CITY, sCorrCity_eida);
					formObject.addItemInCombo(EIDA_RESIDENT,
							sCountryofResident_eida);
					formObject.setValue(EIDA_RESIDENT, sCountryofResident_eida);
					formObject.addItemInCombo(EIDA_PER_CNTRY,
							sCountryofPerm_eida);
					formObject.setValue(EIDA_PER_CNTRY, sCountryofPerm_eida);
					formObject.setValue(EIDA_PH, sTelephoneResidence_eida);
					formObject.setValue(EIDA_MOBILE, sTelMobile_eida);
					formObject.setValue(EIDA_EMAIL, sEmail_eida);
					formObject.setValue(EIDA_DOB, sDOB_eida);
					formObject.setValue(EIDA_PASSPORTNO, sPassportNo_eida);
					formObject.setValue(EIDA_PASSPORTISSDATE,
							sPassportIssueDate_eida);
					// formObject.setValue(EIDA_PASSPORTEXPDATE,setDateValue1(sPassportExpiryDate_eida));
					formObject.setValue(EIDA_PASSPORTEXPDATE,
							sPassportExpiryDate_eida);
					formObject.addItemInCombo(EIDA_NATIONALITY,
							sNationality_eida);
					formObject.setValue(EIDA_NATIONALITY, sNationality_eida);
					formObject.setValue(EIDA_VISANO, sVisaNo_eida);
					formObject.setValue(EIDA_VISAISSDATE, sVisaIssueDate_eida);
					formObject.setValue(EIDA_VISAEXPDATE, sVisaExpiryDate_eida);
					formObject.setValue(EIDA_PROFESSION, sPrefession);
					formObject.setValue(EIDA_GENDER, sGender_eida);
					formObject.setValue(EIDA_EMPLYR_NAME, sEmployerName_eida);
				}
			} else {
				sendMessageValuesList("", "Error in Fetching Data");
				logInfo("",
						"returncode is not 0......in else block......setEIDAListInputXML");
			}
		} catch (Exception e) {
			logError("", e);
		}
	}

	protected void executeFetch(String data) {

		if (formObject.getValue(CHANNEL_TYPE).toString()
				.equalsIgnoreCase("Alternate")
				&& formObject.getValue(DATA_ENTRY_MODE).toString()
						.equalsIgnoreCase("Detail Data Entry")) {

			formObject.clearCombo(DFC_STATIONERY_AVAIL);

			int iRows = getGridCount(PRODUCT_QUEUE);
			logInfo("", "iRows---" + iRows + "\n");
			if (iRows == 0) {
				sendMessageValuesList(PRODUCT_QUEUE,
						"Please add one product detail in the grid");
				return;
			}

			int iRows1 = getGridCount(QUEUE_DC);
			logInfo("", "iRows1---" + iRows1 + "\n");

			if (iRows1 == 0) {
				sendMessageValuesList(QUEUE_DC,
						"Please add debit card summary in the grid");
				return;
			}

			String sCustCat = "";
			String sCust_code = "";
			if (formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("Category Change Only")
					|| formObject
							.getValue(REQUEST_TYPE)
							.toString()
							.equalsIgnoreCase(
									"New Account with Category Change")) {

				String sQuery = "select NEW_CUST_SEGMENT from ext_ao where wi_name ='"
						+ sWorkitemId + "'";
				logInfo("sQuery", "sQuery : " + sQuery);
				List<List<String>> sOut = formObject.getDataFromDB(sQuery);
				logInfo("sQuery", "sOut : " + sOut);
				if (sOut != null && sOut.size() > 0) {
					sCustCat = sOut.get(0).get(0);
				} else {
					sCustCat = formObject.getValue(NEW_CUST_SEGMENT).toString();
				}
				// sCustCat=formObject.getValue(PD_CUSTSEGMENT).toString();

				//
			} else if (formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("New Account")) {
				String sQuery = "select cust_seg from usr_0_cust_txn where wi_name ='"
						+ sWorkitemId + "' and cust_sno = '1'";
				logInfo("sQuery", "sQuery : " + sQuery);
				List<List<String>> sOut = formObject.getDataFromDB(sQuery);
				logInfo("sQuery", "sOut : " + sOut);
				if (sOut != null && sOut.size() > 0) {
					sCustCat = sOut.get(0).get(0);
				} else {
					sCustCat = formObject.getValue(PD_CUSTSEGMENT).toString();
				}
				//
			}
			String sQuery1 = "SELECT UNIQUE_ID FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT='"
					+ sCustCat + "'";
			logInfo("", "sQuery1...........======" + sQuery1);
			List<List<String>> sOutput1 = formObject.getDataFromDB(sQuery1);
			logInfo("", "sOuptut1 is=====" + sOutput1);
			if (sOutput1 != null && sOutput1.size() > 0) {
				sCust_code = sOutput1.get(0).get(0);
			}
			logInfo("", "sCust_code from select query is " + sCust_code);

			if (iRows > 1) {
				sendMessageValuesList(PRODUCT_QUEUE,
						"There should be only one product in the grid");
				return;
			}
			if (iRows == 1) {
				String sProd = "";
				String sProd_gp_type = "";
				String sQuery = "select prod_group,REP_GROUP_TYPE from debit_card_rep where wi_name ='"
						+ sWorkitemId + "' " + "and rownum=1";
				logInfo("", "sQuery...........======" + sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				logInfo("", "sOuptut is=====" + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					sProd = sOutput.get(0).get(0);
					sProd_gp_type = sOutput.get(0).get(1);
				}

				logInfo("", "sProd from select query is " + sProd);
				logInfo("", "sProd_gp_type from select query is ...."
						+ sProd_gp_type);
				if (sProd_gp_type.equalsIgnoreCase("Islamic")) {
					sProd_gp_type = "ISM";
				} else if (sProd_gp_type.equalsIgnoreCase("Etihad")) {
					sProd_gp_type = "ETD";
				} else {
					sProd_gp_type = "CVNONS";
				}

				if (sProd == null || "".equalsIgnoreCase(sProd)) {
					sendMessageValuesList("", "Product Group is null");
					logInfo("", "sProd is ----" + sProd);
					return;
				} else if (sProd != null && !"".equalsIgnoreCase(sProd)) {
					logInfo("",
							"calling setKioskListInputXML with sProd   ----"
									+ sProd + sProd_gp_type);
					setKioskListInputXML(sProd_gp_type, sCust_code);
					logInfo("", "sProd ddddddd sProd &&&&& sProd_gp_type----"
							+ sProd + sProd_gp_type);
					logInfo("", "yes and no values respectively====="
							+ formObject.getValue(RD_INST_DEL).toString()
							+ formObject.getValue(RD_INST_DEL).toString());
				}
			}
		}
	}

	public void setKioskListInputXML(String sCardProdGroup, String sCustCat) {
		logInfo("", "In setKioskListInputXML---");

		try {
			logInfo("", "In setKioskListInputXML---try");
			String sOutput = fetchKioskListInputXML(sCardProdGroup, sCustCat);
			String sReturnCode = getTagValues(sOutput, "returnCode");
			logInfo("", "sReturnCode-----" + sReturnCode);
			String[] sKioskIdd = getTagValues(sOutput, "KioskId").split(",");
			String[] sKioskDesc = getTagValues(sOutput, "KioskDescription")
					.split(",");
			// int cKioskIdd=sKioskIdd.leth-1;
			int cKioskIdd = sKioskIdd.length;
			int cKioskDesc = sKioskDesc.length;
			logInfo("", "cKioskIdd.leth() updated......." + cKioskIdd);
			logInfo("", "sKioskDesc.leth()15/05/2016......." + cKioskDesc);
			boolean sTag = sOutput.contains("KioskId");

			if (sReturnCode.equalsIgnoreCase("0")) {
				FETCH_INFO_flag = true;
				if (sTag) {
					if (cKioskIdd != 0) {
						logInfo("",
								"In setKioskListInputXML---try -----cKioskIdd is not 0");

						formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE,
								FALSE);
						formObject.clearCombo(DFC_STATIONERY_AVAIL);// 2204/2016
						for (int i = 0; i < cKioskIdd; i++) {

							logInfo("", "sKioskDesc updated " + i + " "
									+ (sKioskDesc[i]));
							formObject.addItemInCombo(DFC_STATIONERY_AVAIL,
									sKioskDesc[i]);

						}

					} else if (cKioskIdd == 0) {
						logInfo("", "KioskId is null.");
						int sOut1 = updateDataInDB(sExtTable, INSTANT_DEL_NO,
								"'true'", "WI_NAME ='" + sWorkitemId + "'");
						logInfo("", "Update query output sout-----" + sOut1);
						int sOutt1 = updateDataInDB(sExtTable, INSTANT_DEL_YES,
								"'false'", "WI_NAME ='" + sWorkitemId + "'");
						logInfo("", "Update query output sout-----" + sOutt1);
						/*
						 * formObject.setValue(INSTANT_DEL_YES, "False");
						 * formObject.setValue(INSTANT_DEL_NO, "True");
						 */

						formObject.setValue(RD_INST_DEL, "Yes");

						logInfo("",
								"DFC_STATIONERY_AVAIL----------------..................");

						formObject.setValue(DFC_STATIONERY_AVAIL, "");
						// formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE,
						// TR);
						logInfo("",
								"DFC_STATIONERY_AVAIL isSELECT WHEN CkIOSKIDD==0........");
						formObject
								.setStyle(DFC_STATIONERY_AVAIL, DISABLE, TRUE);
						// formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE,
						// TRUE);

						sendMessageValuesList("",
								"No Kiosk found to print the Debit Card");
						logInfo("",
								"No Kiosk found to print the Debit Card Popup Done.");
						return;
					}
				} else {
					formObject.setValue(DFC_STATIONERY_AVAIL, "");
					formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE, TRUE);
					sendMessageValuesList("",
							"No Kiosk found to print the Debit Card");
					logInfo("",
							"No Kiosk found to print the Debit Card Popup Done11111111.");
					return;
				}
			} else {
				formObject.setValue(DFC_STATIONERY_AVAIL, "");
				formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE, TRUE);
				sendMessageValuesList("", "Error in Fetching Data");
				logInfo("", "returncode is not 0......in else block......");
				return;
			}

		} catch (Exception e) {
			logError("", e);
		}

	}

	public String fetchKioskListInputXML(String sCardProdGroup, String sCustCat) {
		String sQuery = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String sOutputXML = getKioskListInputXML(sCardProdGroup, sCustCat,
				sOutput.get(0).get(0).toString(), "TP906079");
		logInfo("", "fetchKioskListInputXML----" + sOutputXML);
		sOutputXML = socket.connectToSocket(sOutputXML);
		logInfo("", "fetchKioskListInputXML---- after ExecuteWebserviceAll"
				+ sOutput);
		return sOutputXML;
	}

	public String getKioskListInputXML(String sCardProdGroup, String sCustCat,
			String sSeqNo, String sUserName) {
		String sInputXML = "<?xml version=\"1.0\"?>"
				+ "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+
				// "<Calltype>InstantDebitCard</Calltype>" +
				"<Calltype>DFCListFetch</Calltype>" + "<Customer>"
				+ "<CardProductGroup>" + sCardProdGroup + "</CardProductGroup>"
				+ "<CustomerCategory>" + sCustCat + "</CustomerCategory>"
				+ "<REF_NO>" + sSeqNo + "</REF_NO>" + "<USER>" + sUserName
				+ "</USER>" + "<WiName>" + sWorkitemId + "</WiName>"
				+ "</Customer>" + "</APWebService_Input>";
		logInfo("", "getKioskListInputXML------sInputXML====" + sInputXML);
		return sInputXML;
	}

	protected void loadCombo(String query, String controlName) {
		try {
			log.info("query=" + query);
			List<List<String>> list = formObject.getDataFromDB(query);
			if (list != null && !list.isEmpty()) {
				for (int i = 0; i < list.size(); i++) {
					log.info("ControlName: " + controlName + ": data="
							+ list.get(i).get(0));
					formObject.addItemInCombo(controlName, list.get(i).get(0)
							.toString());
				}
			}
		} catch (Exception e) {
			log.error("Exception in  loadCombo");
		}

	}

	public void setProductCurrencyComboLoadDisable1(String sProdCode) {
		try {
			logInfo("setProductCurrencyComboLoadDisable1", "INSIDE");
			String sQuery = "";
			String sAccClass = formObject.getValue(ACC_HOME_BRANCH).toString();
			logInfo("setProductCurrencyComboLoadDisable1", "sAccClass...."
					+ sAccClass);
			if (sActivityName.equalsIgnoreCase("CPD Maker")) {
				sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE from USR_0_PRODUCT_OFFERED_CPD B,"
						+ "USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c where a.product_code= b.product_code "
						+ "and UPPER(b.WI_NAME) = UPPER('"
						+ sWorkitemId
						+ "') and c.HOME_BRANCH='"
						+ sAccClass
						+ "' "
						+ "and b.product_code='" + sProdCode + "' order by 1";
				log.info("sQuery else ..." + sQuery);
			} else {
				sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE from USR_0_PRODUCT_OFFERED B,"
						+ "USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c where a.product_code= b.product_code "
						+ "and UPPER(b.WI_NAME) = UPPER('"
						+ sWorkitemId
						+ "') and c.HOME_BRANCH='"
						+ sAccClass
						+ "' "
						+ "and b.product_code='" + sProdCode + "' order by 1";
				logInfo("setProductCurrencyComboLoadDisable1",
						"sQuery else ..." + sQuery);
			}
			List<List<String>> list = formObject.getDataFromDB(sQuery);
			logInfo("setProductCurrencyComboLoadDisable1", "sOutput..." + list);
			// int iTotalRetrived = Integer.parseInt(list.get(0).get(0));
			// logInfo("setProductCurrencyComboLoadDisable1","iTotalRetrived...."+iTotalRetrived);
			// formObject.getTableCellValue(PRODUCT_QUEUE, 1, 3);
			loadCombo(sQuery, "table94_currency");
		} catch (Exception e) {
			logError("setProductCurrencyComboLoadDisable1", e);
		}
	}

	public void loadIntegrationDataOnForm() { // LoadIntegrationDataOnForm
		logInfo("loadIntegrationDataOnForm", "INSIDE");
		try {
			String sCID = "";
			String sTableCID = "";
			int iRows = getGridCount(ACC_RELATION);
			String sQuery = "SELECT SNO,CID_ACCNO FROM USR_0_INTEGRATION_CALL_VALUES "
					+ "WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' AND CALLTYPE LIKE 'CUSTOMER_CREATION%' "
					+ "ORDER BY TO_NUMBER(SNO)";
			logInfo("loadIntegrationDataOnForm", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("loadIntegrationDataOnForm", "sOutput: " + sOutput);
			for (int i = 0; i < iRows; i++) {
				sCID = formObject.getTableCellValue(ACC_RELATION, i, 2);
				if (sCID.isEmpty()) {
					if (sOutput != null && sOutput.size() > 0) {
						if (!sOutput.get(i).get(1).isEmpty()) {
							formObject.setTableCellValue(ACC_RELATION, i, 2,
									sOutput.get(i).get(1));
						}
					}
				}
			}
			sQuery = "SELECT SNO,CID_ACCNO,ACC_STATUS,IBAN_NO,ACC_OPEN_DATE FROM USR_0_INTEGRATION_CALL_VALUES "
					+ "WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' AND CALLTYPE LIKE 'ACCOUNT_CREATION%' "
					+ "ORDER BY TO_NUMBER(SNO)";
			List<List<String>> sOutput2 = formObject.getDataFromDB(sQuery);
			logInfo("loadIntegrationDataOnForm", "sQuery: " + sQuery);
			logInfo("loadIntegrationDataOnForm", "sOutput2: " + sOutput2);
			int iTotalCount = sOutput2.size();
			if (sOutput2 != null && sOutput2.size() > 0) {
				for (int i = 0; i < iTotalCount; i++) {
					sTableCID = sOutput2.get(i).get(0);
					logInfo("loadIntegrationDataOnForm", "sTableCID: "
							+ sTableCID);
					for (int j = 0; j < iTotalCount; j++) {
						sCID = formObject.getTableCellValue(PRODUCT_QUEUE, j,
								14);
						logInfo("loadIntegrationDataOnForm", "sCID: " + sCID);
						if (sCID.equalsIgnoreCase(sTableCID)) {
							formObject.setTableCellValue(PRODUCT_QUEUE, j, 4,
									sOutput2.get(i).get(1));
							formObject.setTableCellValue(PRODUCT_QUEUE, j, 0,
									sOutput2.get(i).get(2));
							formObject.setTableCellValue(PRODUCT_QUEUE, j, 15,
									sOutput2.get(i).get(3));
							formObject.setTableCellValue(PRODUCT_QUEUE, j, 18,
									sOutput2.get(i).get(4));
							break;
						}
					}
				}
			}
			sQuery = "SELECT SNO,ACC_STATUS FROM USR_0_INTEGRATION_CALL_VALUES WHERE WI_NAME = '"
					+ sWorkitemId
					+ "'"
					+ " AND CALLTYPE LIKE 'ACCOUNT_UPDATE%' ORDER BY TO_NUMBER(SNO)";
			sOutput2 = formObject.getDataFromDB(sQuery);
			logInfo("loadIntegrationDataOnForm", "sQuery: " + sQuery);
			logInfo("loadIntegrationDataOnForm", "sOutput2: " + sOutput2);
			iTotalCount = sOutput2.size();
			if (sOutput2 != null && sOutput2.size() > 0) {
				for (int i = 0; i < iTotalCount; i++) {
					sTableCID = sOutput2.get(i).get(0);
					logInfo("loadIntegrationDataOnForm", "sTableCID: "
							+ sTableCID);
					for (int j = 0; j < iTotalCount; j++) {
						sCID = formObject.getTableCellValue(PRODUCT_QUEUE, j,
								14); // cid ==14
						if (sCID.equalsIgnoreCase(sTableCID)) {
							formObject.setTableCellValue(PRODUCT_QUEUE, j, 15,
									sOutput2.get(j).get(1));
							break;
						}
					}
				}
			}
			if (!sActivityName
					.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO_CHECK)) {
				sQuery = "SELECT SNO,CID_ACCNO FROM USR_0_INTEGRATION_CALL_VALUES WHERE WI_NAME = '"
						+ sWorkitemId
						+ "'"
						+ " AND CALLTYPE LIKE 'DEBITCARD%' AND PROD_CODE='New' ORDER BY TO_NUMBER(SNO)";
				List<List<String>> sOutput3 = formObject.getDataFromDB(sQuery);
				logInfo("loadIntegrationDataOnForm", "sQuery: " + sQuery);
				logInfo("loadIntegrationDataOnForm", "sOutput3: " + sOutput3);
				int infoCount = getGridCount(QUEUE_DC);
				for (int i = 0; i < infoCount; i++) {
					if (sOutput3 != null && sOutput3.size() > 0) {
						if (formObject.getTableCellValue(QUEUE_DC, i, 4)
								.equalsIgnoreCase("New")) {
							formObject.setTableCellValue(QUEUE_DC, i, 6,
									sOutput3.get(i).get(1));// 6
						}
					}
				}
				sQuery = "SELECT SNO,CID_ACCNO FROM USR_0_INTEGRATION_CALL_VALUES WHERE"
						+ " WI_NAME = '"
						+ sWorkitemId
						+ "' AND CALLTYPE LIKE 'DEBITCARD%' AND PROD_CODE='Link' "
						+ "ORDER BY TO_NUMBER(SNO)";
				List<List<String>> sOutput4 = formObject.getDataFromDB(sQuery);
				logInfo("loadIntegrationDataOnForm", "sQuery: " + sQuery);
				logInfo("loadIntegrationDataOnForm", "sOutput4: " + sOutput4);
				int totalrecCount = sOutput4.size();
				for (int i = 0; i < infoCount; i++) {
					if (sOutput4 != null && sOutput4.size() > 0) {
						if (formObject.getTableCellValue(QUEUE_DC, i, 4)
								.equalsIgnoreCase("Link")) {
							formObject.setTableCellValue(QUEUE_DC, i, 6,
									sOutput4.get(i).get(1));// 6
						}
					}
				}
			}
		} catch (Exception e) {
			logError("loadIntegrationDataOnForm", e);
		}
		logInfo("outside loadIntegrationDataOnForm", "");
	}

	protected void loadECBChqBookValidation() {
		logInfo("Inside loadECBChqBookValidation", "");
		try {
			formObject.setStyle(CHQ_ELIGIBILITY, DISABLE, TRUE);
			String eligibility = getChqBookEligibility();
			if (eligibility != null && !(eligibility.equals(""))) {
				formObject.setValue(CHQ_ELIGIBILITY, eligibility);
				if (eligibility.equalsIgnoreCase("None")) {
					formObject.setValue(CRO_DEC, "Return to Originator");
					formObject.setValue(CRO_REJ_REASON, "Bounced cheques > 3");
					formObject.setValue(CRO_REMARKS,
							"Bounced cheques are more than 3");
				}
				formObject.clearTable(ECBValidationGrid);
				String query = "SELECT EIDANO, NOCHQBOUNCE, LATESTCHQBOUNCEDATE, ELIGIBLECHQLEAVES "
						+ "FROM (SELECT DISTINCT(CUSTSNO),EIDANO,NOCHQBOUNCE,TO_CHAR(TO_DATE(LATESTCHQBOUNCEDATE,"
						+ "'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY') AS LATESTCHQBOUNCEDATE,ELIGIBLECHQLEAVES "
						+ "FROM "
						+ chqbookValidationTable
						+ " WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' "
						+ "and ECB_EXCLUSION='Include')";
				loadListView(formObject.getDataFromDB(query), "",
						ECBValidationGrid);// olumns in listview
				query = "UPDATE " + sExtTable
						+ " set ECB_REFRESH_FLAG='1' WHERE WI_NAME ='"
						+ sWorkitemId + "'";
				formObject.saveDataInDB(query);
			}
		} catch (Exception e) {
			logError("Exception in loadECBChqBookValidation ", e);
		}
		logInfo("outside loadECBChqBookValidation", "");
	}

	public boolean validateMobileNo(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID) {
		logInfo("validateMobileNo", "INSIDE");
		try {
			if (flag_mobile) {
				if ("United Arab Emirates".equalsIgnoreCase(checkCountry())) {
					// sMessageID = CR0002;
					sMessageID = "Mobile number is not of 12 digits";
					if (formObject.getValue(sFCRCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sFCRDataControl).toString()
								.length() != 12) {
							sendMessageValuesList("", sMessageID);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return true;
						}
					} else if (formObject.getValue(sEIDACBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sEIDADataControl).toString()
								.length() != 12) {
							sendMessageValuesList("", sMessageID);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return true;
						}
					} else if (formObject.getValue(sManualCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sManualDataControl).toString()
								.length() != 12) {
							sendMessageValuesList("", sMessageID);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return true;
						}
					}
				} else {
					if (formObject.getValue(sFCRCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sFCRDataControl).toString()
								.length() < 10) {
							sendMessageValuesList(sFCRDataControl, CR0002);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return false;
						}
					} else if (formObject.getValue(sEIDACBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sEIDADataControl).toString()
								.length() < 10) {
							sendMessageValuesList(sEIDADataControl, CR0002);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return false;
						}
					} else if (formObject.getValue(sManualCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sManualDataControl).toString()
								.length() < 10) {
							sendMessageValuesList(sManualDataControl, CR0002);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							return false;
						}
					}
				}
			}
			flag_mobile = false;
		} catch (Exception e) {
			logError("validateMobileNo ", e);
		} finally {
			logInfo("Outside validateMobileNo ", "  ");
		}
		return true;
	}

	/*
	 * public void validateMobileNo2() { logInfo("validateMobileNo2","INSIDE");
	 * try{ if(flag_insert_audit = true){ insertMobileChangeAudit();
	 * flag_insert_audit = false; } flag_mobile=false; mobileConfirmFlag = true;
	 * } catch(Exception e) { logError("validateMobileNo2",e); } }
	 */

	public Boolean validateEidaNo(String sFCRCBControl, String sEIDACBControl,
			String sManualCBControl, String sFCRDataControl,
			String sEIDADataControl, String sManualDataControl,
			String sMessageID) {
		logInfo("Inside validateEidaNo ", "  ");
		try {
			if (formObject.getValue(sFCRCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!(formObject.getValue(sFCRDataControl).toString().length() == 15)) {
					sendMessageValuesList(sFCRDataControl, sMessageID);
					return false;
				}
			} else if (formObject.getValue(sEIDACBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!(formObject.getValue(sEIDADataControl).toString().length() == 15)) {
					sendMessageValuesList(sEIDADataControl, sMessageID);
					return false;
				}
			} else if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!(formObject.getValue(sManualDataControl).toString()
						.length() == 15)) {
					sendMessageValuesList(sManualDataControl, sMessageID);
					return false;
				}
			}
		} catch (Exception e) {
			logError("Exception in validateEidaNo ", e);
		} finally {
			logInfo("Outside validateEidaNo ", "  ");
		}
		return true;
	}

	public Boolean validateDOBControl(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl) {
		logInfo("Inside validateDOBControl ", "  ");
		try {
			if (formObject.getValue(sFCRCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!validateDOB(sFCRDataControl)) {
					return false;
				}
			} else if (formObject.getValue(sEIDACBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!validateDOB(sEIDADataControl)) {
					return false;
				}
			} else if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (!validateDOB(sManualDataControl)) {
					return false;
				}
			}
		} catch (Exception e) {
			logError("Exception in validateDOBControl ", e);
		} finally {
			logInfo("Outside validateDOBControl ", "  ");
		}
		return true;
	}

	public boolean validationTab() { // validationOnChecker() in previous
										// commons.java
		logInfo("Inside validationTab", "  ");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sQuery = "select final_eida_no, final_dob , final_email , final_mobile_no, visa_status "
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' AND CUST_SNO = '" + sCustNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String sEida = sOutput.get(0).get(0);
			String sEmail = sOutput.get(0).get(2);
			String visaStatus = sOutput.get(0).get(4);
			if (!sEida.equalsIgnoreCase("")) {
				if (visaStatus.equalsIgnoreCase("Under Processing")
						&& sActivityName.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)) {

				} else {
					if (!ValidateComparisonDataCombo(CHECKBOX_EIDANO_FCR,
							CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
							FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, CA0171,
							"Mandatory", "Eida NO")) {
						return false;
					}
				}
				if (!validateEidaNo(CHECKBOX_EIDANO_FCR, CHECKBOX_EIDANO_EIDA,
						CHECKBOX_EIDANO_MANUAL, FCR_EIDANO, EIDA_EIDANO,
						MANUAL_EIDANO, CA0171)) {
					return false;
				}
			}
			if (!ValidateComparisonDataComboMob(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE, CA0126,
					"Mandatory", "Mobile No")) {
				return false;
			}
			if (!validateMobileNo(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE, CA0126)) {
				return false;
			}
			if (!sEmail.equalsIgnoreCase("")) {
				if (!ValidateComparisonDataCombo(CHECKBOX_EMAIL_FCR,
						CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
						EIDA_EMAIL, MANUAL_EMAIL, CA054, "Mandatory", "Email")) {
					return false;
				}
			}
			if (!ValidateComparisonDataCombo(CHECKBOX_DOB_FCR,
					CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB,
					MANUAL_DOB, "Please select Manual checkox for",
					"Mandatory", "Dob")) {
				return false;
			}
			if (!validateDOBControl(CHECKBOX_DOB_FCR, CHECKBOX_DOB_EIDA,
					CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB, MANUAL_DOB)) {
				return false;
			}
		} catch (Exception e) {
			logError("Exception in validationTab ", e);
		} finally {
			logInfo("Outside validationTab", "  ");
		}
		return true;
	}

	public boolean reKeyLogic() {
		logInfo("reKeyLogic", "INSIDE");
		String sQuery = "";
		String sOutput = "";
		String sEida = "";
		String sEmail = "";
		String sMob = "";
		String sAlert = "";
		String sDob = "";
		String sFinalEIDANo = "";
		flagKey = "false";

		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			String group = "";
			if (ACTIVITY_QDE_ACCOUNT_INFO_CHECK.equalsIgnoreCase(sActivityName)
					|| ACTIVITY_DDE_ACCOUNT_INFO_CHECK
							.equalsIgnoreCase(sActivityName))
				group = "CRO";
			else
				group = "CPD";
			sQuery = "select EIDA_CHECK ,EMAIL_CHECK,MOB_CHECK,to_char(DOB_CHECK,'DD/MM/YYYY') as DOB_CHECK ,"
					+ "IS_FCR_EIDANO,IS_EIDA_EIDANO,IS_MANUAL_EIDANO ,"
					+ "IS_FCR_MOBNO ,IS_EIDA_MOBNO ,IS_MANUAL_MOBNO ,IS_FCR_EMAIL ,IS_EIDA_EMAIL ,IS_MANUAL_EMAIL ,"
					+ "IS_FCR_DOB,IS_EIDA_DOB,IS_MANUAL_DOB ,KEY_FLAG ,ACTIVITY_NAME from usr_0_ao_rekey"
					+ " where wi_name='"
					+ sWorkitemId
					+ "' and CUST_SNO = '"
					+ sCustNo + "' and activity_name='" + group + "'";
			logInfo("reKeyLogic", "sQuery:" + sQuery);
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			if (output != null && output.size() > 0) {
				sEida = output.get(0).get(0);
				sEmail = output.get(0).get(1);
				sMob = output.get(0).get(2);
				sDob = output.get(0).get(3);
			}
			logInfo("reKeyLogic", "sEida: " + sEida + "sEmail: " + sEmail
					+ "sMob: " + sMob + "sDob: " + sDob);
			sFinalEIDANo = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO);
			String sFinalEmail = getFinalDataComparison(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL);
			String sFinalPhone = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE);
			String sFinalDOB = getFinalData(
					formObject.getValue(CHECKBOX_DOB_FCR).toString(),
					formObject.getValue(CHECKBOX_DOB_EIDA).toString(),
					formObject.getValue(CHECKBOX_DOB_MANUAL).toString(),
					getDateValue(FCR_DOB), getDateValue(EIDA_DOB),
					getDateValue(MANUAL_DOB));
			logInfo("reKeyLogic", "sFinalEIDANo: " + sFinalEIDANo
					+ "sFinalEmail: " + sFinalEmail + "sFinalPhone: " + ""
					+ sFinalPhone + "sFinalDOB: " + sFinalDOB);
			if (!sFinalEIDANo.equalsIgnoreCase(sEida)) {
				sAlert = sAlert + "EIDA No" + "\n";
				sendMessageValuesList("", sAlert);
				flagKey = "true";
			}
			if (!sFinalPhone.equalsIgnoreCase(sMob)) {
				sAlert = sAlert + "Mobile No" + "\n";
				sendMessageValuesList("", sAlert);
				flagKey = "true";

			}
			if (!sFinalEmail.equalsIgnoreCase(sEmail)) {
				sAlert = sAlert + "Email" + "\n";
				sendMessageValuesList("", sAlert);
				flagKey = "true";
			}
			if (!sFinalDOB.equalsIgnoreCase(sDob)) {
				sAlert = sAlert + "Dob" + "\n";
				sendMessageValuesList("", sAlert);
				flagKey = "true";
			}
			if (flagKey.equalsIgnoreCase("true")) {
				sendMessageValuesList("",
						"There is mismatch in following fields, "
								+ "Originator requires to correct them. \n "
								+ sAlert);
				return false;
			} else {
				updateRekeyCheck("true");
			}
		} catch (Exception e) {
			logError("Exception in reKeyLogic", e);
		} finally {
			logInfo("Outside reKeyLogic", "  ");
		}
		return true;
	}

	public void insertIntoReKeyTemp(String group) {
		logInfo("insertIntoReKeyTemp", "INSIDE- group: " + group);
		String sQuery = "";
		String sOutput = "";
		String sMainCode = "";
		String sCount = "";
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String sWhere = "SNO='" + sCustNo + "' AND WI_NAME='" + sWorkitemId
				+ "' and group_name='" + group + "'";
		int sOut = 0;
		try {
			sQuery = "SELECT COUNT(WI_NAME) FROM USR_0_AO_REKEY_TEMP WHERE wi_name ='"
					+ sWorkitemId
					+ "'"
					+ "and SNO='"
					+ sCustNo
					+ "' and "
					+ "group_name='" + group + "'";
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			logInfo("insertIntoReKeyTemp", "sQuery: " + sQuery);
			sCount = output.get(0).get(0);
			String sFinalEIDANo = formObject.getValue(MANUAL_EIDANO).toString();
			String sFinalEmail = formObject.getValue(MANUAL_EMAIL).toString();
			String sFinalPhone = formObject.getValue(MANUAL_MOBILE).toString();
			String sFinalDOB = formObject.getValue(MANUAL_DOB).toString();
			String EIDAFLAG = formObject.getValue(CHECKBOX_EIDANO_MANUAL)
					.toString();
			String EMAILFLAG = formObject.getValue(CHECKBOX_EMAIL_MANUAL)
					.toString();
			String PHONEFLAG = formObject.getValue(CHECKBOX_TELE_MOB_MANUAL)
					.toString();
			String DOBFLAG = formObject.getValue(CHECKBOX_DOB_MANUAL)
					.toString();
			String sColumn = "EIDA,MOBILE,EMAIL,DOB ,SNO,WI_NAME,GROUP_NAME,EIDAFLAG,EMAILFLAG,PHONEFLAG,DOBFLAG";
			String value1 = "'" + sFinalEIDANo + "'" + (char) 25 + "'"
					+ sFinalPhone + "'" + (char) 25 + "'" + sFinalEmail + "'"
					+ (char) 25 + "'" + sFinalDOB + "'" + (char) 25 + "'"
					+ sCustNo + "'" + (char) 25 + "'" + sWorkitemId + "'"
					+ (char) 25 + "'" + group + "'" + (char) 25 + "'"
					+ EIDAFLAG + "'" + (char) 25 + "'" + EMAILFLAG + "'"
					+ (char) 25 + "'" + PHONEFLAG + "'" + (char) 25 + "'"
					+ DOBFLAG + "'";
			logInfo("insertIntoReKeyTemp", "value1: " + value1 + "sCount: "
					+ sCount);
			if (Integer.parseInt(sCount) > 0) {
				updateDataInDB("USR_0_AO_REKEY_TEMP", sColumn, value1, sWhere);
				// formObject.saveDataInDB(sUpdateQuery);
			} else {
				if (!sCustNo.equalsIgnoreCase("")) {
					value1 = value1.replaceAll(Character.toString((char) 25),
							",");
					String sInsertQuery = "INSERT INTO USR_0_AO_REKEY_TEMP  ("
							+ sColumn + ") VALUES  (" + value1 + ")";
					logInfo("insertIntoReKeyTemp", "sInsertQuery: "
							+ sInsertQuery);
					formObject.saveDataInDB(sInsertQuery);
				}
			}
		} catch (Exception e) {
			logError("insertIntoReKeyTemp", e);
		}
	}

	public void updateRekeyCheck(String param) {
		logInfo("Inside updateRekeyCheck ", "param: " + param);
		try {
			String sUpdateQuery = "";
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sWhere = "WI_NAME='" + sWorkitemId + "' AND CUST_SNO='"
					+ sCustNo + "'";
			if (ACTIVITY_DDE_ACCOUNT_INFO_CHECK.equalsIgnoreCase(sActivityName)
					|| ACTIVITY_QDE_ACCOUNT_INFO_CHECK
							.equalsIgnoreCase(sActivityName)) {
				sUpdateQuery = "update USR_0_CUST_TXN set RE_KEY_CHECK = '"
						+ param + "' Where " + sWhere;
			} else if (ACTIVITY_CPD_CHECKER.equalsIgnoreCase(sActivityName)) {
				sUpdateQuery = "update USR_0_CUST_TXN set RE_KEY_CHECK_CPD = '"
						+ param + "' Where " + sWhere;
			}
			logInfo("updateRekeyCheck", "sUpdateQuery: " + sUpdateQuery
					+ "iSelectedRow: " + iSelectedRow + ",sCustNo: " + sCustNo);
			formObject.saveDataInDB(sUpdateQuery);
		} catch (Exception e) {
			logError("Exception in updateRekeyCheckDDEChecker", e);
		} finally {
			logInfo("Outside updateRekeyCheck ", "  ");
		}
	}

	public void updateFlag(String flag) {
		logInfo("updateFlag", "INSIDE");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			// String sWhere =
			// " where CUST_SNO='"+sCustNo+"' AND WI_NAME='"+sWorkitemId+"'";
			String sQuery = "update USR_0_AO_REKEY set KEY_FLAG = '" + flag
					+ "' where  WI_NAME='" + sWorkitemId + "' "
					+ "AND CUST_SNO ='" + sCustNo + "'"; // check whether
															// USR_0_AO_REKEY
															// table exists
			// sOutput =
			// ExecuteQuery_APUpdate("USR_0_AO_REKEY","KEY_FLAG"," "+flag+" ",sWhere);
			// will check once
			logInfo("updateFlag", sQuery);
			formObject.saveDataInDB(sQuery);
		} catch (Exception e) {
			logError("updateFlag", e);
		} finally {
			logInfo("updateFlag", "outside");
		}
	}

	protected boolean validateEligibilityField() {
		logInfo("Inside validateEligibilityField ", "  ");
		boolean flag = true;
		try {
			if (formObject.getValue(CHQ_ELIGIBILITY) == null
					|| formObject.getValue(CHQ_ELIGIBILITY).equals("")) {
				String query = "SELECT CHEQUEBOOK_ELIGIBILITY, ECB_REFRESH_FLAG FROM "
						+ sExternalTable
						+ " WHERE WI_NAME ='"
						+ sWorkitemId
						+ "'";
				List<List<String>> output = formObject.getDataFromDB(query);
				String eligibility = output.get(0).get(0);
				String refreshFlag = output.get(0).get(1);
				if (refreshFlag != null && !(refreshFlag.equals(""))
						&& refreshFlag.equals("1")) {
					flag = true;
				} else {
					if (eligibility != null && !(eligibility.equals(""))) {
						flag = false;
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in validateEligibilityField", e);
		} finally {
			logInfo("outside validateEligibilityField ", "  ");
		}
		return flag;
	}

	@SuppressWarnings("unchecked")
	public void setDDEModeCombos() {
		int iSelectedRow = Integer.parseInt((String) formObject
				.getValue(SELECTED_ROW_INDEX));
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String sQuery = "";

		if (sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)) {
			sQuery = "SELECT MANUAL_PREFIX, PREFIX, MANUAL_COUNTRY,MANUAL_RESIDENCE_COUNTRY, MANUAL_NATIONALITY, "
					+ "BIRTH_COUNTRY, NATIONALITY, CORR_CNTRY,"
					+ "PER_COUNTRY, RES_CNTRY, MANUAL_STATE, CORR_STATE, RES_STATE, PER_STATE, RM_NAME, RM_CODE, "
					+ "EMP_PROFESSION_NAME, PROFESSION_CODE,"
					+ "MANUAL_GENDER, GENDER, CUST_SEG, PROMO_CODE, IS_VVIP_CUSTOMER, EIDA_PRESENT, STAFF_FLAG, "
					+ "PURPOSE_TAX, IS_UAE_RESIDENT, DEALS_ARMAMENT,"
					+ "PEP, HAWALA, IS_HOLDING_GREENCARD, IS_US_TAX_LIABLE, IS_US_TIN_PRESENT, IS_US_CLASSIFICATION,"
					+ " IS_US_RESIDENT, IS_CUST_DETAIL_CHANGE,"
					+ "RELIGION, CUST_MARITAL_STATUS, PASS_TYPE, VISA_STATUS, ACC_RELATIONSHIP_PURPOSE, "
					+ "EMPLOYEE_TYPE, EMP_STATUS, SPECIAL_CATAGORY, "
					+ "EXELLENCY_CENTER, SIGN_STYLE, IS_CROSS_BORDER_PAYMENT, IS_WORK_DEFENCE_UAE, "
					+ "IS_WORK_DEFENCE_NONUAE, CORR_CITY, RES_CITY, PER_CITY,"
					+ "MANUAL_CITY, IS_POA_US_PERSON, IS_US_INDICIA_FOUND, DOCUMENT_TO_BE_COLLECTED,"
					+ " MANUAL_COUNTRY_RESIDENCE, RES_EIDA FROM USR_0_CUST_TXN"
					+ " WHERE WI_NAME = N'"
					+ WI_NAME
					+ "' AND CUST_SNO = N'"
					+ sCustNo + "'";
		} else if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)
				|| sActivityName.equalsIgnoreCase("DDE_Acc_INFO_CHK")) {
			sQuery = "SELECT MANUAL_PREFIX,PREFIX,MANUAL_COUNTRY,MANUAL_RESIDENCE_COUNTRY,MANUAL_NATIONALITY,"
					+ "BIRTH_COUNTRY,NATIONALITY,CORR_CNTRY,"
					+ "PER_COUNTRY,RES_CNTRY,MANUAL_STATE,CORR_STATE,RES_STATE,PER_STATE,RM_NAME,RM_CODE,"
					+ "EMP_PROFESSION_NAME,PROFESSION_CODE,"
					+ "BLACKLIST_DEC,BAD_CHECK_DEC,WORLD_CHECK_DEC,FINAL_ELIGIBILITY,MANUAL_GENDER,GENDER,"
					+ "CUST_SEG,PROMO_CODE,SYSTEM_DEC,BANK_DEC,"
					+ "IS_VVIP_CUSTOMER,EIDA_PRESENT,STAFF_FLAG,PURPOSE_TAX,IS_UAE_RESIDENT,DEALS_ARMAMENT,"
					+ "PEP,HAWALA,"
					+ "IS_HOLDING_GREENCARD,IS_US_TAX_LIABLE,IS_US_TIN_PRESENT,IS_US_CLASSIFICATION,"
					+ "IS_US_RESIDENT,IS_CUST_DETAIL_CHANGE,"
					+ "RELIGION,CUST_MARITAL_STATUS,PASS_TYPE,VISA_STATUS,ACC_RELATIONSHIP_PURPOSE,EMPLOYEE_TYPE,"
					+ "EMP_STATUS,SPECIAL_CATAGORY,"
					+ "EXELLENCY_CENTER,SIGN_STYLE,IS_CROSS_BORDER_PAYMENT,IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,"
					+ "CORR_CITY, RES_CITY, PER_CITY, "
					+ "MANUAL_CITY, IS_POA_US_PERSON,IS_US_INDICIA_FOUND,DOCUMENT_TO_BE_COLLECTED,"
					+ "MANUAL_COUNTRY_RESIDENCE,RES_EIDA "
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME = N'"
					+ WI_NAME
					+ "' AND CUST_SNO = N'" + sCustNo + "'";
		} else if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)) {
			sQuery = "SELECT MANUAL_PREFIX,PREFIX,MANUAL_COUNTRY,MANUAL_RESIDENCE_COUNTRY,"
					+ "MANUAL_NATIONALITY,BIRTH_COUNTRY,NATIONALITY,CORR_CNTRY,"
					+ "PER_COUNTRY,RES_CNTRY,MANUAL_STATE,CORR_STATE,RES_STATE, PER_STATE,"
					+ " RM_NAME, RM_CODE, EMP_PROFESSION_NAME, PROFESSION_CODE, MANUAL_GENDER,"
					+ "GENDER,CUST_SEG,PROMO_CODE,IS_VVIP_CUSTOMER,EIDA_PRESENT,STAFF_FLAG,"
					+ "PURPOSE_TAX,IS_UAE_RESIDENT,DEALS_ARMAMENT,PEP,HAWALA,IS_HOLDING_GREENCARD,"
					+ "IS_US_TAX_LIABLE,IS_US_TIN_PRESENT,IS_US_CLASSIFICATION,IS_US_RESIDENT,"
					+ "IS_CUST_DETAIL_CHANGE,RELIGION,CUST_MARITAL_STATUS,"
					+ "PASS_TYPE,VISA_STATUS,ACC_RELATIONSHIP_PURPOSE,EMPLOYEE_TYPE,EMP_STATUS,"
					+ "SPECIAL_CATAGORY,EXELLENCY_CENTER,SIGN_STYLE,"
					+ "IS_CROSS_BORDER_PAYMENT,IS_WORK_DEFENCE_UAE,IS_WORK_DEFENCE_NONUAE,"
					+ "CORR_CITY,RES_CITY,PER_CITY,MANUAL_CITY,IS_POA_US_PERSON,IS_US_INDICIA_FOUND,"
					+ "DOCUMENT_TO_BE_COLLECTED,MANUAL_COUNTRY_RESIDENCE FROM USR_0_CUST_TXN"
					+ " WHERE WI_NAME = N'"
					+ WI_NAME
					+ "' AND CUST_SNO = N'"
					+ sCustNo + "'";
		}

		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		if (sOutput != null && sOutput.size() > 0) {
			formObject.addItemInCombo(MANUAL_PREFIX, sOutput.get(0).get(0));// MANUAL_PREFIX
			formObject.addItemInCombo(CUST_PREFIX, sOutput.get(0).get(1));// PREFIX
			formObject.addItemInCombo(MANUAL_STATE, sOutput.get(0).get(10));// MANUAL_STATE
			formObject.addItemInCombo(CORR_STATE, sOutput.get(0).get(11));// CORR_STATE
			formObject.addItemInCombo(RES_STATE, sOutput.get(0).get(12));// RES_STATE
			formObject.addItemInCombo(PERM_STATE, sOutput.get(0).get(13));// PERM_STATE
			formObject.addItemInCombo(MANUAL_CNTRY, sOutput.get(0).get(2));// MANUAL_COUNTRY
			formObject.addItemInCombo(MANUAL_PER_CNTRY, sOutput.get(0).get(3));// MANUAL_RESIDENCE_COUNTRY
			formObject
					.addItemInCombo(MANUAL_NATIONALITY, sOutput.get(0).get(4));// MANUAL_NATIONALITY
			formObject.addItemInCombo(CNTRY_OF_BIRTH, sOutput.get(0).get(5));// BIRTH_COUNTRY
			formObject.addItemInCombo(CUST_NATIONALITY, sOutput.get(0).get(6));// NATIONALITY
			formObject.addItemInCombo(CORR_CNTRY, sOutput.get(0).get(7));// CORR_CNTRY
			formObject.addItemInCombo(PERM_COUNTRY, sOutput.get(0).get(8));// PER_COUNTRY
			formObject.addItemInCombo(RES_CNTRY, sOutput.get(0).get(9));// RES_CNTRY

			formObject.setValue(RM_NAME, sOutput.get(0).get(14)
					.replace("'", ""));// RM_NAME
			formObject.setValue(RM_CODE, sOutput.get(0).get(15));// RM_CODE

			formObject.addItemInCombo(PROFESION, sOutput.get(0).get(16));// EMP_PROFESSION_NAME
			formObject.addItemInCombo(PROF_CODE, sOutput.get(0).get(17));// PROFESSION_CODE
			formObject.addItemInCombo(MATCH_FOUND, sOutput.get(0).get(9));// BLACKLIST_DEC
																			// --
																			// second
																			// query
																			// --sanction
			formObject.addItemInCombo(SANC_SCRN_MATCH_FOUND, sOutput.get(0)
					.get(9));// BAD_CHECK_DEC second querytion
			formObject.addItemInCombo(MATCH, sOutput.get(0).get(9));// WORLD_CHECK_DEC
																	// ----sanction
			formObject.addItemInCombo(ED_CB_NON_TML, sOutput.get(0).get(9));// FINAL_ELIGIBILITY
																			// --
			formObject.addItemInCombo(MANUAL_GENDER, sOutput.get(0).get(18));// MANUAL_GENDER
			formObject.addItemInCombo(CUST_GENDER, sOutput.get(0).get(19));// GENDER
			formObject.addItemInCombo(PD_CUSTSEGMENT, sOutput.get(0).get(21));// CUST_SEG--sanction
			formObject.addItemInCombo(PRO_CODE, sOutput.get(0).get(21));// PROMO_CODE
			formObject.addItemInCombo("Combo7", sOutput.get(0).get(9));// SYSTEM_DEC
																		// ----sanction
			formObject.addItemInCombo(CRO_BANK_DECISION, sOutput.get(0).get(9));// BANK_DEC
																				// --
			formObject.addItemInCombo(GI_IS_CUST_VIP, sOutput.get(0).get(22));// IS_VVIP_CUSTOMER
			formObject.addItemInCombo(RA_CARRYNG_EID_CARD,
					sOutput.get(0).get(23));// EIDA_PRESENT
			formObject.addItemInCombo(ED_SET_FLG, sOutput.get(0).get(24));// STAFF_FLAG
			formObject
					.addItemInCombo(RA_PRPSE_TAX_EVSN, sOutput.get(0).get(25));// PURPOSE_TAX
			formObject.addItemInCombo(RA_IS_UAE_RESIDENT, sOutput.get(0)
					.get(26));// IS_UAE_RESIDENT
			formObject.addItemInCombo(RA_IS_CUST_DEALNG_ARMAMNT, sOutput.get(0)
					.get(27));// DEALS_ARMAMENT
			formObject.addItemInCombo(RA_IS_CUST_PEP, sOutput.get(0).get(28));// PEP
			formObject.addItemInCombo(RA_IS_CUST_DEALNG_HAWALA, sOutput.get(0)
					.get(29));// HAWALA
			formObject.addItemInCombo(FAT_US_PERSON, sOutput.get(0).get(30));// IS_HOLDING_GREENCARD
			formObject.addItemInCombo(FAT_LIABLE_TO_PAY_TAX, sOutput.get(0)
					.get(31));// IS_US_TAX_LIABLE
			formObject.addItemInCombo(FAT_SSN, sOutput.get(0).get(32));// IS_US_TIN_PRESENT
			formObject.addItemInCombo(FAT_CUST_CLASSIFICATION, sOutput.get(0)
					.get(33));// IS_US_CLASSIFICATION
			formObject.addItemInCombo(CRS_RES_PERM_ADRS_US,
					sOutput.get(0).get(34));// IS_US_RESIDENT
			formObject.addItemInCombo(PD_ANY_CHNG_CUST_INFO, sOutput.get(0)
					.get(35));// IS_CUST_DETAIL_CHANGE
			formObject.addItemInCombo(RELIGION, sOutput.get(0).get(36));// RELIGION
			formObject.addItemInCombo(MARITAL_STATUS, sOutput.get(0).get(37));// CUST_MARITAL_STATUS

			formObject
					.addItemInCombo(MANUAL_VISASTATUS, sOutput.get(0).get(39));// VISA_STATUS
			formObject.addItemInCombo(GI_PURPOSE_ACC_REL, sOutput.get(0)
					.get(40));// ACC_RELATIONSHIP_PURPOSE
			formObject.addItemInCombo(ED_EMP_TYPE, sOutput.get(0).get(41));// EMPLOYEE_TYPE
			formObject.addItemInCombo(EMP_STATUS, sOutput.get(0).get(42));// EMP_STATUS
			formObject.addItemInCombo(SPECIAL_CAT, sOutput.get(0).get(43));// SPECIAL_CATAGORY
			formObject.addItemInCombo(EXCELLENCY_CNTR, sOutput.get(0).get(44));// EXELLENCY_CENTER
			formObject.addItemInCombo(SIGN_STYLE1, sOutput.get(0).get(45));// SIGN_STYLE
			formObject.addItemInCombo(ED_CUST_CRS_BRDR_PAYMENT, sOutput.get(0)
					.get(46));// IS_CROSS_BORDER_PAYMENT
			formObject.addItemInCombo(RA_IS_CUST_WRKNG_UAE,
					sOutput.get(0).get(47));// IS_WORK_DEFENCE_UAE
			formObject.addItemInCombo(RA_IS_CUST_WRKNG_NON_UAE, sOutput.get(0)
					.get(48));// IS_WORK_DEFENCE_NONUAE
			formObject.addItemInCombo(CP_CITY, sOutput.get(0).get(49));// CORR_CITY
			formObject.addItemInCombo(PA_CITY, sOutput.get(0).get(50));// RES_CITY
			formObject.addItemInCombo(RA_CITY, sOutput.get(0).get(51));// PER_CITY
			formObject.addItemInCombo(MANUAL_CITY, sOutput.get(0).get(52));// MANUAL_CITY
			formObject.addItemInCombo(POACOMBO, sOutput.get(0).get(53));// IS_POA_US_PERSON
			formObject.addItemInCombo(INDICIACOMBO, sOutput.get(0).get(54));// IS_US_INDICIA_FOUND
			formObject.addItemInCombo(COMBODOC, sOutput.get(0).get(55));// DOCUMENT_TO_BE_COLLECTED
			formObject.addItemInCombo(MANUAL_RESIDENT, sOutput.get(0).get(56));// MANUAL_COUNTRY_RESIDENCE
			formObject.addItemInCombo(DRP_RESEIDA, sOutput.get(0).get(57));// RES_EIDA
		}
		formObject.addItemInCombo(SRCH_NATION, "");
		formObject.addItemInCombo(NEW_CUST_NATIONALITY, "");
		formObject.addItemInCombo(HD_FCR_SEARCH, "");
		formObject.addItemInCombo(NATION_CRO, "");
		formObject.addItemInCombo(SI_CURRENCY, "");
		formObject.setValue(SI_CRED_PROD, "");

		formObject.setValue(SRCH_NATION, "");
		formObject.setValue(HD_FCR_SEARCH, "");
		formObject.setValue(NEW_CUST_NATIONALITY, "");
		formObject.setValue(NATION_CRO, "");
		formObject.setValue(SI_CURRENCY, "");
		formObject.setValue(SI_CRED_PROD, "");

		sQuery = "SELECT SWEEP_OUT_DEBIT_ACC,SWEEP_IN_DEBIT_ACC,SWEEP_IN_CURR,SWEEP_OUT_CURR FROM USR_0_STND_INSTR"
				+ " WHERE WI_NAME = N'" + WI_NAME + "'";
		sOutput = formObject.getDataFromDB(sQuery);
		if (sOutput != null && sOutput.size() > 0) {
			formObject
					.addItemInCombo(SWP_OUT_DEB_ACC_NO, sOutput.get(0).get(0));// SWEEP_OUT_DEBIT_ACC
			formObject.addItemInCombo(SWP_IN_DEB_ACC_NO, sOutput.get(0).get(1));// SWEEP_IN_DEBIT_ACC
			formObject.addItemInCombo(SWP_OUT_CURRENCY, sOutput.get(0).get(2));// SWEEP_IN_CURR
			formObject.addItemInCombo(SWP_IN_CURRENCY, sOutput.get(0).get(3));// SWEEP_OUT_CURR
		}
		// formObject.addItemInCombo(CONCIERGE,"--Select--");
		formObject.addItemInCombo(CONCIERGE, "Yes");
		formObject.addItemInCombo(CONCIERGE, "No");
		formObject.setValue(CONCIERGE, "");// Sanal - Sahil will check

		String sQuery1 = "select city from usr_0_city_master order by 1";
		sOutput = formObject.getDataFromDB(sQuery1);
		formObject.setValue(CRS_CITYOFBIRTH, sOutput.get(0).get(0));

		sQuery1 = "SELECT COUNTRY_DESC FROM USR_0_CRS_UAE_COUNTRIES where COUNTRY_TYPE='TR' ORDER BY 1";
		sOutput = formObject.getDataFromDB(sQuery1);
		formObject.setValue(CRS_TAX_COUNTRY, sOutput.get(0).get(0));

		sQuery1 = "Select REASON_DESC from usr_0_crs_tin_reasons where status<>0 order by 1";
		// Status condition added by Aditya 14 Oct
		sOutput = formObject.getDataFromDB(sQuery1);
		formObject.setValue(CRS_REASONNOTPROVIDINGTIN, sOutput.get(0).get(0));

		sQuery1 = "Select CLASSIFICATION_DESC from usr_0_crs_cls_types where customer_type ='I'  order by 1";
		sOutput = formObject.getDataFromDB(sQuery1);
		formObject.setValue(CRS_CLASSIFICATION, sOutput.get(0).get(0));

		sQuery1 = "Select COUNTRY from usr_0_country_mast order by 1";
		sOutput = formObject.getDataFromDB(sQuery1);
		formObject.setValue(MANUAL_COUNTRYBIRTH, sOutput.get(0).get(0));
	}

	public void Frame_delivery() {
		try {
			boolean dfcFlag = false;
			if (formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("")) {
			}
			if (!formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("Alternate")) {
				disableControls(new String[] { NOM_REQ, INSTANT_DEL_YES,
						RD_INST_DEL, RD_INST_DEL, BRNCH_OF_INSTANT_ISSUE,
						DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK,
						DEL_CITY, DEL_STATE, DEL_STATE_OTHER, DEL_CNTRY,
						DEL_FAX, DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG,
						DEL_PH, DEL_MOBILE, DEL_DELIVERY_MODE,
						DEL_EXISTING_ADD, DEL_MODE_YES, DEL_MODE_NO,
						NEW_DEL_MODE, CHANNEL_NAME, DFC_STATIONERY_AVAIL,
						FETCH_INFO, SEC_DEL_ADD });
			}
			if (formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("Alternate")
					&& sActivityName
							.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
				String sQ1 = "SELECT DFC_STATIONERY_AVAIL FROM EXT_AO WHERE WI_NAME = N'"
						+ WI_NAME + "'";
				List<List<String>> output = formObject.getDataFromDB(sQ1);
				String sVar1 = output.get(0).get(0);// "DFC_STATIONERY_AVAIL");
				logInfo("", "if(!FETCH_INFO_flag||!cKioskIdd_flag)"
						+ FETCH_INFO_flag);
				if (sVar1.equalsIgnoreCase("") || sVar1.equalsIgnoreCase("")) {
					if (!FETCH_INFO_flag) {
						/*
						 * formObject.NGClear(DFC_STATIONERY_AVAIL);//22/04/2016
						 * formObject
						 * .NGAddItem(DFC_STATIONERY_AVAIL,"--Select--"
						 * );//22/04/2016 testing1
						 * formObject.setNGEnable(DFC_STATIONERY_AVAIL,false);
						 * formObject.setNGLocked(DFC_STATIONERY_AVAIL,false);
						 * Sanal Sahil will verify this
						 */
						formObject.clearCombo(DFC_STATIONERY_AVAIL);
						formObject.setValue(DFC_STATIONERY_AVAIL, "");
						formObject
								.setStyle(DFC_STATIONERY_AVAIL, DISABLE, TRUE);
					}
					if (formObject.getValue(DFC_STATIONERY_AVAIL).toString()
							.equalsIgnoreCase("")
							|| formObject.getValue(DFC_STATIONERY_AVAIL)
									.toString().equalsIgnoreCase("")) {
						/*
						 * formObject.setValue(INSTANT_DEL_YES,FALSE);
						 * formObject.setStyle(INSTANT_DEL_YES, DISABLE, TRUE);
						 * formObject.setValue(INSTANT_DEL_NO,TRUE);
						 * formObject.setStyle(INSTANT_DEL_YES, DISABLE, FALSE);
						 */
						formObject.setValue(RD_INST_DEL, "No");
					}
				}

				formObject.setStyle(DEL_DELIVERY_MODE, DISABLE, TRUE);
				formObject.setStyle(FETCH_INFO, DISABLE, FALSE);

				dfcFlag = true;
				if (!dfcFlag) {
					formObject.setValue(DFC_STATIONERY_AVAIL, "");
				}

				if (formObject.getValue(RD_INST_DEL).toString()
						.equalsIgnoreCase("Yes")) {
					disableControls(new String[] { SEC_DEL_ADD, NOM_REQ,
							RD_INST_DEL });
					// formObject.setNGLocked(SEC_DEL_ADD,false);
					formObject.clearTable(DELIVERY_PREFERENCE);
				} else if (formObject.getValue(RD_INST_DEL).toString()
						.equalsIgnoreCase("No")) {
					// it was empty
				}

				disableControls(new String[] { RD_INST_DEL,
						BRNCH_OF_INSTANT_ISSUE, DEL_NAME, DEL_PO_BOX,
						DEL_ADDRESS, DEL_LANDMARK, DEL_CITY, DEL_STATE,
						DEL_STATE_OTHER, DEL_CNTRY, DEL_FAX, DEL_ZIP_CODE,
						DEL_EMAIL, DEL_PREF_LANG, DEL_PH, DEL_MOBILE,
						DEL_DELIVERY_MODE, DEL_EXISTING_ADD, DEL_MODE_YES,
						DEL_MODE_NO, NEW_DEL_MODE, CHANNEL_NAME });
				try {
					String sQuery = "SELECT DELIVERY_MODE FROM USR_0_DELIVERY_MODE WHERE CODE = 'COLC'";
					List<List<String>> sOutput = formObject
							.getDataFromDB(sQuery);
					String sDelMode = sOutput.get(0).get(0);// ,"DELIVERY_MODE");
					formObject.setStyle(DEL_DELIVERY_MODE, DISABLE, FALSE);
					int count = getGridCount(DEL_DELIVERY_MODE);
					for (int i = 0; i < count; i++) {
						formObject.removeItemFromCombo(DEL_DELIVERY_MODE, count
								- (i + 1));
						String del_mode = formObject
								.getValue(DEL_DELIVERY_MODE).toString();
					}

					formObject.addItemInCombo(DEL_DELIVERY_MODE, sDelMode);// Sanal
																			// Sahil
																			// need
																			// to
																			// check
																			// this
					formObject.setStyle(DEL_DELIVERY_MODE, DISABLE, TRUE);
				} catch (Exception e) {
					logInfo("", "del_mode exception::" + e);
				}

				try {
					String sQuery = "SELECT EMIRATES_NAME FROM USR_0_DELIVRY_BRANCH_MAPPING "
							+ "WHERE DELIVERY_MODE = 'COLC'";
					List<List<String>> sOutput = formObject
							.getDataFromDB(sQuery);
					String sBranch = sOutput.get(0).get(0);// "EMIRATES_NAME");
					formObject.setStyle(BRNCH_OF_INSTANT_ISSUE, DISABLE, FALSE);
					int count = getListCount(BRNCH_OF_INSTANT_ISSUE);
					for (int i = 0; i < count; i++) {
						formObject.removeItemFromCombo(BRNCH_OF_INSTANT_ISSUE,
								count - (i + 1));
						String sBoi = formObject.getValue(
								BRNCH_OF_INSTANT_ISSUE).toString();
					}
					formObject.addItemInCombo(BRNCH_OF_INSTANT_ISSUE, sBranch);
					formObject.setStyle(BRNCH_OF_INSTANT_ISSUE, DISABLE, TRUE);
				} catch (Exception e) {
				}
			}

			if (formObject.getValue(CHANNEL_TYPE).toString()
					.equalsIgnoreCase("Alternate")
					&& !sActivityName
							.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
				disableControls(new String[] { NOM_REQ, INSTANT_DEL_YES,
						RD_INST_DEL, RD_INST_DEL, BRNCH_OF_INSTANT_ISSUE,
						DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK,
						DEL_CITY, DEL_STATE, DEL_STATE_OTHER, DEL_CNTRY,
						DEL_FAX, DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG,
						DEL_PH, DEL_MOBILE, DEL_DELIVERY_MODE,
						DEL_EXISTING_ADD, DEL_MODE_YES, DEL_MODE_NO,
						NEW_DEL_MODE, CHANNEL_NAME, DFC_STATIONERY_AVAIL,
						FETCH_INFO, SEC_DEL_ADD });
				if (!formObject.getValue(SCAN_MODE).toString()
						.equalsIgnoreCase("New WMS ID")) {
					try {
						String sQuery = "SELECT DELIVERY_MODE FROM USR_0_DELIVERY_MODE WHERE CODE = 'COLC'";
						List<List<String>> sOutput = formObject
								.getDataFromDB(sQuery);
						String sDelMode = sOutput.get(0).get(0);// "DELIVERY_MODE");
						formObject.setStyle(DEL_DELIVERY_MODE, DISABLE, FALSE);
						int count = getListCount(DEL_DELIVERY_MODE);
						logInfo("", "count==" + count);

						for (int i = 0; i < count; i++) {
							formObject.removeItemFromCombo(DEL_DELIVERY_MODE,
									count - (i + 1));
							String del_mode = formObject.getValue(
									DEL_DELIVERY_MODE).toString();
						}
						formObject.addItemInCombo(DEL_DELIVERY_MODE, sDelMode);
						formObject.setStyle(DEL_DELIVERY_MODE, DISABLE, TRUE);
					} catch (Exception e) {
						logInfo("", "del_mode exception::" + e);
					}
				}
			}
		} catch (Exception e) {
			logInfo("", "del_mode exception::" + e);
		}
	}

	@SuppressWarnings("unchecked")
	public void populateScreeningDataCRO() {
		logInfo("PopulateScreeningDataCRO", "INSIDE");
		int iSelectedRow = 0;
		String sCustNo = "";
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());

		sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow, 0); // acc_relation.sno
		logInfo("inside PopulateScreeningDataCRO sCustNo = ", sCustNo);
		String sQuery = "SELECT SYSTEM_DEC,BANK_DEC,BLACKLIST_DEC,WORLD_CHECK_DEC,BLACKLIST_REMARKS, "
				+ "BAD_CHECK_REMARKS, "
				+ "WORLD_CHECK_REMARKS, SYSTEM_REMARKS, BAD_CHECK_DEC, FINAL_ELIGIBILITY FROM USR_0_CUST_TXN "
				+ "WHERE WI_NAME = N'"
				+ sWorkitemId
				+ "' AND CUST_SNO = N'"
				+ sCustNo + "'";

		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		setValuesFromDB(sOutput, new String[] { CRO_SYS_DEC, CRO_BANK_DECISION,
				CHK_MATCH_FOUND, SANC_SCRN_MATCH, CHK_REMARKS,
				SANC_SCRN_REMARKS, SANC_WRLD_CHK_REMARKS,
				SANCT_RISK_ASSESS_MARKS });

		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CONTACT_CENTER_CPD)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_11)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_12)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_13)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_14)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CLOSE_REQUEST)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_RM)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_WORK_EXIT)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_QUERY)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_MAIL_ROOM)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_BULK_EOD_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_COMP_APP)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PBG_VIGILANCE) // Gurwinder PBG Vigilance Chnage 27062023
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PROD_APP)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PROD_APP_CPD)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CONTACT_CENTER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DELIVERY_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DELIVERY_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PHYSICAL_RECON)) {
			formObject.setValue("COMBO11", sOutput.get(0).get(8));// BAD_CHECK_DEC
			formObject.setValue("COMBO8", sOutput.get(0).get(9));// FINAL_ELIGIBILITY
		} else {
			if (sOutput != null && sOutput.size() > 0) {
				formObject.setValue(SANC_SCRN_MATCH_FOUND, sOutput.get(0)
						.get(8));// BAD_CHECK_DEC
				formObject.setValue(SANC_FINAL_ELIGIBILITY,
						sOutput.get(0).get(9));// FINAL_ELIGIBILITY
			}
		}

		sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE"
				+ " WI_NAME = N'"
				+ sWorkitemId
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE "
				+ "FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		log.info(sQuery);
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				CHECK_TYPE_LVW);
		sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE "
				+ "WI_NAME = N'"
				+ WI_NAME
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE "
				+ "WHERE TYPE='EXT')";
		recordList = formObject.getDataFromDB(sQuery);
		log.info(sQuery);
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				SANC_SCRN_HD2_LVW);
		sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT "
				+ "FROM USR_0_CENTRAL_BANK_DATA WHERE WI_NAME='"
				+ sWorkitemId
				+ "' AND CUST_SNO = '" + sCustNo + "'";
		recordList = formObject.getDataFromDB(sQuery);
		log.info(sQuery);
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				SANC_CNTRL_BNK_BAD_LVW);
		sQuery = "SELECT CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM,CURRENT_RISK_BUSSINESS,PREVIOUS_RISK, FCR_RISK,"
				+ " APPROVAL_REQ,"
				+ "cust_assessment_date, RISK_CLASSIFICATION FROM USR_0_RISK_ASSESSMENT_DATA "
				+ "WHERE WI_NAME = N'"
				+ sWorkitemId
				+ "' "
				+ "AND SNO = '"
				+ sCustNo + "'";
		logInfo("query of PopulateScreeningDataCRO ", sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("output of PopulateScreeningDataCRO ", sOutput.toString());
		if (sOutput != null && sOutput.size() > 0) {
			setValuesFromDB(sOutput, new String[] { SANCT_RISK_CID,
					SANCT_RISK_NAME, SANCT_RISK_CURRENT_RSK_SYSTEM,
					SANCT_RISK_CURRENT_RSK_BANK, SANCT_RISK_PREVIOUS_RSK,
					SANCT_RISK_FCR_RSK, SANCT_RISK_COMPL_APP_REQ,
					SANCT_RISK_INITIAL_ASSESS_DATE });
			formObject.setValue(SANCT_RISK_RSK_CLSF, sOutput.get(0).get(8));// RISK_CLASSIFICATION
		}
		set_Values_From_Usr_0_Risk_Data();

	}

	public void set_Values_From_Usr_0_Risk_Data() {
		try {
			logInfo("set_Values_From_Usr_0_Risk_Data", "INSIDE");
			int iSelectedRow = 0;
			int sNo = Integer.parseInt((String) formObject
					.getValue(SELECTED_ROW_INDEX)) + 1;
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			if (formObject.getValue(SANCT_RISK_CURRENT_RSK_SYSTEM).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_CUR_RISK) as CUST_CUR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) "
						+ "in (select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "'  "
						+ "AND SNO = '"
						+ sNo
						+ "' and CUST_CUR_RISK is not null and"
						+ " ws_name not in ('CPD Maker','CPD Checker'))"
						+ " and wi_name = '" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRisk = sOutput.get(0).get(0);// CUST_CUR_RISK);
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_CURRENT_RSK_SYSTEM,
								sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_CURRENT_RSK_BANK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name = N'"
						+ sWorkitemId
						+ "'  AND SNO = '"
						+ sNo
						+ "' "
						+ "and CUST_CUR_RISK_BANK is not null and "
						+ "ws_name not in ('CPD Maker','CPD Checker')) and wi_name = N'"
						+ sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRiskBank = sOutput.get(0).get(0);// CUST_CUR_RISK_BANK
					if (!sCustCurRiskBank.equalsIgnoreCase("")) {
						if (sCustCurRiskBank.equalsIgnoreCase("Neutral Risk")) {
							sCustCurRiskBank = "Neutral";
						}
						formObject.setValue(SANCT_RISK_CURRENT_RSK_BANK,
								sCustCurRiskBank);
					}

				}
			}
			if (formObject.getValue(SANCT_RISK_PREVIOUS_RSK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_PREV_RISK) as CUST_PREV_RISK from usr_0_risk_data"
						+ " where (entrydatetime) "
						+ "in (select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "'  "
						+ "AND SNO = '"
						+ sNo
						+ "'"
						+ " and CUST_PREV_RISK is not null and ws_name not in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = N'" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustPrevRisk = sOutput.get(0).get(0);// CUST_PREV_RISK);
					if (!sCustPrevRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_PREVIOUS_RSK,
								sCustPrevRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_FCR_RSK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_FCR_RISK) as CUST_FCR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in "
						+ "(select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "' "
						+ " AND SNO = '"
						+ sNo
						+ "'"
						+ " and CUST_FCR_RISK is not null and ws_name not in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = '" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				String sCustFcrRisk = sOutput.get(0).get(0);// CUST_FCR_RISK);
				if (!sCustFcrRisk.equalsIgnoreCase("")) {
					formObject.setValue(SANCT_RISK_FCR_RSK, sCustFcrRisk);
				}
			}

			if (formObject.getValue(CPD_CUR_RISK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_CUR_RISK) as CUST_CUR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in "
						+ "(select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "' "
						+ " AND SNO = '"
						+ sNo
						+ "' "
						+ "and CUST_CUR_RISK is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = N'" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRisk = sOutput.get(0).get(0);// CUST_CUR_RISK);
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPD_CUR_RISK, sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(SANCT_RISK_RSK_CLSF).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(risk_classification) as risk_classification from usr_0_risk_data "
						+ "where (entrydatetime)"
						+ " in (select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "'"
						+ " AND SNO = '"
						+ sNo
						+ "' "
						+ "and risk_classification is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = N'" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRisk = sOutput.get(0).get(0);// "RISK_CLASSIFICATION");
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(SANCT_RISK_RSK_CLSF, sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(CPDRISK_CLASSIFICATION).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(risk_classification) as risk_classification from usr_0_risk_data"
						+ " where (entrydatetime) "
						+ "in (select max(entrydatetime) from usr_0_risk_data  where wi_name = '"
						+ sWorkitemId
						+ "'"
						+ " AND SNO = '"
						+ sNo
						+ "'"
						+ " and risk_classification is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = '" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRisk = sOutput.get(0).get(0);// "RISK_CLASSIFICATION");
					if (!sCustCurRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPDRISK_CLASSIFICATION,
								sCustCurRisk);
					}
				}
			}
			if (formObject.getValue(CPD_CUR_RISK_BANK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK from usr_0_risk_data "
						+ "where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  "
						+ "where wi_name='"
						+ sWorkitemId
						+ "'  AND SNO='"
						+ sNo
						+ "' and CUST_CUR_RISK_BANK is not null "
						+ "and ws_name in ('CPD Maker','CPD Checker')) and wi_name='"
						+ sWorkitemId + "'";
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustCurRiskBank = sOutput.get(0).get(0);// CUST_CUR_RISK_BANK);
					if (!sCustCurRiskBank.equalsIgnoreCase("")) {
						if (sCustCurRiskBank.equalsIgnoreCase("Neutral Risk")) {
							sCustCurRiskBank = "Neutral";
						}
						formObject
								.setValue(CPD_CUR_RISK_BANK, sCustCurRiskBank);
					}
				}
			}
			if (formObject.getValue(CPD_PREV_RISK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_PREV_RISK) as CUST_PREV_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in "
						+ "(select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "' "
						+ " AND SNO = '"
						+ sNo
						+ "' "
						+ "and CUST_PREV_RISK is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = N'" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);

				if (sOutput.size() > 0 && sOutput != null) {
					String sCustPrevRisk = sOutput.get(0).get(0);// CUST_PREV_RISK);
					if (!sCustPrevRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPD_PREV_RISK, sCustPrevRisk);
					}
				}
			}
			if (formObject.getValue(CPD_FCR_RISK).toString()
					.equalsIgnoreCase("")) {
				String sQuery = "select max(CUST_FCR_RISK) as CUST_FCR_RISK from usr_0_risk_data "
						+ "where (entrydatetime) in "
						+ "(select max(entrydatetime) from usr_0_risk_data  where wi_name = N'"
						+ sWorkitemId
						+ "' "
						+ " AND SNO='"
						+ sNo
						+ "' "
						+ "and CUST_FCR_RISK is not null and ws_name in ('CPD Maker','CPD Checker')) "
						+ "and wi_name = '" + sWorkitemId + "'";
				logInfo("query of set_Values_From_Usr_0_Risk_Data ", sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput.size() > 0 && sOutput != null) {
					String sCustFcrRisk = sOutput.get(0).get(0);// CUST_FCR_RISK);
					if (!sCustFcrRisk.equalsIgnoreCase("")) {
						formObject.setValue(CPD_FCR_RISK, sCustFcrRisk);
					}
				}
			}
		} catch (Exception e) {
			logError("set_Values_From_Usr_0_Risk_Data", e);
		}
	}

	public String LockCreatedAccountRows() { // tp be done in js need the syntax
		int iRows = getGridCount(PRODUCT_QUEUE);

		for (int iLoop = 1; iLoop < iRows; iLoop++) {
			if (!formObject.getTableCellValue("PRODUCT_QUEUE.ACC_NO", iLoop, 1)
					.equalsIgnoreCase("")) {
				// yamini check in js
				/*
				 * objChkRepeater.setEnabled(iLoop,"PRODUCT_QUEUE.PROD_CODE",false
				 * );
				 * 
				 * if(sAcitivityName.equalsIgnoreCase("QDE_ Account_Info")) {
				 * objChkRepeater.setEnabled(iLoop,"COMMAND43",false); } else {
				 * objChkRepeater.setEnabled(iLoop,"COMMAND42",false); }
				 */
			}
		}
		return "";
	}

	public void setFinalDataComparison(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String Value) {
		logInfo("setFinalDataComparison", "INSIDE");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			formObject.setValue(sFCRDataControl, Value);
			formObject.setStyle(sFCRDataControl, DISABLE, FALSE);
			formObject.setValue(sEIDADataControl, "");
			formObject.setValue(sManualDataControl, "");

		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			formObject.setValue(sEIDADataControl, Value);
			formObject.setStyle(sEIDADataControl, DISABLE, FALSE);
			formObject.setValue(sManualDataControl, "");
			formObject.setValue(sFCRDataControl, "");

		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			formObject.setValue(sManualDataControl, Value);
			formObject.setStyle(sManualDataControl, DISABLE, FALSE);
			formObject.setValue(sFCRDataControl, "");
			formObject.setValue(sEIDADataControl, "");
		} else {
			formObject.setValue(sFCRDataControl, "");
			formObject.setValue(sEIDADataControl, "");
			formObject.setValue(sManualDataControl, "");
		}
	}

	public void updateTRSDDecision() {
		logInfo("updateTRSDDecision", "INSIDE");
		String sQuery2 = "select trsd_2_status from usr_0_trsd_details where wi_name='"
				+ sWorkitemId + "'";
		logInfo("updateTRSDDecision", "sQuery2: " + sQuery2);
		List<List<String>> statusSelectOutput = formObject
				.getDataFromDB(sQuery2);

		if (statusSelectOutput.size() > 0) {
			// String
			// status[]=(statusSelectOutput.get(0)).toString().split(",");
			String finalResult = "";
			int approvedCount = 0;

			for (int j = 0; j < statusSelectOutput.size(); j++) {
				if (statusSelectOutput.get(j).get(0)
						.equalsIgnoreCase("Pending")) {
					finalResult = "Pending";
					break;
				}
				if (statusSelectOutput.get(j).get(0)
						.equalsIgnoreCase("Rejected")) {
					finalResult = "Rejected";
					break;
				}
				if (statusSelectOutput.get(j).get(0)
						.equalsIgnoreCase("Approved")) {
					approvedCount++;
				}
			}
			if (approvedCount == statusSelectOutput.size()) {
				finalResult = "Approved";
			} else if (finalResult.equalsIgnoreCase("")) {
				finalResult = "Returned";
			}
			int trsdDecisionUpdateOutput = updateDataInDB("ext_ao",
					"trsd_decision", "'" + finalResult + "'", "wi_name='"
							+ sWorkitemId + "'");
			logInfo("updateTRSDDecision", trsdDecisionUpdateOutput + "");
		}
	}

	public boolean checkTRSDDecisionforNull() {
		logInfo("checkTRSDDecisionforNull", "checkTRSDDecisionforNull");
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String sQuery = "select count (wi_name) from usr_0_trsd_details where wi_name='"
				+ sWorkitemId
				+ "' "
				+ "and acc_relation_sno='"
				+ iProcessedCustomer + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String count = "";
		try {
			count = sOutput.get(0).get(0);
		} catch (Exception e) {
			log.error("checkTRSDDecisionforNull: " + e, e);
		}
		if (Integer.parseInt(count) == 0)
			return false;
		else
			return true;
	}

	public boolean saveScreeningData() {
		logInfo("saveScreeningData", "INSIDE");
		int iSelectedRow = 0;
		long start_time = System.currentTimeMillis();
		int iRows = getGridCount(ACC_RELATION);
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		String cust_id = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,SYSTEM_DEC,BANK_DEC,BLACKLIST_DEC,WORLD_CHECK_DEC,"
				+ "BAD_CHECK_DEC, FINAL_ELIGIBILITY,BLACKLIST_REMARKS,BAD_CHECK_REMARKS,WORLD_CHECK_REMARKS,"
				+ "SYSTEM_REMARKS";
		String value1 = "'" + cust_id + "'" + (char) 25 + "'"
				+ formObject.getValue(WMS_ID).toString() + "'" + (char) 25
				+ "'" + sWorkitemId + "'" + (char) 25 + "'" + sCustNo + "'"
				+ (char) 25 + "'" + formObject.getValue("COMBO7").toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(TRSD_FINAL_DECISION).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(CHK_MATCH_FOUND).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SANC_SCRN_MATCH).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SANC_SCRN_MATCH_FOUND).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SANC_FINAL_ELIGIBILITY).toString() + "'"
				+ (char) 25 + "'" + formObject.getValue(CHK_REMARKS).toString()
				+ "'" + (char) 25 + "'"
				+ formObject.getValue(SANC_SCRN_REMARKS).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SANC_WRLD_CHK_REMARKS).toString() + "'"
				+ (char) 25 + "'"
				+ formObject.getValue(SANCT_RISK_ASSESS_MARKS).toString() + "'";

		if (!sCustNo.equalsIgnoreCase("")) {
			insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1, value1);
			String sValues = "";
			String sWsName = formObject.getValue(CURR_WS_NAME).toString();
			String sriskColumn = "SNO,WI_NAME,WS_NAME,CUST_NAME,CUST_CUR_RISK,CUST_CUR_RISK_BANK,"
					+ "CUST_PREV_RISK,CUST_FCR_RISK,risk_classification,cust_assessment_date,COMPLIANCE_APPROVAL";
			String sriskValue = "'" + sCustNo + "','" + sWorkitemId + "','"
					+ sWsName + "','" + formObject.getValue(SANCT_RISK_NAME)
					+ "','"
					+ formObject.getValue(SANCT_RISK_CURRENT_RSK_SYSTEM)
					+ "','" + formObject.getValue(SANCT_RISK_CURRENT_RSK_BANK)
					+ "','" + formObject.getValue(SANCT_RISK_PREVIOUS_RSK)
					+ "','" + formObject.getValue(SANCT_RISK_FCR_RSK) + "','"
					+ formObject.getValue(SANCT_RISK_RSK_CLSF) + "',"
					+ "to_date('"
					+ formObject.getValue(SANCT_RISK_INITIAL_ASSESS_DATE)
					+ "','dd/mm/yyyy')" + ",'"
					+ formObject.getValue(SANCT_CHKBOX_COMPL_AP) + "'";
			logInfo("saveScreeningData", "sriskColumn: " + sriskColumn);
			logInfo("saveScreeningData", "sriskValue: " + sriskValue);
			insert_Into_Usr_0_Risk_Data(sriskColumn, sriskValue);
			String sTableName = "USR_0_RISK_ASSESSMENT_DATA";
			String sColumnName = "SNO,WI_NAME,CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM,CURRENT_RISK_BUSSINESS,"
					+ "PREVIOUS_RISK, FCR_RISK,APPROVAL_REQ,PREV_RISK_DATE,risk_classification,cust_assessment_date";
			String sQuery = "delete from USR_0_RISK_ASSESSMENT_DATA where WI_NAME='"
					+ sWorkitemId + "' " + "and SNO='" + sCustNo + "'";
			int sOutput = formObject.saveDataInDB(sQuery);// ("USR_0_RISK_ASSESSMENT_DATA","WI_NAME='"+sWorkitemId+"' and SNO='"+sCustNo+"'");
			logInfo("saveScreeningData", "sOutput Delete: " + sOutput);
			sValues = "'" + sCustNo + "','" + sWorkitemId + "','"
					+ formObject.getValue(SANCT_RISK_CID) + "','"
					+ formObject.getValue(SANCT_RISK_NAME) + "','"
					+ formObject.getValue(SANCT_RISK_CURRENT_RSK_SYSTEM)
					+ "','" + formObject.getValue(SANCT_RISK_CURRENT_RSK_BANK)
					+ "','" + formObject.getValue(SANCT_RISK_PREVIOUS_RSK)
					+ "','" + formObject.getValue(SANCT_RISK_FCR_RSK) + "','"
					+ formObject.getValue(SANCT_RISK_COMPL_APP_REQ)
					+ "',sysdate,'" + formObject.getValue(SANCT_RISK_RSK_CLSF)
					+ "',to_date('"
					+ formObject.getValue(SANCT_RISK_INITIAL_ASSESS_DATE)
					+ "','dd/mm/yyyy')";
			logInfo("saveScreeningData", "sValues: " + sValues);
			int resAPInsert = insertDataIntoDB(sTableName, sColumnName, sValues);
			logInfo("saveScreeningData", "output: " + resAPInsert);
			sTableName = "USR_0_CENTRAL_BANK_DATA";
			sColumnName = "WI_NAME,CUST_SNO,CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT";
			String sWhere = "WI_NAME='" + sWorkitemId + "'";
			int sCount = getGridCount(SANC_CNTRL_BNK_BAD_LVW);
			String Output = "delete from USR_0_CENTRAL_BANK_DATA WI_NAME='"
					+ sWorkitemId + "'";
			int res = formObject.saveDataInDB(Output);
			for (int row = 0; row < sCount; row++) {
				String sValue = "'"
						+ sWorkitemId
						+ "','"
						+ sCustNo
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 0)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 0)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 1)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 2)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 3)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 4)
						+ "','"
						+ formObject.getTableCellValue(SANC_CNTRL_BNK_BAD_LVW,
								row, 5) + "'";
				logInfo("saveScreeningData", "2- sValue: " + sValue);
				String query = "";
				int out = insertDataIntoDB(sTableName, sColumnName, sValue);
				logInfo("saveScreeningData", "sOutput: " + out);
			}
		} else {
			sendMessageValuesList("",
					"Customer serial number is blank. Please close the workitem and open again.");
			return false;
		}
		long end_Time = System.currentTimeMillis();
		logInfo("saveScreeningData",
				"Diff time in saveScreeningData Function---"
						+ Long.toString(end_Time - start_time));
		return true;
	}

	public boolean checkTRSDDecisionforReturn() throws Exception {
		logInfo("checkTRSDDecisionforReturn", "INSIDE");
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sQuery = "select count (wi_name) from usr_0_trsd_details where wi_name='"
				+ sWorkitemId
				+ "' "
				+ "and acc_relation_sno='"
				+ (iProcessedCustomer + 1)
				+ "' and TRSD_2_STATUS = 'Returned' AND User_id='CRO' ";
		logInfo("checkTRSDDecisionforReturn", "sQuery: " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("checkTRSDDecisionforReturn", "sOutput: " + sOutput);
		String count = "";
		try {
			count = sOutput.get(0).get(0);
		} catch (Exception e) {
			logError("checkTRSDDecisionforReturn", e);
		}
		logInfo("checkTRSDDecisionforReturn", "count: " + count);
		if (Integer.parseInt(count) == 0)
			return false;
		else
			return true;
	}

	public void insertBankDecisionFromTRSD(String decision) {
		logInfo(" inside insertBankDecisionFromTRSD", "");
		try {
			String decisionColumn = "";
			if (sActivityName.equalsIgnoreCase("CPD Maker")) {
				decisionColumn = "bank_dec_cpd"; // not found in sheet nor in
													// dde form
			} else {
				decisionColumn = "bank_dec";
			}
			logInfo(" inside insertBankDecisionFromTRSD", "decision");
			logInfo(" inside insertBankDecisionFromTRSD", "decisionColumn");

			int iProcessedCustomer = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString() + 1);
			int sOutput = updateDataInDB("USR_0_CUST_TXN", decisionColumn, "'"
					+ decision + "'", "wi_name='" + sWorkitemId
					+ "' and cust_sno='" + iProcessedCustomer + "'");
			logInfo("", "output of updatebankdec: " + sOutput);
		} catch (Exception e) {
			logError("insertBankDecisionFromTRSD", e);
		}

	}

	public boolean validateCentralBankData(String sGridName) {
		if (formObject.getValue(SANC_SCRN_NAME).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(SANC_SCRN_NAME,
					"Customer Name can not be blank");
			return false;
		}
		if (formObject.getValue(SANC_SCRN_NATIONALITY).toString()
				.equalsIgnoreCase("--Select--")) {
			sendMessageValuesList(SANC_SCRN_NATIONALITY,
					"Nationality can not be blank");
			return false;
		}
		if (formObject.getValue(SANC_SCRN_DOB).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(SANC_SCRN_DOB,
					"Date of Birth can not be blank");
			return false;
		}
		if (formObject.getValue(SANC_SCRN_PASS_NO).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(SANC_SCRN_PASS_NO,
					"Passport Number can not be blank");
			return false;
		}
		if (formObject.getValue(SANC_SCRN_PERIOD_EXP).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(SANC_SCRN_PERIOD_EXP,
					"Period of Expiry can not be blank");
			return false;
		}
		if (formObject.getValue(SANC_SCRN_DEPT).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(SANC_SCRN_DEPT, "Department can not be blank");
			return false;
		}

		int iCount = getGridCount(sGridName);
		for (int row = 0; row < iCount; row++) {
			if (formObject
					.getValue(SANC_SCRN_NAME)
					.toString()
					.equalsIgnoreCase(
							formObject.getTableCellValue(sGridName, row, 0))
					&& formObject
							.getValue(SANC_SCRN_NATIONALITY)
							.toString()
							.equalsIgnoreCase(
									formObject.getTableCellValue(sGridName,
											row, 1))
					&& formObject
							.getValue(SANC_SCRN_DOB)
							.toString()
							.equalsIgnoreCase(
									formObject.getTableCellValue(sGridName,
											row, 2))
					&& formObject
							.getValue(SANC_SCRN_PASS_NO)
							.toString()
							.equalsIgnoreCase(
									formObject.getTableCellValue(sGridName,
											row, 3))) {
				sendMessageValuesList("", "You can not add duplicate row");
				return false;
			}

		}
		return true;
	}

	public void clearRiskDataQDE() {
		clearControls(new String[] { RA_EMP_TYPE, CNTRY_OF_BIRTH, TAX_EVASION,
				RA_RESIDENCY_STATUS, DEALS_IN_ARMAMENT, RA_IS_CUST_PEP,
				RA_CUST_DEALING_HAWALA, FAT_US_PERSON, FAT_LIABLE_TO_PAY_TAX,
				FAT_SSN, FAT_CUST_CLASSIFICATION, CRS_RES_PERM_ADRS_US,
				RA_IS_CUST_VVIP, SPECIAL_CAT, EMP_STATUS, POACOMBO,
				INDICIACOMBO, US_INDICIA_MDM, COMBODOC, DATEPICKERCUST,
				FATCAOPTION, DATEPICKERW8, CHANGE_IN_FATCA_3WAY_INPUTS,
				FATCAMAIN, FATCAMINI, });
	}

	public void frame18_QDE_Disable() {
		disableControls(new String[] { CUST_SEGMENT1, VISA_STATUS,
				RA_RESIDENCY_STATUS, RA_IS_CUST_PEP, SPECIAL_CAT,
				RA_IS_CUST_VVIP, RA_EMP_TYPE, SIGN_STYLE1,
				RA_CUST_DEALING_HAWALA, CRS_RES_PERM_ADRS_US, RA_PASSPORT_TYPE,
				EMP_STATUS, TAX_EVASION, DEALS_IN_ARMAMENT,
				RA_IS_CUST_WRKNG_UAE, RA_IS_CUST_WRKNG_NON_UAE });
	}

	public Boolean mandatoryCustScreen() {

		if (formObject.getValue(SANC_FINAL_ELIGIBILITY).toString()
				.equalsIgnoreCase("0")) {
			sendMessageValuesList(BTN_TRSD_CHECK,
					"Please click FSK Check button for the customer");
			return false;
		}

		if (formObject.getValue(SANCT_RISK_CURRENT_RSK_BANK).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(SANCT_RISK_CURRENT_RSK_BANK,
					"Please Select Current Risk Bank");
			return false;
		}
		return true;
	}

	public void fillDuplicateData(String iListViewSelectedRow) {
		try {
			int iListViewRows = getGridCount(LVW_DEDUPE_RESULT);
			int selectedRow = -1;
			if (iListViewRows == 0) {
				sendMessageValuesList(LVW_DEDUPE_RESULT,
						"There is no row in the grid");
				return;
			}
			if (iListViewRows > 0 && "".equalsIgnoreCase(iListViewSelectedRow)) {
				sendMessageValuesList(LVW_DEDUPE_RESULT,
						"Please Select a row from grid");
				return;
			}
			if (!"".equalsIgnoreCase(iListViewSelectedRow)) {
				selectedRow = Integer.parseInt(iListViewSelectedRow);
			}
			String sCustomerID = formObject.getTableCellValue(
					LVW_DEDUPE_RESULT, selectedRow, 0);
			String sCustomerName = formObject.getTableCellValue(
					LVW_DEDUPE_RESULT, selectedRow, 1);
			String sMobile = formObject.getTableCellValue(LVW_DEDUPE_RESULT,
					selectedRow, 5);
			String sDOB = formObject.getTableCellValue(LVW_DEDUPE_RESULT,
					selectedRow, 8);
			String sEIDANo = formObject.getTableCellValue(LVW_DEDUPE_RESULT,
					selectedRow, 9);
			String sNationality = formObject.getTableCellValue(
					LVW_DEDUPE_RESULT, selectedRow, 10);
			String cid_trim = "";
			logInfo("fillDuplicateData", "cid before trimmmm::::" + sCustomerID);
			cid_trim = sCustomerID.replaceAll("^0+", "");
			logInfo("fillDuplicateData", "cid after trimmmm:::::" + cid_trim);
			int iRows = getGridCount("REPEAT_FRAME");
			int iProcessedCustomer = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String accountOwn = formObject.getValue(ACC_OWN_TYPE).toString();
			String relation = formObject.getTableCellValue(ACC_RELATION,
					iProcessedCustomer, "ACC_RELATION").toString();
			int age = 0;
			age = CalculateAge2(sDOB);
			int age1 = 0;
			age1 = CalculateAge3(sDOB);
			logInfo("", "accountOwn----" + accountOwn);
			logInfo("", "relation----" + relation);
			for (int iLoop = 1; iLoop < iRows; iLoop++) {
				if (sCustomerID.equalsIgnoreCase(formObject.getTableCellValue(
						ACC_RELATION, iLoop, "cid").toString())) {
					sendMessageValuesList(LVW_DEDUPE_RESULT,
							"This customer is already added in the grid");
					return;
				}
			}
			String sQuery = "SELECT MEMO_SEVERITY FROM USR_0_CUST_MASTER_WMS WHERE CUST_ID ='"
					+ cid_trim + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				if (sOutput.get(0).get(0).equalsIgnoreCase("H")) {
					sendMessageValuesList(LVW_DEDUPE_RESULT,
							"Can not select this customer as memo severity is high");
					return;
				}
			}
			String sQueryy = "select VALUE from usr_0_defaultvalue_fcr where name='Minor_Age'";
			List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
			logInfo("", "sOutputt------" + sOutputt);
			if (sOutput != null && sOutput.size() > 0) {
				int sMinorAge = Integer.parseInt(sOutput.get(0).get(0));
				logInfo("", "sMinorAge....." + sMinorAge);
				// end edit by mohit on 08052017
				if (formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Joint")
						&& age < sMinorAge) {
					sendMessageValuesList(LVW_DEDUPE_RESULT,
							"Date Of Birth Should be greater than or equal to "
									+ sMinorAge + " Years");
					return;
				}
				if (formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Single")
						&& age < 18) {
					sendMessageValuesList(LVW_DEDUPE_RESULT,
							"Date Of Birth Should be greater than or equal to 18 Years");
					return;
				}
				if (accountOwn.equalsIgnoreCase("Minor")) {
					if (age1 > sMinorAge && relation.equalsIgnoreCase("Minor")) {
						sendMessageValuesList(LVW_DEDUPE_RESULT,
								"For Minor Date Of Birth Should Not Be Greater Than or equal to "
										+ sMinorAge + " Years");
						return;
					}

					if (age < sMinorAge
							&& relation.equalsIgnoreCase("Guardian")) {
						sendMessageValuesList(LVW_DEDUPE_RESULT,
								"For Guardian Date Of Birth Should Be Greater Than or equal to "
										+ sMinorAge + " Years");
						return;
					}

				}
			}
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 1,
					sCustomerName);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 2,
					cid_trim);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 3,
					sMobile);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 4,
					sEIDANo);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 5,
					sDOB);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 6,
					sNationality);
			formObject.setTableCellValue(ACC_RELATION, iProcessedCustomer, 7,
					"Existing");
			formObject.setValue(CHECKBOX_SELECTALL_FCR, "true");
			formObject.setValue(CHECKBOX_SELECTALL_MANUAL, "false");
			formObject.setValue(CHECKBOX_SELECTALL_EIDA, "false");
			manageFCRCheckBoxes();
			manageManualCheckBoxes();
			manageEIDACheckBoxes();
			setFCRValueonLoad(cid_trim);
			formObject.setValue(PD_ANY_CHNG_CUST_INFO, "No");
			formObject.setStyle(PD_ANY_CHNG_CUST_INFO, DISABLE, FALSE);
			if (sActivityName.equalsIgnoreCase("DDE_Cust_Info")
					|| sActivityName.equalsIgnoreCase("CPD Maker")) {
				// populateQDEModeOtherData(cid_trim);
			}
			if (sActivityName.equalsIgnoreCase("QDE_CUST_INFO")) {
				saveComparisonData();
				saveCustNeedAnalysisData();
				saveKYCInfoRetailQDE();
				//saveKycMultiDropDownData();
			} else {
				saveKYCInfo();
				//saveKycMultiDropDownData();
//				savePreAssessmentDetails();   //shahbaz
				saveComparisonData();
				saveIndividualInfo();
				saveIndividualContactInfo();
				// SaveDuplicateData();
			}
		} catch (Exception e) {
			logError("fillDuplicateData", e);
		}
	}

	public int CalculateAge2(String dob) {
		Calendar dobDate = Calendar.getInstance();
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR);
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);

		SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
		String d1 = dob;
		try {
			Date formatted1 = f.parse(d1);
			dobDate.setTime(formatted1);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int year = dobDate.get(Calendar.YEAR);
		int month = dobDate.get(Calendar.MONTH);
		int day = dobDate.get(Calendar.DAY_OF_MONTH);

		int age = curYear - year;
		if (curMonth < month || (month == curMonth && curDay < day)) {
			age--;
		} else if (curMonth > month || (month == curMonth && curDay > day)) {
			age++;
		}
		logInfo("", "age==" + age);
		return age;
	}

	public int CalculateAge3(String dob) {
		Calendar dobDate = Calendar.getInstance();
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR);
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);

		SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
		String d1 = dob;
		try {
			Date formatted1 = f.parse(d1);
			dobDate.setTime(formatted1);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int year = dobDate.get(Calendar.YEAR);
		int month = dobDate.get(Calendar.MONTH);
		int day = dobDate.get(Calendar.DAY_OF_MONTH);

		int age = curYear - year;
		if (curMonth < month || (month == curMonth && curDay < day)) {
			age--;
		}

		logInfo("", "age==" + age);
		return age;
	}

	public void Frame2_Disable() {
		disableControls(new String[] { CRO_DEC, CRO_REJ_REASON, CRO_REMARKS });
	}

	public Boolean validateW8SignUpDate(String date, String controlName) {
		try {
			logInfo("validateW8SignUpDate", "Called validateW8SignUpDate ");
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String scurrentDate = simpledateformat.format(calendar.getTime());
			String sDate = formObject.getValue(date).toString();

			if (sDate.equalsIgnoreCase(""))
				return true;
			logInfo("validateW8SignUpDate", "date :" + sDate + "\n "
					+ "scurrentDate " + scurrentDate);

			if (!scurrentDate.equals("")) {
				String[] temp = scurrentDate.split("/");

				if (temp[1].length() == 3) {
					scurrentDate = temp[0] + "/" + getMonthNumber(temp[1])
							+ "/" + temp[2];
				} else {
					scurrentDate = temp[0] + "/" + temp[1] + "/" + temp[2];
				}
			}

			Date currentDate = simpledateformat.parse(scurrentDate);
			Date nDate = simpledateformat.parse(sDate);
			logInfo("validateW8SignUpDate", "currentDate :" + currentDate
					+ "\n " + "nDate " + nDate);

			if (nDate.compareTo(currentDate) > 0) {
				sendMessageValuesList(date, controlName + " " + CA014);
				return false;
			} else if (CalculateAge(sDate) > 3) {
				sendMessageValuesList(date, controlName
						+ " can not be older than 3 years");
				return false;
			}
		} catch (Exception exp) {
			logInfo("validateW8SignUpDate",
					"Caught the exception " + exp.getMessage());
			exp.printStackTrace();
		}
		return true;
	}

	public Boolean ValidateMobileNoStart(String sManualCBControl,
			String sManualDataControl, String sOption, String sMessageID,
			String sField) {
		logInfo("ValidateMobileNoStart", "sMessageID" + sMessageID
				+ ", sManualCBControl = " + sManualCBControl
				+ ", sManualDataControl " + sManualDataControl + ", sField "
				+ sField);
		try {
			logInfo("ValidateMobileNoStart", "In ValidateMobileNoStart");
			logInfo("ValidateMobileNoStart", flag_phone_start);

			if ("United Arab Emirates".equalsIgnoreCase(checkCountry())) {
				logInfo("ValidateMobileNoStart", "Resident country is:"
						+ formObject.getValue("RESIDENT_MANUAL").toString());
				sMessageID = CR0005;
				sOption = "Mandatory";
				logInfo("ValidateMobileNoStart", "Check box value 4:"
						+ formObject.getValue("Check4").toString());
				logInfo("ValidateMobileNoStart", "check control:"
						+ sManualCBControl);
				if (formObject.getValue(sManualCBControl).toString()
						.equalsIgnoreCase("True")) {
					logInfo("ValidateMobileNoStart", "Check box value:"
							+ formObject.getValue(sManualCBControl).toString());
					logInfo("ValidateMobileNoStart", "sManualCBControl"
							+ sManualCBControl);
					String sNumber = formObject.getValue(sManualDataControl)
							.toString();
					logInfo("ValidateMobileNoStart", "NUMBER" + sNumber);
					if (sOption.equalsIgnoreCase("Mandatory")) {
						logInfo("ValidateMobileNoStart", "Mandatory:::"
								+ sOption);
						//Modify By Shivanshu ATP-472
						if (!(sNumber.startsWith("971") || sNumber.startsWith("+971") || sNumber.startsWith("00971"))) {
							logInfo("ValidateMobileNoStart", "sNumber:::"
									+ sNumber);
							// sendMessageValuesList(sManualDataControl,sManualDataControl
							// +' '+ sMessageID);
							// sendMessageValuesList(sManualDataControl,sField
							// +' '+ sMessageID);// newly added
							// JOptionPane.showMessageDialog(null,sField+NGFUserResourceMgr.getResourceString_val(sMessageID));
							// int
							// reply=JOptionPane.showConfirmDialog(null,sField+sMessageID,
							// null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
							}
							sendMessageValuesList("", sField
									+ " does not start with 971");// 29july2021
							return true;
						}
					}
				}
			} else {
				if (formObject.getValue(sManualCBControl).toString()
						.equalsIgnoreCase("True")) {
					logInfo("ValidateMobileNoStart",
							"Resident country other is:"
									+ formObject.getValue("RESIDENT_MANUAL")
											.toString());
					String sNumber = formObject.getValue(sManualDataControl)
							.toString();
					logInfo("ValidateMobileNoStart", "Check box value 4:"
							+ formObject.getValue(CHECKBOX_TELE_MOB_MANUAL)
									.toString());
					logInfo("ValidateMobileNoStart", "check control:"
							+ sManualCBControl);
					if (sOption.equalsIgnoreCase("Mandatory")) {
						logInfo("ValidateMobileNoStart", "Check box value:"
								+ formObject.getValue(sManualCBControl)
										.toString());
						logInfo("ValidateMobileNoStart", "sManualCBControl"
								+ sManualCBControl);
						if (sNumber.charAt(0) != '+'
								&& (!sNumber.startsWith("00"))) {
							// sendMessageValuesList(sManualDataControl,
							// sMessageID);
							sendMessageValuesList(sManualDataControl, sField
									+ ' ' + sMessageID);// newly added
							// JOptionPane.showMessageDialog(null,sField+NGFUserResourceMgr.getResourceString_val(sMessageID));
							// int
							// reply=JOptionPane.showConfirmDialog(null,sField+sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;
								// }
								return false;
							}
						}
					}
					sNumber = sNumber.substring(1, sNumber.length());
					if (sNumber.indexOf("+") != -1) {
						// JOptionPane.showMessageDialog(null,"In "+sField+"Sign '+' is allowed only in the starting of number");
						// int
						// reply=JOptionPane.showConfirmDialog(null,"In"+sField+"Sign '+' is allowed only in the starting of number",null,
						// JOptionPane.YES_NO_OPTION);
						// if(reply==JOptionPane.NO_OPTION){
						// formObject.NGFocus(sManualDataControl);
						sendMessageValuesList(sManualDataControl, sMessageID);
						if (flag_insert_audit = true) {
							insertMobileChangeAudit();
							flag_insert_audit = false;
							// }
							return false;
						}
					}
				}
			}
			if (sManualCBControl.equalsIgnoreCase(CHECKBOX_TELE_MOB_MANUAL)) {
				flag_phone_start = "false";
			}
			logInfo("ValidateMobileNoStart", "sManualCBControlKDD"
					+ sManualCBControl);

		} catch (Exception e) {
			logError("ValidateMobileNoStart", e);
		}
		return true;
	}

	public boolean ValidateFATCADetails(String sType) {
		logInfo("ValidateFATCADetails", "INSIDE");
		logInfo("FAT_US_PERSON  ::", formObject.getValue(FAT_US_PERSON)
				.toString());
		try {
			if (!ValidateComparisonDataCombo(CHECKBOX_CNTRY_OF_CORR_FCR,
					CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
					FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY, CA020, "Mandatory",
					"Country of Correspondence Address")) {
				logInfo("ValidateFATCADetails",
						"Inside ValidateComparisonDataCombo Condition");
				return false;
			} else if (!ValidateComparisonDataCombo(CHECKBOX_COUNTRY_RES_FCR,
					CHECKBOX_COUNTRY_RES_EIDA, CHECKBOX_COUNTRY_RES_MANUAL,
					FCR_RESIDENT, EIDA_RESIDENT, MANUAL_RESIDENT, CA0155,
					"Mandatory", "Residential Address Country")) {
				logInfo("ValidateFATCADetails",
						"Inside ValidateComparisonDataCombo Conditon 1");
				return false;
			} else if (!ValidateComparisonDataComboForDot(CHECKBOX_COB_FCR,
					CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
					EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH, CA0178,
					"Mandatory", "Country of Birth")) {
				return false;
			} else if (formObject.getValue(CITYBIRTH_MANUAL).toString()
					.equalsIgnoreCase("")) {
				logInfo("ValidateFATCADetails",
						"Inside CITYBIRTH_MANUAL Condition");
				sendMessageValuesList(CITYBIRTH_MANUAL,
						"Please enter city of birth");
				return false;
			} else if (!ValidateComparisonData(CHECKBOX_TELE_RES_FCR,
					CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_RES_MANUAL, FCR_PH,
					EIDA_PH, MANUAL_PH, CA057, "Optional",
					"Residence Phone number")) {
				logInfo("ValidateFATCADetails",
						"Inside ValidateComparisonData Condition 1");
				return false;
			}

			/*
			 * else
			 * if(!ValidatePhoneNo(CHECKBOX_TELE_RES_FCR,CHECKBOX_TELE_RES_EIDA
			 * ,CHECKBOX_TELE_RES_MANUAL, FCR_PH,EIDA_PH,MANUAL_PH,CA0127)) {
			 * logInfo
			 * ("ValidateFATCADetails","Inside ValidatePhoneNo Condition");
			 * return false; } else if(flag_phone_start.equalsIgnoreCase("true")
			 * &&
			 * !ValidateMobileNoStart("CHECK25","ph_MANUAL","Mandatory",CA0161
			 * ,"Residence Number")){ logInfo("ValidateFATCADetails",
			 * "Inside ValidateMobileNoStart Condition"); return false; } else
			 * if
			 * (!ValidateComparisonData(CHECKBOX_TELE_MOB_FCR,CHECKBOX_TELE_MOB_EIDA
			 * ,CHECKBOX_TELE_MOB_MANUAL,
			 * FCR_MOBILE,EIDA_MOBILE,MANUAL_MOBILE,CA059
			 * ,"Mandatory","Mobile number")) { logInfo("ValidateFATCADetails",
			 * "Inside ValidateComparisonData Condition 2"); return false; }
			 * 
			 * else
			 * if(!ValidateMobileNo(CHECKBOX_TELE_MOB_FCR,CHECKBOX_TELE_MOB_EIDA
			 * ,CHECKBOX_TELE_MOB_MANUAL,
			 * FCR_MOBILE,EIDA_MOBILE,MANUAL_MOBILE,CA0126)) {
			 * logInfo("ValidateFATCADetails"
			 * ,"Inside ValidateMobileNo Condition "); return false; } else
			 * if(flag_phone_start.equalsIgnoreCase("true") &&
			 * !ValidateMobileNoStart
			 * (CHECKBOX_TELE_MOB_MANUAL,MANUAL_MOBILE,"Mandatory"
			 * ,CA0161,"Mobile Number")){ logInfo("ValidateFATCADetails",
			 * "Inside ValidateMobileNoStart Condition "); return false; } else
			 * if(!ValidateComparisonDataCombo(CHECKBOX_NATIONALITY_FCR,
			 * CHECKBOX_NATIONALITY_EIDA,
			 * CHECKBOX_NATIONALITY_MANUAL,FCR_NATIONALITY
			 * ,EIDA_NATIONALITY,MANUAL_NATIONALITY,CA013,
			 * "Mandatory","Nationality")){ logInfo("ValidateFATCADetails",
			 * "Inside ValidateComparisonDataCombo Conditon 2"); return false; }
			 */
			else if (formObject.getValue(FAT_US_PERSON).toString()
					.equalsIgnoreCase("")) {
				logInfo("ValidateFATCADetails", "Inside FAT_US_PERSON ");
				sendMessageValuesList(FAT_US_PERSON, CA031);
				// formObject.NGFocus(FAT_US_PERSON);
				return false;
			} else if (formObject.getValue(FAT_LIABLE_TO_PAY_TAX).toString()
					.equalsIgnoreCase("")) {
				logInfo("ValidateFATCADetails", "Inside FAT_LIABLE_TO_PAY_TAX ");
				sendMessageValuesList(FAT_LIABLE_TO_PAY_TAX, CA032);
				// formObject.NGFocus(FAT_LIABLE_TO_PAY_TAX);
				return false;
			} else if (!ValidateCounrtyBirth(CHECKBOX_COB_FCR,
					CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
					EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH, CA033, "")) {
				logInfo("ValidateFATCADetails", "INSIDE  ValidateCounrtyBirth");

				return false;
			} else if (formObject.getValue(POACOMBO).toString()
					.equalsIgnoreCase("")) {
				logInfo("ValidateFATCADetails", "INSIDE  ValidateCounrtyBirth");
				sendMessageValuesList(POACOMBO, "Please select POA Holder");
				// formObject.NGFocus(POAcombo);
				return false;
			}
			if (sType.equalsIgnoreCase("Main")) {
				if (formObject.getValue(FAT_CUST_CLASSIFICATION).toString()
						.equalsIgnoreCase("US PERSON")) {
					if (formObject.getValue(FAT_SSN).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(FAT_SSN,
								"Please Fill SSN, FATCA Classification is US PERSON");
						// formObject.NGFocus(FAT_SSN);
						return false;
					} else if (formObject.getValue(FAT_SSN).toString().length() < 9) {
						sendMessageValuesList(FAT_SSN,
								"SSN number length should be equal to 9");
						// formObject.NGFocus(FAT_SSN);
						return false;
					}
				} else if (formObject.getValue(INDICIACOMBO).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(INDICIACOMBO,
							"Please select US Indicia Found");
					// formObject.NGFocus(INDICIACOMBO);
					return false;
				} else if (formObject.getValue(COMBODOC).toString()
						.equalsIgnoreCase("")) {
					String sFinalCountryOfBirth = getFinalDataComparison(
							CHECKBOX_COB_FCR, CHECKBOX_COB_EIDA,
							CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
							EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH);
					logInfo("ValidateFATCADetails", "sFinalCountryOfBirth"
							+ sFinalCountryOfBirth);
					String areYouUS = formObject.getValue(FAT_US_PERSON)
							.toString();
					logInfo("COMBODOC", areYouUS + " areYouUS");
					if (sFinalCountryOfBirth.equalsIgnoreCase("UNITED STATES")
							&& areYouUS.equalsIgnoreCase("YES")) {
						sendMessageValuesList(COMBODOC,
								"Please select Documents to be Collected");
						// formObject.NGFocus(COMBODOC);
						return false;
					}
				} else if (formObject.getValue(COMBODOC).toString()
						.equalsIgnoreCase("W8BEN")) {
					if (formObject.getValue(DATEPICKERW8).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(DATEPICKERW8,
								"Please select W8 Signup Date");
						// formObject.NGFocus(DATEPICKERW8);
						return false;
					} else if (!validateW8SignUpDate("DatePickerW8",
							"W8 Signup")) {
						// formObject.NGFocus(DATEPICKERW8);
						return false;
					}
				} else if (formObject.getValue(COMBODOC).toString()
						.equalsIgnoreCase("W9")) {
					if (formObject.getValue(FAT_SSN).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(FAT_SSN, "Please Fill SSN");
						// formObject.NGFocus("combo47");
						return false;
					} else if (formObject.getValue(FAT_SSN).toString().length() < 9) {
						sendMessageValuesList(FAT_SSN,
								"SSN number length should be equal to 9");
						// formObject.NGFocus("combo47");
						return false;
					}
				}
			}

			try {
				String sInputXML = FetchFATCADetails(sType);
				logInfo("ValidateFATCADetails", "sInputXML----" + sInputXML);
				String sOutput = socket.connectToSocket(sInputXML);
				logInfo("ValidateFATCADetails", "sOutput----" + sOutput);
				String sReturnCode = getTagValues(sOutput, "returnCode");
				logInfo("ValidateFATCADetails", "Changes done for Fatca");
				if (sReturnCode.equalsIgnoreCase("0")
						|| sReturnCode.equalsIgnoreCase("2")) {
					if (sType.equalsIgnoreCase("Mini")) {
						formObject.setValue(US_INDICIA_MDM,
								getTagValues(sOutput, "returnValue"));
						logInfo("ValidateFATCADetails",
								"FAT_CUST_CLASSIFICATION set to non us person"
										+ getTagValues(sOutput, "returnValue"));
						if (!getTagValues(sOutput, "returnValue")
								.equalsIgnoreCase("")) {
							if (formObject.getValue(US_INDICIA_MDM).toString()
									.equalsIgnoreCase("No")) {
								formObject.setValue(INDICIACOMBO,
										getTagValues(sOutput, "returnValue"));
								formObject.setValue(FAT_CUST_CLASSIFICATION,
										"NON-US PERSON");
								logInfo("ValidateFATCADetails",
										"FAT_CUST_CLASSIFICATION set to non us person");
							} else if (getTagValues(sOutput, "returnValue")
									.contains("PARTIAL")) {
								formObject.setValue(INDICIACOMBO, "YES");
								formObject.setValue(FAT_CUST_CLASSIFICATION,
										"NON-US PERSON");
							} else {
								formObject.setValue(INDICIACOMBO, "YES");
								formObject.setValue(FAT_CUST_CLASSIFICATION,
										"US PERSON");
								logInfo("ValidateFATCADetails",
										"FAT_CUST_CLASSIFICATION set to us person");
							}
						}
						String countryOfBirth = getFinalDataComparison(
								CHECKBOX_COB_FCR, CHECKBOX_COB_EIDA,
								CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
								EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH);
						String resCountry = getFinalData(
								formObject.getValue(
										CHECKBOX_COUNTRY_PER_RES_FCR)
										.toString(),
								formObject.getValue(
										CHECKBOX_COUNTRY_PER_RES_EIDA)
										.toString(),
								formObject.getValue(
										CHECKBOX_COUNTRY_PER_RES_MANUAL)
										.toString(),
								formObject.getValue(FCR_PER_CNTRY).toString(),
								formObject.getValue(EIDA_PER_CNTRY).toString(),
								formObject.getValue(MANUAL_PER_CNTRY)
										.toString());
						String mailingCountry = getFinalData(
								formObject.getValue(CHECKBOX_CNTRY_OF_CORR_FCR)
										.toString(),
								formObject
										.getValue(CHECKBOX_CNTRY_OF_CORR_EIDA)
										.toString(),
								formObject.getValue(
										CHECKBOX_CNTRY_OF_CORR_MANUAL)
										.toString(),
								formObject.getValue(FCR_CNTRY).toString(),
								formObject.getValue(EIDA_CNTRY).toString(),
								formObject.getValue(MANUAL_CNTRY).toString());

						if ((countryOfBirth.equalsIgnoreCase("United States"))
								|| (resCountry
										.equalsIgnoreCase("United States"))
								|| (mailingCountry
										.equalsIgnoreCase("United States"))) {
							formObject.setValue(INDICIACOMBO, "YES");
							formObject.setValue(FAT_CUST_CLASSIFICATION,
									"US PERSON");
							logInfo("",
									"Country is US :: FAT_CUST_CLASSIFICATION set to us person");
						}

						if (formObject.getValue(COMBODOC).toString()
								.equalsIgnoreCase("W8BEN")) {
							formObject.setValue(FAT_CUST_CLASSIFICATION,
									"NON-US PERSON");
						}
						sendMessageValuesList("",
								"Mini FATCA Validation done Successfully");
						formObject.setValue(FATCAMINI, "No");
						formObject.setStyle(BTN_VALIDATE, DISABLE, TRUE);
						formObject.setStyle(BTN_VALIDATEFATCA, DISABLE, FALSE);
						return true;
					} else {
						if (getTagValues(sOutput, "returnValue")
								.equalsIgnoreCase("Yes")) {
							String sMode = formObject.getValue(DATA_ENTRY_MODE)
									.toString(); // change for date picker set
													// 05-02-2022
							Calendar sCurrentCalendar = Calendar.getInstance(); // change
																				// 26-05-2022
																				// Gauta
																				// set
																				// current
																				// date
							SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
									DATEFORMAT);
							String sClassficaitondate = simpleDateFormat
									.format(sCurrentCalendar.getTime());
							if (ACTIVITY_CPD_MAKER
									.equalsIgnoreCase(sActivityName)
									&& "".equalsIgnoreCase(sMode)) {
								// formObject.setValue(DATEPICKERCUST,
								// getTagValues(sOutput,"customerFATCAClsfctnDate"));
								formObject.setValue(DATEPICKERCUST,
										sClassficaitondate);
							} else if (!ACTIVITY_CPD_MAKER
									.equalsIgnoreCase(sActivityName)
									&& ("Quick Data Entry"
											.equalsIgnoreCase(sMode) || "Detail Data Entry"
											.equalsIgnoreCase(sMode))) {
								// formObject.setValue(DATEPICKERCUST,
								// getTagValues(sOutput,"customerFATCAClsfctnDate"));
								formObject.setValue(DATEPICKERCUST,
										sClassficaitondate);
							}
							logInfo("ValidateFATCADetails",
									"Changed sClassficaitondate "
											+ sClassficaitondate);
							formObject.setValue(CHANGE_IN_FATCA_3WAY_INPUTS,
									"No");
							formObject.setValue(FATCAMAIN, "No");
							sendMessageValuesList("",
									"Main FATCA Validation done Successfully");
							formObject.setStyle(BTN_VALIDATEFATCA, DISABLE,
									TRUE);
							return true;
						} else {
							sendMessageValuesList("",
									"Mismatch in Customer US Classification.Please check");
							formObject.setStyle(BTN_VALIDATEFATCA, DISABLE,
									FALSE);
							return false;
						}
					}
				} else {
					String sMessege = getTagValue(sOutput, "errorDescription");
					if (sMessege.equalsIgnoreCase("")) {
						sendMessageValuesList("",
								"Unable to Validate FATCA Details");
						return false;
					} else {
						sendMessageValuesList("", sMessege);
						return false;
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				logInfo("ERROR IN FetchFATCADetails", e.toString());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return true;
	}

	public Boolean ValidateComparisonDataComboForDot(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sStatus,
			String sFieldName) {
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFCRDataControl, sMessageID);
				// formObject.NGFocus(sFCRDataControl);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {

				sendMessageValuesList(sEIDADataControl, sMessageID);
				// formObject.NGFocus(sEIDADataControl);
				return false;
			}
		} else if (sStatus.equalsIgnoreCase("Mandatory")) {
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sManualDataControl).toString()
						.equalsIgnoreCase("")
						|| formObject.getValue(sManualDataControl).toString()
								.equalsIgnoreCase("")
						|| formObject.getValue(sManualDataControl).toString()
								.equalsIgnoreCase(".")) {
					sendMessageValuesList(sManualCBControl, sMessageID);
					// formObject.NGFocus(sManualDataControl);
					return false;
				}
			} else {
				sendMessageValuesList(sManualCBControl,
						"Please select the manual checkbox for " + sFieldName);
				// formObject.NGFocus(sManualCBControl);
				return false;
			}
		} else {
			if (formObject.getValue(sManualCBControl).toString()
					.equalsIgnoreCase("True")) {
				if (formObject.getValue(sManualDataControl).toString()
						.equalsIgnoreCase("")
						|| formObject.getValue(sManualDataControl).toString()
								.equalsIgnoreCase(".")) {
					sendMessageValuesList(sManualDataControl, sMessageID);
					// formObject.NGFocus(sManualDataControl);
					return false;
				}
			}
		}
		return true;
	}

	// end
	public String FetchFATCADetails(String sType) {
		XMLParser generalDataParser = new XMLParser();
		// String sGeneralData = formObject.getWFGeneralData();

		// String sEngineName = generalDataParser.getValueOf("EngineName");
		// String sSessionId = generalDataParser.getValueOf("DMSSessionId");

		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sNationality = getFinalDataComparison(CHECKBOX_NATIONALITY_FCR,
				CHECKBOX_NATIONALITY_EIDA, CHECKBOX_NATIONALITY_MANUAL,
				FCR_NATIONALITY, EIDA_NATIONALITY, MANUAL_NATIONALITY).trim();
		String sResidenceCountry = getFinalDataComparison(
				CHECKBOX_COUNTRY_RES_FCR, CHECKBOX_COUNTRY_RES_EIDA,
				CHECKBOX_COUNTRY_RES_MANUAL, FCR_RESIDENT, EIDA_RESIDENT,
				MANUAL_RESIDENT).trim();
		String sCountry = getFinalDataComparison(CHECKBOX_CNTRY_OF_CORR_FCR,
				CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
				FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY).trim();
		String sPhone = getFinalDataComparison(CHECKBOX_TELE_RES_FCR,
				CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_RES_MANUAL, FCR_PH,
				EIDA_PH, MANUAL_PH).trim();
		String sMobile = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
				CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL, FCR_MOBILE,
				EIDA_MOBILE, MANUAL_MOBILE).trim();
		String sCallType = "";
		String sFinalCountryOfBirth1 = getFinalDataComparison(CHECKBOX_COB_FCR,
				CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
				EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH);
		logInfo("", sFinalCountryOfBirth1 + "combodoc sFinalCountryOfBirth1");
		if (sType.equalsIgnoreCase("Mini")) {
			sCallType = "ValidateFATCAMini";
		} else {
			sCallType = "ValidateFATCAMain";
		}
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>" + "<Calltype>"
				+ sCallType
				+ "</Calltype>"
				+ "<Customer>"
				+ "<customerSegment>"
				+ formObject.getValue(SEARCH_PASS_NO)
				+ "</customerSegment>\n"
				+ "<serviceType>O</serviceType>\n"
				+ "<product>L</product>\n"
				+ "<nationality>"
				+ sNationality
				+ "</nationality>\n"
				+ "<residentialAddressCountry>"
				+ sResidenceCountry
				+ "</residentialAddressCountry>\n"
				+ "<mailingAddressCountry>"
				+ sCountry
				+ "</mailingAddressCountry>\n"
				+ "<telephoneResidence>"
				+ sPhone
				+ "</telephoneResidence>\n"
				+ "<telephoneOffice></telephoneOffice>\n"
				+ "<telephoneMobile>"
				+ sMobile
				+ "</telephoneMobile>\n"
				+ "<USpassportholder>"
				+ formObject.getValue(FAT_US_PERSON)
				+ "</USpassportholder>\n"
				+ "<USTaxLiable>"
				+ formObject.getValue(FAT_LIABLE_TO_PAY_TAX)
				+ "</USTaxLiable>\n"
				+ "<countryOfBirth>"
				+ sFinalCountryOfBirth1
				+ "</countryOfBirth>\n"
				+ "<standingInstructionCountry>NO</standingInstructionCountry>\n"
				+ "<POAHolderCountry>"
				+ formObject.getValue(POACOMBO)
				+ "</POAHolderCountry>\n";

		// formObject.getValue("CNTRY_OF_BIRTH")
		if (sType.equalsIgnoreCase("Main")) {
			String sClassificationDate = formObject.getValue(DATEPICKERCUST)
					.toString();

			if (sClassificationDate.equalsIgnoreCase("")) {
				Calendar calendar = Calendar.getInstance();
				SimpleDateFormat simpledateformat = new SimpleDateFormat(
						DATEFORMAT);
				sClassificationDate = simpledateformat.format(calendar
						.getTime());
			}

			sInputXML += "<USIndiaciaFound>"
					+ formObject.getValue(INDICIACOMBO).toString()
					+ "</USIndiaciaFound>\n" + "<documentCollected>"
					+ formObject.getValue(COMBODOC).toString()
					+ "</documentCollected>\n" + "<W8_Sign_Date>"
					+ formObject.getValue(DATEPICKERW8).toString()
					+ "</W8_Sign_Date>\n" + "<TINorSSN>"
					+ formObject.getValue(FAT_SSN).toString() + "</TINorSSN>\n"
					+ "<customerFATCAClsfctn>"
					+ formObject.getValue(FAT_CUST_CLASSIFICATION).toString()
					+ "</customerFATCAClsfctn>\n"
					+ "<customerFATCAClsfctnDate>" + sClassificationDate
					+ "</customerFATCAClsfctnDate>\n";
		}

		sInputXML += "</Customer>" + "<EngineName>" + sEngineName
				+ "</EngineName>" + "<SessionId>" + sSessionId + "</SessionId>"
				+ "<REF_NO>" + sOutput.get(0).get(0) + "</REF_NO>" + "<WiName>"
				+ sWorkitemId + "</WiName>" + "</APWebService_Input>";
		return sInputXML;
	}

	public Boolean ValidatePhoneNo(String sFCRCBControl, String sEIDACBControl,
			String sManualCBControl, String sFCRDataControl,
			String sEIDADataControl, String sManualDataControl,
			String sMessageID) {
		logInfo("ValidatePhoneNo", "INSIDE");
		try {
			if (flag_phone) {
				if ("United Arab Emirates".equalsIgnoreCase(checkCountry())) {
					// sMessageID=CR0004;
					sMessageID = "Residence Telephone Number is not of 11 digits";
					if (formObject.getValue(sFCRCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sFCRDataControl).toString()
								.length() != 11) {
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID,
							// null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sFCRDataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList("", sMessageID);
								return true;
							}
						}
					} else if (formObject.getValue(sEIDACBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sEIDADataControl).toString()
								.length() != 11) {
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sEIDADataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList("", sMessageID);
								return true;
							}
						}
					} else if (formObject.getValue(sManualCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sManualDataControl).toString()
								.length() != 11) {
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sManualDataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList("", sMessageID);
								return true;
							}
						}
					}

				} else {
					if (formObject.getValue(sFCRCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sFCRDataControl).toString()
								.length() < 10) {
							// Need to dicuss for this
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sFCRDataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList(sFCRDataControl,
										sMessageID);
								return false;
							}
						}
					} else if (formObject.getValue(sEIDACBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sEIDADataControl).toString()
								.length() < 10) {
							// Need to dicuss for this
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sEIDADataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList(sEIDADataControl,
										sMessageID);
								return false;
								// }
							}
						}
					} else if (formObject.getValue(sManualCBControl).toString()
							.equalsIgnoreCase("True")) {
						if (formObject.getValue(sManualDataControl).toString()
								.length() < 10) {
							// int
							// reply=JOptionPane.showConfirmDialog(null,sMessageID
							// , null, JOptionPane.YES_NO_OPTION);
							// if(reply==JOptionPane.NO_OPTION){
							// formObject.NGFocus(sManualDataControl);
							if (flag_insert_audit = true) {
								insertMobileChangeAudit();
								flag_insert_audit = false;// BUG ID: 1061554
								// }
								sendMessageValuesList(sManualDataControl,
										sMessageID);
								return false;
							}
						}
					}
				}
			}
			flag_phone = false;
		} catch (Exception e) {
			logError("ValidatePhoneNo", e);
		}
		return true;
	}

	/*
	 * public Boolean ValidateMobileNo(String sFCRCBControl,String
	 * sEIDACBControl,String sManualCBControl, String sFCRDataControl,String
	 * sEIDADataControl,String sManualDataControl,String sMessageID) { try {
	 * logInfo("ValidateMobileNo","INSIDE"); if(flag_mobile){
	 * if("United Arab Emirates".equalsIgnoreCase(checkCountry())) {
	 * sMessageID=CR0002;
	 * 
	 * logInfo("ValidateMobileNo","INSIDE IF");
	 * if(formObject.getValue(sFCRCBControl
	 * ).toString().equalsIgnoreCase("True")) {
	 * logInfo("ValidateMobileNo","Inside FCR check");
	 * if(formObject.getValue(sFCRDataControl).toString().length()!=12) { //int
	 * reply
	 * =JOptionPane.showConfirmDialog(null,NGFUserResourceMgr.getResourceString_val
	 * (sMessageID) , null, JOptionPane.YES_NO_OPTION); //if(reply==
	 * JOptionPane.NO_OPTION){ //formObject.NGFocus(sFCRDataControl);
	 * sendMessageValuesList(sFCRDataControl,sMessageID);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; // } return false;}
	 * 
	 * } } else
	 * if(formObject.getValue(sEIDACBControl).toString().equalsIgnoreCase
	 * ("True")) { logInfo("ValidateMobileNo","Inside EIDA check");
	 * if(formObject.getValue(sEIDADataControl).toString().length()!=12) {
	 * sendMessageValuesList(sEIDADataControl,sMessageID); //int
	 * reply=JOptionPane
	 * .showConfirmDialog(null,NGFUserResourceMgr.getResourceString_val
	 * (sMessageID) , null, JOptionPane.YES_NO_OPTION); //if(reply==
	 * JOptionPane.NO_OPTION){ //formObject.NGFocus(sEIDADataControl);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; //} return false;} } } else
	 * if(formObject.getValue
	 * (sManualCBControl).toString().equalsIgnoreCase("True")) {
	 * logInfo("ValidateMobileNo","ValidateMobileNo:"+
	 * formObject.getValue(sManualDataControl
	 * ).toString()+":"+sManualDataControl);
	 * if(formObject.getValue(sManualDataControl).toString().length()!=12) {
	 * logInfo("ValidateMobileNo","ValidateMobileNo:"+formObject.getValue(
	 * sManualDataControl).toString() +":"+sManualDataControl); //int
	 * reply=JOptionPane
	 * .showConfirmDialog(null,NGFUserResourceMgr.getResourceString_val
	 * (sMessageID) , null, JOptionPane.YES_NO_OPTION); //if(reply==
	 * JOptionPane.NO_OPTION){ //formObject.NGFocus(sManualDataControl);
	 * sendMessageValuesList(sManualDataControl,sMessageID);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; //} return false;} } } } else {
	 * logInfo("ValidateMobileNo","INSIDE ELSE");
	 * if(formObject.getValue(sFCRCBControl
	 * ).toString().equalsIgnoreCase("True")) {
	 * if(formObject.getValue(sFCRDataControl).toString().length() <10) { //int
	 * reply
	 * =JOptionPane.showConfirmDialog(null,NGFUserResourceMgr.getResourceString_val
	 * (sMessageID) , null, JOptionPane.YES_NO_OPTION); //if(reply==
	 * JOptionPane.NO_OPTION){ //formObject.NGFocus(sFCRDataControl);
	 * sendMessageValuesList(sFCRDataControl,sMessageID);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; //} return false;} } } else
	 * if(formObject.getValue
	 * (sEIDACBControl).toString().equalsIgnoreCase("True")) {
	 * if(formObject.getValue(sEIDADataControl).toString().length() <10) { //int
	 * reply
	 * =JOptionPane.showConfirmDialog(null,NGFUserResourceMgr.getResourceString_val
	 * (sMessageID) , null, JOptionPane.YES_NO_OPTION); //if(reply==
	 * JOptionPane.NO_OPTION){ //formObject.NGFocus(sEIDADataControl);
	 * sendMessageValuesList(sEIDADataControl,sMessageID);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; //} return false;} } } else
	 * if(formObject.getValue
	 * (sManualCBControl).toString().equalsIgnoreCase("True")) {
	 * logInfo("ValidateMobileNo"
	 * ,"INSIDE ELSE"+formObject.getValue(sManualDataControl).toString());
	 * if(formObject.getValue(sManualDataControl).toString().length() <10) {
	 * //int reply=JOptionPane.showConfirmDialog(null,NGFUserResourceMgr.
	 * getResourceString_val(sMessageID) , null, JOptionPane.YES_NO_OPTION);
	 * //if(reply== JOptionPane.NO_OPTION){
	 * //formObject.NGFocus(sManualDataControl);
	 * sendMessageValuesList(sManualDataControl,sMessageID);
	 * if(flag_insert_audit=true){ insertMobileChangeAudit();
	 * flag_insert_audit=false; //} return false; } } } } } flag_mobile=false; }
	 * catch (Exception e) { logError("ValidateMobileNo", e); } return true; }
	 */

	public Boolean ValidateCounrtyBirth(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageID, String sControl) {
		logInfo("ValidateCounrtyBirth", "INSIDE ValidateCounrtyBirth");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sFCRDataControl, sMessageID);
				// JOptionPane.showMessageDialog(null,NGFUserResourceMgr.getResourceString_val(sMessageID));
				// formObject.NGFocus(sFCRCBControl);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(sEIDADataControl, sMessageID);
				// JOptionPane.showMessageDialog(null,NGFUserResourceMgr.getResourceString_val(sMessageID));
				// formObject.NGFocus(sEIDACBControl);
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			logInfo("ValidateCounrtyBirth", "INSIDE IT 1");
			if (formObject.getValue(sManualDataControl).toString()
					.equalsIgnoreCase("")
					|| formObject.getValue(sManualDataControl).toString()
							.equalsIgnoreCase("--Select--")) {
				logInfo("ValidateCounrtyBirth", "INSIDE IT 2");
				sendMessageValuesList(sManualDataControl, sMessageID);
				// JOptionPane.showMessageDialog(null,NGFUserResourceMgr.getResourceString_val(sMessageID));
				// formObject.NGFocus(sManualCBControl);
				return false;
			}
		}

		logInfo("ValidateCounrtyBirth", "ITS TRUE");
		return true;
	}

	public void callTRSD(String group) {
		logInfo("callTRSD", "Inside");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			// String query =
			// "select count(1) CNT from usr_0_trsd_details where wi_name = N'"+sWorkitemId+"' and "
			// +
			// "(sysdate-trsd_screeningdate) > 3 and acc_relation_sno = N'"+iSelectedRow+"' and user_id = N'"+group+"'";
			// List<List<String>> sOutput = formObject.getDataFromDB(query);
			// This query's output is not being used any where
			String query = "DELETE FROM usr_0_trsd_details WHERE WI_NAME ='"
					+ sWorkitemId + "' and acc_relation_sno = '" + iSelectedRow
					+ "' " + "and user_id = '" + group + "'";
			logInfo("inside callTRSD ", "Query1: " + query);
			formObject.saveDataInDB(query);
			if (group.equalsIgnoreCase("CRO")) {
				query = "DELETE FROM usr_0_trsd_details WHERE WI_NAME = N'"
						+ sWorkitemId + "' and acc_relation_sno = N'"
						+ iSelectedRow + "' " + "and user_id = 'CPD'";
				logInfo("callTRSD ", "Query2: " + query);
				formObject.saveDataInDB(query);
			}
			query = "select to_char(sysdate,'dd/MM/yyyy hh:mi:ss') DT,CUST_ID,FINAL_FULL_NAME, to_char(final_dob,'yyyy-mm-dd')DOB,"
					+ "(select country_code from usr_0_country_mast where country= final_nationality)NATIONALITY,FINAL_GENDER "
					+ " from usr_0_cust_txn where wi_name= '"
					+ sWorkitemId
					+ "' and cust_sno = '" + iSelectedRow + "'";
			logInfo("callTRSD ", "Query3: " + query);
			List<List<String>> sOutput = formObject.getDataFromDB(query);
			if (sOutput != null && sOutput.size() > 0) {
				logInfo("callTRSD", "Inside first if");
				String sysdate = sOutput.get(0).get(0);
				query = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
				List<List<String>> sOutputRef = formObject.getDataFromDB(query);
				String refno = (sOutputRef != null && sOutputRef.size() > 0) ? sOutputRef
						.get(0).get(0).toString()
						: "";
				String custId = getCustId(sWorkitemId, iSelectedRow) + refno;
				custId = "AO" + custId.replaceFirst("^0*", "");
				String inputXml = "<?xml version=\"1.0\"?>"
						+ "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>CALL_TRSD_CREATE</Calltype>" + "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>"
						+ refno
						+ "</REF_NO>"
						+ "<data><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
						+ "<sdQuery>"
						+ "<types>"
						+ "<type>INDIVIDUAL</type>"
						+ "</types>"
						+ "<name>"
						+ sOutput.get(0).get(2)
						+ "</name>"
						+ "<clientID>"
						+ custId
						+ "</clientID>"
						+ "<clientType>CUSTOMER</clientType>"
						+ "<createCaseOnMatches>CREATECASE</createCaseOnMatches>"
						+ "<nationalityCode>"
						+ sOutput.get(0).get(4)
						+ "</nationalityCode>"
						+ "<indDob>"
						+ sOutput.get(0).get(3)
						+ "</indDob>"
						+ "<indGender>"
						+ sOutput.get(0).get(5)
						+ "</indGender>"
						+ "</sdQuery></data>";
				String output = socket.connectToSocket(inputXml);
				if (!output.equalsIgnoreCase("")) {
					logInfo("callTRSD", "Inside first if -- first if" + output);
					int matchfound = 0;
					try {
						matchfound = getTagValue(output, "sdResult").split(";").length;
					} catch (Exception e) {
						logError("callTRSD", e);
					}
					String caseNumber = getTagValues(output, "caseNum");
					try {
						SimpleDateFormat formatter = new SimpleDateFormat(
								"dd/MM/yyyy HH:mm:ss");
						Date date = new Date();
						String strDate = (formatter.format(date));
						logInfo("inside callTRSD", strDate);
					} catch (Exception e) {
						logError("callTRSD", e);
					}
					if (getTagValues(output, "caseNum").equalsIgnoreCase("")) {
						logInfo("callTRSD", "Inside first if -- first if"
								+ output);
						if (group.equalsIgnoreCase("CRO")) {
							logInfo("callTrsd inside CRO condition ",
									caseNumber + "::" + sOutput.get(0).get(2));
							formObject.setValue(TRSD_CASE_ID, caseNumber);
							formObject
									.setValue(
											TRSD_NAME,
											((sOutput != null && sOutput.size() > 0) ? sOutput
													.get(0).get(2).toString()
													: ""));
							formObject.setValue(TRSD_SYS_CALC_RES,
									"No Match Found");
							formObject
									.setValue(TRSD_FINAL_DECISION, "Approved");
							formObject.setValue(TRSD_APPROVAL_REQUIRED, "No");
							formObject.setValue(TRSD_ASSESSMENT_NEW, "");
							formObject.setValue(TRSD_CHANNEL_REF_NO, refno);
							formObject.setValue(TRSD_SCREENING_DATE, sysdate);
							logInfo("inside callTRSD", "before setassessment");
							setassessment(group, sysdate);
						} else {
							formObject.setValue(CPD_TRSD_CASE_ID, caseNumber);
							formObject
									.setValue(
											CPD_TRSD_NAME,
											((sOutput != null && sOutput.size() > 0) ? sOutput
													.get(0).get(2).toString()
													: ""));
							logInfo("callTRSD", sOutput.get(0).get(2)
									+ "Inside  first if - else if" + caseNumber);
							formObject.setValue(CPD_TRSD_SYS_CALC_RES,
									"No Match Found");
							formObject.setValue(CPD_TRSD_FINAL_DECISION,
									"Approved");
							formObject.setValue(CPD_TRSD_APPROVAL_REQUIRED,
									"No");
							formObject.setValue(CPD_TRSD_ASSESSMENT_NEW, "");
							formObject.setValue(CPD_TRSD_CHANNEL_REF_NO, refno);
							formObject.setValue(CPD_TRSD_SCREENING_DATE,
									sysdate);
							logInfo("inside callTRSD", "before setassessment");
							setassessment(group, sysdate);
						}
					} else {
						query = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
						List<List<String>> sOutput1 = formObject
								.getDataFromDB(query);
						refno = sOutput1.get(0).get(0);
						inputXml = "<?xml version=\"1.0\"?>"
								+ "<APWebService_Input>"
								+ "<Option>WebService</Option>"
								+ "<Calltype>CALL_TRSD_ENQUIRY</Calltype>"
								+ "<WiName>" + sWorkitemId + "</WiName>"
								+ "<REF_NO>" + refno + "</REF_NO>"
								+ "<caseNum>" + getTagValues(output, "caseNum")
								+ "</caseNum>";
						output = socket.connectToSocket(inputXml);
						String referto = getTagValues(output, "caseReferTo");
						if (referto.equalsIgnoreCase("WGRP003")) {
							matchfound = 1;
						} else {
							matchfound = 0;
						}
						if (group.equalsIgnoreCase("CRO")) {
							logInfo("inside CRO IF CALL TRSD KD", sOutput
									.get(0).get(2)
									+ " casenumber:"
									+ caseNumber);
							formObject.setValue(TRSD_CASE_ID, caseNumber);
							formObject.setValue(TRSD_NAME, sOutput.get(0)
									.get(2));
							formObject.setValue(TRSD_SYS_CALC_RES,
									matchfound == 1 ? "Match Found"
											: "Match Found");
							formObject.setValue(TRSD_FINAL_DECISION, "Pending");
							formObject.setValue(TRSD_APPROVAL_REQUIRED, "Yes");
							formObject.setValue(TRSD_CHANNEL_REF_NO, refno);
							formObject.setValue(TRSD_ASSESSMENT_NEW, "");
							formObject.setValue(TRSD_SCREENING_DATE, sysdate);
							setassessment(group, sysdate);
						} else {
							formObject.setValue(CPD_TRSD_CASE_ID, caseNumber);
							formObject.setValue(CPD_TRSD_NAME, sOutput.get(0)
									.get(2));
							formObject.setValue(CPD_TRSD_SYS_CALC_RES,
									matchfound == 1 ? "Match Found"
											: "Match Found");
							formObject.setValue(CPD_TRSD_FINAL_DECISION,
									"Pending");
							formObject.setValue(CPD_TRSD_APPROVAL_REQUIRED,
									"Yes");
							formObject.setValue(CPD_TRSD_ASSESSMENT_NEW, "");
							formObject.setValue(CPD_TRSD_CHANNEL_REF_NO, refno);
							formObject.setValue(CPD_TRSD_SCREENING_DATE,
									sysdate);
							setassessment(group, sysdate);
						}
						String toMailId = "";
						if (matchfound == 1) {
							query = "Select FROM_MAILID,TO_MAILID_F,EMAIL_SUBJECT,EMAIL_CONTENT From USR_0_EMAIL_CONFIGURATION_TRSD  "
									+ "Where Template_Type='Full_Match' And Process_Name = '"
									+ sProcessName + "'";
							sOutput = formObject.getDataFromDB(query);
							logInfo("sOutput--> TRSD EMAIL ", "sOutput");
							toMailId = sOutput.get(0).get(1);
						} else {
							query = "Select FROM_MAILID,TO_MAILID_P,EMAIL_SUBJECT,EMAIL_CONTENT From USR_0_EMAIL_CONFIGURATION_TRSD  "
									+ "Where Template_Type = 'Partial_Match' And Process_Name='"
									+ sProcessName + "'";
							sOutput = formObject.getDataFromDB(query);
							logInfo("callTRSD", "sOutput");
							toMailId = sOutput.get(0).get(1);
						}
						String fromMailId = sOutput.get(0).get(0);
						String emailSubject = sOutput.get(0).get(2);
						String emailContent = sOutput.get(0).get(3);
						String sColumn = "MAILFROM,MAILTO,MAILSUBJECT,MAILMESSAGE,MAILCONTENTTYPE,ATTACHMENTISINDEX,ATTACHMENTNAMES,ATTACHMENTEXTS,"
								+ "MAILPRIORITY,MAILSTATUS,STATUSCOMMENTS,LOCKEDBY,SUCCESSTIME,LASTLOCKTIME,INSERTEDBY,MAILACTIONTYPE,INSERTEDTIME,"
								+ "PROCESSDEFID,PROCESSINSTANCEID,WORKITEMID,ACTIVITYID,NOOFTRIALS";
						String sValues = "'"
								+ fromMailId
								+ "','"
								+ toMailId
								+ "','"
								+ emailSubject.replaceAll("#Customer_Name#",
										sOutput.get(0).get(1)).replaceAll(
										"#WI_Name#", sWorkitemId)
								+ "','"
								+ emailContent
										.replaceAll("#Customer_Name#",
												sOutput.get(0).get(1))
										.replaceAll("#WI_Name#", sWorkitemId)
										.replaceAll("#TRSD_Id#", caseNumber)
								+ "','text/html;charset=UTF-8',NULL,NULL,NULL,1,'N',NULL,NULL,NULL,NULL,"
								+ "'CUSTOM_TRSD_EMAIL','TRIGGER',sysdate,1, '"
								+ sWorkitemId + "',1,1,0";
					}
					if (group.equalsIgnoreCase("CRO")) {
						String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,"
								+ "TRSD_SCREENINGDATE,ACC_RELATION_SNO,WI_NAME,USER_ID,AWSGROUPEMAIL,"
								+ "TRSD_CHANNELREFNO,trsd_assessment_date"; // AWSGROUPEMAIL
																			// column
																			// added
																			// to
																			// handle
																			// Notification
																			// emails
																			// in
																			// TRSD
						String values = "'" + caseNumber + "','"
								+ formObject.getValue(TRSD_NAME) + "','"
								+ formObject.getValue(TRSD_SYS_CALC_RES)
								+ "','"
								+ formObject.getValue(TRSD_FINAL_DECISION)
								+ "','"
								+ formObject.getValue(TRSD_APPROVAL_REQUIRED)
								+ "',sysdate,'" + iSelectedRow + "','"
								+ sWorkitemId + "','" + group + "','"
								+ sUserName + "','"
								+ formObject.getValue(TRSD_CHANNEL_REF_NO)
								+ "',''";
						logInfo("TRSD values:", "values");
						insertDataIntoDB("usr_0_trsd_details", colNames, values);
						values = "'" + caseNumber + "','"
								+ formObject.getValue(TRSD_NAME) + "','"
								+ formObject.getValue(TRSD_SYS_CALC_RES)
								+ "','"
								+ formObject.getValue(TRSD_FINAL_DECISION)
								+ "','"
								+ formObject.getValue(TRSD_APPROVAL_REQUIRED)
								+ "',sysdate,'" + iSelectedRow + "','"
								+ sWorkitemId + "','CPD','','"
								+ formObject.getValue(TRSD_CHANNEL_REF_NO)
								+ "',''";
						logInfo("TRSD values:", "values");
						insertDataIntoDB(USR_0_TRSD_DETAILS, colNames, values);
					} else {
						String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,"
								+ "TRSD_SCREENINGDATE,ACC_RELATION_SNO,WI_NAME,USER_ID,AWSGROUPEMAIL,TRSD_CHANNELREFNO,"
								+ "trsd_assessment_date";
						String values = "'"
								+ caseNumber
								+ "','"
								+ formObject.getValue(CPD_TRSD_NAME)
								+ "',"
								+ "'"
								+ formObject.getValue(CPD_TRSD_SYS_CALC_RES)
								+ "',"
								+ "'"
								+ formObject.getValue(CPD_TRSD_FINAL_DECISION)
								+ "',"
								+ "'"
								+ formObject
										.getValue(CPD_TRSD_APPROVAL_REQUIRED)
								+ "'," + "sysdate,'" + iSelectedRow + "','"
								+ sWorkitemId + "'," + "'" + group + "','"
								+ sUserName + "'," + "'"
								+ formObject.getValue(CPD_TRSD_CHANNEL_REF_NO)
								+ "',''";
						insertDataIntoDB(USR_0_TRSD_DETAILS, colNames, values);
					}
					saveTRSDHistory(group, caseNumber, refno);
				}
			}
			formObject.setValue("trsd_desc", "");
		} catch (Exception e) {
			logError("callTRSD", e);
		}
	}

	public void saveTRSDHistory(String group, String caseNumber, String refno) {
		logInfo("inside saveTRSDHistory", "");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			logInfo("save history", "");
			String Query = "";
			List<List<String>> sOutput;
			Query = "select count(1)CNT from usr_0_trsd_history_ao where wi_name='"
					+ sWorkitemId
					+ "' and acc_relation_sno='"
					+ iSelectedRow
					+ "' and user_id='" + group + "'";
			logInfo("inside saveTRSDHistory", "query : " + Query);
			sOutput = formObject.getDataFromDB(Query);
			logInfo("inside saveTRSDHistory", "sOutput : " + sOutput);
			if (!(sOutput.get(0).get(0)).equals("0")) {
				Query = "select (to_char(min(initial_assessment_date),'dd/MM/yyyy hh:mi:ss')) as TRSD_ASSESSMENTDATE  from usr_0_trsd_history_ao where wi_name='"
						+ sWorkitemId
						+ "'  and  acc_relation_sno='"
						+ iSelectedRow + "' and user_id='" + group + "'";
				logInfo("inside saveTRSDHistory", "inside if sqoutput" + Query);
				sOutput = formObject.getDataFromDB(Query);
				logInfo("inside saveTRSDHistory", "sOutput : " + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					String date = sOutput.get(0).get(0);
					if (group.equalsIgnoreCase("CRO")) {
						logInfo("saveTRSDHistory", "inside CRO group condition");
						String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,TRSD_SCREENINGDATE,WI_NAME,USER_ID,TRSD_CHANNELREFNO,ACC_RELATION_SNO,initial_assessment_date,trsd_assessment_date";
						String values = "'" + caseNumber + "','"
								+ formObject.getValue(TRSD_NAME) + "','"
								+ formObject.getValue(TRSD_SYS_CALC_RES)
								+ "','"
								+ formObject.getValue(TRSD_FINAL_DECISION)
								+ "','"
								+ formObject.getValue(TRSD_APPROVAL_REQUIRED)
								+ "',sysdate,'" + sWorkitemId + "','" + group
								+ "','" + refno + "','" + iSelectedRow
								+ "',to_date('" + date
								+ "','dd/mm/yyyy HH24:MI:SS'),''";
						insertDataIntoDB("usr_0_trsd_history_ao", colNames,
								values);
					} else {
						logInfo("inside saveTRSDHistory", "name : "
								+ formObject.getValue(CPD_TRSD_NAME));
						logInfo("inside saveTRSDHistory", "result : "
								+ formObject.getValue(CPD_TRSD_SYS_CALC_RES));
						logInfo("inside saveTRSDHistory", "final : "
								+ formObject.getValue(CPD_TRSD_FINAL_DECISION));
						logInfo("inside saveTRSDHistory",
								"approval : "
										+ formObject
												.getValue(CPD_TRSD_APPROVAL_REQUIRED));

						logInfo("saveTRSDHistory",
								"inside CPD group condition kdd");
						String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,TRSD_SCREENINGDATE,WI_NAME,USER_ID,TRSD_CHANNELREFNO,ACC_RELATION_SNO,initial_assessment_date,trsd_assessment_date";
						String values = "'"
								+ caseNumber
								+ "','"
								+ formObject.getValue(CPD_TRSD_NAME)
								+ "','"
								+ formObject.getValue(CPD_TRSD_SYS_CALC_RES)
								+ "','"
								+ formObject.getValue(CPD_TRSD_FINAL_DECISION)
								+ "','"
								+ formObject
										.getValue(CPD_TRSD_APPROVAL_REQUIRED)
								+ "',sysdate,'" + sWorkitemId + "','" + group
								+ "','" + refno + "','" + iSelectedRow
								+ "',to_date('" + date
								+ "','dd/mm/yyyy HH24:MI:SS'),''";
						insertDataIntoDB("usr_0_trsd_history_ao", colNames,
								values);
					}
				}
			} else {
				if (group.equalsIgnoreCase("CRO")) {
					logInfo("saveTRSDHistory", "inside CRO group condition");
					String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,TRSD_SCREENINGDATE,WI_NAME,USER_ID,TRSD_CHANNELREFNO,ACC_RELATION_SNO,initial_assessment_date,trsd_assessment_date";
					String values = "'" + caseNumber + "','"
							+ formObject.getValue(TRSD_NAME) + "','"
							+ formObject.getValue(TRSD_SYS_CALC_RES) + "','"
							+ formObject.getValue(TRSD_FINAL_DECISION) + "','"
							+ formObject.getValue(TRSD_APPROVAL_REQUIRED)
							+ "',sysdate,'" + sWorkitemId + "','" + group
							+ "','" + refno + "','" + iSelectedRow
							+ "',sysdate,''";
					insertDataIntoDB("usr_0_trsd_history_ao", colNames, values);
				} else {
					logInfo("inside saveTRSDHistory",
							"name : " + formObject.getValue(CPD_TRSD_NAME));
					logInfo("inside saveTRSDHistory",
							"result : "
									+ formObject
											.getValue(CPD_TRSD_SYS_CALC_RES));
					logInfo("inside saveTRSDHistory",
							"final : "
									+ formObject
											.getValue(CPD_TRSD_FINAL_DECISION));
					logInfo("inside saveTRSDHistory", "approval : "
							+ formObject.getValue(CPD_TRSD_APPROVAL_REQUIRED));

					String colNames = "TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,TRSD_APPROVALREQUIRED,TRSD_SCREENINGDATE,WI_NAME,USER_ID,TRSD_CHANNELREFNO,ACC_RELATION_SNO,initial_assessment_date,trsd_assessment_date";
					String values = "'" + caseNumber + "','"
							+ formObject.getValue(CPD_TRSD_NAME) + "','"
							+ formObject.getValue(CPD_TRSD_SYS_CALC_RES)
							+ "','"
							+ formObject.getValue(CPD_TRSD_FINAL_DECISION)
							+ "','"
							+ formObject.getValue(CPD_TRSD_APPROVAL_REQUIRED)
							+ "',sysdate,'" + sWorkitemId + "','" + group
							+ "','" + refno + "','" + iSelectedRow
							+ "',sysdate,''";
					insertDataIntoDB("usr_0_trsd_history_ao", colNames, values);
				}
			}
			showTRSDHistory();
		} catch (Exception e) {
			logError("saveTRSDHistory", e);
		}
	}

	public void setassessment(String group, String sysdate) {
		logInfo("inside setassessment ", "");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String Query = "";
			List<List<String>> sOutput;
			Query = "select count(1)CNT from usr_0_trsd_history_ao where wi_name='"
					+ sWorkitemId
					+ "' and acc_relation_sno='"
					+ iSelectedRow
					+ "' and user_id='" + group + "'";
			sOutput = formObject.getDataFromDB(Query);
			if (!(sOutput.get(0).get(0)).equals("0")) {
				Query = "select   (to_char(min(initial_assessment_date),'dd/MM/yyyy hh:mi:ss')) as TRSD_ASSESSMENTDATE  from usr_0_trsd_history_ao where wi_name='"
						+ sWorkitemId
						+ "'  and  acc_relation_sno='"
						+ iSelectedRow + "' and user_id='" + group + "'";
				sOutput = formObject.getDataFromDB(Query);
				logInfo("inside setassessment ", Query);
				logInfo("inside setassessment sOutput", "");

				if (sOutput != null && sOutput.size() > 0) {
					logInfo("insidesetassessment if ", "");
					String date = sOutput.get(0).get(0);
					logInfo("inside setassessment", date);
					logInfo("inside setassessment ", group);
					if (group.equalsIgnoreCase("CRO")) {
						formObject.setValue(TRSD_ASSESSMENT_DATE, date);
					} else {
						formObject.setValue(CPD_TRSD_ASSESSMENT_DATE, date);
					}
				}
			} else {
				if (group.equalsIgnoreCase("CRO")) {
					formObject.setValue(TRSD_ASSESSMENT_DATE, sysdate);
				} else {
					formObject.setValue(CPD_TRSD_ASSESSMENT_DATE, sysdate);
				}
			}

		} catch (Exception e) {
			logError("setassessment", e);

		}
	}

	public String getCustId(String wi, int no) {
		String str[] = wi.split("-");
		return str[1] + no;
	}

	public void populateTRSDRemarks() {
		log.info("inside populateTrsdRemarks");
		int iProcessedCustomer = Integer.parseInt((String) formObject
				.getValue(SELECTED_ROW_INDEX)) + 1;
		String query = "";
		List<List<String>> sOutput;
		query = "select trsd_remarks from usr_0_trsd_details where wi_name='"
				+ sWorkitemId + "' and " + "acc_relation_sno='"
				+ iProcessedCustomer + "' and user_id='CRO'";
		logInfo("populateTRSDRemarks", query);
		sOutput = formObject.getDataFromDB(query);
		if (sOutput != null && sOutput.size() > 0) {
			formObject.setValue(TRSD_REMARKS, sOutput.get(0).get(0));
		}
	}

	public void clearUdfGrid() {
		formObject.clearTable(ACCINFO_UDF_LIST);
	}

	public void loadCustData() {
		int iListViewRows = 0;
		List<List<String>> sOutput;
		String query = "";
		iListViewRows = getGridCount(CHECK_TYPE_LVW);
		if (iListViewRows == 0) {
			formObject.setValue(CHK_MATCH_FOUND, "Verified False Positive");
		}
		iListViewRows = getGridCount(SANC_SCRN_HD2_LVW);
		if (iListViewRows == 0) {
			formObject.setValue(SANC_SCRN_MATCH, "Verified False Positive");
		}
		iListViewRows = getGridCount(SANC_CNTRL_BNK_BAD_LVW);
		if (iListViewRows == 0) {
			formObject.setValue(SANC_SCRN_MATCH_FOUND,
					"Verified False Positive");
		}
                // Upgrade changes
		int iProcessedCustomer = Integer.parseInt((String) formObject.getValue(SELECTED_ROW_INDEX)) + 1;
		int iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString()) + 1;
		if(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") || formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")) {
			String sQuery = "SELECT CUST_CUR_RISK FROM USR_0_RISK_DATA "
					+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_CUR_RISK is not null AND ROWNUM=1";
			logInfo("submitWorkitem","sUpdateDecision: "+sQuery);
			List<List<String>> custCurrent = formObject.getDataFromDB(sQuery);
			if(custCurrent != null && custCurrent.size() > 0) {
				String sUpdateDecision = "update USR_0_CUST_TXN set CUST_INDI_RISK='"+ custCurrent.get(0).get(0) +"' Where "
						+ "WI_NAME='"+ sWorkitemId +"' AND CUST_SNO ='"+iSelectedRow+"'";
				logInfo("submitWorkitem","sUpdateDecision: "+sUpdateDecision);
				formObject.saveDataInDB(sUpdateDecision);
			}
		}
		
		
		query = "SELECT CUST_ID,CUST_INDI_RISK,FCR_RISK,CUST_FULL_NAME FROM USR_0_CUST_TXN WHERE WI_NAME='"
				+ sWorkitemId + "' AND CUST_SNO = '" + iProcessedCustomer + "'";
		logInfo("inside loadCustData", query);
		sOutput = formObject.getDataFromDB(query);
		String sCustID = "";
		String custIndiRisk = "";
		String sFCRRisk = "";
		String sCustName = "";
		if (sOutput != null && sOutput.size() > 0) {
			sCustID = sOutput.get(0).get(0);
			custIndiRisk = sOutput.get(0).get(1);
			sFCRRisk = sOutput.get(0).get(2);
			sCustName = sOutput.get(0).get(3);
		}

		String sPrevRisk = "";
		String sPrevRiskDate = "";
		String sComplainceApproval = "";
		String sBankRisk = custIndiRisk;
		if (!sCustID.equalsIgnoreCase("")) {
			query = "SELECT TO_CHAR(COMP_APPROVAL_DT,'dd/MM/yyyy') COMP_APPROVAL_DT,CUSTOMER_RISK FROM USR_0_CUST_WMS WHERE CUST_ID='"
					+ sCustID + "'";
			sOutput = formObject.getDataFromDB(query);
			logInfo("inside loadCustData query:", query);
			if (sOutput != null && sOutput.size() > 0) {
				sPrevRisk = sOutput.get(0).get(0);
				sPrevRiskDate = sOutput.get(0).get(1);
			}
		}
		int iMonthDiff = 10;
		// if(!sPrevRiskDate.equalsIgnoreCase("")){
		// iMonthDiff = getDateDiffInMonth(sPrevRiskDate);
		// }
		if (custIndiRisk.equalsIgnoreCase("Neutral Risk")) {
			/*
			 * String riskQuery =
			 * "select CURRENT_RISK_BUSSINESS from USR_0_RISK_ASSESSMENT_DATA where "
			 * + "wi_name='"+sWorkitemId+"' and SNO='"+iProcessedCustomer+"'";
			 * List<List<String>> output = formObject.getDataFromDB(riskQuery);
			 * if(output.size()>0 && !output.get(0).get(0).isEmpty() &&
			 * !output.get(0).get(0).contains("Neutral")) { sComplainceApproval
			 * = "Yes"; sBankRisk = output.get(0).get(0); } else {
			 * sComplainceApproval = "No"; sBankRisk = "Neutral"; }
			 */
			sComplainceApproval = "No";
			sBankRisk = "Neutral";
		} else if (custIndiRisk.equalsIgnoreCase("Medium Risk")) {

			sComplainceApproval = "No";
		} else if (custIndiRisk.equalsIgnoreCase(sPrevRisk) && iMonthDiff < 6) {
			sComplainceApproval = "No";
		} else {
			sComplainceApproval = "Yes";
		}
		formObject.setValue(SANCT_RISK_CID, sCustID);
		formObject.setValue(SANCT_RISK_NAME, sCustName);
		formObject.setValue(SANCT_RISK_CURRENT_RSK_SYSTEM, custIndiRisk);
		formObject.setValue(SANCT_RISK_CURRENT_RSK_BANK, sBankRisk);
		formObject.setValue(SANCT_RISK_PREVIOUS_RSK, sPrevRisk);
		formObject.setValue(SANCT_RISK_FCR_RSK, sFCRRisk);
		formObject.setValue(SANCT_RISK_COMPL_APP_REQ, sComplainceApproval);
		logInfo("LOAD CUST DATA", "DISABLING RISK ASSESSMENT");
		disableControls(new String[] { SANCT_RISK_CID, SANCT_RISK_NAME,
				SANCT_RISK_CURRENT_RSK_SYSTEM, SANCT_RISK_PREVIOUS_RSK,
				SANCT_RISK_FCR_RSK, SANCT_RISK_COMPL_APP_REQ });
		set_Values_From_Usr_0_Risk_Data();
	}

	public void populatePassAndVisaFields()
			throws ParserConfigurationException, SAXException, IOException {
		logInfo("populatePassAndVisaFields", "INSIDE");
		String sQuery;
		List<List<String>> sOutput;
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow - 1, 0);// "AO_acc_relation.sno");
			sQuery = "SELECT MANUAL_PASS_TYPE,VISA_FCR,VISA_EIDA,VISA_MANUAL,IS_VISA_FCR,IS_VISA_EIDA,IS_VISA_MANUAL FROM USR_0_CUST_TXN"
					+ " WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '"
					+ sCustNo + "'";
			logInfo("populatePassAndVisaFields", "Query: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populatePassAndVisaFields", "Output: " + sOutput);
			setValuesFromDB(sOutput, new String[] { MANUAL_PASSTYPE,
					FCR_VISASTATUS, EIDA_VISASTATUS, MANUAL_VISASTATUS,
					CHECKBOX_VISA_STATUS_FCR, CHECKBOX_VISA_STATUS_EIDA,
					CHECKBOX_VISA_STATUS_MANUAL });
		} catch (Exception e) {
			logError("populatePassAndVisaFields", e);
		}
	}

	public void updateProfitCentre() {
		logInfo("updateProfitCentre", "INSIDE");
		try {
			String source_code = formObject.getValue(SOURCE_CODE).toString();
			String source_name = formObject.getValue(SOURCE_NAME).toString();
			String acc_class = formObject.getValue(ACC_CLASS).toString();
			logInfo("updateProfitCentre", "source_code 10 oct test"
					+ source_code + "----source_name---" + source_name
					+ "---acc_class---" + acc_class);
			String sQuery = "select distinct dsa_code, dsa_name from USR_0_DSA_LIST where dsa_code='"
					+ source_code + "' and dsa_name='" + source_name + "'";
			List<List<String>> output1 = formObject.getDataFromDB(sQuery);
			if (acc_class.equalsIgnoreCase("Islamic") && output1.size() > 0
					&& null != output1.get(0)) {
				sQuery = "select count(wi_name) as TOTWI from usr_0_cust_txn  where wi_name='"
						+ sWorkitemId + "'";
				output1 = formObject.getDataFromDB(sQuery);
				for (int i = 1; i <= Integer.parseInt(output1.get(0).get(0)); i++) {
					sQuery = "select cust_seg from usr_0_cust_txn  where wi_name='"
							+ sWorkitemId + "' and cust_sno='" + i + "'";
					output1 = formObject.getDataFromDB(sQuery);
					String cust_seg = output1.get(0).get(0);
					logInfo("updateProfitCentre", "cust_seg" + cust_seg
							+ "-----i value---" + i);
					sQuery = "select profit_center_code from usr_0_profit_center where cust_category='Islamic' and cust_segment='"
							+ cust_seg + "'";
					output1 = formObject.getDataFromDB(sQuery);
					String profit_center_code = output1.get(0).get(0);
					logInfo("updateProfitCentre", "profit_center_code"
							+ profit_center_code);
					String sWhere = "WI_NAME='" + sWorkitemId
							+ "' and cust_sno='" + i + "'";
					updateDataInDB("usr_0_cust_txn", "profit_center_code", " "
							+ profit_center_code + " ", sWhere);
				}
			}
		} catch (Exception e) {
			logError("updateProfitCentre", e);
		}
	}

	public void confirmUAEPassAuthDone() {
		try {
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT is_uae_pass_auth_done from ACC_RELATION_REPEATER WHERE "
							+ "WI_NAME ='"
							+ sWorkitemId
							+ "' ORDER BY TO_NUMBER(SNO)");
			log.info("sOutput---" + sOutput);

			for (int i = 0; i < sOutput.size(); i++) {
				log.info("confirmUAEPassAuthDone---" + sOutput.get(i).get(0));
				String sUaePassAuth = sOutput.get(i).get(0);
				if (sUaePassAuth.equalsIgnoreCase("P")) {
					log.info("Inside confirmUAEPassAuthDone P");
					formObject.setValue("IS_UAE_PASS_AUTH_DONE", "P");
					formObject.addItemInCombo("CRO_DEC","Send To UaePass Pending");
					formObject.addItemInCombo("CRO_DEC", "Reject");
					formObject.removeItemFromCombo("CRO_DEC", 1);
//					formObject.setValue("CRO_DEC", "Send To UaePass Pending");
					
					// formObject.setStyle("CRO_DEC","disable", "true");
					// formObject.setStyle(CRO_REJ_REASON, "disable", "true");
				} else {
//					formObject.setValue("CRO_DEC", "");
					formObject.setStyle("CRO_DEC", "disable", "false");
				}
			}
		} catch (Exception e) {
			logError("confirmUAEPassAuth", e);
		}
	}

	public void reKeyInsert() {
		logInfo("reKeyInsert", "INSIDE");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sFinalEIDANo = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO);
			String sFinalEmail = getFinalDataComparison(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL);
			String sFinalPhone = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE);
			String sFinalDOB = getFinalData(
					formObject.getValue(CHECKBOX_DOB_FCR).toString(),
					formObject.getValue(CHECKBOX_DOB_EIDA).toString(),
					formObject.getValue(CHECKBOX_DOB_MANUAL).toString(),
					getDateValue(FCR_DOB), getDateValue(EIDA_DOB),
					getDateValue(MANUAL_DOB));
			logInfo("reKeyInsert", "DATA: " + sFinalEIDANo + ", " + sFinalEmail
					+ ", " + sFinalPhone + " " + sFinalDOB);
			// previous values in rekey
			String key = "";
			/*
			 * boolean newBankRltn = false;
			 * if(formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
			 * 7).equalsIgnoreCase("New")) { newBankRltn = true; }
			 */
			String query = "select EIDA_CHECK, EMAIL_CHECK, MOB_CHECK, to_char(DOB_CHECK, 'DD/MM/YYYY'), IS_FCR_EIDANO, "
					+ "IS_MANUAL_EIDANO, IS_EIDA_EIDANO, IS_FCR_EMAIL, IS_MANUAL_EMAIL, IS_EIDA_EMAIL, "
					+ "IS_FCR_MOBNO, IS_MANUAL_MOBNO, IS_EIDA_MOBNO, IS_FCR_DOB, IS_MANUAL_DOB, IS_EIDA_DOB "
					+ "from USR_0_AO_REKEY where wi_name='"
					+ sWorkitemId
					+ "' and CUST_SNO='" + sCustNo + "'";
			logInfo("reKeyInsert", "query: " + query);
			List<List<String>> output = formObject.getDataFromDB(query);
			logInfo("reKeyInsert", "output: " + output);
			if (output.size() > 0) {
				String eida = output.get(0).get(0);
				String email = output.get(0).get(1);
				String mob = output.get(0).get(2);
				String dob = output.get(0).get(3);
				String fcrEida = output.get(0).get(4);
				String manualEida = output.get(0).get(5);
				String eidaEida = output.get(0).get(6);
				String fcrEmail = output.get(0).get(7);
				String manualEmail = output.get(0).get(8);
				String eidaEmail = output.get(0).get(9);
				String fcrMob = output.get(0).get(10);
				String manualMob = output.get(0).get(11);
				String eidaMob = output.get(0).get(12);
				String fcrDob = output.get(0).get(13);
				String manualDob = output.get(0).get(14);
				String eidaDob = output.get(0).get(15);
				logInfo("reKeyInsert",
						"bank relationship: "
								+ formObject.getTableCellValue(ACC_RELATION,
										iSelectedRow, 7));
				logInfo("reKeyInsert", "previous values- eida: " + eida
						+ ", email: " + email + ", mob: " + mob + ", dob: "
						+ dob);
				logInfo("reKeyInsert",
						"dob equal: " + dob.equalsIgnoreCase(sFinalDOB));
				if (!eida.equalsIgnoreCase(sFinalEIDANo)
						|| !email.equalsIgnoreCase(sFinalEmail)
						|| !mob.equalsIgnoreCase(sFinalPhone)
						|| !dob.equalsIgnoreCase(sFinalDOB)
						|| !fcrEida.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EIDANO_FCR).toString())
						|| !eidaEida.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EIDANO_EIDA).toString())
						|| !fcrEmail.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EMAIL_FCR).toString())
						|| !eidaEmail.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EMAIL_EIDA).toString())
						|| !fcrMob.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_TELE_MOB_FCR).toString())
						|| !eidaMob.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_TELE_MOB_EIDA).toString())
						|| !fcrDob.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_DOB_FCR).toString())
						|| !eidaDob.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_DOB_EIDA).toString())) {
					logInfo("reKeyInsert", "set KEY_FLAG false 1");
					key = "false";
				} else if (!formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 7).equalsIgnoreCase("New")
						&& (!manualEida.equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EIDANO_MANUAL).toString())
								|| !manualEmail.equalsIgnoreCase(formObject
										.getValue(CHECKBOX_EMAIL_MANUAL)
										.toString())
								|| !manualMob.equalsIgnoreCase(formObject
										.getValue(CHECKBOX_TELE_MOB_MANUAL)
										.toString()) || !manualDob
									.equalsIgnoreCase(formObject.getValue(
											CHECKBOX_DOB_MANUAL).toString()))) {
					logInfo("reKeyInsert", "set KEY_FLAG false 2");
					key = "false";
				}
			}
			logInfo("reKeyInsert", "key = " + key);
			String column1 = "ACTIVITY_NAME,EIDA_CHECK,EMAIL_CHECK,MOB_CHECK,DOB_CHECK,WI_NAME,CUST_SNO,IS_FCR_EIDANO,"
					+ "IS_EIDA_EIDANO,IS_MANUAL_EIDANO,IS_FCR_MOBNO,IS_EIDA_MOBNO,IS_MANUAL_MOBNO,IS_FCR_EMAIL,"
					+ "IS_EIDA_EMAIL,IS_MANUAL_EMAIL,IS_FCR_DOB,IS_EIDA_DOB,IS_MANUAL_DOB";
			if (key.equalsIgnoreCase("false")) {
				column1 = "ACTIVITY_NAME,EIDA_CHECK,EMAIL_CHECK,MOB_CHECK,DOB_CHECK,WI_NAME,CUST_SNO,IS_FCR_EIDANO,"
						+ "IS_EIDA_EIDANO,IS_MANUAL_EIDANO,IS_FCR_MOBNO,IS_EIDA_MOBNO,IS_MANUAL_MOBNO,IS_FCR_EMAIL,"
						+ "IS_EIDA_EMAIL,IS_MANUAL_EMAIL,IS_FCR_DOB,IS_EIDA_DOB,IS_MANUAL_DOB,KEY_FLAG";
			} // 29aug2021
			String group = "";
			if ("DDE_Cust_Info".equalsIgnoreCase(sActivityName)
					|| "QDE_Cust_Info".equalsIgnoreCase(sActivityName)){
				group = "CRO";
			}else{
				group = "CPD";
				if (formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("Downgrade")) {
					logInfo("Krishna", "group" + group);
					group = "CRO";
				}
			}
			String value1 = "'" + group + "','" + sFinalEIDANo + "','"
					+ sFinalEmail + "','" + sFinalPhone + "',"
					+ convertInTo_To_Date(sFinalDOB) + ",'" + sWorkitemId
					+ "','" + sCustNo + "','"
					+ formObject.getValue(CHECKBOX_EIDANO_FCR).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_TELE_MOB_FCR).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_TELE_MOB_EIDA).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_TELE_MOB_MANUAL).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_EMAIL_FCR).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_EMAIL_EIDA).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_EMAIL_MANUAL).toString()
					+ "','" + formObject.getValue(CHECKBOX_DOB_FCR).toString()
					+ "','" + formObject.getValue(CHECKBOX_DOB_EIDA).toString()
					+ "','"
					+ formObject.getValue(CHECKBOX_DOB_MANUAL).toString() + "'";
			value1 = rekeycompare(group);
			if (key.equalsIgnoreCase("false")) {
				value1 = value1 + (char) 25 + "'false'";
			} // 29aug2021
			insertIntoReKeyTXNTable(sCustNo, sWorkitemId, column1, value1,
					group);
		} catch (Exception e) {
			logError("reKeyInsert", e);
		}
	}

	public void insertIntoReKeyTXNTable(String sCustNo, String sWIName,
			String sColumn, String sValue, String group) {
		logInfo("insertIntoReKeyTXNTable", "INSIDE");
		String sCount = "";
		String sWhere = "CUST_SNO='" + sCustNo + "' AND WI_NAME='" + sWIName
				+ "' and activity_name='" + group + "'";
		try {
			String sQuery = "SELECT COUNT(WI_NAME) FROM USR_0_AO_REKEY WHERE CUST_SNO='"
					+ sCustNo
					+ "' "
					+ "and wi_name ='"
					+ sWIName
					+ "' and activity_name='" + group + "'";
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			sCount = output.get(0).get(0);
			logInfo("insertIntoReKeyTXNTable", "sQuery---" + sQuery);
			logInfo("insertIntoReKeyTXNTable", "sCount---" + sCount);
			if (Integer.parseInt(sCount) > 0) {
				updateDataInDB("USR_0_AO_REKEY", sColumn, sValue, sWhere);
			} else {
				if (!sCustNo.equalsIgnoreCase("")) {
					insertDataIntoDB("USR_0_AO_REKEY", sColumn, sValue);
				}
			}
		} catch (Exception e) {
			logError("insertIntoReKeyTXNTable", e);
			;
		}
	}

	public String rekeycompare(String group) {
		String value1 = "";
		try {
			logInfo("rekeycompare", "INSIDE");
			String eidavalue = "";
			String emailvalue = "";
			String phonevalue = "";
			String dobvalue = "";
			String eidavalue_2 = "";
			String emailvalue_2 = "";
			String phonevalue_2 = "";
			String dobvalue_2 = "";
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			String sFinalEIDANo = getFinalDataComparison(CHECKBOX_EIDANO_FCR,
					CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
					EIDA_EIDANO, MANUAL_EIDANO);
			String sFinalEmail = getFinalDataComparison(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL);
			String sFinalPhone = getFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL,
					FCR_MOBILE, EIDA_MOBILE, MANUAL_MOBILE);
			String sFinalDOB = getFinalData(
					formObject.getValue(CHECKBOX_DOB_FCR).toString(),
					formObject.getValue(CHECKBOX_DOB_EIDA).toString(),
					formObject.getValue(CHECKBOX_DOB_MANUAL).toString(),
					getDateValue(FCR_DOB), getDateValue(EIDA_DOB),
					getDateValue(MANUAL_DOB));
			String sFinalDOB1 = sFinalDOB;
			sFinalDOB = convertInTo_To_Date(sFinalDOB);
			String sQuery = "select EIDA_CHECK ,EMAIL_CHECK,MOB_CHECK,to_char(DOB_CHECK,'dd/mm/yyyy') DOB_CHECK,"
					+ "IS_MANUAL_EIDANO,IS_MANUAL_MOBNO ,IS_MANUAL_EMAIL ,IS_MANUAL_DOB ,KEY_FLAG ,ACTIVITY_NAME "
					+ "from usr_0_ao_rekey where wi_name='"
					+ sWorkitemId
					+ "' and CUST_SNO = '"
					+ sCustNo
					+ "' and "
					+ "activity_name='CRO'";
			logInfo("rekeycompare", "sQuery: " + sQuery);
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			logInfo("rekeycompare", "output: " + output);
			String eidaflag = "";
			String emailflag = "";
			String phoneflag = "";
			String dobflag = "";
			if (output.size() > 0 && null != output.get(0)) {
				eidavalue = output.get(0).get(0);
				emailvalue = output.get(0).get(1);
				phonevalue = output.get(0).get(2);
				dobvalue = output.get(0).get(3);
			}
			String sQuery2 = "select EIDA_CHECK ,EMAIL_CHECK,MOB_CHECK,to_char(DOB_CHECK,'dd/mm/yyyy') DOB_CHECK,"
					+ "IS_MANUAL_EIDANO,IS_MANUAL_MOBNO ,IS_MANUAL_EMAIL ,IS_MANUAL_DOB ,KEY_FLAG ,ACTIVITY_NAME "
					+ "from usr_0_ao_rekey where wi_name='"
					+ sWorkitemId
					+ "' and CUST_SNO = '"
					+ sCustNo
					+ "' and "
					+ "activity_name='CPD'";
			logInfo("rekeycompare", "sQuery2: " + sQuery2);
			List<List<String>> output2 = formObject.getDataFromDB(sQuery2);
			logInfo("rekeycompare", "output2: " + output2);
			if (output2.size() > 0) {
				eidavalue_2 = output2.get(0).get(0);
				emailvalue_2 = output2.get(0).get(1);
				phonevalue_2 = output2.get(0).get(2);
				dobvalue_2 = output2.get(0).get(3);
			}
			if ("New".equalsIgnoreCase(sBankRelation)) {
				eidaflag = "true";
				emailflag = "true";
				phoneflag = "true";
				dobflag = "true";
			} else {
				if ((!sFinalEIDANo.equalsIgnoreCase(eidavalue) || !sFinalEIDANo
						.equalsIgnoreCase(eidavalue_2))
						&& "True".equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EIDANO_MANUAL).toString())) {
					eidaflag = "true";
				} else
					eidaflag = "false";
				if ((!sFinalEmail.equalsIgnoreCase(emailvalue) || !sFinalEmail
						.equalsIgnoreCase(emailvalue_2))
						&& "True".equalsIgnoreCase(formObject.getValue(
								CHECKBOX_EMAIL_MANUAL).toString())) {
					emailflag = "true";
				} else
					emailflag = "false";
				if ((!sFinalPhone.equalsIgnoreCase(phonevalue) || !sFinalPhone
						.equalsIgnoreCase(phonevalue_2))
						&& "True".equalsIgnoreCase(formObject.getValue(
								CHECKBOX_TELE_MOB_MANUAL).toString())) {
					phoneflag = "true";
				} else
					phoneflag = "false";
				logInfo("rekeycompare",
						"OLD DOb----"
								+ sFinalDOB
								+ " new dob "
								+ dobvalue
								+ " "
								+ formObject.getValue(CHECKBOX_DOB_MANUAL)
										.toString());
				if ((!sFinalDOB1.equalsIgnoreCase(dobvalue) || !sFinalDOB1
						.equalsIgnoreCase(dobvalue_2))
						&& "True".equalsIgnoreCase(formObject.getValue(
								CHECKBOX_DOB_MANUAL).toString())) {
					dobflag = "true";
				} else
					dobflag = "false";
			}
			value1 = "'" + group + "'" + (char) 25 + "'" + sFinalEIDANo + "'"
					+ (char) 25 + "'" + sFinalEmail + "'" + (char) 25 + "'"
					+ sFinalPhone + "'" + (char) 25 + sFinalDOB + (char) 25
					+ "'" + sWorkitemId + "'" + (char) 25 + "'" + sCustNo + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_EIDANO_FCR).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
					+ "'" + (char) 25 + "'" + eidaflag + "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_TELE_MOB_FCR).toString()
					+ "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_TELE_MOB_EIDA).toString()
					+ "'" + (char) 25 + "'" + phoneflag + "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_EMAIL_FCR).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_EMAIL_EIDA).toString() + "'"
					+ (char) 25 + "'" + emailflag + "'" + (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_DOB_FCR).toString() + "'"
					+ (char) 25 + "'"
					+ formObject.getValue(CHECKBOX_DOB_EIDA).toString() + "'"
					+ (char) 25 + "'" + dobflag + "'";
		} catch (Exception e) {
			logError("rekeycompare", e);
		}
		logInfo("rekeycompare", "return value from rekeycompare: " + value1);
		return value1;
	}

	public void updateReKeyTemp(String group) {
		logInfo("updateReKeyTemp", "INSIDE");
		try {
			String sCount = "";
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sWhere = "SNO='" + sCustNo + "' AND WI_NAME='" + sWorkitemId
					+ "' and group_name='" + group + "'";
			String sQuery = "SELECT COUNT(WI_NAME) FROM USR_0_AO_REKEY_TEMP WHERE SNO='"
					+ sCustNo
					+ "' "
					+ "and wi_name ='"
					+ sWorkitemId
					+ "' and group_name='" + group + "'";
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			sCount = output.get(0).get(0);
			String EIDAFLAG = formObject.getValue(CHECKBOX_EIDANO_MANUAL)
					.toString();
			String EMAILFLAG = formObject.getValue(CHECKBOX_EMAIL_MANUAL)
					.toString();
			String PHONEFLAG = formObject.getValue(CHECKBOX_TELE_MOB_MANUAL)
					.toString();
			String DOBFLAG = formObject.getValue(CHECKBOX_DOB_MANUAL)
					.toString();
			String sColumn = "EIDAFLAG,EMAILFLAG,PHONEFLAG,DOBFLAG";
			String value1 = "'" + EIDAFLAG + "'" + (char) 25 + "'" + EMAILFLAG
					+ "'" + (char) 25 + "'" + PHONEFLAG + "'" + (char) 25 + "'"
					+ DOBFLAG + "'";
			if (Integer.parseInt(sCount) > 0) {
				updateDataInDB("USR_0_AO_REKEY_TEMP", sColumn, value1, sWhere);
			}
		} catch (Exception e) {
			logError("updateReKeyTemp", e);
		}
	}

	public boolean mandatoryComparisonData() {
		logInfo("mandatoryComparisonData", "INSIDE");
		String sAccRelation = "";
		String sBankRelation = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 9);
			sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
		} catch (Exception e) {
			logError("mandatoryComparisonData", e);
			;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_PREFIX_FCR,
				CHECKBOX_PREFIX_EIDA, CHECKBOX_PREFIX_MANUAL, FCR_PREFIX,
				EIDA_PREFIX, MANUAL_PREFIX, CA037, "Mandatory", "Prefix")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_FULLNAME_FCR,
				CHECKBOX_FULLNAME_EIDA, CHECKBOX_FULLNAME_MANUAL, FCR_NAME,
				EIDA_NAME, MANUAL_NAME, CA011, "Mandatory", "Full Name")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_SHORTNAME_FCR,
				CHECKBOX_SHORTNAME_EIDA, CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME, EIDA_SHORTNAME, MANUAL_SHORTNAME, CA0184,
				"Mandatory", "Short Name")) {
			return false;
		}
		if (!ValidateName(CHECKBOX_FULLNAME_FCR, CHECKBOX_FULLNAME_EIDA,
				CHECKBOX_FULLNAME_MANUAL, FCR_NAME, EIDA_NAME, MANUAL_NAME,
				CA0134, CA0138)) {
			return false;
		}
		//Added by Shivanshu ATP-472
		if(!ValidateName(CHECKBOX_FIRSTNAME_FCR,CHECKBOX_FIRSTNAME_EIDA,CHECKBOX_FIRSTNAME_MANUAL,
				FCR_FIRSTNAME,EIDA_FIRSTNAME,MANUAL_FIRSTNAME,"First Name "+CA0205,"First Name "+CA0206)) {
			return false;
		}
		if(!ValidateName(CHECKBOX_LASTNAME_FCR,CHECKBOX_LASTNAME_EIDA,CHECKBOX_LASTNAME_MANUAL,
				FCR_LASTNAME,EIDA_LASTNAME,MANUAL_LASTNAME,"Last Name "+CA0205,"Last Name "+CA0206)) {
			return false;
		}
		if(!ValidateName(CHECKBOX_SHORTNAME_FCR,CHECKBOX_SHORTNAME_EIDA,CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME,EIDA_SHORTNAME,MANUAL_SHORTNAME,"Short Name "+CA0205,"Short Name "+CA0206)) {
			return false;
		}
		//END ATP-472
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (!ValidateComparisonData(CHECKBOX_MOTHERSNAME_FCR,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_MOTHERSNAME_MANUAL,
					FCR_MOTHERSNAME, EIDA_MOTHERNAME, MANUAL_MOTHERNAME,
					CA0123, "Mandatory", "Mother Name")) {
				return false;
			}
		} else {
			if (!ValidateComparisonData(CHECKBOX_MOTHERSNAME_FCR,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_MOTHERSNAME_MANUAL,
					FCR_MOTHERSNAME, EIDA_MOTHERNAME, MANUAL_MOTHERNAME,
					CA0123, "Optional", "Mother Name")) {
				return false;
			}
		}
		if (!ValidateName(CHECKBOX_MOTHERSNAME_FCR, CHECKBOX_MOTHERSNAME_EIDA,
				CHECKBOX_MOTHERSNAME_MANUAL, FCR_MOTHERSNAME, EIDA_MOTHERNAME,
				MANUAL_MOTHERNAME, CA0139, CA0140)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR, CHECKBOX_EIDANO_EIDA,
				CHECKBOX_EIDANO_MANUAL, FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO,
				CA0167, "Optional", "EIDA number")) {
			return false;
		}
		if (!validateEidaNo(CHECKBOX_EIDANO_FCR, CHECKBOX_EIDANO_EIDA,
				CHECKBOX_EIDANO_MANUAL, FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO,
				CA0171)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_CORR_POB_FCR,
				CHECKBOX_CORR_POB_EIDA, CHECKBOX_CORR_POB_MANUAL, FCR_ADDRESS,
				EIDA_ADDRESS, MANUAL_ADDRESS, CA048, "Mandatory", "PO Box")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_CNTRY_OF_CORR_FCR,
				CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
				FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY, CA020, "Mandatory",
				"Country of Correspondence Address")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKFCR, CHECKEIDA, CHECKMANUAL,
				FCR_RESIDENT, EIDA_RESIDENT, MANUAL_RESIDENT, CA0155,
				"Mandatory", "Residential Address Country")) {
			return false;
		}
		if (!ValidateComparisonDataComboForDot(CHECKBOX_COB_FCR,
				CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
				EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH, CA0178, "Mandatory",
				"Country of Birth")) {
			return false;
		}
		if (formObject.getValue(CRS_CITYOFBIRTH).toString().isEmpty()) {
			sendMessageValuesList(CRS_CITYOFBIRTH, "Please enter city of birth");
			return false;
		}// corrected
		if (!ValidateComparisonDataCombo(CHECKBOX_COUNTRY_PER_RES_FCR,
				CHECKBOX_COUNTRY_PER_RES_EIDA, CHECKBOX_COUNTRY_PER_RES_MANUAL,
				FCR_PER_CNTRY, EIDA_PER_CNTRY, MANUAL_PER_CNTRY, CA074,
				"Mandatory", "Country of Permanant Residence")) {
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (formObject.getValue(RES_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(RES_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(RES_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(RES_CNTRY, CA0185);
				return false;
			}
			if (formObject.getValue(PERM_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(PERM_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(PERM_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(PERM_CNTRY, CA0186);
				return false;
			}
			if (formObject.getValue(CORR_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(CORR_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(CORR_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(CORR_CNTRY, CA0187);
				return false;
			}
			String sVisaType = returnVisaStatus();
			if (sVisaType.equalsIgnoreCase("Residency Visa")
					&& formObject.getValue(DRP_RESEIDA).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(DRP_RESEIDA,
						"Please select Value of Resident without EIDA");
				return false;
			}
			if (formObject.getValue(DRP_RESEIDA).toString()
					.equalsIgnoreCase("no")
					&& sVisaType.equalsIgnoreCase("Residency Visa")) {
				if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR,
						CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
						FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, CA0167,
						"Mandatory", "EIDA number")) {
					return false;
				}
			}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (formObject.getValue(CP_CITY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CP_CITY, CA051);
				return false;
			}
			logInfo("MandatoryContactInfo","RA_CITY::" + formObject.getValue(RA_CITY).toString());
			if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade"))) {
			if (formObject.getValue(RA_CITY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_CITY, CA066);
				return false;
			}
		}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			String employertype = formObject.getValue(ED_EMP_TYPE).toString();
			String employeeid = formObject.getValue(ED_EMPLYID).toString();
			if (employertype.equalsIgnoreCase("ADCB") && employeeid != null) {
				if (!(employeeid.matches("[0-9]+"))) {
					sendMessageValuesList(ED_EMPLYID, CA0179);
					return false;
				}
				if (!(employeeid.length() >= 4)) {
					sendMessageValuesList(ED_EMPLYID, CA0180);
					return false;
				}
			}

		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_BULK_EOD_CHECKER)
				|| sActivityName
						.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO_CHECK)
				|| sActivityName
						.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO_CHECK)) {
			if (!ValidateComparisonDataComboForDot(CHECKBOX_CNTRY_OF_CORR_FCR,
					CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
					FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY, CA0181, "Mandatory",
					"Country of Correspondence address")) {
				return false;
			}
			if (!ValidateComparisonDataComboForDot(
					CHECKBOX_COUNTRY_PER_RES_FCR,
					CHECKBOX_COUNTRY_PER_RES_EIDA,
					CHECKBOX_COUNTRY_PER_RES_MANUAL, FCR_PER_CNTRY,
					EIDA_PER_CNTRY, MANUAL_PER_CNTRY, CA0182, "Mandatory",
					"Country of Permanent address")) {
				return false;
			}
			if (!ValidateComparisonDataComboForDot(CHECKFCR, CHECKEIDA,
					CHECKMANUAL, FCR_RESIDENT, EIDA_RESIDENT, MANUAL_RESIDENT,
					CA0183, "Mandatory", "Country of Residence address")) {
				return false;
			}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
			if (formObject.getValue(VISA_STATUS).toString()
					.equalsIgnoreCase("Residency Visa")
					&& formObject.getValue(DRP_RESEIDA).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(DRP_RESEIDA,
						"Please select Value of Resident without EIDA");
				return false;
			}
			if (formObject.getValue(DRP_RESEIDA).toString()
					.equalsIgnoreCase("no")
					&& formObject.getValue(VISA_STATUS).toString()
							.equalsIgnoreCase("Residency Visa")) {
				if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR,
						CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
						FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, CA0167,
						"Mandatory", "EIDA number")) {
					return false;
				}
			}
		}
		if (!ValidateComparisonData(CHECKBOX_TELE_RES_FCR,
				CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_RES_MANUAL, FCR_PH,
				EIDA_PH, MANUAL_PH, CA057, "Optional", "Phone number")) {
			return false;
		}
		if (flag_phone_start.equalsIgnoreCase("true")) {
			if (!ValidateMobileNoStart(CHECKBOX_TELE_RES_MANUAL, MANUAL_PH,
					"Mandatory", CA0161, "Residence Phone Number")) {
				return false;
			}
		}
		if (!ValidatePhoneNo(CHECKBOX_TELE_RES_FCR, CHECKBOX_TELE_RES_EIDA,
				CHECKBOX_TELE_RES_MANUAL, FCR_PH, EIDA_PH, MANUAL_PH, CA0127)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_TELE_MOB_FCR,
				CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL, FCR_MOBILE,
				EIDA_MOBILE, MANUAL_MOBILE, CA059, "Mandatory", "Mobile number")) {
			return false;
		}
		if (flag_phone_start.equalsIgnoreCase("true")) {
			if (!ValidateMobileNoStart(CHECKBOX_TELE_MOB_MANUAL, MANUAL_MOBILE,
					"Optional", CA0161, "Mobile Number ")) {
				return false;
			}
		}
		if (!validateMobileNo(CHECKBOX_TELE_MOB_FCR, CHECKBOX_TELE_MOB_EIDA,
				CHECKBOX_TELE_MOB_MANUAL, FCR_MOBILE, EIDA_MOBILE,
				MANUAL_MOBILE, CA0126)) {
			return false;
		}
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (!ValidateComparisonData(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL, CA054, "Optional", "Email ID")) {
				return false;
			}
		} else {
			if (!ValidateComparisonData(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL, CA054, "Optional", "Email ID")) {
				return false;
			}
		}
		if (!ValidateComparisonData(CHECKBOX_DOB_FCR, CHECKBOX_DOB_EIDA,
				CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB, MANUAL_DOB, CA012,
				"Mandatory", "Date of Birth")) {
			return false;
		}
		if (!validateDOB(CHECKBOX_DOB_FCR, CHECKBOX_DOB_EIDA,
				CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB, MANUAL_DOB)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASSPORT_NO_FCR,
				CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASSPORT_NO_MANUAL,
				FCR_PASSPORTNO, EIDA_PASSPORTNO, MANUAL_PASSPORTNO, CA0120,
				"Mandatory", "Passport number")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASS_ISS_DT_FCR,
				CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_ISS_DT_MANUAL,
				FCR_PASSPORTISSDATE, EIDA_PASSPORTISSDATE,
				MANUAL_PASSPORTISSDATE, CA0121, "Mandatory",
				"Passport Issue Date")) {
			return false;
		}
		if (!validateFutureDates(CHECKBOX_PASS_ISS_DT_FCR,
				CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_ISS_DT_MANUAL,
				FCR_PASSPORTISSDATE, EIDA_PASSPORTISSDATE,
				MANUAL_PASSPORTISSDATE, "Passport Issue")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASS_EXP_DT_FCR,
				CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_PASS_EXP_DT_MANUAL,
				FCR_PASSPORTEXPDATE, EIDA_PASSPORTEXPDATE,
				MANUAL_PASSPORTEXPDATE, CA0122, "Mandatory",
				"Passport Expiry Date")) {
			return false;
		}
		if (!validatePastDates(CHECKBOX_PASS_EXP_DT_FCR,
				CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_PASS_EXP_DT_MANUAL,
				FCR_PASSPORTEXPDATE, EIDA_PASSPORTEXPDATE,
				MANUAL_PASSPORTEXPDATE, "Passport Expiry")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_NATIONALITY_FCR,
				CHECKBOX_NATIONALITY_EIDA, CHECKBOX_NATIONALITY_MANUAL,
				FCR_NATIONALITY, EIDA_NATIONALITY, MANUAL_NATIONALITY, CA013,
				"Mandatory", "Nationality")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_NO_FCR,
				CHECKBOX_VISA_NO_EIDA, CHECKBOX_VISA_NO_MANUAL, FCR_VISANO,
				EIDA_VISANO, MANUAL_VISANO, CA0135, "Optional", "Visa No")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_ISSUE_DATE_FCR,
				CHECKBOX_VISA_ISSUE_DATE_EIDA, CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				FCR_VISAISSDATE, EIDA_VISAISSDATE, MANUAL_VISAISSDATE, CA0136,
				"Optional", "Visa Issue Date")) {
			return false;
		}
		if (!validateFutureDates(CHECKBOX_VISA_ISSUE_DATE_FCR,
				CHECKBOX_VISA_ISSUE_DATE_EIDA, CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				FCR_VISAISSDATE, EIDA_VISAISSDATE, MANUAL_VISAISSDATE,
				"Visa Issue")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_EXPIRY_DATE_FCR,
				CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAEXPDATE,
				EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE, CA0137, "Optional",
				"Visa Expiry Date")) {
			return false;
		}
		if (!validatePastDates(CHECKBOX_VISA_EXPIRY_DATE_FCR,
				CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAEXPDATE,
				EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE, "Visa Expiry")) {
			return false;
		}
		if (!sAccRelation.equalsIgnoreCase("Minor")) {
			if (!ValidateComparisonDataCombo(CHECKBOX_PROFESSION_FCR,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_PROFESSION_MANUAL,
					FCR_PROFESSION, EIDA_PROFESSION, MANUAL_PROFESSION, CA075,
					"Mandatory", "Profession")) {
				return false;
			}
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_GENDER_FCR,
				CHECKBOX_GENDER_EIDA, CHECKBOX_GENDER_MANUAL, FCR_GENDER,
				EIDA_GENDER, MANUAL_GENDER, CA041, "Mandatory", "Gender")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_EMP_NAME_FCR,
				CHECKBOX_EMP_NAME_EIDA, CHECKBOX_EMP_NAME_MANUAL,
				FCR_EMPLYR_NAME, EIDA_EMPLYR_NAME, MANUAL_EMPLYR_NAME, CA0145,
				"Optional", "Employer Name")) {
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (!validateOfficeNo(CP_TELEOFFICE, CR0003)) {
				return false;
			}
		}
		/*
		 * if(!validateMobileNo(CHECKBOX_TELE_MOB_FCR,CHECKBOX_TELE_MOB_EIDA,
		 * CHECKBOX_TELE_MOB_MANUAL,FCR_MOBILE,
		 * EIDA_MOBILE,MANUAL_MOBILE,CA0126)) { if(!mobileConfirmFlag) { return
		 * false; } }
		 */
		return true;
	}
//Modify by Shivanshu ATP-472 Change length to 2
	public boolean ValidateName(String sFCRCBControl, String sEIDACBControl,
			String sManualCBControl, String sFCRDataControl,
			String sEIDADataControl, String sManualDataControl,
			String sMessageID, String sMessageID2) {
		logInfo("ValidateName", "INSIDE");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sFCRDataControl).toString().length() < 2) {
				sendMessageValuesList(sFCRDataControl, sMessageID);
				return false;
			}
			if (formObject.getValue(sFCRDataControl).toString().length() > 75) {
				sendMessageValuesList(sFCRDataControl, sMessageID2);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sEIDADataControl).toString().length() < 2) {
				sendMessageValuesList(sEIDADataControl, sMessageID);
				return false;
			}
			if (formObject.getValue(sEIDADataControl).toString().length() > 75) {
				sendMessageValuesList(sEIDADataControl, sMessageID2);
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (formObject.getValue(sManualDataControl).toString().length() < 2) {
				sendMessageValuesList(sManualDataControl, sMessageID);
				return false;
			}
			if (formObject.getValue(sManualCBControl).toString().length() > 75) {
				sendMessageValuesList(sManualCBControl, sMessageID2);
				return false;
			}
		}
		return true;
	}

	public boolean validateOfficeNo(String sFCRDataControl, String sMessageID) {
		logInfo("ValidateOfficeNo", "INSIDE");
		if (formObject.getValue(CP_TELEOFFICE).toString().equalsIgnoreCase("")
				|| formObject.getValue(CP_TELEOFFICE).toString()
						.equalsIgnoreCase(null))
			return true;
		if ("United Arab Emirates".equalsIgnoreCase(checkCountry())) {
			String sNumber = formObject.getValue(sFCRDataControl).toString();
			if (!sNumber.startsWith("971")) {
				sendMessageValuesList(sFCRDataControl,
						"Office no should start with 971");
				return false;
			}
			if (formObject.getValue(sFCRDataControl).toString().length() != 11) {
				sendMessageValuesList(sFCRDataControl, sMessageID);
				return false;
			}
		}
		return true;
	}

	public boolean validatePastDates(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageField) {
		logInfo("ValidatePastDates", "INSIDE");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validatePastDate(sFCRDataControl, sMessageField)) {
				sendMessageValuesList(sFCRDataControl, CA0129);
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validatePastDate(sEIDADataControl, sMessageField)) {
				sendMessageValuesList(sEIDADataControl, CA0129);
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validatePastDate(sManualDataControl, sMessageField)) {
				sendMessageValuesList(sManualDataControl, CA0129);
				return false;
			}
		}
		return true;
	}

	public boolean validatePastDate(String date, String controlName) {
		try {
			logInfo("validatePastDate", "INSIDE");
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String scurrentDate = simpledateformat.format(calendar.getTime());
			String sDate = formObject.getValue(date).toString();
			if (sDate.equalsIgnoreCase(""))
				return true;
			logInfo("validatePastDate", "date :" + sDate + "\n "
					+ "scurrentDate " + scurrentDate);
			if (!scurrentDate.equals("")) {
				String[] temp = scurrentDate.split("/");
				if (temp[1].length() == 3) {
					scurrentDate = temp[0] + "/" + getMonthNumber(temp[1])
							+ "/" + temp[2];
				} else {
					scurrentDate = temp[0] + "/" + temp[1] + "/" + temp[2];
				}
			}
			Date currentDate = simpledateformat.parse(scurrentDate);
			Date nDate = simpledateformat.parse(sDate);
			logInfo("validatePastDate", "currentDate :" + currentDate + "\n "
					+ "nDate " + nDate);
			if (nDate.compareTo(currentDate) < 0) {
				sendMessageValuesList(date, controlName + " " + CA0129);
				return false;
			} else if (Integer.parseInt(sDate.substring(
					sDate.lastIndexOf("/") + 1, sDate.length())) >= 2099) {
				sendMessageValuesList(date, controlName
						+ " Date can not be greater than 2099");
				return false;
			}
		} catch (Exception e) {
			logError("validatePastDate", e);
		}
		return true;
	}

	public boolean validateFutureDates(String sFCRCBControl,
			String sEIDACBControl, String sManualCBControl,
			String sFCRDataControl, String sEIDADataControl,
			String sManualDataControl, String sMessageField) {
		logInfo("ValidateFutureDates", "INSIDE");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateFutureDate(sFCRDataControl, sMessageField)) {
				// sendMessageValuesList(sFCRDataControl, "");
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateFutureDate(sEIDADataControl, sMessageField)) {
				// sendMessageValuesList(sEIDADataControl, "");
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateFutureDate(sManualDataControl, sMessageField)) {
				// sendMessageValuesList(sManualDataControl, "");
				return false;
			}
		}
		return true;
	}

	public boolean validateDOB(String sFCRCBControl, String sEIDACBControl,
			String sManualCBControl, String sFCRDataControl,
			String sEIDADataControl, String sManualDataControl) {
		logInfo("validateDOB", "INSIDE");
		if (formObject.getValue(sFCRCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateDOB(sFCRDataControl)) {
				logInfo("validateDOB", "fcr- Please fill valid DOB");
				sendMessageValuesList(sFCRDataControl, "Please fill valid DOB");
				return false;
			}
		} else if (formObject.getValue(sEIDACBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateDOB(sEIDADataControl)) {
				logInfo("validateDOB", "eida- Please fill valid DOB");
				sendMessageValuesList(sEIDADataControl, "Please fill valid DOB");
				return false;
			}
		} else if (formObject.getValue(sManualCBControl).toString()
				.equalsIgnoreCase("True")) {
			if (!validateDOB(sManualDataControl)) {
				logInfo("validateDOB", "manual- Please fill valid DOB");
				sendMessageValuesList(sManualDataControl,
						"Please fill valid DOB");
				return false;
			}
		}
		return true;
	}

	public boolean checkNatCatSegment() {
		logInfo("checkNatCatSegment", "INSIDE");
		String sFinalNationality = "";
		try {
			if (ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)
					|| ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)
					|| ACTIVITY_QDE_ACCOUNT_INFO
							.equalsIgnoreCase(sActivityName)) {
				String segment = formObject.getValue(NEW_CUST_SEGMENT)
						.toString();
				String Seg1 = formObject.getValue(OLD_CUST_SEGMENT)//added by krishna
						.toString();
				int iSelectedRow = Integer.parseInt(formObject.getValue(
						SELECTED_ROW_INDEX).toString());
				String sCustNo = formObject.getTableCellValue(ACC_RELATION,
						iSelectedRow, 0);
				String sQuery = "select FINAL_NATIONALITY FROM USR_0_CUST_TXN WHERE WI_NAME = '"
						+ sWorkitemId + "' and " + "CUST_SNO='" + sCustNo + "'";
				List<List<String>> output = formObject.getDataFromDB(sQuery);
				sFinalNationality = output.get(0).get(0);
				if (("Emirati Excellency".equalsIgnoreCase(segment) || "Emirati"
						.equalsIgnoreCase(segment))
						&& !"UNITED ARAB EMIRATES"
								.equalsIgnoreCase(sFinalNationality)) {
					sendMessageValuesList("", segment
							+ "  only valid for UAE Nationals");
					return false;
				}
				//Start code
//				if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade")){//Added by krishna
//					if (("Aspire".equalsIgnoreCase(Seg1) || "Simplylife".equalsIgnoreCase(Seg1)|| "Emirati".equalsIgnoreCase(Seg1))
//							&& !("Privilege".equalsIgnoreCase(segment) ||  "Excellency".equalsIgnoreCase(segment) || "Emirati Excellency".equalsIgnoreCase(segment) || "Private Clients".equalsIgnoreCase(segment))) {
//						sendMessageValuesList("", segment
//								+ "  Please select Privilege or Excellency or Emirati Excellency or Private Clients ");
//						return false;
//				}
//					
//				if (("Privilege".equalsIgnoreCase(Seg1)) &&  !("Excellency".equalsIgnoreCase(segment) || "Emirati Excellency".equalsIgnoreCase(segment) || "Private Clients".equalsIgnoreCase(segment))) {
//						sendMessageValuesList("", segment+ "  Please select  Excellency or Emirati Excellency or Private Clients ");
//						return false;
//					}
//					if (("Excellency".equalsIgnoreCase(Seg1) || "Emirati Excellency".equalsIgnoreCase(Seg1)) &&  !("Private Clients".equalsIgnoreCase(segment))) {
//						sendMessageValuesList("", segment+ "  Please select Private Clients ");
//						return false;
//					}
//					
//				} 
//				if(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade")){//Added by krishna
//					if (("Private Clients".equalsIgnoreCase(Seg1)) && 
//					!("Aspire".equalsIgnoreCase(segment) || "Simplylife".equalsIgnoreCase(segment)|| "Emirati".equalsIgnoreCase(segment)||"Privilege".equalsIgnoreCase(segment))
//				     && ("Private Clients".equalsIgnoreCase(segment))) {
//								sendMessageValuesList("", segment+ "  Please select Aspire or Simplylife or Emirati or Privilege");
//								return false;
//							}
//					
//					if (("Excellency".equalsIgnoreCase(Seg1) || "Emirati Excellency".equalsIgnoreCase(Seg1)) && 
//							 !("Aspire".equalsIgnoreCase(segment) || "Simplylife".equalsIgnoreCase(segment)|| "Emirati".equalsIgnoreCase(segment)||"Privilege".equalsIgnoreCase(segment))
//							 && ("Private Clients".equalsIgnoreCase(segment))) {
//								sendMessageValuesList("", segment+ "  Please select Aspire or Simplylife or Emirati or Privilege");
//								return false;
//							}if (("Privilege".equalsIgnoreCase(Seg1)) 
//								&& !("Simplylife".equalsIgnoreCase(segment)|| "Aspire".equalsIgnoreCase(segment) || "Emirati".equalsIgnoreCase(segment)) 
//								&& ( "Excellency".equalsIgnoreCase(segment) || "Emirati Excellency".equalsIgnoreCase(segment)||"Private Clients".equalsIgnoreCase(segment))) {
//									sendMessageValuesList("", segment+ "  Please select Aspire or Simplylife or Emirati ");
//									return false;
//							}if (("Emirati".equalsIgnoreCase(Seg1)) 
//									&& !( "Aspire".equalsIgnoreCase(segment)) 
//									&& ( "Excellency".equalsIgnoreCase(segment) || "Emirati Excellency".equalsIgnoreCase(segment)||"Private Clients".equalsIgnoreCase(segment)||"Privilege".equalsIgnoreCase(segment))) {
//									sendMessageValuesList("", segment+ "  Please select Aspire ");
//									return false;
//							}
//							
//						} //end code
			}
		} catch (Exception e) {
			logError("checkNatCatSegment", e);
		}
		return true;
	}

	public boolean mandatoryIndividualInfo() {
		// NGRepeater objChkRepeater = formObject.getNGRepeater("REPEAT_FRAME");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 7);
		logInfo("submitWorkitemDDE", "sBankRelation----" + sBankRelation);
		if (formObject.getValue(MANUAL_LASTNAME).toString().trim()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(MANUAL_LASTNAME, "Please Fill Last Name.");
			return false;
		}
		if (formObject.getValue(CUST_PREFIX).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CUST_PREFIX, CA037);
			return false;
		}
		if (formObject.getValue(CUST_PREFIX).toString()
				.equalsIgnoreCase("Others")) {
			if (formObject.getValue(PD_OTHERS).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(PD_OTHERS, CA038);
				return false;
			}
		}
		if (formObject.getValue(PD_FULLNAME).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(PD_FULLNAME, CA011);
			return false;
		}
		if (formObject.getValue(PD_DOB).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(PD_DOB, CA012);
			return false;
		} else {
			if (!validateDOB(PD_DOB)) {
				return false;
			}
		}
		if (formObject.getValue(CUST_NATIONALITY).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(CUST_NATIONALITY, CA013);
			return false;
		}
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (formObject.getValue(PD_MOTHERMAIDENNAME).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(PD_MOTHERMAIDENNAME, CA040);
				return false;
			}
		}
		if (formObject.getValue(CUST_GENDER).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CUST_GENDER, CA041);
			return false;
		}
		/*
		 * if(formObject.getValue(PD_CUSTSEGMENT).toString().equalsIgnoreCase("")
		 * ) { sendMessageValuesList(PD_CUSTSEGMENT,CA042); return false; }
		 */
		return true;
	}

	public boolean mandatoryContactInfo() {
		logInfo("mandatoryContactInfo", "INSIDE");
		// NGRepeater objChkRepeater = formObject.getNGRepeater("REPEAT_FRAME");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 7);
		logInfo("mandatoryContactInfo", "sBankRelation1----" + sBankRelation);
		if (formObject.getValue(CP_POBOXNO).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CP_POBOXNO, CA048);
			return false;
		}
		if (formObject.getValue(CP_FLOOR).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CP_FLOOR, CA049);
			return false;
		}
		logInfo("mandatoryContactInfo", "sBankRelation11----" + sBankRelation);
		if (formObject.getValue(CP_STREET).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CP_STREET, CA050);
			return false;
		}
		logInfo("mandatoryContactInfo", "sBankRelation12----" + sBankRelation);
		if (formObject.getValue(CP_CITY).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CP_CITY, CA051);
			return false;
		}
		if (formObject.getValue(CORR_STATE).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CORR_STATE, CA052);
			return false;
		}
		logInfo("mandatoryContactInfo", "sBankRelation131111----"
				+ sBankRelation);
		if (formObject.getValue(CORR_STATE).toString()
				.equalsIgnoreCase("Others")) {
			if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				if (formObject.getValue(CP_OTHERS).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(CP_OTHERS, CA0131);
					return false;
				}
			} else {
				if (formObject.getValue(CP_OTHERS).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(CP_OTHERS, CA0131);
					return false;
				}
			}
		}
		logInfo("mandatoryContactInfo", "sBankRelation13----" + sBankRelation);
		if (formObject.getValue(CORR_CNTRY).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(CORR_CNTRY, CA053);
			return false;
		}
		if (!(formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Student") || formObject.getValue(EMP_STATUS)
				.toString().equalsIgnoreCase("Housewife"))) {
			if (formObject.getValue(CP_MOBILE).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CP_MOBILE, CA059);
				return false;
			}
		}
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (!formObject.getValue(CP_EMAIL).toString().equalsIgnoreCase("")) {
				if (!validateEmailFormat(CP_EMAIL)) {
					return false;
				}
			}
			logInfo("mandatoryContactInfo", "Resident Validation===="
					+ formObject.getValue(RA_BUILDINGNAME));
			if (formObject.getValue(RA_BUILDINGNAME).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_BUILDINGNAME, CA063);
				return false;
			}
			logInfo("mandatoryContactInfo", "Resident Validation==");
			if (formObject.getValue(RA_VILLAFLATNO).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_VILLAFLATNO, CA064);
				return false;
			}
			if (formObject.getValue(RA_STREET).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_STREET, CA065);
				return false;
			}
			logInfo("MandatoryContactInfo",
					"RA_CITY::" + formObject.getValue(RA_CITY).toString());
			if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade"))) {
			if (formObject.getValue(RA_CITY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_CITY, CA066);
				return false;
			}
			}
			if (formObject.getValue(RES_STATE).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RES_STATE, CA067);
				return false;
			}
			logInfo("mandatoryContactInfo", "RS STATE : "
					+ formObject.getValue(RES_STATE).toString());
			logInfo("mandatoryContactInfo", "sActivityName : " + sActivityName);
			logInfo("mandatoryContactInfo", "RA_OTHERS : "
					+ formObject.getValue(RA_OTHERS).toString());
			logInfo("mandatoryContactInfo", "PA_OTHERS : "
					+ formObject.getValue(PA_OTHERS).toString());
			if (formObject.getValue(RES_STATE).toString()
					.equalsIgnoreCase("Others")) {
				if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
					if (formObject.getValue(RA_OTHERS).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(RA_OTHERS, CA0132);
						return false;
					}
				} else {
					if (formObject.getValue(RA_OTHERS).toString()
							.equalsIgnoreCase("")) {
						sendMessageValuesList(RA_OTHERS, CA0132);
						return false;
					}
				}
			}
			if (formObject.getValue(RES_CNTRY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RES_CNTRY, CA068);
				return false;
			}
		}
		if (formObject.getValue(RM_CODE).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(RM_CODE, CA091);
			return false;
		}
		if (formObject.getValue(RM_NAME).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(RM_NAME, CA092);
			return false;
		}
		if (formObject.getValue(IDS_PROF_CENTER_CODE).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(IDS_PROF_CENTER_CODE, CA094);
			return false;
		}
		return true;
	}

	public boolean mandatoryEmploymentInfo() {
		if (formObject.getValue(PROFESION).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(PROFESION, CA075);
			return false;
		}
		if (formObject.getValue(PROFESION).toString()
				.equalsIgnoreCase("Others")) {
			if (formObject.getValue(ED_OTHER).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ED_OTHER, CA076);
				return false;
			}
		}
		if (formObject.getValue(ED_EMP_TYPE).toString()
				.equalsIgnoreCase("ADCB")
				|| formObject.getValue(ED_EMP_TYPE).toString()
						.equalsIgnoreCase("Public")) {
			if (formObject.getValue(ED_POSITN_DESGNT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_POSITN_DESGNT, CA077);
				return false;
			}
		}
		if (formObject.getValue(ED_SET_FLG).toString().equalsIgnoreCase("")) {
			if (!(formObject.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Housewife") || formObject
					.getValue(EMP_STATUS).toString()
					.equalsIgnoreCase("Student"))) {
				sendMessageValuesList(ED_SET_FLG, CA084);
				return false;
			}
		}
		int selectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		// NGRepeater objChkRepeater = formObject.getNGRepeater("REPEAT_FRAME");
		logInfo("", "selectedRow----" + selectedRow);
		String relation = formObject.getTableCellValue(ACC_RELATION,
				selectedRow, 9);
		if (!(formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Housewife")
				|| formObject.getValue(EMP_STATUS).toString()
						.equalsIgnoreCase("Student") || relation
					.equalsIgnoreCase("Minor"))) {
			if (formObject.getValue(ED_MONTHLY_INCM).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_MONTHLY_INCM, CA0130);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_SAL_AED).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_SAL_AED).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ED_SAL_AED, CA078);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_INVSTMNT_RETN_AED).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_INVSTMNT_RETN_AED).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_INVSTMNT_RETN_AED, CA079);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_INHT_AED).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_INHT_AED).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_INHT_AED, CA080);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_REAL_INC_AED).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_REAL_INC_AED).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_REAL_INC_AED, CA081);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_SALE_OF_ASST).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_SALE_OF_ASST).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_SALE_OF_ASST, CA082);
				return false;
			}
		}
		if (formObject.getValue(ED_CB_OTHERS).toString()
				.equalsIgnoreCase("true")) {
			if (formObject.getValue(ED_OTHERS).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ED_OTHERS, CA083);
				return false;
			}
		}
		if (!formObject.getValue(ED_DATE_OF_JOING).toString()
				.equalsIgnoreCase("")) {
			if (!validateFutureDate(ED_DATE_OF_JOING, "Date of Joining")) {
				return false;
			}
		}
		return true;
	}

	public boolean mandatoryiKYCDDE() {
		if (formObject.getValue(GI_DATE_KYC_PREP).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(GI_DATE_KYC_PREP, CA095);
			return false;
		}
		if (formObject.getValue(ED_CUST_CRS_BRDR_PAYMENT).toString()
				.equalsIgnoreCase("Yes")) {
			if (formObject.getValue(ED_PURPSE_CRS_BRDR_PAYMENT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_PURPSE_CRS_BRDR_PAYMENT, CA0151);
				return false;
			}
			if (formObject.getValue(ED_ANTCPATD_CRS_BRDER_PYMT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_ANTCPATD_CRS_BRDER_PYMT, CA0152);
				return false;
			}
			if (formObject.getValue(ED_ANTCPATD_MNTHVAL_BRDER_PYMT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_ANTCPATD_MNTHVAL_BRDER_PYMT, CA0153);
				return false;
			}
			if (formObject.getValue(ED_CNTRY_PYMT_RECV).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_CNTRY_PYMT_RECV, CA0154);
				return false;
			}
		}
		if (formObject.getValue(GI_IS_CUST_VIP).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(GI_IS_CUST_VIP, CA036);
			return false;
		}
		if (formObject.getValue(RA_CARRYNG_EID_CARD).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_CARRYNG_EID_CARD, CA022);
			return false;
		}
		if (formObject.getValue(RA_PRPSE_TAX_EVSN).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_PRPSE_TAX_EVSN, CA029);
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (formObject.getValue("COMBO40").toString().equalsIgnoreCase("")) {
				sendMessageValuesList(SIGN_STYLE1, CA021);
				return false;
			}
		} else {
			if (formObject.getValue(SIGN_STYLE1).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SIGN_STYLE1, CA021);
				return false;
			}
		}
		if (formObject.getValue(EMP_STATUS).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_STATUS, "Please select employment status");
			return false;
		}
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			if (formObject.getValue(ED_EMP_TYPE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_EMP_TYPE, CA024);
				return false;
			}
		}
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")
				|| formObject.getValue(EMP_STATUS).toString()
						.equalsIgnoreCase("Salaried")) {
			if (formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_CUST_WRKNG_UAE, CA0146);
				return false;
			}
			if (formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_CUST_WRKNG_NON_UAE, CA0147);
				return false;
			}
			if (formObject.getValue(DEALS_IN_WMD).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(
						DEALS_IN_WMD,
						"Please select Is the customer owner/parties of entities involved in manufacturing or trading or dealing in Weapons of Mass Destruction (WMD) and Proliferation of goods and services used in manufacturing of WMD's?");
				return false;
			}
		}
		//Added by Shivanshu ATP-472
		if (formObject.getValue(ED_SAL_AED).toString().equalsIgnoreCase("0")) {
			sendMessageValuesList(ED_SAL_AED, "Salary AED "+CA0207);
			return false;
		}
		/*if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			if (formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
					.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
							.toString().equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR)
							.toString().equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_REAL_STATE_BROKR).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_OTHERS).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(FINANCIAL_BROKERS).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(NOTARY_PUBLIC).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(SOCIAL_MEDIA_INFLUNCER).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
							.equalsIgnoreCase("false")) {
				sendMessageValuesList(BUSINESS_NATURE_SECTION_FRM, CA0150);
				return false;
			}
		}*/
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			if (formObject.getValue(EMPNAME).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(EMPNAME, CA0162);
				return false;
			}
			if (formObject.getValue(ED_NATURE_OF_BUSNS).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_NATURE_OF_BUSNS, CA0163);
				return false;
			}if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade"))) {
			if (formObject.getValue(ED_PERC_OF_OWNRSHP).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_PERC_OF_OWNRSHP, CA0164);
				return false;
			}
			if (formObject.getValue(ED_NO_UAE_OVRS_BRNCH).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_NO_UAE_OVRS_BRNCH, CA0165);
				return false;
			}
			}
			//return true; Commented by Shivanshu for ATP-455
		}
		if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_UAE_RESIDENT, CA086);
			return false;
		} else if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
				.equalsIgnoreCase("No")) {
			if (formObject.getValue(RA_RSN_BNKNG_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_RSN_BNKNG_UAE, CA0149);
				return false;
			}
		}
		if (formObject.getValue(RA_IS_CUST_DEALNG_ARMAMNT).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_DEALNG_ARMAMNT, CA028);
			return false;
		}
		if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_PEP, CA027);
			return false;
		} /*else if (formObject.getValue(RA_IS_CUST_PEP).toString()
				.equalsIgnoreCase("Yes")) {
			if (formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_LIST_OF_CUST_PEP, CA0148);
				return false;
			}
		}*/
		if (formObject.getValue(RA_IS_CUST_DEALNG_HAWALA).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_DEALNG_HAWALA, CA026);
			return false;
		}
		if (formObject.getValue(PD_ANY_CHNG_CUST_INFO).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(PD_ANY_CHNG_CUST_INFO, CA090);
			return false;
		}if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") || 
			  formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")||
			  formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade"))){
		
		if (formObject.getValue(AO_INCOME_SRC).toString().equalsIgnoreCase("") || formObject.getValue(AO_INCOME_SRC).toString() == null) {
			sendMessageValuesList(AO_INCOME_SRC, CA0189);
			return false;
		}
	    if (formObject.getValue(RA_CUST_SRC_WEALTH).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_CUST_SRC_WEALTH, CA0193);
				return false;
			}
		if (formObject.getValue(ACC_IN_ANTHR_BNK_UAE).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(ACC_IN_ANTHR_BNK_UAE, CA0194);
				return false;
		    }
		if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_CUST_PEP, CA0195);
				return false;
			}
	    if (formObject.getValue(RA_IS_UAE_RESIDENT).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_UAE_RESIDENT, CA0196);
				return false;
			}
		if (formObject.getValue(CHANNEL_RISK_AO).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CHANNEL_RISK_AO, CA0197);
				return false;
		   }
		if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
				&&(formObject.getValue(POA_NATIONALITY).toString().equalsIgnoreCase("")
							|| formObject.getValue(POA_NATIONALITY).toString() == null)) { //MOdify by Shivanshu ATP-455
				sendMessageValuesList(POA_NATIONALITY,CA0204);
			return false;
		}
		if ( formObject.getValue(PRIMARY_SRC_CNTRY).toString().equalsIgnoreCase("") || formObject.getValue(PRIMARY_SRC_CNTRY).toString() == null) { //Jamshed
			sendMessageValuesList(PRIMARY_SRC_CNTRY,CA0201);
			return false;
		}
		//SHivanshu ATP-455
		if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
				&& (formObject.getValue(POA_RESIDENCY).toString().equalsIgnoreCase("")
						|| formObject.getValue(POA_RESIDENCY).toString() == null) ) {
			sendMessageValuesList(POA_RESIDENCY,CA0203);
			return false;
		}
	}
		return true;
	}

	public void setCPDCheckerCombos() {
		try {
			int sCustNo = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String sQuery = "SELECT DECODE(MANUAL_PREFIX,'',MANUAL_PREFIX) "
					+ "MANUAL_PREFIX,DECODE(PREFIX,'',PREFIX) "
					+ "PREFIX,DECODE(MANUAL_COUNTRY,'',MANUAL_COUNTRY) "
					+ "MANUAL_COUNTRY,DECODE(MANUAL_RESIDENCE_COUNTRY,'',MANUAL_RESIDENCE_COUNTRY) "
					+ "MANUAL_RESIDENCE_COUNTRY,DECODE(MANUAL_NATIONALITY,'',MANUAL_NATIONALITY) "
					+ "MANUAL_NATIONALITY,DECODE(BIRTH_COUNTRY,'',BIRTH_COUNTRY) "
					+ "BIRTH_COUNTRY,DECODE(NATIONALITY,'',NATIONALITY) "
					+ "NATIONALITY,DECODE(CORR_CNTRY,'',CORR_CNTRY) "
					+ "CORR_CNTRY,DECODE(PER_COUNTRY,'',PER_COUNTRY) "
					+ "PER_COUNTRY,DECODE(RES_CNTRY,'',RES_CNTRY) "
					+ "RES_CNTRY,DECODE(MANUAL_STATE,'',MANUAL_STATE) "
					+ "MANUAL_STATE,DECODE(CORR_STATE,'',CORR_STATE) "
					+ "CORR_STATE,DECODE(RES_STATE,'',RES_STATE) "
					+ "RES_STATE,DECODE(PER_STATE,'',PER_STATE) "
					+ "PER_STATE,DECODE(RM_NAME,'',RM_NAME) "
					+ "RM_NAME,DECODE(RM_CODE,'',RM_CODE) "
					+ "RM_CODE,DECODE(EMP_PROFESSION_NAME,'',EMP_PROFESSION_NAME) "
					+ "EMP_PROFESSION_NAME,DECODE(PROFESSION_CODE,'',PROFESSION_CODE) "
					+ "PROFESSION_CODE,DECODE(BLACKLIST_DEC,'',BLACKLIST_DEC) "
					+ "BLACKLIST_DEC,DECODE(BAD_CHECK_DEC,'',BAD_CHECK_DEC) "
					+ "BAD_CHECK_DEC,DECODE(WORLD_CHECK_DEC,'',WORLD_CHECK_DEC) "
					+ "WORLD_CHECK_DEC,DECODE(BLACKLIST_DEC_CPD,'',BLACKLIST_DEC_CPD) "
					+ "BLACKLIST_DEC_CPD,DECODE(BAD_CHECK_DEC_CPD,'',BAD_CHECK_DEC_CPD) "
					+ "BAD_CHECK_DEC_CPD,DECODE(WORLD_CHECK_DEC_CPD,'',WORLD_CHECK_DEC_CPD) "
					+ "WORLD_CHECK_DEC_CPD,DECODE(FINAL_ELIGIBILITY,'',FINAL_ELIGIBILITY) "
					+ "FINAL_ELIGIBILITY,DECODE(FINAL_ELIGIBILITY_CPD,'',FINAL_ELIGIBILITY_CPD) "
					+ "FINAL_ELIGIBILITY_CPD,DECODE(MANUAL_GENDER,'',MANUAL_GENDER) "
					+ "MANUAL_GENDER,DECODE(GENDER,'',GENDER) "
					+ "GENDER,DECODE(CUST_SEG,'',CUST_SEG) "
					+ "CUST_SEG,DECODE(PROMO_CODE,'',PROMO_CODE) "
					+ "PROMO_CODE,DECODE(SYSTEM_DEC,'',SYSTEM_DEC)"
					+ "SYSTEM_DEC,DECODE(BANK_DEC,'',BANK_DEC) "
					+ "BANK_DEC,DECODE(BANK_DEC_CPD,'',BANK_DEC_CPD) "
					+ "BANK_DEC_CPD,DECODE(SYSTEM_DEC_CPD,'',SYSTEM_DEC_CPD) "
					+ "SYSTEM_DEC_CPD,DECODE(IS_VVIP_CUSTOMER,'',IS_VVIP_CUSTOMER) "
					+ "IS_VVIP_CUSTOMER,DECODE(EIDA_PRESENT,'',EIDA_PRESENT) "
					+ "EIDA_PRESENT,DECODE(STAFF_FLAG,'',STAFF_FLAG) "
					+ "STAFF_FLAG,DECODE(PURPOSE_TAX,'',PURPOSE_TAX) "
					+ "PURPOSE_TAX,DECODE(IS_UAE_RESIDENT,'',IS_UAE_RESIDENT) "
					+ "IS_UAE_RESIDENT,DECODE(DEALS_ARMAMENT,'',DEALS_ARMAMENT) "
					+ "DEALS_ARMAMENT,DECODE(PEP,'',PEP) PEP,DECODE(HAWALA,'',HAWALA) "
					+ "HAWALA,DECODE(IS_HOLDING_GREENCARD,'',IS_HOLDING_GREENCARD) "
					+ "IS_HOLDING_GREENCARD,DECODE(IS_US_TAX_LIABLE,'',IS_US_TAX_LIABLE) "
					+ "IS_US_TAX_LIABLE,DECODE(IS_US_TIN_PRESENT,'',IS_US_TIN_PRESENT) "
					+ "IS_US_TIN_PRESENT,DECODE(IS_US_CLASSIFICATION,'',IS_US_CLASSIFICATION) "
					+ "IS_US_CLASSIFICATION,DECODE(IS_US_RESIDENT,'',IS_US_RESIDENT) IS_US_RESIDENT,"
					+ "DECODE(IS_CUST_DETAIL_CHANGE,'',IS_CUST_DETAIL_CHANGE) IS_CUST_DETAIL_CHANGE,"
					+ "DECODE(RELIGION,'',RELIGION) RELIGION,DECODE(CUST_MARITAL_STATUS,'',"
					+ "CUST_MARITAL_STATUS) CUST_MARITAL_STATUS,DECODE(PASS_TYPE,'',PASS_TYPE) PASS_TYPE,"
					+ "DECODE(VISA_STATUS,'',VISA_STATUS) VISA_STATUS,DECODE(ACC_RELATIONSHIP_PURPOSE,'',"
					+ "'--Select--',ACC_RELATIONSHIP_PURPOSE)ACC_RELATIONSHIP_PURPOSE,DECODE(EMPLOYEE_TYPE,'',"
					+ "EMPLOYEE_TYPE)EMPLOYEE_TYPE,DECODE(EMP_STATUS,'',EMP_STATUS)EMP_STATUS,"
					+ "DECODE(SPECIAL_CATAGORY,'',SPECIAL_CATAGORY)SPECIAL_CATAGORY,DECODE(EXELLENCY_CENTER,"
					+ "'',EXELLENCY_CENTER)EXELLENCY_CENTER,DECODE(SIGN_STYLE,'',SIGN_STYLE) "
					+ "SIGN_STYLE,DECODE(IS_CROSS_BORDER_PAYMENT,'',IS_CROSS_BORDER_PAYMENT) "
					+ "IS_CROSS_BORDER_PAYMENT,DECODE(IS_WORK_DEFENCE_UAE,'',IS_WORK_DEFENCE_UAE) "
					+ "IS_WORK_DEFENCE_UAE,DECODE(IS_WORK_DEFENCE_NONUAE,'',IS_WORK_DEFENCE_NONUAE) "
					+ "IS_WORK_DEFENCE_NONUAE,DECODE(CORR_CITY,'',CORR_CITY) CORR_CITY,DECODE(RES_CITY,'',"
					+ "'--Select--',RES_CITY) RES_CITY,DECODE(PER_CITY,'',PER_CITY) PER_CITY,"
					+ "DECODE(MANUAL_CITY,'',MANUAL_CITY) MANUAL_CITY,DECODE(IS_POA_US_PERSON,'',"
					+ "IS_POA_US_PERSON) IS_POA_US_PERSON,DECODE(IS_US_INDICIA_FOUND,'',IS_US_INDICIA_FOUND) "
					+ "IS_US_INDICIA_FOUND,DECODE(DOCUMENT_TO_BE_COLLECTED,'',DOCUMENT_TO_BE_COLLECTED) "
					+ "DOCUMENT_TO_BE_COLLECTED,DECODE(MANUAL_COUNTRY_RESIDENCE,'',MANUAL_COUNTRY_RESIDENCE)"
					+ " MANUAL_COUNTRY_RESIDENCE,DECODE(RES_EIDA,'',RES_EIDA) RES_EIDA FROM USR_0_CUST_TXN "
					+ "WHERE WI_NAME ='" + sWorkitemId + "' AND CUST_SNO='"
					+ sCustNo + "'";
			List<List<String>> out = formObject.getDataFromDB(sQuery);
			String[] LIST_OF_CONSTANTS = { MANUAL_PREFIX, CUST_PREFIX,
					MANUAL_STATE, CORR_STATE, RES_STATE, PERM_STATE,
					MANUAL_CNTRY, MANUAL_PER_CNTRY, MANUAL_NATIONALITY,
					CNTRY_OF_BIRTH, CUST_NATIONALITY, CORR_CNTRY, PERM_CNTRY,
					RES_CNTRY, PROFESION, PROF_CODE, MATCH_FOUND,
					CRO_MATCH_FOUND, MATCH, CPD_CHK_MATCH_FOUND,
					CPD_MATCH_FOUND, CPD_MTCH_FOUND, FINAL_ELIGIBILITY,
					CPD_FINAL_ELIGIBILITY, MANUAL_GENDER, CUST_GENDER,
					PD_CUSTSEGMENT, PRO_CODE, CRO_SYS_DEC, CRO_BANK_DECISION,
					"CPD_BANK_DECISION", CRO_SYS_DEC, GI_IS_CUST_VIP,
					RA_CARRYNG_EID_CARD, ED_SET_FLG, RA_PRPSE_TAX_EVSN,
					RA_IS_UAE_RESIDENT, RA_IS_CUST_DEALNG_ARMAMNT,
					RA_IS_CUST_PEP, RA_IS_CUST_DEALNG_HAWALA, FAT_US_PERSON,
					FAT_LIABLE_TO_PAY_TAX, FAT_SSN, FAT_CUST_CLASSIFICATION,
					"Combo45", PD_ANY_CHNG_CUST_INFO, RELIGION, MARITAL_STATUS,
					"Combo34", GI_PURPOSE_ACC_REL, ED_EMP_TYPE, EMP_STATUS,
					SPECIAL_CAT, EXCELLENCY_CNTR, SIGN_STYLE1,
					ED_CUST_CRS_BRDR_PAYMENT, RA_IS_CUST_WRKNG_UAE,
					RA_IS_CUST_WRKNG_NON_UAE, CP_CITY, PA_CITY, RA_CITY,
					MANUAL_CITY, POACOMBO, INDICIACOMBO, COMBODOC,
					MANUAL_RESIDENT, DRP_RESEIDA };
			if (out.size() > 0) {
				addItemInComboFromDB(out, LIST_OF_CONSTANTS);
			}

			formObject.addItemInCombo(SEARCH_NATIONALITY, "");
			formObject.addItemInCombo(NEW_CUST_NATIONALITY, "");
			formObject.addItemInCombo(HD_FCR_SEARCH, "");
			formObject.addItemInCombo(NATION_CRO, "");
			formObject.addItemInCombo("nation_cpd", "");
			formObject.addItemInCombo(SI_CURRENCY, "");

			String ssQuery = "SELECT DECODE(SWEEP_OUT_DEBIT_ACC,'',SWEEP_OUT_DEBIT_ACC) "
					+ "SWEEP_OUT_DEBIT_ACC,DECODE(SWEEP_IN_DEBIT_ACC,'',SWEEP_IN_DEBIT_ACC) "
					+ "SWEEP_IN_DEBIT_ACC,DECODE(SWEEP_IN_CURR,'',SWEEP_IN_CURR) "
					+ "SWEEP_IN_CURR,DECODE(SWEEP_OUT_CURR,'',SWEEP_OUT_CURR) "
					+ "SWEEP_OUT_CURR FROM USR_0_STND_INSTR WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			List<List<String>> out1 = formObject.getDataFromDB(ssQuery);
			String[] LIST_OF_CONSTANTS1 = { SWP_OUT_DEB_ACC_NO,
					SWP_IN_DEB_ACC_NO, SWP_OUT_CURRENCY, SWP_IN_CURRENCY };
			if (out1.size() > 0) {
				addItemInComboFromDB(out1, LIST_OF_CONSTANTS1);
			}
		} catch (Exception e) {
			logInfo("", e.getMessage());
		}
	}

	public boolean checkTRSDDataChange() {
		int sCustNo = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString()) + 1;
		// String
		// Query="select count(1) CNT from USR_0_MAKER_CHANGE_TRACKER where field_name in ('FINAL_NATIONALITY','FINAL_GENDER','FINAL_DOB','FINAL_FULL_NAME','FINAL_LAST_NAME','FINAL_FIRST_NAME') and work_step='CPD Maker' and wi_name='"+sWorkitemId+"' "
		// +
		// "AND CUST_SNO= '"+sCustNo+"' and "+
		// " DT> (select MAX(TRSD_SCREENINGDATE) from usr_0_trsd_details where wi_name = '"+sWorkitemId+"'   AND ACC_RELATION_SNO = '"+sCustNo+"' AND user_ID='CPD')";
		String Query = "select count(1) CNT from USR_0_MAKER_CHANGE_TRACKER where field_name in ('FINAL_NATIONALITY','FINAL_GENDER','FINAL_DOB','FINAL_FULL_NAME','FINAL_LAST_NAME','FINAL_FIRST_NAME') "
				+ " and work_step='CPD Maker' and wi_name='"
				+ sWorkitemId
				+ "' AND CUST_SNO= '"
				+ sCustNo
				+ "' "
				+ " and DT> (select MAX(TRSD_SCREENING_DATE) from bpm_trsd_details where wi_name = (select trsd_wi_name from ext_ao where wi_name = '"
				+ sWorkitemId
				+ "') "
				+ " AND BATCH_ID =(SELECT MAX(BATCH_ID) FROM BPM_TRSD_DETAILS WHERE WI_NAME = (select trsd_wi_name from ext_ao where wi_name ='"
				+ sWorkitemId + "')))";

		logInfo("checkTRSDDataChange", " Query " + Query);
		List<List<String>> out = formObject.getDataFromDB(Query);
		if (out.size() > 0) {
			if (!out.get(0).get(0).equalsIgnoreCase("0")) {
				logInfo("checkTRSDDataChange", "inside first if data is "
						+ out.get(0).get(0));
				formObject.setStyle(BTN_CPD_TRSD_CHK, "disable", "false");
				return false;
			}
		}
		return true;

	}

	public boolean ExisitngCust() {
		try {
			logInfo("ExisitngCust", "Inside ExisitngCust");
			List<List<String>> sOutput;
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					"SELECTED_ROW_INDEX").toString());
			String sQuery = "select bank_relation from acc_relation_repeater where sno='"
					+ (iSelectedRow + 1)
					+ "' AND WI_NAME ='"
					+ sWorkitemId
					+ "'";
			logInfo("ExisitngCust", "Inside sQuery" + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			String exisitng = sOutput.get(0).get(0);
			logInfo("ExisitngCust", "Inside exisitng " + exisitng);
			if (exisitng.equalsIgnoreCase("Existing")) {
				return false;
			} else {
				return true;
			}

		} catch (Exception e) {
		}
		return true;
	}

	public boolean checkMandatoryDoc(String data) {
		logInfo("checkMandatoryDoc", "INSIDE");
		String resultEIDA = "";
		String resultFATCA = "";
		logInfo("checkMandatoryDoc", "data: " + data);
		if (data.contains("%%%")) {
			String[] dataArr = data.split("%%%");
			resultEIDA = dataArr[0];
			resultFATCA = dataArr[1];
		}
		logInfo("checkMandatoryDoc", "resultEIDA: " + resultEIDA
				+ ", resultFATCA: " + resultFATCA);
		String sQuery = "";
		List<List<String>> sOutput;
		String sDocName = "";
		// Sanal Grover 03062022
		if (sActivityName.equalsIgnoreCase("CPD Maker")) {
			sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE DOCUMENT_TO_BE_COLLECTED IN ('W9','W8BEN') AND WI_NAME ='"
					+ sWorkitemId + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				sQuery = "SELECT COUNT(1) FROM PDBDOCUMENT A, PDBDOCUMENTCONTENT B, PDBFOLDER C WHERE A.DOCUMENTINDEX=B.DOCUMENTINDEX"
						+ " AND C.FOLDERINDEX=B.PARENTFOLDERINDEX AND C.NAME = '"
						+ sWorkitemId + "' AND A.NAME = 'FATCA'";
				// JSObject objJStemp = formObject.getJSObject();
				// Object [] ain = {"FATCA#"};
				// Object getResult =
				// objJStemp.call("checkAttchedDocument",ain);
				// String sResult = getResult.toString();
				// String sResult = "";
				logInfo("checkMandatoryDoc", "Fatca sQuery " + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("checkMandatoryDoc", "Fatca sOutput " + sOutput);
				// commented for AO release by Ayush
				// if(!sOutput.get(0).get(0).equalsIgnoreCase("0"))
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("",
							"Please attach/import FATCA document.");
				}
				/*
				 * if(resultFATCA.equalsIgnoreCase("False")) {
				 * sendMessageValuesList("",
				 * "Please attach/import FATCA document."); }
				 */
			}
		}
		if (!(sActivityName.equalsIgnoreCase("CPD Maker") || sActivityName
				.equalsIgnoreCase("Delivery_Maker"))) {
			sQuery = "SELECT COUNT(DISTINCT CUST_SNO) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' and res_eida='No' and visa_status='Residency Visa'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("checkMandatoryDoc", "Inside sOutput " + sOutput);
			int iCountCustomer1 = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("checkMandatoryDoc", "Inside iCountCustomer1 "
					+ iCountCustomer1);
			if (!String.valueOf(iCountCustomer1).equalsIgnoreCase("0")) {
				int attached_eidadoc = 0;
				// JSObject objJStemp1 = formObject.getJSObject(); // needs to
				// be checked
				// Object [] ain1 = {"EIDA_CARD#"};
				// Object getResult1 =
				// objJStemp1.call("DocTypeAttachedcount",ain1);
				// String sResult1 = getResult1.toString();
				// String sResult1 = "";
				// logInfo("","sResult1-->no of doc attached already "+sResult1);
				attached_eidadoc = Integer.parseInt(resultEIDA);
				if (ExisitngCust()) {
					if (iCountCustomer1 > attached_eidadoc) {
						sendMessageValuesList("",
								"Please attach/import EIDA Number Document.");
						return false;
					}
				}
			}
			logInfo("checkMandatoryDoc", "Inside checkMandatoryDoc "+ formObject.getValue("REQUEST_TYPE").toString());
			if (formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("Category Change Only")) {
				sQuery = "SELECT COUNT(1) COUNT_DOC FROM USR_0_DOC_DETAILS WHERE DOC_NAME IN ('upgrade_form','') "
						+ "AND WI_NAME='" + sWorkitemId + "'";
				sDocName = "UPGRADE_FORM";
				logInfo("checkMandatoryDoc", "sQuery" + sQuery);
			    sOutput = formObject.getDataFromDB(sQuery);
			    logInfo("checkMandatoryDoc", "Inside sOutput " + sOutput);
			    if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("", "Kindly attach/import " + sDocName
						+ " document.");
					return false;
	             }
			} else if (formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("New Account")
					|| formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("New Account with Category Change")) {
				sQuery = "SELECT COUNT(1) COUNT_DOC FROM USR_0_DOC_DETAILS WHERE DOC_NAME IN ('aof_ntb','aof_existing') "
						+ "AND WI_NAME='" + sWorkitemId + "'";
				sDocName = "AOF_NTB/AOF_EXISTING";	
				logInfo("checkMandatoryDoc", "sQuery" + sQuery);
			    sOutput = formObject.getDataFromDB(sQuery);
			    logInfo("checkMandatoryDoc", "Inside sOutput " + sOutput);
			    if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("", "Kindly attach/import " + sDocName
						+ " document.");
					return false;
	             }
				//Added by krishna
			} else if ((formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("Downgrade")
					&& !(formObject.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Aspire")
							|| formObject.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Simplylife")))
					|| (formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("Upgrade") && (!formObject
							.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Private Clients")))) {
				sQuery = "SELECT COUNT(1) COUNT_DOC FROM USR_0_DOC_DETAILS WHERE DOC_NAME IN ('upgrade_form','email_approval') "
						+ "AND WI_NAME='" + sWorkitemId + "'";
				sDocName = "upgrade_form/email_approval";
				logInfo("checkMandatoryDoc", "sQuery" + sQuery);
			    sOutput = formObject.getDataFromDB(sQuery);
			    logInfo("checkMandatoryDoc", "Inside sOutput " + sOutput);
			    if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("", "Kindly attach/import " + sDocName
						+ " document.");
					return false;
			    }
			}      sQuery = "SELECT SUM(COUNT_WI) COUNT_WI FROM (SELECT COUNT(WI_NAME) AS COUNT_WI FROM ACC_RELATION_REPEATER"
					+ " WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND BANK_RELATION='New' and ACC_RELATION!='Minor' UNION "
					+ "ALL SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND "
					+ "(SIGNATUREPRESENTFLAG !='Y' OR SIGNATUREPRESENTFLAG IS NULL) AND CUST_SNO IN (SELECT SNO FROM"
					+ " ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND BANK_RELATION='Existing' and "
					+ "ACC_RELATION!='Minor'))";
			logInfo("checkMandatoryDoc", "sQuery: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("checkMandatoryDoc", "Inside sOutput " + sOutput);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				int iCountCustomer = Integer.parseInt(sOutput.get(0).get(0));
				sQuery = "SELECT COUNT(DISTINCT COMMENTS) AS COUNT_WI FROM USR_0_DOC_DETAILS WHERE WI_NAME ='"
						+ sWorkitemId + "' AND DOC_NAME='signature'";
				sOutput = formObject.getDataFromDB(sQuery);
				String query = "select count(1) IS_UPDATE_SIGN_COUNT from usr_0_cust_txn where "
						+ "wi_name='"
						+ sWorkitemId
						+ "' and upper(IS_UPDATE_SIGN)='TRUE'";
				List<List<String>> result = formObject.getDataFromDB(query);
				if (iCountCustomer > Integer.parseInt(sOutput.get(0).get(0))) {
					if (formObject.getValue(REQUEST_TYPE).toString()
							.equalsIgnoreCase("Category Change Only")) {
						if (Integer.parseInt(result.get(0).get(0)) > 0
								&& Integer.parseInt(result.get(0).get(0)) != Integer
										.parseInt(sOutput.get(0).get(0))) {
							sendMessageValuesList("",
									"Please attach/import signature document.");
							return false;
						}
					} else {
						/*
						 * String queryNTB =
						 * "select count(1) NTB_COUNT from USR_0_CUST_TXN where "
						 * + "upper(IS_UPDATE_SIGN) = 'TRUE' and WI_NAME='"+
						 * sWorkitemId+"' and CUST_SNO " +
						 * "in (select SNO from ACC_RELATION_REPEATER where WI_NAME='"
						 * +sWorkitemId+"' " + "and BANK_RELATION='New')";
						 * logInfo("checkMandatoryDoc","queryNTB: "+queryNTB);
						 * List<List<String>> resultNTB =
						 * formObject.getDataFromDB(queryNTB);
						 * logInfo("checkMandatoryDoc","resultNTB: "+resultNTB);
						 * if(Integer.parseInt(resultNTB.get(0).get(0)) !=
						 * Integer.parseInt(sOutput.get(0).get(0))) {
						 * sendMessageValuesList("",
						 * "Please attach/import signature document."); return
						 * false; }
						 */
						if (!formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade")) {
						sendMessageValuesList("",
								"Please attach/import signature document.");
						return false;
						}
					}
				}
			}
			sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE DOCUMENT_TO_BE_COLLECTED IN ('W9','W8BEN') AND WI_NAME ='"
					+ sWorkitemId + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				sQuery = "SELECT COUNT(1) FROM PDBDOCUMENT A, PDBDOCUMENTCONTENT B, PDBFOLDER C WHERE A.DOCUMENTINDEX=B.DOCUMENTINDEX"
						+ " AND C.FOLDERINDEX=B.PARENTFOLDERINDEX AND C.NAME = '"
						+ sWorkitemId + "' AND A.NAME = 'FATCA'";
				// JSObject objJStemp = formObject.getJSObject();
				// Object [] ain = {"FATCA#"};
				// Object getResult =
				// objJStemp.call("checkAttchedDocument",ain);
				// String sResult = getResult.toString();
				// String sResult = "";
				logInfo("checkMandatoryDoc", "Fatca sQuery " + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("checkMandatoryDoc", "Fatca sOutput " + sOutput);
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("",
							"Please attach/import FATCA document.");
				}
				/*
				 * if(resultFATCA.equalsIgnoreCase("False")) {
				 * sendMessageValuesList("",
				 * "Please attach/import FATCA document."); }
				 */
			}

		} else if (sActivityName.equalsIgnoreCase("Delivery_Maker")|| !formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("Downgrade")) {
			sQuery = "SELECT SUM(COUNT_WI) COUNT_WI FROM (SELECT COUNT(WI_NAME) AS COUNT_WI FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND BANK_RELATION='New' and ACC_RELATION!='Minor' UNION ALL SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND (SIGNATUREPRESENTFLAG !='Y' OR SIGNATUREPRESENTFLAG IS NULL) AND CUST_SNO IN (SELECT SNO FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND BANK_RELATION='Existing' and ACC_RELATION!='Minor'))";
			sOutput = formObject.getDataFromDB(sQuery);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				int iCountCustomer = Integer.parseInt(sOutput.get(0).get(0));
				sQuery = "SELECT COUNT(DISTINCT COMMENTS) AS COUNT_WI FROM USR_0_DOC_DETAILS WHERE WI_NAME ='"
						+ sWorkitemId + "' AND DOC_NAME='signature'";
				sOutput = formObject.getDataFromDB(sQuery);
				if (iCountCustomer > Integer.parseInt(sOutput.get(0).get(0))) {
					sendMessageValuesList("",
							"Please attach/import signature document.");
					return false;
				}
			}
		} else {
			if(!formObject.getValue("REQUEST_TYPE").toString().equalsIgnoreCase("Downgrade")){
			sQuery = "SELECT COUNT(DISTINCT CUST_SNO) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' and res_eida='No'";
			sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				int iCountCustomer1 = Integer.parseInt(sOutput.get(0).get(0));
				if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					int attached_eidadoc = 0;
					// JSObject objJStemp1 = formObject.getJSObject();
					// Object [] ain1 = {"EIDA_CARD#"};
					// Object getResult1 =
					// objJStemp1.call("DocTypeAttachedcount",ain1);
					// String sResult1 = getResult1.toString();
					// String sResult1 = "";
					// logInfo("","sResult1-->no of doc attached already "+sResult1);
					attached_eidadoc = Integer.parseInt(resultEIDA);
					if (ExisitngCust()) {
						if (iCountCustomer1 > attached_eidadoc) {
							sendMessageValuesList("",
									"Please attach/import EIDA Number Document.");
							return false;
						}
					}
				}
			}
			if (formObject.getValue("CHANNEL_TYPE").toString()
					.equalsIgnoreCase("")) {
				formObject
						.getDataFromDB("SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL ='"
								+ formObject.getValue("SOURCING_CHANNEL") + "'");
			}
			if (formObject.getValue("CHANNEL_TYPE").toString()
					.equalsIgnoreCase("Direct")
					|| formObject.getValue("BRNCH_OF_INSTANT_ISSUE").toString()
							.equalsIgnoreCase("Kiosk")) {
				sQuery = "SELECT SUM(COUNT_WI) COUNT_WI FROM (SELECT COUNT(WI_NAME) AS COUNT_WI FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND BANK_RELATION='New' and ACC_RELATION!='Minor' UNION ALL SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND (SIGNATUREPRESENTFLAG !='Y' OR SIGNATUREPRESENTFLAG IS NULL) AND CUST_SNO IN (SELECT SNO FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND BANK_RELATION='Existing' and ACC_RELATION!='Minor'))";
				sOutput = formObject.getDataFromDB(sQuery);
				if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					int iCountCustomer = Integer
							.parseInt(sOutput.get(0).get(0));

					sQuery = "SELECT COUNT(DISTINCT COMMENTS) AS COUNT_WI FROM USR_0_DOC_DETAILS WHERE WI_NAME ='"
							+ sWorkitemId + "' AND DOC_NAME='signature'";
					sOutput = formObject.getDataFromDB(sQuery);
					// if(iCountCustomer>
					// Integer.parseInt(sOutput.get(0).get(0))) {
					// sendMessageValuesList("",
					// "Please attach/import signature document.");
					// return false;
					//
					// }
				}
			}
			sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CUST_TXN WHERE DOCUMENT_TO_BE_COLLECTED IN ('W9','W8BEN') AND WI_NAME ='"
					+ sWorkitemId + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
				// JSObject objJStemp = formObject.getJSObject();
				// Object [] ain = {"FATCA#"};
				// Object getResult =
				// objJStemp.call("checkAttchedDocument",ain);
				// String sResult = getResult.toString();
				// String sResult = "";
				if (resultFATCA.equalsIgnoreCase("False")) {
					sendMessageValuesList("",
							"Please attach/import FATCA document.");
					return false;
				}
			}
		}
	}
		if ((formObject.getValue(CRS_CERTIFICATION_OBTAINED).toString()
				.equalsIgnoreCase("Yes"))
				&& (sActivityName.equalsIgnoreCase("CPD Maker")
						|| sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk") || sActivityName
							.equalsIgnoreCase("DDE_Acc_Info_Chk"))) {
			sQuery = "SELECT COUNT(1) COUNT_DOC FROM USR_0_DOC_DETAILS WHERE DOC_NAME IN ('CRS_Form') AND WI_NAME='"
					+ sWorkitemId + "'";
			sDocName = "CRS_Form";
			logInfo("checkMandatoryDoc", "sQuery: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			if (ExisitngCust()) {
				logInfo("checkMandatoryDoc", "check CRS doc");
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sendMessageValuesList("", "Kindly attach/import "
							+ sDocName + " document.");
					return false;
				}
			}
		}
		logInfo("checkMandatoryDoc", "returning true");
		return true;
	}

	public boolean searchCustCRM() {
		logInfo("searchCustCRM ", "Inside searchCustCRM");
		int iCount = 0, iCount1 = 0, iCount2 = 0, iCount3 = 0;
		for (int i = 0; i < getGridCount(ACC_RELATION); i++) {
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					i, 7);// 1 is harded codded here
			logInfo("searchCustCRM ", "Inside sBankRelation" + sBankRelation);
			try {
				if ("New".equalsIgnoreCase(sBankRelation)) {
					iCount = checkCount("EXT_CBG_CUST_ONBOARDING", "CBG");
					iCount1 = checkCount("USR_0_CUST_MASTER_WMS", "FCR_EIDA");
					iCount2 = checkCount("USR_0_CUST_MASTER", "FCR_PASS");
					iCount3 = checkCount("USR_0_CUST_MASTER", "FCR_EIDA");
					if (iCount > 0 || iCount1 > 0 || iCount2 > 0 || iCount3 > 0) {
						sendMessageValuesList("","Customer (SNo "+ (i + 1)+ ") already exist, please send the case back to Originator.");
						return false;
					}
				}
			} catch (Exception E) {
				logError("Exception in  searchCustCRM", E);
			}
		}

		return true;
	}

	public int checkCount(String TableName, String Type) {
		int iCount = 0;
		logInfo("checkCount ", "Inside checkCount");
		String sCustNo = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					0); // objChkRepeater.getValue(iSelectedRow,"AO_acc_relation.sno");
			logInfo("checkCount ", "Inside sCustNo" + sCustNo);
			logInfo("checkCount ", "Inside Type" + Type);
			if (Type.equalsIgnoreCase("CBG")) {
				iCount = checkCountCBG(TableName, sCustNo);
			}
			if (Type.equalsIgnoreCase("FCR_EIDA")) {
				iCount = checkCountFCUBS_EIDA(TableName, sCustNo);
			}
			if (Type.equalsIgnoreCase("FCR_PASS")) {
				iCount = checkCountFCUBS_PASS(TableName, sCustNo);
			}
			logInfo("checkCount ", "Inside iCount" + iCount);
		} catch (Exception e) {
			logError("Exception in  checkCount", e);
		}
		return iCount;
	}

	public int checkCountCBG(String TableName, String sCustNo) {
		logInfo("checkCountCBG ", "Inside checkCountCBG");
		int iCount = 0;
		try {
			String sQuery;
			List<List<String>> sOutput = null;
			sQuery = "select count(*) AS COUNT FROM "
					+ TableName
					+ " WHERE ("
					+ " (passport_number = (Select final_pass_no from USR_0_CUST_TXN WHERE WI_NAME "
					+ "= '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "' AND CUST_ID is null)"
					+ "AND passport_nationality = (SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE"
					+ " COUNTRY=(Select final_Nationality from USR_0_CUST_TXN WHERE "
					+ "WI_NAME = '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "' AND CUST_ID is null) ) "
					+ "AND passport_dob_date = (Select final_dob from USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId
					+ "'"
					+ " AND cust_sno = '"
					+ sCustNo
					+ "' AND CUST_ID is null) )"
					+ " OR eida_number = (select final_eida_no FROm USR_0_CUST_TXN WHERE WI_NAME like '"
					+ sWorkitemId + "'" + " AND cust_sno = '" + sCustNo
					+ "' AND CUST_ID IS NULL ) ) AND Customer_Id is not NULL";
			logInfo("checkCountCBG", "sQuery: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("checkCountCBG ", "sOutput: " + sOutput);
			iCount = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("checkCountFCUBS_PASS ", "iCount: " + iCount);
		} catch (Exception e) {
			logError("Exception in  checkCountCBG", e);
		}
		return iCount;
	}

	public int checkCountFCUBS_PASS(String TableName, String sCustNo) {
		logInfo("checkCountFCUBS_PASS ", "INSIDE");
		int iCount = 0;
		try {
			String sQuery = "";
			List<List<String>> sOutput;
			sQuery = "select count(*) AS COUNT FROM "
					+ TableName
					+ " WHERE "
					+ "cust_pass_no = (Select final_pass_no from USR_0_CUST_TXN WHERE  WI_NAME = '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "'  AND CUST_ID is  null)"
					+
					// "AND cust_nationality = (Select final_Nationality from USR_0_CUST_TXN WHERE  WI_NAME = '"+sWorkitemId+"' AND cust_sno = '"+sCustNo+"'  AND CUST_ID is  null) "+
					// //Aditya Gautam 26 Dec - Nationality code to compare with
					// code instead of Decsription
					"AND cust_nationality = (SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY=(Select final_Nationality from USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "' AND CUST_ID is null) ) "
					+ "AND cust_dob = (Select final_dob from USR_0_CUST_TXN WHERE  WI_NAME = '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "'  AND CUST_ID is  null ) "
					+ "AND  NOT (CUST_FULL_NAME LIKE '%DONOT%' OR CUST_FULL_NAME LIKE '%DO NOT%' OR CUST_FULL_NAME LIKE '%DONT%')";

			logInfo("sQuery", sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("checkCountFCUBS_PASS",
					"sOutput: " + String.valueOf(sOutput));
			logInfo("checkCountFCUBS_PASS ", "sOutput" + sOutput);
			iCount = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("checkCountFCUBS_PASS", "iCount: " + String.valueOf(iCount));
		} catch (Exception e) {
			logError("checkCountFCUBS_PASS", e);
		}
		return iCount;
	}

	public int checkCountFCUBS_EIDA(String TableName, String sCustNo) {
		logInfo("checkCountFCUBS_EIDA ", "Inside checkCountFCUBS_EIDA");
		int iCount = 0;
		try {
			String sQuery;
			List<List<String>> sOutput;
			logInfo("TableName---", TableName);
			// sQuery="select count(*) AS COUNT FROM "+TableName+" WHERE eida_no = (select final_eida_no FROm USR_0_CUST_TXN"
			// +
			// " WHERE  WI_NAME = '"+sWorkitemId+"' AND cust_sno = '"+sCustNo+"' AND CUST_ID is  null AND  NOT "
			// +
			// "(CUST_FULL_NAME LIKE '%DONOT%' OR CUST_FULL_NAME LIKE '%DO NOT%' OR CUST_FULL_NAME LIKE '%DONT%'))";//Commented
			// for invalid column on 27042023(Performanceissue) by Ameena
			sQuery = "select count(1) AS COUNT FROM "
					+ TableName
					+ " WHERE eida_no = (select final_eida_no FROm USR_0_CUST_TXN"
					+ " WHERE  WI_NAME = '"
					+ sWorkitemId
					+ "' AND cust_sno = '"
					+ sCustNo
					+ "' AND CUST_ID is  null AND  NOT "
					+ "(CUST_FULL_NAME LIKE '%DONOT%' OR CUST_FULL_NAME LIKE '%DO NOT%' OR CUST_FULL_NAME LIKE '%DONT%'))";
			logInfo("sQuery", sQuery); //Added 22/02/2024 Shivanshu
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("checkCountFCUBS_EIDA", "Inside sOutput" + sOutput);
			logInfo("sOutput---", String.valueOf(sOutput));
			iCount = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("checkCountFCUBS_EIDA", "iCount: " + String.valueOf(iCount));
		} catch (Exception e) {
			logError("checkCountFCUBS_EIDA", e);
		}
		return iCount;
	}

	public boolean checkRekeyDone() {
		try {
			logInfo("checkRekeyDone ", "Inside checkRekeyDone");
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					"SELECTED_ROW_INDEX").toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			logInfo("checkRekeyDone ", "iSelectedRow:" + iSelectedRow
					+ ",sCustNo: " + sCustNo + ",sBankRelation: "
					+ sBankRelation);
			if ("DDE_Acc_Info_Chk".equalsIgnoreCase(sActivityName)
					|| "QDE_Acc_Info_Chk".equalsIgnoreCase(sActivityName)) {
				String sQuery1 = "SELECT COUNT(1) AS REKEY_DONE FROM"
						+ " USR_0_CUST_TXN WHERE WI_NAME ='" + sWorkitemId
						+ "' AND CUST_SNO IS NOT NULL"
						+ " AND (RE_KEY_CHECK is null or RE_KEY_CHECK<>'true')";
				List<List<String>> output1 = formObject.getDataFromDB(sQuery1);
				logInfo("checkRekeyDone", "sQuery1: " + sQuery1 + ",output1: "
						+ output1);
				String dedupeDone = "0";
				if (output1 != null && output1.size() > 0) {
					dedupeDone = output1.get(0).get(0);
				}
				logInfo("checkRekeyDone", "dedupeDone: " + dedupeDone);
				if (Integer.parseInt(dedupeDone) > 0) {
					sendMessageValuesList("",
							"Please Do Re Key check For All The Customers.");
					// formObject.setNGSelectedTab("Tab5",0); // needs to be
					// checked
					// formObject.setStyle("static_next", DISABLE, FALSE);
					// formObject.setStyle("COMMAND24", DISABLE, FALSE);
					return false;
				}
			}
			if ("CPD Checker".equalsIgnoreCase(sActivityName)) {
				String sQuery1 = "SELECT COUNT(1) AS REKEY_DONE FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUST_SNO IS NOT NULL AND (RE_KEY_CHECK_CPD is null or RE_KEY_CHECK_CPD<>'true')";
				logInfo("", "INSIDE sQuery1" + sQuery1);
				List<List<String>> output1 = formObject.getDataFromDB(sQuery1);
				String dedupeDone = "";
				if (output1 != null && output1.size() > 0) {
					dedupeDone = output1.get(0).get(0);
				}
				if (Integer.parseInt(dedupeDone) > 0) {
					sendMessageValuesList("",
							"Please Do Re Key check For All The Customers.");
					// formObject.setNGSelectedTab("Tab5",0); // needs to be
					// checked
					// formObject.setStyle("static_next", DISABLE, FALSE);
					// formObject.setStyle("COMMAND24", DISABLE, FALSE);
					return false;
				}
			}
		} catch (Exception e) {
			logError("Exception in  checkRekeyDone", e);
		}
		return true;
	}

	public void populateUDFGrid(String listContent) {
		logInfo("populateUDFGrid", "INSIDE");
		List<List<String>> listContent1 = formObject.getDataFromDB(listContent);
		logInfo("populateUDFGrid", "listContent1: " + listContent1);
		JSONArray jsonArray = new JSONArray();
		if (listContent1.size() > 0) {
			for (int i = 0; i < listContent1.size(); i++) {
				if (!(null == listContent1.get(i).get(0) || listContent1.get(i)
						.get(0).equalsIgnoreCase(""))) {
					JSONObject obj = new JSONObject();
					obj.put("UDF_FIELD", "Graduation Date");
					obj.put("UDF_VALUE", listContent1.get(i).get(0));
					jsonArray.add(obj);
				}
				if (!(null == listContent1.get(i).get(1) || listContent1.get(i)
						.get(1).equalsIgnoreCase(""))) {
					JSONObject obj = new JSONObject();
					obj.put("UDF_FIELD", "Special Customer Identifier");
					obj.put("UDF_VALUE", listContent1.get(i).get(1));
					jsonArray.add(obj);
				}
			}
			logInfo("populateUDFGrid", "jsonArray: " + jsonArray.toString());
			if (jsonArray.size() > 0) {
				formObject.addDataToGrid(ACCINFO_UDF_LIST, jsonArray);
			}
		}
	}

	public void PopulateScreeningDataCRO_History() {
		logInfo("PopulateScreeningDataCRO_History", "INSIDE");
		int iSelectedRow = 0;
		String sCustNo = "";
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString());
		sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow, 0);// acc_relation.sno
		logInfo("inside PopulateScreeningDataCRO_History sCustNo = ", sCustNo);
		String sQueryTnx = "";
		String sQueryUnionHist = "";
		logInfo("inside PopulateScreeningDataCRO_History sCustNo = ", sCustNo);
		String sQuery = "SELECT SYSTEM_DEC,BANK_DEC,BLACKLIST_DEC,WORLD_CHECK_DEC,BLACKLIST_REMARKS, BAD_CHECK_REMARKS, "
				+ "WORLD_CHECK_REMARKS, SYSTEM_REMARKS, BAD_CHECK_DEC, FINAL_ELIGIBILITY FROM USR_0_CUST_TXN "
				+ "WHERE WI_NAME = N'"
				+ sWorkitemId
				+ "' AND CUST_SNO = N'"
				+ sCustNo + "'";
		logInfo("inside PopulateScreeningDataCRO_History sQuery1 = ", sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("inside PopulateScreeningDataCRO_History sOutput1 = ",
				sOutput.toString());
		setValuesFromDB(sOutput, new String[] { CRO_SYS_DEC, CRO_BANK_DECISION,
				CHK_MATCH_FOUND, SANC_SCRN_MATCH, CHK_REMARKS,
				SANC_SCRN_REMARKS, SANC_WRLD_CHK_REMARKS,
				SANCT_RISK_ASSESS_MARKS });
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CONTACT_CENTER_CPD)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_11)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_12)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_13)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_LEVEL_14)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CLOSE_REQUEST)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_RM)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_WORK_EXIT)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_QUERY)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_MAIL_ROOM)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_BULK_EOD_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_COMP_APP)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PBG_VIGILANCE)  // Gurwinder PBG Vigilance Chnage 27062023
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PROD_APP)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PROD_APP_CPD)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CONTACT_CENTER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DELIVERY_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DELIVERY_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_PHYSICAL_RECON)) {
			formObject.setValue("COMBO11", sOutput.get(0).get(8));// BAD_CHECK_DEC
			formObject.setValue(FINAL_ELIGIBILITY, sOutput.get(0).get(9));// FINAL_ELIGIBILITY
		} else {
			if (sOutput != null && sOutput.size() > 0) {
				formObject.setValue(SANC_SCRN_MATCH_FOUND, sOutput.get(0)
						.get(8));// BAD_CHECK_DEC
				formObject.setValue(SANC_FINAL_ELIGIBILITY,
						sOutput.get(0).get(9));// FINAL_ELIGIBILITY
			}
		}
		sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE WI_NAME='"
				+ sWorkitemId
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
		sQueryUnionHist = " union all SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_HIST WHERE WI_NAME='"
				+ sWorkitemId
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
		sQuery = sQueryTnx + sQueryUnionHist;
		logInfo("inside PopulateScreeningDataCRO_History sQuery2 = ", sQuery);
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		logInfo("inside PopulateScreeningDataCRO_History recordList1 = ",
				recordList.toString());
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				CHECK_TYPE_LVW);

		sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA WHERE WI_NAME='"
				+ sWorkitemId
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')";
		sQueryUnionHist = " union all SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_HIST WHERE WI_NAME='"
				+ sWorkitemId
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')";
		sQuery = sQueryTnx + sQueryUnionHist;
		logInfo("inside PopulateScreeningDataCRO_History sQuery3 = ", sQuery);
		recordList = formObject.getDataFromDB(sQuery);
		logInfo("inside PopulateScreeningDataCRO_History recordList2 = ",
				recordList.toString());
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				SANC_SCRN_HD2_LVW);

		sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT FROM USR_0_CENTRAL_BANK_DATA WHERE WI_NAME='"
				+ sWorkitemId + "' AND CUST_SNO = '" + sCustNo + "'";
		logInfo("inside PopulateScreeningDataCRO_History sQuery4 = ", sQuery);
		recordList = formObject.getDataFromDB(sQuery);
		logInfo("inside PopulateScreeningDataCRO_History recordList3 = ",
				recordList.toString());
		loadListView(recordList,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				SANC_CNTRL_BNK_BAD_LVW);

		sQuery = "SELECT CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM,CURRENT_RISK_BUSSINESS,PREVIOUS_RISK, FCR_RISK, APPROVAL_REQ,RISK_CLASSIFICATION FROM USR_0_RISK_ASSESSMENT_DATA WHERE WI_NAME='"
				+ sWorkitemId + "' AND SNO = '" + sCustNo + "'";
		logInfo("inside PopulateScreeningDataCRO_History sQuery5 = ", sQuery);
		recordList = formObject.getDataFromDB(sQuery);
		logInfo("inside PopulateScreeningDataCRO_History recordList4 = ",
				recordList.toString());
		setValuesFromDB(sOutput, new String[] { SANCT_RISK_CID,
				SANCT_RISK_NAME, SANCT_RISK_CURRENT_RSK_SYSTEM,
				SANCT_RISK_CURRENT_RSK_BANK, SANCT_RISK_PREVIOUS_RSK,
				SANCT_RISK_FCR_RSK, SANCT_RISK_COMPL_APP_REQ,
				SANCT_RISK_RSK_CLSF });
		logInfo("in PopulateScreeningDataCRO_History",
				"before calling set_Values_From_Usr_0_Risk_Data ");
		set_Values_From_Usr_0_Risk_Data();

	}

	public void populatePersonalDataCPD() {
		String sameAsResi = "";
		String sameAsPerm = "";
		String otherCityResi = "";
		String otherCityPerm = "";
		/*
		 * if(sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)||sActivityName
		 * .equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)||sActivityName.
		 * equalsIgnoreCase
		 * (ACTIVITY_DDE_ACCOUNT_INFO_CHECK)||sActivityName.equalsIgnoreCase
		 * (ACTIVITY_APP_ASSESSMENT
		 * )||sActivityName.equalsIgnoreCase(ACTIVITY_CUST_SCREEN)){
		 * sameAsResi=RA_SAMEAS; sameAsPerm=PA_SAMEAS;
		 * otherCityResi=OTHER_PERM_CITY; otherCityPerm=OTHER_RESIDENTIAL_CITY;
		 * } else { sameAsResi=PA_SAMEAS; sameAsPerm=RA_SAMEAS;
		 * otherCityResi=OTHER_RESIDENTIAL_CITY; otherCityPerm=OTHER_PERM_CITY;
		 * }
		 */
		sameAsResi = RA_SAMEAS;
		sameAsPerm = PA_SAMEAS;
		otherCityResi = OTHER_RES_CITY;
		otherCityPerm = OTHER_PERM_CITY;
		long start_Time1 = System.currentTimeMillis();
		logInfo("PopulatePersonalDataCPD",
				"Start Time in PopulatePersonalDataCPD: " + start_Time1);
		logInfo("PopulatePersonalDataCPD", "Inside");
		int sCustNo = 0;
		mohit_flag = true;
		// NGRepeater objChkRepeater = formObject.getNGRepeater("REPEAT_FRAME");
		sCustNo = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString()) + 1;
		String sCID = formObject.getTableCellValue(ACC_RELATION, sCustNo, 2);
		logInfo("PopulatePersonalDataCPD", "sCustNo: " + sCustNo);
		String sQuery = "SELECT CUST_MARITAL_OTHERS,MAIDEN_NAME,CUST_SHORT_NAME,CURR_RELATION_TYPE"
				+ ",NEW_RELATION_TYPE, EIDA_NO,CUST_FULL_NAME,PREFIX_OTHER,CORR_PO_BOX,CORR_FLOOR,"
				+ "CORR_STREET,CORR_EMAIL,OTHER_CORR_CITY,CORR_PHONE,CORR_OFF_PHONE,CORR_MOB,PER_BUILDING,"
				+ "PER_VILLA,PER_LANDMARK,OTHER_PERM_CITY,PASS_NO, VISA_NO,PROFIT_CENTER_CODE,RFERRED_BY"
				+ ",REFFER_STAFF_ID,OTHER_RESI_CITY,EIDA_EXPIRY FROM USR_0_CUST_TXN WHERE WI_NAME= '"    //Added by Shivanshu ATP-377 for Eida Expiry Date
				+ sWorkitemId + "' " + "AND CUST_SNO= " + sCustNo + "";
		logInfo("PopulatePersonalDataCPD", "Query1: " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulatePersonalDataCPD", "Query1 Output: " + sOutput);
		String columns[] = { PD_MARITALSTATUSOTHER, PD_MOTHERMAIDENNAME,
				FCR_SHORTNAME, PD_CUSTRELTYPE, PD_NEWRELTYPE, PD_EIDANO,
				PD_FULLNAME, PD_OTHERS, CP_POBOXNO, CP_FLOOR, CP_STREET,
				CP_EMAIL, OTHER_CORR_CITY, CP_PHONENO, CP_TELEOFFICE,
				CP_MOBILE, RA_BUILDINGNAME, RA_VILLAFLATNO, RA_STREET,
				otherCityResi, HD_PASSPORT_NO, HD_VISA_NO,
				IDS_PROF_CENTER_CODE, IDS_REF_BY_CUST, REF_BY_STAFF,
				otherCityPerm,EIDA_EXPIRY_DATE  };  //Added by Shivanshu ATP-377 for Eida Expiry Date
		setValuesFromDB(sOutput, columns);
		// (sQuery,26,"TEXT39;TEXT26;ShortName_FCR;TEXT152;TEXT151;TEXT22;TEXT20;TEXT2;TEXT46;TEXT41;TEXT47;TEXT49;OTHER_CORR_CITY;TEXT44;TEXT43;TEXT48;TEXT58;TEXT57;TEXT56;"+otherCityResi+";TEXT63;TEXT53;TEXT55;TEXT64;REF_BY_STAFF;"+otherCityPerm);
		// PASS_TYPE change to MANUAL_PASS_TYPE CQRN-0000188395 13/01/2022
		sQuery = "SELECT MANUAL_PASS_TYPE,VISA_STATUS,SAME_AS_PERMANENT,SAME_AS_RESIDENTIAL,"
				+ "CORR_STATE,CORR_CITY,RES_CITY,PER_CITY,CORR_OTHER,CORR_CNTRY,PER_COUNTRY,"
				+ "PER_STATE,PER_OTHER,RES_BUILDING,RES_VILLA,RES_LANDMARK,RES_STATE,RES_OTHER, RES_CNTRY,"
				+ "CUST_MARITAL_STATUS,RELIGION,CUST_SEG,PREFIX, CUST_DOB, NATIONALITY, GENDER,DATE_ATTAINING_MAJORITY,"
				+ "  PASS_ISSUE_DATE, PASS_EXP_DATE, VISA_ISSUE_DATE, VISA_EXP_DATE,RM_CODE,RM_NAME, "
				+ "IS_SALARY_TRANSFER, IS_MORTAGAGE,IS_INSURANCE, IS_TRB,IS_OTHERS, IS_PREVILEGE_TP, IS_TRAVEL, "
				+ "IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT, IS_EXCELLENCY_TP,PROFESSION_CODE,PROMO_CODE,EXELLENCY_CENTER,"
				+ "IS_UPDATE_SIGN,IS_VVIP,IS_BENEFIT_OTHER,BENEFIT_OTHER,RES_EIDA,CORR_CNTRY_CODE,CORR_OFF_CNTRY_CODE,"
				+ "CORR_MOB_CNTRY_CODE,RES_MAKANI,PER_MAKANI,CORR_MAKANI FROM USR_0_CUST_TXN WHERE WI_NAME= '"
				+ sWorkitemId + "' AND CUST_SNO= " + sCustNo + "";
		logInfo("PopulatePersonalDataCPD", "Query2: " + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulatePersonalDataCPD", "Query2 Output: " + sOutput);
		if (sOutput.size() > 0) {
			String columns1[] = { MANUAL_PASSTYPE, MANUAL_VISASTATUS,
					sameAsResi, sameAsPerm, CORR_STATE, CP_CITY, PA_CITY,
					RA_CITY, CP_OTHERS, CORR_CNTRY, RES_CNTRY, RES_STATE,
					RA_OTHERS, PA_BUILDINGNAME, PA_VILLAFLATNO, PA_STREET,
					PERM_STATE, PA_OTHERS, PERM_CNTRY, MARITAL_STATUS,
					RELIGION, PD_CUSTSEGMENT, CUST_PREFIX, PD_DOB,
					CUST_NATIONALITY, CUST_GENDER, PD_DATEOFATTAININGMAT,
					"HD_PASS_ISS_DATE", "HD_PASS_EXP_DATE",
					"HD_VISA_ISSUE_DATE", "HD_EXP_DATE", RM_CODE, RM_NAME,
					IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES, IDS_CB_INSURANCE,
					IDS_CB_TRB, IDS_CB_OTHERS, IDS_PC_CB_TP, IDS_PC_CB_TRAVEL,
					IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_BNFT_CB_TP, PROF_CODE,
					PRO_CODE, EXCELLENCY_CNTR, IS_SIGN_UPDATE, IDS_CB_VVIP,
					IDS_OTH_CB_OTHERS, IDS_BNFT_CB_OTHERS, DRP_RESEIDA };
			setValuesFromDB(sOutput, columns1);
		} else { // PASS_TYPE change to MANUAL_PASS_TYPE CQRN-0000188395
					// 13/01/2022
			sQuery = "SELECT IS_SALARY_TRANSFER, IS_MORTAGAGE,IS_INSURANCE, IS_TRB,IS_OTHERS, IS_PREVILEGE_TP, "
					+ "IS_TRAVEL, IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT,IS_EXCELLENCY_TP,MANUAL_PASS_TYPE,VISA_STATUS,"
					+ "PER_BUILDING, PER_VILLA,PER_LANDMARK,PER_CITY,PER_STATE,PER_OTHER,PER_COUNTRY,EXELLENCY_CENTER,"
					+ "PROMO_CODE,IS_VVIP FROM USR_0_CUST_WMS WHERE CUST_ID= '"
					+ sCID + "'";
			logInfo("PopulatePersonalDataCPD", "Query3: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("PopulatePersonalDataCPD", "Query3 Output: " + sOutput);
			String columns2[] = { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
					IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS, IDS_PC_CB_TP,
					IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING,
					IDS_PC_CB_ENTERTAINMENT, IDS_BNFT_CB_TP, MANUAL_PASSTYPE,
					"COMBO34", PA_BUILDINGNAME, PA_VILLAFLATNO, PA_STREET,
					PA_CITY, PERM_STATE, RA_OTHERS, PERM_CNTRY,
					EXCELLENCY_CNTR, PRO_CODE, IDS_CB_VVIP };
			setValuesFromDB(sOutput, columns2);
		}
		populateMakaniData();
		logInfo("PopulatePersonalDataCPD",
				"Combo4: " + formObject.getValue(PD_CUSTSEGMENT));
		// String columns2[] =
		// {IDS_CB_SAL_TRANSFER,IDS_CB_MORTGAGES,IDS_CB_INSURANCE,IDS_CB_TRB,IDS_CB_OTHERS,IDS_PC_CB_TP,IDS_PC_CB_TRAVEL,IDS_PC_CB_SPORT,IDS_PC_CB_SHOPPING,IDS_PC_CB_ENTERTAINMENT,IDS_BNFT_CB_TP,MANUAL_PASSTYPE,"COMBO34",RA_BUILDINGNAME,RA_VILLAFLATNO,RA_STREET,RA_CITY,PERM_STATE,RA_OTHERS,PERM_CNTRY,EXCELLENCY_CNTR,PRO_CODE};
		// setValuesFromDB(sOutput,columns2);
		long end_time1 = System.currentTimeMillis();
		long diff1 = end_time1 - start_Time1;
		logInfo("PopulatePersonalDataCPD",
				"End time PopulatePersonalDataCPD---- :" + end_time1);
		logInfo("PopulatePersonalDataCPD",
				"Diff time PopulatePersonalDataCPD---- :" + diff1);
	}

	public void loadSICombos_History() {
		logInfo("LoadSICombos_History", "INSIDE");
		try {
			int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			String gridListName = ACC_RELATION;
			List output = formObject.getDataFromGrid(gridListName);
			String sCustID = formObject.getTableCellValue(gridListName,
					iPrimaryCust, 2);
			logInfo("LoadSICombos_History", "sCustID" + sCustID);
			String sQueryUnionHist = "";
			int iRows = getGridCount(PRODUCT_QUEUE);
			logInfo("LoadSICombos_History", "iRows" + iRows);
			String sProdCode = "";
			String sQuery = "";
			String sName = "";
			String sQueryTnx = "";
			List<List<String>> sOutput;
			String sweetOutDAN = formObject.getValue(SWP_OUT_DEB_ACC_NO)
					.toString();
			String sweetInDAN = formObject.getValue(SWP_IN_DEB_ACC_NO)
					.toString();
			logInfo("LoadSICombos_History", "sweepOutDAN" + sweetOutDAN);
			logInfo("LoadSICombos_History", "sweepInDAN" + sweetInDAN);
			formObject.clearCombo(PROD_COMBO);
			formObject.clearCombo(SI_CRED_PROD);
			formObject.clearCombo(SI_DEB_ACC_NO);
			formObject.clearCombo(SWP_OUT_DEB_ACC_NO);
			formObject.clearCombo(SWP_IN_DEB_ACC_NO);
			for (int i = 1; i < iRows; i++) {
				sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE, i, 0);
				sName = formObject.getTableCellValue(PRODUCT_QUEUE, i, 1);
				formObject.addItemInCombo(PROD_COMBO, sName + "_" + sProdCode
						+ "_" + i);
				formObject.addItemInCombo(SI_CRED_PROD, sName + "_" + sProdCode
						+ "_" + i);
			}
			sQueryTnx = "SELECT TO_CHAR('--Select--') FROM DUAL UNION SELECT to_char(ACC_NO) FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUSTOMER_ID='"
					+ sCustID
					+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE IN ('6','8')) AND PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE SI_FLAG ='Y')";
			sQueryUnionHist = " union all SELECT TO_CHAR('--Select--') FROM DUAL UNION SELECT to_char(ACC_NO) FROM USR_0_PRODUCT_EXISTING_HIST WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUSTOMER_ID='"
					+ sCustID
					+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE IN ('6','8')) AND PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE SI_FLAG ='Y')";
			sQuery = sQueryTnx + sQueryUnionHist;
			logInfo("LoadSICombos_History", "sQuery" + sQuery);
			loadCombo(sQuery, SI_DEB_ACC_NO);
			loadCombo(sQuery, SWP_OUT_DEB_ACC_NO);
			loadCombo(sQuery, SWP_IN_DEB_ACC_NO);
			if (sweetOutDAN != null) {
				formObject.setValue(SWP_OUT_DEB_ACC_NO, sweetOutDAN);
			}
			// else
			// {
			// formObject.setNGListIndex("TEXT119",0);
			// }

			if (sweetInDAN != null) {
				formObject.setValue(SWP_IN_DEB_ACC_NO, sweetInDAN);
			}
			// else
			// {
			// formObject.setNGListIndex("TEXT122",0);
			// }
		} catch (Exception e) {
			logError("on LoadSICombos_History", e);
		}
	}

	public void setCustScreeningCombos() {
		logInfo("Inside setCustScreeningCombos ", " ");
		try {
			int sCustNo = getGridCount(ACC_RELATION);
			String sQuery = "";
			if (sActivityName.equalsIgnoreCase("Customer_Screen_QDE")) {
				sQuery = "SELECT DECODE(MANUAL_PREFIX,'',MANUAL_PREFIX) MANUAL_PREFIX,DECODE(MANUAL_COUNTRY,'',MANUAL_COUNTRY) MANUAL_COUNTRY,DECODE(MANUAL_RESIDENCE_COUNTRY,'',MANUAL_RESIDENCE_COUNTRY) MANUAL_RESIDENCE_COUNTRY,DECODE(MANUAL_NATIONALITY,'',MANUAL_NATIONALITY) MANUAL_NATIONALITY,DECODE(BIRTH_COUNTRY,'',BIRTH_COUNTRY) BIRTH_COUNTRY,DECODE(MANUAL_STATE,'',MANUAL_STATE) MANUAL_STATE,DECODE(MANUAL_GENDER,'',MANUAL_GENDER) MANUAL_GENDER,DECODE(CUST_SEG,'',CUST_SEG) CUST_SEG,DECODE(IS_VVIP_CUSTOMER,'',IS_VVIP_CUSTOMER) IS_VVIP_CUSTOMER,DECODE(PURPOSE_TAX,'',PURPOSE_TAX) PURPOSE_TAX,DECODE(IS_UAE_RESIDENT,'',IS_UAE_RESIDENT) IS_UAE_RESIDENT,DECODE(DEALS_ARMAMENT,'',DEALS_ARMAMENT) DEALS_ARMAMENT,DECODE(PEP,'',PEP) PEP,DECODE(HAWALA,'',HAWALA) HAWALA,DECODE(IS_HOLDING_GREENCARD,'',IS_HOLDING_GREENCARD) IS_HOLDING_GREENCARD,DECODE(IS_US_TAX_LIABLE,'',IS_US_TAX_LIABLE) IS_US_TAX_LIABLE,DECODE(IS_US_TIN_PRESENT,'',IS_US_TIN_PRESENT) IS_US_TIN_PRESENT,DECODE(IS_US_CLASSIFICATION,'',IS_US_CLASSIFICATION) IS_US_CLASSIFICATION,DECODE(IS_US_RESIDENT,'',IS_US_RESIDENT) IS_US_RESIDENT,DECODE(PASS_TYPE,'',PASS_TYPE) PASS_TYPE,DECODE(VISA_STATUS,'',VISA_STATUS) VISA_STATUS,DECODE(EMPLOYEE_TYPE,'',EMPLOYEE_TYPE)EMPLOYEE_TYPE,DECODE(EMP_STATUS,'',EMP_STATUS)EMP_STATUS,DECODE(SPECIAL_CATAGORY,'',SPECIAL_CATAGORY)SPECIAL_CATAGORY,DECODE(SIGN_STYLE,'',SIGN_STYLE) SIGN_STYLE,DECODE(IS_WORK_DEFENCE_UAE,'',IS_WORK_DEFENCE_UAE) IS_WORK_DEFENCE_UAE,DECODE(IS_WORK_DEFENCE_NONUAE,'',IS_WORK_DEFENCE_NONUAE) IS_WORK_DEFENCE_NONUAE,DECODE(IS_POA_US_PERSON,'',IS_POA_US_PERSON) IS_POA_US_PERSON,DECODE(IS_US_INDICIA_FOUND,'',IS_US_INDICIA_FOUND) IS_US_INDICIA_FOUND,DECODE(DOCUMENT_TO_BE_COLLECTED,'',DOCUMENT_TO_BE_COLLECTED) DOCUMENT_TO_BE_COLLECTED,DECODE(MANUAL_COUNTRY_RESIDENCE,'',MANUAL_COUNTRY_RESIDENCE) MANUAL_COUNTRY_RESIDENCE,DECODE(RES_EIDA,'',RES_EIDA) RES_EIDA FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUST_SNO='" + sCustNo + "'";
			} else if (sActivityName.equalsIgnoreCase("QDE_ Account_Info")
					|| sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")) {
				sQuery = "SELECT DECODE(MANUAL_PREFIX,'',MANUAL_PREFIX) MANUAL_PREFIX,DECODE(MANUAL_COUNTRY,'',"
						+ "MANUAL_COUNTRY) MANUAL_COUNTRY,DECODE(MANUAL_RESIDENCE_COUNTRY,'',MANUAL_RESIDENCE_COUNTRY)"
						+ " MANUAL_RESIDENCE_COUNTRY,DECODE(MANUAL_NATIONALITY,'',MANUAL_NATIONALITY) MANUAL_NATIONALITY,"
						+ "DECODE(BIRTH_COUNTRY,'',BIRTH_COUNTRY) BIRTH_COUNTRY,DECODE(MANUAL_STATE,'',MANUAL_STATE)"
						+ " MANUAL_STATE,DECODE(MANUAL_GENDER,'',MANUAL_GENDER) MANUAL_GENDER,DECODE(CUST_SEG,'',"
						+ "CUST_SEG) CUST_SEG,DECODE(IS_VVIP_CUSTOMER,'',IS_VVIP_CUSTOMER) IS_VVIP_CUSTOMER,DECODE(PURPOSE_TAX,'',"
						+ "'--Select--',PURPOSE_TAX) PURPOSE_TAX,DECODE(IS_UAE_RESIDENT,'',IS_UAE_RESIDENT) IS_UAE_RESIDENT,"
						+ "DECODE(DEALS_ARMAMENT,'',DEALS_ARMAMENT) DEALS_ARMAMENT,DECODE(PEP,'',PEP) PEP,DECODE(HAWALA,'',"
						+ "'--Select--',HAWALA) HAWALA,DECODE(IS_HOLDING_GREENCARD,'',IS_HOLDING_GREENCARD) IS_HOLDING_GREENCARD,DECODE(IS_US_TAX_LIABLE,"
						+ "'',IS_US_TAX_LIABLE) IS_US_TAX_LIABLE,DECODE(IS_US_TIN_PRESENT,'',IS_US_TIN_PRESENT) IS_US_TIN_PRESENT,"
						+ "DECODE(IS_US_CLASSIFICATION,'',IS_US_CLASSIFICATION) IS_US_CLASSIFICATION,DECODE(IS_US_RESIDENT,'',IS_US_RESIDENT)"
						+ " IS_US_RESIDENT,DECODE(PASS_TYPE,'',PASS_TYPE) PASS_TYPE,DECODE(VISA_STATUS,'',VISA_STATUS) VISA_STATUS,"
						+ "DECODE(EMPLOYEE_TYPE,'',EMPLOYEE_TYPE)EMPLOYEE_TYPE,DECODE(EMP_STATUS,'',EMP_STATUS)EMP_STATUS,"
						+ "DECODE(SPECIAL_CATAGORY,'',SPECIAL_CATAGORY)SPECIAL_CATAGORY,DECODE(SIGN_STYLE,'',SIGN_STYLE) SIGN_STYLE,"
						+ "DECODE(IS_WORK_DEFENCE_UAE,'',IS_WORK_DEFENCE_UAE) IS_WORK_DEFENCE_UAE,DECODE(IS_WORK_DEFENCE_NONUAE,'',"
						+ "'--Select--',IS_WORK_DEFENCE_NONUAE) IS_WORK_DEFENCE_NONUAE,DECODE(BLACKLIST_DEC,'',BLACKLIST_DEC) BLACKLIST_DEC,"
						+ "DECODE(BAD_CHECK_DEC,'',BAD_CHECK_DEC) BAD_CHECK_DEC,DECODE(WORLD_CHECK_DEC,'',WORLD_CHECK_DEC) WORLD_CHECK_DEC,"
						+ "DECODE(FINAL_ELIGIBILITY,'',FINAL_ELIGIBILITY) FINAL_ELIGIBILITY,DECODE(SYSTEM_DEC,'',SYSTEM_DEC)SYSTEM_DEC,"
						+ "DECODE(BANK_DEC,'',BANK_DEC) BANK_DEC,DECODE(IS_POA_US_PERSON,'',IS_POA_US_PERSON) IS_POA_US_PERSON,"
						+ "DECODE(IS_US_INDICIA_FOUND,'',IS_US_INDICIA_FOUND) IS_US_INDICIA_FOUND,DECODE(DOCUMENT_TO_BE_COLLECTED,'',"
						+ "'--Select--',DOCUMENT_TO_BE_COLLECTED) DOCUMENT_TO_BE_COLLECTED,DECODE(MANUAL_COUNTRY_RESIDENCE,'',MANUAL_COUNTRY_RESIDENCE) "
						+ "MANUAL_COUNTRY_RESIDENCE,DECODE(RES_EIDA,'',RES_EIDA) RES_EIDA  FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId + "' AND " + "CUST_SNO='" + sCustNo + "'";
			} else if (sActivityName.equalsIgnoreCase("QDE_CUST_INFO")) {
				sQuery = "SELECT DECODE(MANUAL_PREFIX,'',MANUAL_PREFIX) MANUAL_PREFIX,DECODE(MANUAL_COUNTRY,'',"
						+ "MANUAL_COUNTRY) MANUAL_COUNTRY,DECODE(MANUAL_RESIDENCE_COUNTRY,'',MANUAL_RESIDENCE_COUNTRY) "
						+ "MANUAL_RESIDENCE_COUNTRY,DECODE(MANUAL_NATIONALITY,'',MANUAL_NATIONALITY) MANUAL_NATIONALITY,"
						+ "DECODE(BIRTH_COUNTRY,'',BIRTH_COUNTRY) BIRTH_COUNTRY,DECODE(MANUAL_STATE,'',MANUAL_STATE) "
						+ "MANUAL_STATE,DECODE(MANUAL_GENDER,'',MANUAL_GENDER) MANUAL_GENDER,DECODE(CUST_SEG,'',"
						+ "CUST_SEG) CUST_SEG,DECODE(IS_VVIP_CUSTOMER,'',IS_VVIP_CUSTOMER) IS_VVIP_CUSTOMER,"
						+ "DECODE(PURPOSE_TAX,'',PURPOSE_TAX) PURPOSE_TAX,DECODE(IS_UAE_RESIDENT,'',IS_UAE_RESIDENT) "
						+ "IS_UAE_RESIDENT,DECODE(DEALS_ARMAMENT,'',DEALS_ARMAMENT) DEALS_ARMAMENT,DECODE(PEP,'',PEP) "
						+ "PEP,DECODE(HAWALA,'',HAWALA) HAWALA,DECODE(IS_HOLDING_GREENCARD,'',IS_HOLDING_GREENCARD) "
						+ "IS_HOLDING_GREENCARD,DECODE(IS_US_TAX_LIABLE,'',IS_US_TAX_LIABLE) IS_US_TAX_LIABLE,"
						+ "DECODE(IS_US_TIN_PRESENT,'',IS_US_TIN_PRESENT) IS_US_TIN_PRESENT,"
						+ "DECODE(IS_US_CLASSIFICATION,'',IS_US_CLASSIFICATION) IS_US_CLASSIFICATION,"
						+ "DECODE(IS_US_RESIDENT,'',IS_US_RESIDENT) IS_US_RESIDENT,DECODE(PASS_TYPE,'',PASS_TYPE) "
						+ "PASS_TYPE,DECODE(VISA_STATUS,'',VISA_STATUS) VISA_STATUS,DECODE(EMPLOYEE_TYPE,'',"
						+ "EMPLOYEE_TYPE)EMPLOYEE_TYPE,DECODE(EMP_STATUS,'',EMP_STATUS)EMP_STATUS,"
						+ "DECODE(SPECIAL_CATAGORY,'',SPECIAL_CATAGORY)SPECIAL_CATAGORY,"
						+ "DECODE(SIGN_STYLE,'',SIGN_STYLE) SIGN_STYLE,DECODE(IS_WORK_DEFENCE_UAE,'',"
						+ "IS_WORK_DEFENCE_UAE) IS_WORK_DEFENCE_UAE,DECODE(IS_WORK_DEFENCE_NONUAE,'',"
						+ "IS_WORK_DEFENCE_NONUAE) IS_WORK_DEFENCE_NONUAE,DECODE(IS_POA_US_PERSON,'',IS_POA_US_PERSON) "
						+ "IS_POA_US_PERSON,DECODE(IS_US_INDICIA_FOUND,'',IS_US_INDICIA_FOUND) IS_US_INDICIA_FOUND,"
						+ "DECODE(DOCUMENT_TO_BE_COLLECTED,'',DOCUMENT_TO_BE_COLLECTED) DOCUMENT_TO_BE_COLLECTED,"
						+ "DECODE(MANUAL_COUNTRY_RESIDENCE,'',MANUAL_COUNTRY_RESIDENCE) MANUAL_COUNTRY_RESIDENCE "
						+ "FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUST_SNO='" + sCustNo + "'";
			}
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", String.valueOf(sOutput.size()));
			if (sOutput != null && sOutput.size() > 0) {
				formObject.addItemInCombo(MANUAL_PREFIX, sOutput.get(0).get(0));
				formObject.addItemInCombo(MANUAL_CNTRY, sOutput.get(0).get(1));
				formObject.addItemInCombo(MANUAL_STATE, sOutput.get(0).get(5));
				formObject.addItemInCombo(MANUAL_PER_CNTRY,
						sOutput.get(0).get(2));
				formObject.addItemInCombo(MANUAL_NATIONALITY, sOutput.get(0)
						.get(3));
				formObject
						.addItemInCombo(CNTRY_OF_BIRTH, sOutput.get(0).get(4));
				formObject.addItemInCombo(MANUAL_GENDER, sOutput.get(0).get(6));
				formObject.addItemInCombo(CUST_SEGMENT1, sOutput.get(0).get(7));
				formObject.addItemInCombo(CUST_VVIP, sOutput.get(0).get(8));
				formObject.addItemInCombo(TAX_EVASION, sOutput.get(0).get(9));
				formObject.addItemInCombo(RESIDENCY_STATUS,
						sOutput.get(0).get(10));
				formObject.addItemInCombo(DEALS_IN_ARMAMENT, sOutput.get(0)
						.get(11));
				formObject.addItemInCombo(ARE_U_PEP, sOutput.get(0).get(12));
				formObject.addItemInCombo(HAWALA, sOutput.get(0).get(13));
				formObject
						.addItemInCombo(FAT_US_PERSON, sOutput.get(0).get(14));
				formObject.addItemInCombo(FAT_LIABLE_TO_PAY_TAX, sOutput.get(0)
						.get(15));
				formObject.addItemInCombo(FAT_SSN, sOutput.get(0).get(16));
				formObject.addItemInCombo(FAT_CUST_CLASSIFICATION,
						sOutput.get(0).get(17));
				formObject.addItemInCombo(CRS_RES_PERM_ADRS_US, sOutput.get(0)
						.get(18));
				// formObject.addItemInCombo(MANUAL_PASSTYPE,sOutput.get(0).get(19));
				// // passtype is commented already
				formObject.addItemInCombo(VISA_STATUS, sOutput.get(0).get(20));
				formObject.addItemInCombo(EMPLYR_TYPE1, sOutput.get(0).get(21));
				formObject.addItemInCombo(EMP_STATUS, sOutput.get(0).get(22));
				formObject.addItemInCombo(SPECIAL_CAT, sOutput.get(0).get(23));
				formObject.addItemInCombo(SIGN_STYLE1, sOutput.get(0).get(24));
				formObject.addItemInCombo(RA_IS_CUST_WRKNG_UAE, sOutput.get(0)
						.get(25));
				formObject.addItemInCombo(RA_IS_CUST_WRKNG_NON_UAE, sOutput
						.get(0).get(26));
				formObject.addItemInCombo(MATCH_FOUND, sOutput.get(0).get(27));
				formObject.addItemInCombo(CPD_CHK_MATCH_FOUND, sOutput.get(0)
						.get(28));
				formObject.addItemInCombo(MATCH, sOutput.get(0).get(29));
				formObject.addItemInCombo(CPD_CHK_MATCH_FOUND, sOutput.get(0)
						.get(30));
				formObject.addItemInCombo("Combo7", sOutput.get(0).get(31));
				formObject.addItemInCombo(CRO_BANK_DECISION, sOutput.get(0)
						.get(32));
				formObject.addItemInCombo(POACOMBO, sOutput.get(0).get(33));
				formObject.addItemInCombo(INDICIACOMBO, sOutput.get(0).get(34));
				formObject.addItemInCombo(COMBODOC, sOutput.get(0).get(35));
				formObject.addItemInCombo(MANUAL_RESIDENT,
						sOutput.get(0).get(36));
				formObject.addItemInCombo(DRP_RESEIDA, sOutput.get(0).get(37));
				formObject.addItemInCombo(CONGCIERGE, "Yes");
				formObject.addItemInCombo(CONGCIERGE, "No");
			}
		} catch (Exception e) {
			logError("Exception in  setCustScreeningCombos ", e);
		} finally {
			logInfo("Outside setCustScreeningCombos ", "  ");
		}
	}

	public void populateReKeyTemp(String group) {
		logInfo("populateReKeyTemp", "group: " + group);
		String sQuery = "";
		List<List<String>> sOutput = null;
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		// String sWhere =
		// "CUST_SNO='"+sCustNo+"' AND WI_NAME='"+sWorkitemId+"' and activity_name='"+group+"'";
		String sWhere = "SNO='" + sCustNo + "' and wi_name ='" + sWorkitemId
				+ "' and group_name='" + group + "'";
		try {
			sQuery = "SELECT EIDA,MOBILE,EMAIL,DOB ,SNO,WI_NAME,EIDAFLAG,EMAILFLAG,PHONEFLAG,DOBFLAG,GROUP_NAME "
					+ "FROM USR_0_AO_REKEY_TEMP WHERE " + sWhere;
			logInfo("populateReKeyTemp", "sQuery: " + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateReKeyTemp", "sOutput: " + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				if (!String.valueOf(sOutput.size()).equalsIgnoreCase("0")) {
					logInfo("populateReKeyTemp", "set manual fields");
					formObject.setValue(MANUAL_EIDANO, sOutput.get(0).get(0));
					formObject.setValue(MANUAL_EMAIL, sOutput.get(0).get(2));
					formObject.setValue(MANUAL_MOBILE, sOutput.get(0).get(1));
					formObject.setValue(MANUAL_DOB, sOutput.get(0).get(3));
					formObject.setValue(CHECKBOX_EIDANO_MANUAL, sOutput.get(0)
							.get(6));
					formObject.setValue(CHECKBOX_EMAIL_MANUAL, sOutput.get(0)
							.get(7));
					formObject.setValue(CHECKBOX_TELE_MOB_MANUAL, sOutput
							.get(0).get(8));
					formObject.setValue(CHECKBOX_DOB_MANUAL, sOutput.get(0)
							.get(9));
				}
			}
		} catch (Exception e) {
			logError("populateReKeyTemp", e);
		} finally {
			logInfo("populateReKeyTemp", "outside");
		}
	}

	public void populateReKey() {
		logInfo("populateReKey", "INSIDE");
		String sQuery = "";
		List<List<String>> sOutput = null;
		String flag = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			String group = "";
			if (sActivityName.equalsIgnoreCase("DDE_Acc_Info_Chk")
					|| sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk"))
				group = "CRO";
			else
				group = "CPD";
			sQuery = "Select EIDA_CHECK,EMAIL_CHECK,MOB_CHECK,DOB_CHECK,IS_FCR_EIDANO,IS_EIDA_EIDANO,a.is_manual_eidano,"
					+ "IS_FCR_MOBNO,IS_EIDA_MOBNO,a.is_manual_mobno,a.IS_FCR_EMAIL,a.IS_EIDA_EMAIL,a.IS_MANUAL_EMAIL,"
					+ "a.IS_FCR_DOB,a.IS_EIDA_DOB,a.IS_MANUAL_DOB,KEY_FLAG FROM USR_0_AO_REKEY a, usr_0_cust_txn b "
					+ "WHERE a.wi_name=b.wi_name AND b.WI_NAME = '"
					+ sWorkitemId
					+ "' AND b.CUST_SNO = '"
					+ sCustNo
					+ "' AND a.CUST_SNO =b.cust_sno AND ACTIVITY_NAME ='"
					+ group + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateReKey", "Query1: " + sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", String.valueOf(sOutput.size()));
			if (sOutput != null && sOutput.size() > 0) {
				// flag = sOutput.get(0).get(0).trim();
				flag = sOutput.get(0).get(16).trim();
				if ("".equalsIgnoreCase(flag))
					flag = "false";
				if (sActivityName.equalsIgnoreCase("DDE_Acc_Info_Chk")
						|| sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk")
						|| sActivityName.equalsIgnoreCase("CPD Checker")) {
					if ("false".equalsIgnoreCase(flag)) {
						String EnableCheckBox = "";
						if ("New".equalsIgnoreCase(sBankRelation)) {
							clearControls(new String[] { CHECKBOX_EIDANO_FCR,
									CHECKBOX_EIDANO_EIDA,
									CHECKBOX_EIDANO_MANUAL, FCR_EIDANO,
									EIDA_EIDANO, MANUAL_EIDANO });
							EnableCheckBox = "CHECKBOX_MANUAL_EIDANO,";
							clearControls(new String[] { CHECKBOX_TELE_MOB_FCR,
									CHECKBOX_TELE_MOB_EIDA,
									CHECKBOX_TELE_MOB_MANUAL, EIDA_MOBILE,
									MANUAL_MOBILE, "mobile_fcr" });
							EnableCheckBox += "CHECKBOX_TELE_MOB_MANUAL,";
							clearControls(new String[] { CHECKBOX_EMAIL_FCR,
									CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL,
									FCR_EMAIL, EIDA_EMAIL, MANUAL_EMAIL });
							EnableCheckBox += "CHECKBOX_MANUAL_EMAIL,";
							clearControls(new String[] { CHECKBOX_DOB_FCR,
									CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL,
									FCR_DOB, EIDA_DOB, MANUAL_DOB });
							EnableCheckBox += "CHECKBOX_MANUAL_DOB,";
						} else {
							if ("True".equalsIgnoreCase(sOutput.get(0).get(6))) {
								clearControls(new String[] {
										CHECKBOX_EIDANO_EIDA,
										CHECKBOX_EIDANO_MANUAL, EIDA_EIDANO,
										MANUAL_EIDANO });
								EnableCheckBox = CHECKBOX_EIDANO_MANUAL + ",";

							}
							if ("True".equalsIgnoreCase(sOutput.get(0).get(9))) {
								clearControls(new String[] {
										CHECKBOX_TELE_MOB_EIDA,
										CHECKBOX_TELE_MOB_MANUAL, EIDA_MOBILE,
										MANUAL_MOBILE });
								EnableCheckBox += CHECKBOX_TELE_MOB_MANUAL
										+ ",";
							}
							if ("True".equalsIgnoreCase(sOutput.get(0).get(12))) {
								clearControls(new String[] {
										CHECKBOX_EMAIL_EIDA,
										CHECKBOX_EMAIL_MANUAL, EIDA_EMAIL,
										MANUAL_EMAIL });
								EnableCheckBox += CHECKBOX_EMAIL_MANUAL + ",";
							}
							if ("True".equalsIgnoreCase(sOutput.get(0).get(15))) {
								clearControls(new String[] { CHECKBOX_DOB_EIDA,
										CHECKBOX_DOB_MANUAL, EIDA_DOB,
										MANUAL_DOB });
								EnableCheckBox += CHECKBOX_DOB_MANUAL + ",";
							}
						}
						try {
							logInfo("populateReKey", "EnableCheckBox: "
									+ EnableCheckBox);
							EnableCheckBox = EnableCheckBox.substring(0,
									EnableCheckBox.length() - 1);
							enableControls(new String[] { EnableCheckBox });
							logInfo("populateReKey",
									"Is Control Enabled: "
											+ isControlEnabled(CHECKBOX_TELE_MOB_MANUAL));
						} catch (Exception e) {
							logError("Exception in populateReKey ", e);
						}
					} else {
						formObject.setValue(CHECKBOX_EIDANO_FCR, sOutput.get(0)
								.get(4));
						formObject.setValue(CHECKBOX_EIDANO_EIDA, sOutput
								.get(0).get(5));
						formObject.setValue(CHECKBOX_EIDANO_MANUAL, sOutput
								.get(0).get(6));
						setFinalDataComparison(CHECKBOX_EIDANO_FCR,
								CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
								FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, sOutput
										.get(0).get(0));
						formObject.setValue(CHECKBOX_TELE_MOB_FCR,
								sOutput.get(0).get(7));
						formObject.setValue(CHECKBOX_TELE_MOB_EIDA, sOutput
								.get(0).get(8));
						formObject.setValue(CHECKBOX_TELE_MOB_MANUAL, sOutput
								.get(0).get(9));
						setFinalDataComparison(CHECKBOX_TELE_MOB_FCR,
								CHECKBOX_TELE_MOB_EIDA,
								CHECKBOX_TELE_MOB_MANUAL, "mobile_fcr",
								EIDA_MOBILE, MANUAL_MOBILE,
								sOutput.get(0).get(2));
						formObject.setValue(CHECKBOX_EMAIL_FCR, sOutput.get(0)
								.get(10));
						formObject.setValue(CHECKBOX_EMAIL_EIDA, sOutput.get(0)
								.get(11));
						formObject.setValue(CHECKBOX_EMAIL_MANUAL,
								sOutput.get(0).get(12));
						setFinalDataComparison(CHECKBOX_EMAIL_FCR,
								CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL,
								FCR_EMAIL, EIDA_EMAIL, MANUAL_EMAIL, sOutput
										.get(0).get(1));
						formObject.setValue(CHECKBOX_DOB_FCR, sOutput.get(0)
								.get(13));
						formObject.setValue(CHECKBOX_DOB_EIDA, sOutput.get(0)
								.get(14));
						formObject.setValue(CHECKBOX_DOB_MANUAL, sOutput.get(0)
								.get(15));
						setFinalDataComparison(CHECKBOX_DOB_FCR,
								CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL,
								FCR_DOB, EIDA_DOB, MANUAL_DOB,
								setDateValue1(sOutput.get(0).get(3)));
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in populateReKey ", e);
		}
	}

	public int getDateDiffInMonth(String sDate) {
		SimpleDateFormat f = new SimpleDateFormat(DATEFORMAT);
		Date d1 = null;
		try {
			d1 = f.parse(sDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Date d2 = new Date();
		Calendar c1 = Calendar.getInstance();
		c1.setTime(d1);
		Calendar c2 = Calendar.getInstance();
		c2.setTime(d2);
		int diff = 0;
		if (c2.after(c1)) {
			while (c2.after(c1)) {
				c1.add(Calendar.MONTH, 1);
				if (c2.after(c1)) {
					diff++;
				}
			}
		} else if (c2.before(c1)) {
			while (c2.before(c1)) {
				c1.add(Calendar.MONTH, -1);
				if (c1.before(c2)) {
					diff--;
				}
			}
		}
		logInfo("", "diff---" + diff);
		return diff;
	}

	public void CalculateRiskCategoryChange() {
		logInfo("CalculateRiskCategoryChange", "INSIDE");
		String CompAppReq = "No";
		List<List<String>> recordList = null;
		recordList = formObject
				.getDataFromDB("SELECT TO_CHAR(COMP_APPROVAL_DT,'dd/MM/yyyy')"
						+ " COMP_APPROVAL_DT,CUSTOMER_RISK FROM USR_0_CUST_WMS WHERE CUST_ID='"
						+ getPrimaryCustomerID() + "'");
		String sPrevRisk = recordList.get(0).get(1);
		String sPrevRiskDate = recordList.get(0).get(0);

		int iMonthDiff = 10;
		/*
		 * if(!sPrevRiskDate.equalsIgnoreCase("")) { iMonthDiff =
		 * ngValidation.getDateDiffInMonth(sPrevRiskDate); }
		 */// commented in loadcustdata()

		if (sPrevRisk.equalsIgnoreCase("Increased Risk") && iMonthDiff < 6) {
			CompAppReq = "No";
		} else {
			CompAppReq = "Yes";
		}
		String sWsName = formObject.getValue(CURR_WS_NAME).toString();
		String sriskColumn = "SNO,WI_NAME,WS_NAME,CUST_CUR_RISK_BANK";
		String sriskValue = "'1','" + sWorkitemId + "','" + sWsName
				+ "','Increased Risk'";
		insert_Into_Usr_0_Risk_Data(sriskColumn, sriskValue);
		int sOutput = 0;
		sOutput = updateDataInDB("USR_0_CUST_TXN", "CUST_INDI_RISK",
				"'Increased Risk'", "WI_NAME = '" + sWorkitemId + "' "
						+ "AND CUST_SNO ='1'");
		sOutput = updateDataInDB("USR_0_RISK_ASSESSMENT_DATA",
				"CURRENT_RISK_BUSSINESS,APPROVAL_REQ", "'Increased Risk'"
						+ (char) 25 + "'" + CompAppReq + "'", "WI_NAME = '"
						+ sWorkitemId + "' AND SNO ='1'");

		if (CompAppReq.equalsIgnoreCase("Yes")) {
			formObject.setValue(IS_COMPLIANCE_RISK_ASSESS, "true");
		}
		logInfo("CalculateRiskCategoryChange", "EXIT");
	}

	public boolean emailEtihadVal(String[] rtnArry) {
		logInfo("emailEtihadVal", "INSIDE");
		String rtnData[] = null;
		String sAllProduct = "";
		for (int i = 0; i < rtnArry.length; i++) {
			rtnData = rtnArry[i].split("~");
			sAllProduct = sAllProduct + "'" + rtnData[0] + "',";
		}
		logInfo("emailEtihadVal", "Final sAllProduct = " + sAllProduct);
		logInfo("emailEtihadVal",
				"Final sAllProduct = "
						+ sAllProduct.substring(0, sAllProduct.length() - 1));
		sAllProduct = sAllProduct.substring(0, sAllProduct.length() - 1);
		String sQuery = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE IN ("
				+ sAllProduct + ") AND UPPER(SUB_PRODUCT_TYPE) ='ETIHAD'";
		logInfo("emailEtihadVal", "sQuery---" + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		if (sOutput.size() > 0 && null != sOutput.get(0)
				&& !(sOutput.get(0).get(0)).equalsIgnoreCase("0")) {
			sendMessageValuesList(EXISTING_ETIHAD_CUST,
					"Primary Customer's Email Id Is Mendatory For Etihad Product.");
			return false;
		}
		return true;
	}

	public boolean jspFunction(String CompAppReq) {
		logInfo("jspFunction", "INSIDE CompAppReq: " + CompAppReq);
		if (CompAppReq.equalsIgnoreCase("No")) {
			logInfo("jspFunction", "INSIDE CompAppReq" + CompAppReq);
			String sQuery = "SELECT COUNT(WI_NAME) AS COUNT FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME"
					+ " ='"
					+ sWorkitemId
					+ "' AND SOURCE ='"
					+ sActivityName
					+ "'";
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			logInfo("jspFunction", "after squery" + sQuery);
			if (output != null && output.size() > 0) {
				logInfo("jspFunction", "after output" + output.get(0).get(0));
				if (output.get(0).get(0).equalsIgnoreCase("0")) {
					logInfo("jspFunction", "inside error check kdd");
					sendMessageValuesList("",
							"Some error occured in starting webservice");
					formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
					logInfo("jspFunction", "ending jspfunction");
					return false;
				}
			} else {
				return false;
			}
		}
		return true;
	}

	public String insertDataInIntegrationTable() {
		logInfo("insertDataInIntegrationTable",
				"INSIDE insertDataInIntegrationTable");
		long start_Time1 = System.currentTimeMillis();
		long end_Time = System.currentTimeMillis();
		long diff = System.currentTimeMillis();
		String sFinalStatus = "Success";
		logInfo("insertDataInIntegrationTable", "before trycatch");
		try {
			String sQueryy1 = "select ITEMINDEX from ext_ao WHERE WI_NAME='"
					+ sWorkitemId + "'";
			List<List<String>> output = formObject.getDataFromDB(sQueryy1);
			String sItemIndex = (output != null && output.size() > 0) ? output
					.get(0).get(0).toString() : "";
			String sQueryy2 = "select WI_NAME from usr_0_product_selected  WHERE ITEMINDEX='"
					+ sItemIndex + "' and " + "rownum=1";
			logInfo("insertDataInIntegrationTable", "sItemIndex" + sItemIndex);
			List<List<String>> output2 = formObject.getDataFromDB(sQueryy2);
			String sWiName = (output2 != null && output2.size() > 0) ? output2
					.get(0).get(0).toString() : "";
			logInfo("insertDataInIntegrationTable", "sWiName" + sWiName);
			if (sWiName.equalsIgnoreCase("")) {
				String sColumnn1 = "wi_name";
				String sValuess1 = "'" + sWorkitemId + "'";
				// String updatequery =
				// "update usr_0_product_selected set '"+sColumnn1+"' = '"+sValuess1+"'  Where itemindex='"+sItemIndex+"'";//Commented
				// for invalid column on 27042023(Performanceissue) by Ameena
				String updatequery = "update usr_0_product_selected set wi_name = '"
						+ sWorkitemId
						+ "'  Where itemindex='"
						+ sItemIndex
						+ "'";
				formObject.saveDataInDB(updatequery);
			}
			String sTable = "USR_0_INTEGRATION_CALLS";
			//FULFILLMENT CHANGES  NEW COLUMN ADD ORCHESTRATION_TYPE
			String sColumn = "WI_NAME,CUST_NO,USER_NAME,CALL_NAME,CALL_ORDER,RETRY_COUNT,INPUT_XML,STATUS,"
					+ "MANDATE_STATUS,REQUEST_DATETIME,SLNO,SOURCE,ORCHESTRATION_TYPE";
			
			// int iNoOfCustomer =
			// Integer.parseInt(formObject.getValue(NO_OF_CUST_SEARCHED).toString());
			int iNoOfCustomer = 0;
			if (!formObject.getValue(NO_OF_CUST_SEARCHED).toString().isEmpty()) {
				iNoOfCustomer = Integer.parseInt(formObject.getValue(
						NO_OF_CUST_SEARCHED).toString());
			}
			String sValues = "";
			String sValues2 = "";
			String sValues32 = "";
			String sValues33 = "";
			String sValues34 = "";
			String sCallType;
			String sStatus;
			String[] sProduct;
			String sTemp;
			String sCallName = "";
			String sQuery = "";
			String sInputXML = "";
			String sInput_deletedcust = "";
			String sInputXML2 = "";
			String sCustID = "";
			String sOutput = "";
			String sProdCode = "";
			String sAccNo = "";
			String sCustomerID = "";
			String sAccTitle = "";
			String sRequestDate = "";
			String sDebitAccNo = "";
			String sProdGroup = "";
			int iCount = 0;
			int iCallOrder = 1;
			int iNoOfProduct = 0;
			int iNoOfCard = 0;
			int sout = 0;
			String sRequestType = formObject.getValue(REQUEST_TYPE).toString();
			start_Time1 = System.currentTimeMillis();
			List<List<String>> sQuery1 = null;

			sQuery1 = formObject
					.getDataFromDB("select is_acc_title_update from "
							+ sExtTable + " where wi_name='" + sWorkitemId
							+ "'");
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			String acc_title_flag = (sQuery1 != null && sQuery1.size() > 0) ? sQuery1
					.get(0).get(0).toString()
					: "";
			String updatequery = "";
			if (acc_title_flag.equalsIgnoreCase("TRUE")) {
				updatequery = "update USR_0_INTEGRATION_CALLS set STATUS='Pending' where CALL_NAME LIKE "
						+ "'ACCOUNT_MODIFY%' AND wi_name='" + sWorkitemId + "'";
				formObject.saveDataInDB(updatequery);
			}
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT CALLTYPE,MANDATORY_STATUS FROM USR_0_INTEGRATION_CONFIG WHERE CALL_ORDER IS NOT NULL "
					+ "ORDER BY TO_NUMBER(CALL_ORDER)";
			List<List<String>> output3 = formObject.getDataFromDB(sQuery);
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			updatequery = "Delete from USR_0_INTEGRATION_CALLS where  WI_NAME='"
					+ sWorkitemId + "' and STATUS !='Success'";
			formObject.saveDataInDB(updatequery);
			String query = "";
			if ((formObject.getValue("SCAN_MODE").toString())
					.equalsIgnoreCase("New WMS ID")) {
				senderId = "AO DSA";
				query = "select consentflag,contracttype,enquirytype,localdbsearchreq,reporttype,role,userid,source,no_of_days_dedupe_check,force_new_fetch"
						+ " from "
						+ sECBDefMasterTable
						+ " where USERID='WMS_AO_DSA'";
			} else {
				senderId = "AO Branch";
				query = "select consentflag,contracttype,enquirytype,localdbsearchreq,reporttype,role,userid,source,no_of_days_dedupe_check,force_new_fetch"
						+ " from "
						+ sECBDefMasterTable
						+ " where USERID='WMS_AO_BRN'";
			}
			List<List<String>> recordList = formObject.getDataFromDB(query);
			for (List<String> record : recordList) {
				if (record != null && record.size() > 0) {
					consentFlag = record.get(0);
					contractType = record.get(1);
					enquiryType = record.get(2);
					localDBSearchReq = record.get(3);
					reportType = record.get(4);
					role = record.get(5);
					userId = record.get(6);
					source = record.get(7);
					noOfDaysDedupeCheck = record.get(8);
					forceNewFetch = record.get(9);
				}
			}
			logInfo("insertDataInIntegrationTable",
					"ouptputsize " + output3.size());
			int iCall = 0;
			if (ACTIVITY_FB_CHECKER.equalsIgnoreCase(sActivityName)) {
				logInfo("insertDataInIntegrationTable",
						"FB_Checker MAINTAIN_FAMILY");
				int count = getGridCount(LVW_FAMILY_MEMBERS);
				String sName = "";
				for (int i = 0; i < count; i++) {
					if (formObject.getTableCellValue(LVW_FAMILY_MEMBERS, i, 6)
							.equalsIgnoreCase("HEAD OF FAMILY")) {
						sName = formObject.getTableCellValue(
								LVW_FAMILY_MEMBERS, i, 3);
						break;
					}
				}

				// String sName = formObject.getValue("HOF_NAME").toString();
				// formObject.getTableCellValue(LVW_FAMILY_MEMBERS, 0 , 3);
				// sCallName = "MAINTAIN_FAMILY_"+(sNo+1)+"_"+sName;
				sCallName = "MAINTAIN_FAMILY_1_" + sName;
				String scallName2 = "SMS_Call_head_of_family";
				String scallName3 = "SMS_Call_deleted_customer";
				int cust_no = 1;
				int counterdel = 1;
				start_Time1 = System.currentTimeMillis();

				sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
						+ sWorkitemId
						+ "'"
						+ " and CALL_NAME like 'MAINTAIN_FAMILY_"
						+ cust_no
						+ "%' and STATUS = 'Success'";
				logInfo("insertDataInIntegrationTable", "sQuery: " + sQuery);
				output2 = formObject.getDataFromDB(sQuery);
				logInfo("insertDataInIntegrationTable", "output2: " + output2);
				// String querytotalcount =
				// "SELECT count(*) FROM usr_0_family_member_details WHERE wi_name='"+sWorkitemId
				// +"'";
				String querynotdeletedtotalcount = "SELECT count(*) FROM usr_0_family_member_details WHERE wi_name='"
						+ sWorkitemId + "' AND CUST_STATUS <> 'D'";
				// List<List<String>> outputquerytotalcount =
				// formObject.getDataFromDB(querytotalcount);
				List<List<String>> outputquerynotdeletedtotalcount = formObject
						.getDataFromDB(querynotdeletedtotalcount);
				// String total_count = outputquerytotalcount.get(0).get(0);
				String total_not_deleted_count = outputquerynotdeletedtotalcount
						.get(0).get(0);
				// logInfo("insertDataInIntegrationTable - Ayush(Sahay)","total_count: "+total_count);
				logInfo("insertDataInIntegrationTable ",
						"total_not_deleted_count: " + total_not_deleted_count);

				iCount = (output2 != null && output2.size() > 0) ? Integer
						.parseInt(output2.get(0).get(0).toString()) : 0;
				if (iCount == 0) {
					if (((total_not_deleted_count).equals("0"))) {
						sInputXML = getMaintainFamilyforAllDeleteRequestXml();
					} else {
						sInputXML = getMaintainFamilyRequestXml();
					}
					logInfo("insertDataInIntegrationTable - Ayush",
							"sInputXML: " + sInputXML);
					sRequestDate = getReqDate();
					if (!sInputXML.equalsIgnoreCase("")) {
						sValues = "'" + sWorkitemId + "','" + (1) + "','"
								+ sUserName + "','" + sCallName + "','"
								+ iCallOrder + "','0'," + "'" + sInputXML
								+ "','Pending','Mandatory',to_date('"
								+ sRequestDate + "','dd/MM/yyyy HH24:mi:ss'),"
								+ "'" + (1) + "','" + sActivityName + "'"
								+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
						// Added by Ayush
						sout = insertDataIntoDB("USR_0_INTEGRATION_CALLS",
								sColumn, sValues);

						if (String.valueOf(sout).equalsIgnoreCase("1")) {
							iCallOrder = iCallOrder + 1;

						}
					}
					// Added by Ayush

					String sQueryHeadCID = "SELECT CID FROM usr_0_family_member_details WHERE wi_name='"
							+ sWorkitemId
							+ "' and RELATIONSHIP = 'HEAD OF FAMILY'";
					logInfo("insertDataInIntegrationTable", "sQueryHeadCID: "
							+ sQueryHeadCID);
					List<List<String>> outputHeadList = formObject
							.getDataFromDB(sQueryHeadCID);
					String HeadCID = outputHeadList.get(0).get(0);
					scallName2 = "SEND_SMS_EMAIL_FNAME" + HeadCID;
					String sQueryDeletedCID = "SELECT CID FROM usr_0_family_member_details WHERE wi_name='"
							+ sWorkitemId + "' and CUST_STATUS = 'D'";
					logInfo("insertDataInIntegrationTable",
							"sQueryDeletedCID: " + sQueryDeletedCID);
					List<List<String>> recorderList = formObject
							.getDataFromDB(sQueryDeletedCID);
					List<String> outputDelList = formObject
							.getDataFromDB(sQueryDeletedCID);
					// ArrayList<ArrayList<String>> recorderList =
					// (ArrayList<ArrayList<String>>) formObject
					// .getDataFromDB(sQueryDeletedCID);
					// ArrayList<Integer> recordingList =
					// (ArrayList<Integer>)formObject.getDataFromDB(sQueryDeletedCID);
					logInfo("insertDataInIntegrationTable",
							" insertDataInIntegrationTable Info query "
									+ sQueryDeletedCID);
					logInfo("insertDataInIntegrationTable",
							" insertDataInIntegrationTable recorderList "
									+ recorderList);

					// logInfo("callBACKVerification",
					// " callBACKVerification recorderList " + recordingList);
					String mobqueryHOF = "SELECT MOBILENO FROM usr_0_family_member_details WHERE wi_name='"
							+ sWorkitemId + "' and CID = '" + HeadCID + "'";
					List<List<String>> delmobileListHOF = formObject
							.getDataFromDB(mobqueryHOF);
					String DeletedMobileHOF = delmobileListHOF.get(0).get(0);

					// String DelCID = outputDelList.get(0).get(0);
					if (recorderList != null && recorderList.size() > 0) {

						// if(total_count.equals(total_deleted_count))
						if ((total_not_deleted_count).equals("0")) {
							logInfo("insertDataInIntegrationTable",
									"All members to be deleted");
							/*
							 * sInputXML3 =
							 * getFetchFamilyRequestXmlforAllDeletetoHOF
							 * (HeadCID,DeletedMobileHOF);
							 * logInfo("insertDataInIntegrationTable - Ayush"
							 * ,"sInputXML3: "+sInputXML3); sValues32 =
							 * "'"+sWorkitemId
							 * +"','"+(1)+"','"+sUserName+"','"+scallName2
							 * +"','"+iCallOrder+"','0'," +
							 * "'"+sInputXML3+"','Pending','Mandatory',to_date('"
							 * +sRequestDate+"','dd/MM/yyyy HH24:mi:ss')," +
							 * "'"+(1)+"','"+sActivityName+"'"; sout =
							 * insertDataIntoDB
							 * ("USR_0_INTEGRATION_CALLS",sColumn,sValues32);
							 * if(String.valueOf(sout).equalsIgnoreCase("1")) {
							 * iCallOrder=iCallOrder+1; }
							 */

							//
							for (int i = 0; i < outputDelList.size(); i++) {
								String DelCID = recorderList.get(i).get(0);

								logInfo("insertDataInIntegrationTable",
										" insertDataInIntegrationTable recorderList "
												+ DelCID);
								// String DelCID = outputDelList.get(0).get(0);
								String cidqueryname = "SELECT MEMBER_NAME FROM usr_0_family_member_details WHERE wi_name='"
										+ sWorkitemId
										+ "' and CID = '"
										+ DelCID + "'";
								String mobquery = "SELECT MOBILENO FROM usr_0_family_member_details WHERE wi_name='"
										+ sWorkitemId
										+ "' and CID = '"
										+ DelCID + "'";
								List<List<String>> delmobileList = formObject
										.getDataFromDB(mobquery);
								List<List<String>> delmemList = formObject
										.getDataFromDB(cidqueryname);
								String DeletedMobile = delmobileList.get(0)
										.get(0);
								String DeletedCID = delmemList.get(0).get(0);
								scallName3 = "SEND_SMS_EMAIL_FNAME"
										+ DeletedCID;
								sInput_deletedcust = getFetchFamilyRequestXmlforAllDelete(
										DelCID, DeletedMobile);
								sValues33 = "'" + sWorkitemId + "','" + (1)
										+ "','" + sUserName + "','"
										+ scallName3 + "','" + iCallOrder
										+ "','0'," + "'" + sInput_deletedcust
										+ "','Pending','Mandatory',to_date('"
										+ sRequestDate
										+ "','dd/MM/yyyy HH24:mi:ss')," + "'"
										+ (1) + "','" + sActivityName + "'"
										+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
								sout = insertDataIntoDB(
										"USR_0_INTEGRATION_CALLS", sColumn,
										sValues33);
								if (String.valueOf(sout).equalsIgnoreCase("1")) {
									iCallOrder = iCallOrder + 1;
								}
								/*
								 * sInput_deletedcustforHOF=
								 * getFetchFamilyRequestXmlforAllDeletetoHOF
								 * (HeadCID,DelCID,DeletedMobileHOF);
								 * scallName47 = "SEND_SMS_EMAIL_FNAME_HOF_" +
								 * DelCID;
								 * logInfo("insertDataInIntegrationTable - Ayush"
								 * ,"sInput_deletedcustforHOF: "+
								 * sInput_deletedcustforHOF); sValues34 =
								 * "'"+sWorkitemId
								 * +"','"+(1)+"','"+sUserName+"','"
								 * +scallName47+"','"+iCallOrder+"','0'," +
								 * "'"+sInput_deletedcustforHOF
								 * +"','Pending','Mandatory',to_date('"
								 * +sRequestDate+"','dd/MM/yyyy HH24:mi:ss')," +
								 * "'"+(1)+"','"+sActivityName+"'"; sout =
								 * insertDataIntoDB
								 * ("USR_0_INTEGRATION_CALLS",sColumn
								 * ,sValues34);
								 * if(String.valueOf(sout).equalsIgnoreCase
								 * ("1")) { iCallOrder=iCallOrder+1; }
								 */
								counterdel++;
							}
						} else {
							logInfo("insertDataInIntegrationTable",
									"All members not to be deleted");
							/*
							 * sInputXML2= getFetchFamilyRequestXml(HeadCID);
							 * logInfo("insertDataInIntegrationTable - Ayush",
							 * "sInputXML2: "+sInputXML2); sValues2 =
							 * "'"+sWorkitemId
							 * +"','"+(1)+"','"+sUserName+"','"+scallName2
							 * +"','"+iCallOrder+"','0'," +
							 * "'"+sInputXML2+"','Pending','Mandatory',to_date('"
							 * +sRequestDate+"','dd/MM/yyyy HH24:mi:ss')," +
							 * "'"+(1)+"','"+sActivityName+"'"; sout =
							 * insertDataIntoDB
							 * ("USR_0_INTEGRATION_CALLS",sColumn,sValues2);
							 * if(String.valueOf(sout).equalsIgnoreCase("1")) {
							 * iCallOrder=iCallOrder+1; }
							 */
							for (int i = 0; i < outputDelList.size(); i++) {
								String DelCID = recorderList.get(i).get(0);
								// String DelFamilyMember =
								// fetchFCRCustomer(DelCID,
								// "GetCustomerSummary");
								// mobileNumber =
								// getTagValue(DelFamilyMember,"Mobile");
								// logInfo("insertDataInIntegrationTable","mobileNumber: "+mobileNumber);
								// String updatequerymobiile =
								// "update usr_0_family_member_details set MOBILENO ='"+mobileNumber+"' WHERE wi_name='"+sWorkitemId
								// +"' and cid = 'DelCID'";
								// logInfo("insertDataInIntegrationTable","updatequery: "+updatequerymobiile);
								// sout =
								// formObject.saveDataInDB(updatequerymobile);

								logInfo("insertDataInIntegrationTable",
										" insertDataInIntegrationTable recorderList "
												+ DelCID);
								// String DelCID = outputDelList.get(0).get(0);
								String cidqueryname = "SELECT MEMBER_NAME FROM usr_0_family_member_details WHERE wi_name='"
										+ sWorkitemId
										+ "' and CID = '"
										+ DelCID + "'";
								String mobquery = "SELECT MOBILENO FROM usr_0_family_member_details WHERE wi_name='"
										+ sWorkitemId
										+ "' and CID = '"
										+ DelCID + "'";
								List<List<String>> delmobileList = formObject
										.getDataFromDB(mobquery);
								List<List<String>> delmemList = formObject
										.getDataFromDB(cidqueryname);
								String DeletedCID = delmemList.get(0).get(0);
								String DeletedMobile = delmobileList.get(0)
										.get(0);
								scallName3 = "SEND_SMS_EMAIL_FNAME"
										+ DeletedCID;
								sInput_deletedcust = getFetchFamilyRequestXml(
										DelCID, DeletedMobile);
								logInfo("insertDataInIntegrationTable - Ayush",
										"sInput_deletedcust: "
												+ sInput_deletedcust);
								sValues3 = "'" + sWorkitemId + "','" + (1)
										+ "','" + sUserName + "','"
										+ scallName3 + "','" + iCallOrder
										+ "','0'," + "'" + sInput_deletedcust
										+ "','Pending','Mandatory',to_date('"
										+ sRequestDate
										+ "','dd/MM/yyyy HH24:mi:ss')," + "'"
										+ (1) + "','" + sActivityName + "'"
										+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
								sout = insertDataIntoDB(
										"USR_0_INTEGRATION_CALLS", sColumn,
										sValues3);
								if (String.valueOf(sout).equalsIgnoreCase("1")) {
									iCallOrder = iCallOrder + 1;
								}
								sInput_deletedcustforHOF = getFetchFamilyRequestXmlDeletetoHOF(
										HeadCID, DelCID, DeletedMobileHOF);
								scallName47 = "SEND_SMS_EMAIL_FNAME_HOF_"
										+ DelCID;
								logInfo("insertDataInIntegrationTable - Ayush",
										"sInput_deletedcustforHOF: "
												+ sInput_deletedcustforHOF);
								sValues34 = "'" + sWorkitemId + "','" + (1)
										+ "','" + sUserName + "','"
										+ scallName47 + "','" + iCallOrder
										+ "','0'," + "'"
										+ sInput_deletedcustforHOF
										+ "','Pending','Mandatory',to_date('"
										+ sRequestDate
										+ "','dd/MM/yyyy HH24:mi:ss')," + "'"
										+ (1) + "','" + sActivityName + "'"
										+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
								sout = insertDataIntoDB(
										"USR_0_INTEGRATION_CALLS", sColumn,
										sValues34);
								if (String.valueOf(sout).equalsIgnoreCase("1")) {
									iCallOrder = iCallOrder + 1;
								}
								counterdel++;

							}
						}
					}
				} else {
					updatequery = "update " + sTable + " set CALL_ORDER='"
							+ iCallOrder + "' where WI_NAME='" + sWorkitemId
							+ "'" + "  and CALL_NAME='" + sCallName + "'";
					sout = formObject.saveDataInDB(updatequery);
					logInfo("insertDataInIntegrationTable", "updatequery1"
							+ updatequery);
					logInfo("insertDataInIntegrationTable", "sout1" + sout);
					iCallOrder = iCallOrder + 1;
				}
				// }
				// }
				logInfo("insertDataInIntegrationTable",
						"outside MAINTAIN_FAMILY");

				// 30022022 Sanal Grover Update RM Name in Family
				updateFBRMName(iCallOrder);
			} else if (output3 != null && output3.size() > 0) {
				for (iCall = 0; iCall < output3.size(); iCall++) {
					sCallType = output3.get(iCall).get(0);
					sStatus = output3.get(iCall).get(1);
					logInfo("insertDataInIntegrationTable", "sCallType "
							+ sCallType);
					logInfo("insertDataInIntegrationTable", "sStatus "
							+ sStatus);
					if (sCallType.equalsIgnoreCase("BRMS_ECB_EXCLUSION")) {
						logInfo("insertDataInIntegrationTable if  BRMS_ECB_EXCLUSION ",
								"sCallType" + sCallType);
						logInfo("insertDataInIntegrationTable if BRMS_ECB_EXCLUSION ",
								"iNoOfCustomer " + iNoOfCustomer);
						for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
							logInfo("insertDataInIntegrationTable", "iCount "
									+ iCount);
							String sName = formObject.getTableCellValue(
									ACC_RELATION, sNo, 1);
							logInfo("insertDataInIntegrationTable if  BRMS_ECB_EXCLUSION ",
									"sName " + sName);
							String cid = formObject.getTableCellValue(
									ACC_RELATION, sNo, 2);
							sCallName = "BRMS_ECB_EXCLUSION_" + (sNo + 1) + "_"
									+ sName;
							logInfo("insertDataInIntegrationTable if  BRMS_ECB_EXCLUSION ",
									"sCallName " + sCallName);
							int cust_no = sNo + 1;
							start_Time1 = System.currentTimeMillis();
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "'"
									+ " and CALL_NAME like 'BRMS_ECB_EXCLUSION_"
									+ cust_no + "%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							logInfo("insertDataInIntegrationTable", "iCount "
									+ iCount);
							if (iCount == 0) {
								logInfo("insertDataInIntegrationTable if BRMS_ECB_EXCLUSION ",
										" iCount" + iCount);
								sInputXML = getECBExclusionRequestXml(sNo + 1,
										cid, formObject.getTableCellValue(
												ACC_RELATION, sNo, 9),
										iNoOfCustomer);
								sRequestDate = getReqDate();
								logInfo("insertDataInIntegrationTable",
										"after inputxml");
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ (sNo + 1) + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0'," + "'"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),"
											+ "'" + (sNo + 1) + "','"
											+ sActivityName + "'"
											+ ",'"+PRE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									logInfo("insertDataInIntegrationTable",
											"sout " + sout);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where " + "WI_NAME='"
										+ sWorkitemId + "' and CALL_NAME='"
										+ sCallName + "'";
								sout = formObject.saveDataInDB(updatequery);
								logInfo("insertDataInIntegrationTable BRMS_ECB_EXCLUSION ",
										"updatequery1" + updatequery);
								logInfo("insertDataInIntegrationTable BRMS_ECB_EXCLUSION ",
										"sout" + sout);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside BRMS_ECB_EXCLUSION");
					} else if (sCallType.equalsIgnoreCase("ECB_VALIDATION")) {
						logInfo("insertDataInIntegrationTable",
								" if ECB_VALIDATION");
						for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
							String sName = formObject.getTableCellValue(
									ACC_RELATION, sNo, 1);
							sCallName = "ECB_VALIDATION_" + (sNo + 1) + "_"
									+ sName;
							int cust_no = sNo + 1;
							start_Time1 = System.currentTimeMillis();
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "'"
									+ " and CALL_NAME like 'ECB_VALIDATION_"
									+ cust_no + "%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							if (iCount == 0) {
								//Added by Shivanshu ATP-501
								String processName = sWorkitemId.split("-")[0];
								String sQueryFlag = "SELECT FLAG FROM BPM_INTEGRATION_CALL_EXECUTION_MASTER "
										+ " WHERE PROCESS_NAME = '"+processName+"' AND CALL_NAME = '"+sCallType+"' ";
								String flagECB = "";
								List<List<String>> outputflag = formObject.getDataFromDB(sQueryFlag);
								if (outputflag != null && outputflag.size() > 0) {
									flagECB = outputflag.get(0).get(0);
								}
								if (!"Y".equalsIgnoreCase(flagECB)) {
								sInputXML = getECBValidationRequestXml(sNo + 1,
										formObject.getTableCellValue(
												ACC_RELATION, sNo, 7),
										iNoOfCustomer);
								
								//Added by Shivanshu ATP-501
								}else {
								   sInputXML = getECBValidationRequestJson(sNo + 1,
										formObject.getTableCellValue(
												ACC_RELATION, sNo, 7),
										iNoOfCustomer);
								}
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ (sNo + 1) + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0'," + "'"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),"
											+ "'" + (sNo + 1) + "','"
											+ sActivityName + "'"
											+ ",'"+PRE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "'" + "  and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								logInfo("insertDataInIntegrationTable",
										"updatequery1" + updatequery);
								logInfo("insertDataInIntegrationTable", "sout1"
										+ sout);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside ECB_VALIDATION");
					} else if (sCallType.equalsIgnoreCase("BRMS_ELIGIBILITY")) {
						logInfo("insertDataInIntegrationTable",
								"if BRMS_ELIGIBILITY");
						for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
							String sName = formObject.getTableCellValue(
									ACC_RELATION, sNo, 1);
							sCallName = "BRMS_ELIGIBILITY_" + (sNo + 1) + "_"
									+ sName;
							int cust_no = sNo + 1;
							start_Time1 = System.currentTimeMillis();
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE"
									+ " WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME like 'BRMS_ELIGIBILITY_"
									+ cust_no + "%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							logInfo("insertDataInIntegrationTable",
									"BRMS_ELIGIBILITY iCount" + iCount);
							if (iCount == 0) {
								sInputXML = getBRMSEligibilityRequestXml(
										sNo + 1, iNoOfCustomer,
										formObject.getTableCellValue(
												ACC_RELATION, sNo, 7));
								logInfo("sInputXML---", sInputXML);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ (sNo + 1) + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0','"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'"
											+ (sNo + 1) + "','" + sActivityName
											+ "'"
											+ ",'"+PRE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "'" + "  and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside BRMS_ELIGIBILITY");
					} else if (sCallType.equalsIgnoreCase("BRMS_JOINTCUSTOMER")) { // Its
																					// will
																					// work
																					// when
																					// more
																					// than
																					// 2
																					// customer
																					// are
																					// present
						logInfo("insertDataInIntegrationTable",
								"BRMS_JOINTCUSTOMER" + iNoOfCustomer);
						if (iNoOfCustomer > 1) {
							sCallName = "BRMS_JOINTCUSTOMER_" + iNoOfCustomer;
							start_Time1 = System.currentTimeMillis();
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME like 'BRMS_JOINTCUSTOMER_%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							logInfo("Time Difference: _diff ", diff
									+ " for Query: " + sQuery);
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							logInfo("insertDataInIntegrationTable",
									"BRMS_JOINTCUSTOMER  iCount " + iCount);
							if (iCount == 0) {
								sInputXML = getBRMSJointEligibilityRequestXml(iNoOfCustomer);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','','"
											+ sUserName + "','" + sCallName
											+ "','" + iCallOrder + "','0','"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'','"
											+ sActivityName + "'"
											+ ",'"+PRE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "' " + " and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside BRMS_JOINTCUSTOMER");
					} else if (sCallType.equalsIgnoreCase("CUSTOMER_CREATION")) { // executes
																					// only
																					// when
																					// cid
																					// is
																					// null
						logInfo("insertDataInIntegrationTable",
								"CUSTOMER_CREATION");
						logInfo("insertDataInIntegrationTable",
								" iNoOfCustomer " + iNoOfCustomer);
						if (formObject.getValue("ACC_OWN_TYPE").toString()
								.equalsIgnoreCase("Minor")) {
							for (int sNo = iNoOfCustomer - 1; sNo >= 0; sNo--) {
								start_Time1 = System.currentTimeMillis();
								String sName = formObject.getTableCellValue(
										ACC_RELATION, sNo, 1);
								sCallName = "CUSTOMER_CREATION_" + (sNo + 1)
										+ "_" + sName;
								logInfo("insertDataInIntegrationTable ",
										"CUSTOMER_CREATION sName :" + sName
												+ " sNo :" + sNo
												+ " sCallName :" + sCallName
												+ " iNoOfCustomer :"
												+ iNoOfCustomer);
								int cust_no = sNo + 1;
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and STATUS = 'Success' and call_name like 'CUSTOMER_CREATION_"
										+ cust_no + "%'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = (output2 != null && output2.size() > 0) ? Integer
										.parseInt(output2.get(0).get(0)
												.toString()) : 0;
								end_Time = System.currentTimeMillis();
								diff = start_Time1 - end_Time;
								if (iCount == 0) {
									sCustID = formObject.getTableCellValue(
											ACC_RELATION, sNo, 2);
									if (sCustID.equalsIgnoreCase("")) {
										sInputXML = getCreateCustInputXML(
												sWorkitemId, (sNo + 1) + "");
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','"
													+ (sNo + 1)
													+ "','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (cust_no) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											sout = insertDataIntoDB(
													"USR_0_INTEGRATION_CALLS",
													sColumn, sValues);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
							logInfo("insertDataInIntegrationTable",
									"outside if CUSTOMER_CREATION");
						} else {
							logInfo("insertDataInIntegrationTable",
									"CUSTOMER_CREATION   else condition");
							logInfo("insertDataInIntegrationTable",
									" iNoOfCustomer " + iNoOfCustomer);
							for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
								start_Time1 = System.currentTimeMillis();
								String sName = formObject.getTableCellValue(
										ACC_RELATION, sNo, 1);
								sCallName = "CUSTOMER_CREATION_" + (sNo + 1)
										+ "_" + sName;
								logInfo("insertDataInIntegrationTable ",
										"CUSTOMER_CREATION sName :" + sName
												+ " sNo :" + sNo
												+ " sCallName :" + sCallName
												+ " iNoOfCustomer :"
												+ iNoOfCustomer);
								int cust_no = sNo + 1;
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and STATUS = 'Success' and call_name like 'CUSTOMER_CREATION_"
										+ cust_no + "%'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = (output2 != null && output2.size() > 0) ? Integer
										.parseInt(output2.get(0).get(0)
												.toString()) : 0;
								end_Time = System.currentTimeMillis();
								diff = start_Time1 - end_Time;
								logInfo("insertDataInIntegrationTable",
										"CUSTOMER_CREATION  iCount " + iCount);
								if (iCount == 0) {
									sCustID = formObject.getTableCellValue(
											ACC_RELATION, sNo, 2);
									if (sCustID.equalsIgnoreCase("")) {
										sInputXML = getCreateCustInputXML(
												sWorkitemId,
												String.valueOf(sNo + 1));
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','"
													+ (sNo + 1)
													+ "','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (sNo + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											sout = insertDataIntoDB(
													"USR_0_INTEGRATION_CALLS",
													sColumn, sValues);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside else CUSTOMER_CREATION");
					} else if (sCallType.equalsIgnoreCase("CUSTOMER_MODIFY")) {
						logInfo("insertDataInIntegrationTable",
								"if CUSTOMER_MODIFY");
						for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
							String sName = formObject.getTableCellValue(
									ACC_RELATION, sNo, 1);
							sCallName = "CUSTOMER_MODIFY_" + (sNo + 1) + "_"
									+ sName;
							int cust_no = sNo + 1;
							start_Time1 = System.currentTimeMillis();
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME like 'CUSTOMER_MODIFY_"
									+ cust_no + "%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							logInfo("insertDataInIntegrationTable CUSTOMER_MODIFY ",
									"iCount " + iCount);
							if (iCount == 0) {
								sInputXML = getModifyCustInputXML(sNo + 1);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ (sNo + 1) + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0','"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'"
											+ (sNo + 1) + "','" + sActivityName
											+ "'"
											+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "' " + " and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside else CUSTOMER_MODIFY");
					} else if (sCallType.equalsIgnoreCase("ACCOUNT_CREATION")) {
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_CREATION");
						start_Time1 = System.currentTimeMillis();
						//changes for multiple account bug 7-11-2023
						/*
						sQuery = "SELECT PROD_CODE,ACC_BRANCH,CURRENCY,ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE "
								+ "WI_NAME='"
								+ sWorkitemId
								+ "' ORDER BY TO_NUMBER(CID)";
						 */
						//Code start
						sQuery = "SELECT PROD_CODE,ACC_BRANCH,CURRENCY,ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE "
								+ "WI_NAME='"
								+ sWorkitemId
								+ "' ORDER BY TO_NUMBER(INSERTIONORDERID)";
						//Code end
						logInfo("insertDataInIntegrationTable",
								"sQuery ### " + sQuery);
						end_Time = System.currentTimeMillis();
						diff = start_Time1 - end_Time;
						output2 = formObject.getDataFromDB(sQuery);
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_CREATION output2 " + output2);
						String sAccBranch = "", sCurrency = "";
						/*
						 * if(output2 != null && output2.size() > 0){ sProdCode
						 * = output2.get(0).get(0); sAccNo =
						 * output2.get(0).get(3); sAccBranch =
						 * output2.get(0).get(1); sCurrency =
						 * output2.get(0).get(2); }
						 */
						iNoOfProduct = output2.size();
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_CREATION iNoOfProduct " + iNoOfProduct);
						for (int i = 0; i < iNoOfProduct; i++) {
							// logInfo("insertDataInIntegrationTable","ACCOUNT_CREATION sProdCode "+output2.get(i).get(0));
							sProdCode = output2.get(i).get(0);
							sAccNo = output2.get(i).get(3);
							sAccBranch = output2.get(i).get(1);
							sCurrency = output2.get(i).get(2);
							logInfo("insertDataInIntegrationTable",
									"ACCOUNT_CREATION sProdCode " + sProdCode);
							logInfo("insertDataInIntegrationTable",
									"ACCOUNT_CREATION sAccNo " + sAccNo);
							start_Time1 = System.currentTimeMillis();
							sCallName = "ACCOUNT_CREATION_" + sProdCode + "_"
									+ (i + 1);
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME='"
									+ sCallName + "' and STATUS = 'Success'";
							List<List<String>> countOutput = formObject
									.getDataFromDB(sQuery);
							iCount = Integer
									.parseInt(countOutput.get(0).get(0));
							logInfo("insertDataInIntegrationTable ACCOUNT_CREATION",
									"iCount " + iCount);
							// iCount = (output2 != null && output2.size() > 0)
							// ?
							// Integer.parseInt(output2.get(0).get(0).toString())
							// : 0;
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							if (iCount == 0) {
								sInputXML = getCreateAccountInputXML(sProdCode,
										sAccBranch, sCurrency);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ (i + 1) + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0','"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'"
											+ (i + 1) + "','" + sActivityName
											+ "'"
											+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "'" + "  and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside ACCOUNT_CREATION");
					} else if (sCallType.equalsIgnoreCase("ACCOUNT_UPDATE")) {
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_UPDATE");
						//changes for multiple account bug 7-11-2023
						/*
						sQuery = "SELECT PROD_CODE FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME='"
								+ sWorkitemId + "' ORDER BY TO_NUMBER(CID)";
						 */
						//Code start
						sQuery = "SELECT PROD_CODE FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME='"
								+ sWorkitemId + "' ORDER BY TO_NUMBER(INSERTIONORDERID)";
						//Code end
						List<List<String>> result = formObject
								.getDataFromDB(sQuery);
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_UPDATE  result "+result);
						start_Time1 = System.currentTimeMillis();
						iNoOfProduct = result.size();
						for (int i = 0; i < iNoOfProduct; i++) {
							sTemp = result.get(i).get(0);
							sCallName = "ACCOUNT_UPDATE_" + sTemp + "_"
									+ (i + 1);
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME='"
									+ sCallName + "' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							iCount = Integer.parseInt(output2.get(0).get(0));
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							logInfo("Time Difference: diff ", diff
									+ " for Query: " + sQuery);
							logInfo("insertDataInIntegrationTable ACCOUNT_UPDATE",
									"iCount " + iCount);
							if (iCount == 0) {
								logInfo("insertDataInIntegrationTable ACCOUNT_UPDATE ",
										"sActivityName " + sActivityName);
								if ((sActivityName
										.equalsIgnoreCase("DDE_ACC_INFO_CHK") && !formObject
										.getValue("SOURCING_CHANNEL")
										.toString().equalsIgnoreCase("DFC"))
										|| (sActivityName
												.equalsIgnoreCase("CPD Checker") && !(formObject
												.getValue("SCAN_MODE")
												.toString()
												.equalsIgnoreCase("New WMS ID")))
										|| sActivityName
												.equalsIgnoreCase("Delivery_Checker")) {
									logInfo("insertDataInIntegrationTable ACCOUNT_UPDATE ",
											"iCount " + iCount);
									logInfo("insertDataInIntegrationTable ACCOUNT_UPDATE ",
											"sTemp " + sTemp);
									logInfo("insertDataInIntegrationTable ACCOUNT_UPDATE ",
											"sActivityName " + sActivityName);
									sInputXML = getUpdateAccountInputXML(sTemp,
											(i + 1), sActivityName);
									logInfo("sInputXML---", sInputXML);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','"
												+ (i + 1)
												+ "','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "','Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										sout = insertDataIntoDB(
												"USR_0_INTEGRATION_CALLS",
												sColumn, sValues);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "'" + "  and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside ACCOUNT_UPDATE");
					} else if (sCallType.equalsIgnoreCase("CHEQUEBOOK")) {
						logInfo("insertDataInIntegrationTable", "if CHEQUEBOOK");
						for (int i = 0; i < iNoOfProduct; i++) {
							String sChequeBook = formObject.getTableCellValue(
									PRODUCT_QUEUE, i, 6);
							if (sChequeBook.equalsIgnoreCase("Yes")) {
								sCallName = "CHEQUEBOOK_" + (i + 1);
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "'"
										+ " and CALL_NAME='"
										+ sCallName
										+ "' and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = (output2 != null && output2.size() > 0) ? Integer
										.parseInt(output2.get(0).get(0)
												.toString()) : 0;
								logInfo("insertDataInIntegrationTable",
										"CHEQUEBOOK   iCount " + iCount);
								if (iCount == 0) {
									if (sActivityName
											.equalsIgnoreCase("CPD Checker")
											|| sActivityName
													.equalsIgnoreCase("Delivery_Checker")) {
										sInputXML = getChequebookInputXML(i + 1);
										logInfo("sInputXML---", sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"CHEQUEBOOK updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"CHEQUEBOOK sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
						}
						logInfo("insertDataInIntegrationTable",
								"outside CHEQUEBOOK");
					} else if (sCallType.equalsIgnoreCase("CHEQUEBOOK_HANDOFF")) {
						logInfo("insertDataInIntegrationTable",
								"CHEQUEBOOK_HANDOFF");
						logInfo("Inside Call Type", " CHEQUEBOOK_HANDOFF");
						logInfo("Innn CHEQUEBOOK_HANDOFF call order ::",
								String.valueOf(iCallOrder));
						logInfo("Inside  ", "CHEQUEBOOK_HANDOFF 11");
						for (int i = 0; i < iNoOfCustomer; i++) {
							String sName = formObject.getTableCellValue(
									ACC_RELATION, i, 1);
							sCallName = "CHEQUEBOOK_HANDOFF_" + (i + 1) + "_"
									+ sName;
							logInfo("Inside  CHEQUEBOOK_HANDOFF 22 ", sCallName);
							start_Time1 = System.currentTimeMillis();
							logInfo("Inside  CHEQUEBOOK_HANDOFF 33 ",
									String.valueOf(start_Time1));
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME like 'CHEQUEBOOK_HANDOFF_%' and STATUS = 'Success'";
							logInfo(" sQuery ", sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							end_Time = System.currentTimeMillis();
							diff = start_Time1 - end_Time;
							logInfo("insertDataInIntegrationTable",
									"CHEQUEBOOK_HANDOFF  iCount " + iCount);
							if (iCount == 0) {
								sInputXML = getCheqBookHandoffRequestXml(iNoOfCustomer);
								logInfo("insertDataInIntegrationTable",
										"sInputXML---" + sInputXML);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'" + sWorkitemId + "','"
											+ iNoOfCustomer + "','" + sUserName
											+ "','" + sCallName + "','"
											+ iCallOrder + "','0','"
											+ sInputXML + "','Pending','"
											+ sStatus + "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'','"
											+ sActivityName + "'"
											+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									sout = insertDataIntoDB(
											"USR_0_INTEGRATION_CALLS", sColumn,
											sValues);
									if (String.valueOf(sout).equalsIgnoreCase(
											"1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "'" + "  and CALL_NAME='" + sCallName
										+ "'";
								sout = formObject.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
							}
							logInfo("insertDataInIntegrationTable",
									"outside CHEQUEBOOK_HANDOFF");
						}
					} else if (sCallType
							.equalsIgnoreCase("CUSTOMER_SERVICE_CHARGE")) {
						logInfo("insertDataInIntegrationTable",
								"CUSTOMER_SERVICE_CHARGE");
						logInfo("Inside", " Call Type CUSTOMER_SERVICE_CHARGE");
						if (((sActivityName
								.equalsIgnoreCase("QDE_Acc_Info_Chk") || sActivityName
								.equalsIgnoreCase("DDE_ACC_INFO_CHK")) && formObject
								.getValue("SCAN_MODE").toString()
								.equalsIgnoreCase("Existing WMS ID"))
								|| (sActivityName
										.equalsIgnoreCase("CPD Checker"))
								|| (sActivityName
										.equalsIgnoreCase("Delivery_Checker"))) {
							for (int i = 0; i < iNoOfCustomer; i++) {
								String sName = formObject.getTableCellValue(
										ACC_RELATION, i + 1, 1);
								sCallName = "CUSTOMER_SERVICE_CHARGE_"
										+ (i + 1) + "_" + sName;
								int cust_no = i + 1;
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME like 'CUSTOMER_SERVICE_CHARGE_"
										+ cust_no + "%' and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = (output2 != null && output2.size() > 0) ? Integer
										.parseInt(output2.get(0).get(0)
												.toString()) : 0;
								if (iCount == 0) {
									sInputXML = getCustSCInputXML("C", (i + 1));
									logInfo("sInputXML---", sInputXML);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "'"
												+ ",'Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										updatequery = "insert into '" + sTable
												+ "'" + " " + "'" + sColumn
												+ "'" + " " + "' VALUES ('"
												+ sValues + "')";
										logInfo("insertDataInIntegrationTable",
												"updatequery: " + updatequery);
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout: " + sout);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								} else {
									updatequery = "update '" + sTable
											+ "' set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + " and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									logInfo("insertDataInIntegrationTable",
											"else updatequery: " + updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
						}
						logInfo("insertDataInIntegrationTable",
								"insertDataInIntegrationTable Outside CUSTOMER_SERVICE_CHARGE---"
										+ String.valueOf(iCallOrder));
					} else if (sCallType.equalsIgnoreCase("SIGNATURE_UPLOAD")) {
						logInfo("insertDataInIntegrationTable",
								"SIGNATURE_UPLOAD");
						// should be commented by Ayush for AO Release
						String sChannelType = formObject.getValue(
								"CHANNEL_TYPE").toString();
						if (sChannelType.equalsIgnoreCase("")) {
							logInfo("insertDataInIntegrationTable",
									" channel_type is blank");
							output2 = formObject
									.getDataFromDB("SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL ='"
											+ formObject.getValue(
													"SOURCING_CHANNEL")
													.toString() + "'");
							logInfo("insertDataInIntegrationTable",
									" channel_type is blank: " + output2);
							try {
								sChannelType = output2.get(0).get(0);
							} catch (Exception e) {
								logInfo("insertDataInIntegrationTable",
										"channel_type is blank" + e);
							}
						}
						logInfo("insertDataInIntegrationTable",
								"SIGNATURE_UPLOAD iNoOfCustomer: "
										+ iNoOfCustomer);
						for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
							String sName = formObject.getTableCellValue(
									ACC_RELATION, sNo, 1);
							sCallName = "SIGNATURE_UPLOAD_" + (sNo + 1) + "_"
									+ sName;
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME like 'SIGNATURE_UPLOAD_"
									+ (sNo + 1) + "%' and STATUS = 'Success'";
							output2 = formObject.getDataFromDB(sQuery);
							logInfo("insertDataInIntegrationTable",
									"SIGNATURE_UPLOAD sQuery: " + sQuery);
							logInfo("insertDataInIntegrationTable",
									"SIGNATURE_UPLOAD output2: " + output2);
							iCount = (output2 != null && output2.size() > 0) ? Integer
									.parseInt(output2.get(0).get(0).toString())
									: 0;
							logInfo("insertDataInIntegrationTable",
									"SIGNATURE_UPLOAD iCount: " + iCount);
							if (iCount == 0) {
								if ((sActivityName
										.equalsIgnoreCase("CPD Checker")
								// should be commennted by ayush for ao release
										// this.formObject.getValue("CHANNEL_TYPE").toString().equalsIgnoreCase("Direct")
										// ||
										&& (sChannelType
												.equalsIgnoreCase("Direct") || formObject
												.getValue(
														"BRNCH_OF_INSTANT_ISSUE")
												.toString()
												.equalsIgnoreCase("Kiosk")))
										|| sActivityName
												.equalsIgnoreCase("Delivery_Checker")) {
									String sMaintainOption = "";
									sQuery = "SELECT CUST_ID,IS_UPDATE_SIGN,SIGNATUREPRESENTFLAG FROM USR_0_CUST_TXN "
											+ "WHERE WI_NAME='"
											+ sWorkitemId
											+ "' AND CUST_SNO='"
											+ (sNo + 1)
											+ "'";
									logInfo("insertDataInIntegrationTable",
											"sQuery: "+ sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									logInfo("insertDataInIntegrationTable",
											"output2: "+ output2);
									sCustID = output2.get(0).get(0);
									String sRelation = formObject
											.getTableCellValue(ACC_RELATION,
													sNo, 7);
									if (sRelation.equalsIgnoreCase("New")) {
										sMaintainOption = "A";
									} else {
										logInfo("insertDataInIntegrationTable",
												"inside else ");
										if (output2.get(0).get(2)
												.equalsIgnoreCase("N")) {
											sMaintainOption = "A";
										} else if (output2.get(0).get(1)
												.equalsIgnoreCase("True")) {
											sMaintainOption = "M";
										} else if (output2.get(0).get(2)
												.equalsIgnoreCase("Y")) {
											sMaintainOption = "";
										}
										if (!sMaintainOption
												.equalsIgnoreCase("")) {
											String sQuerySig = "SELECT COUNT(DISTINCT COMMENTS) AS COUNT_WI "
													+ "FROM USR_0_DOC_DETAILS WHERE WI_NAME ='"
													+ sWorkitemId
													+ "' AND "
													+ "DOC_NAME='signature' and COMMENTS='"
													+ (sNo + 1) + "'";
											logInfo("insertDataInIntegrationTable",
													"SIGNATURE_UPLOAD sQuerySig: "
															+ sQuerySig);
											output2 = formObject
													.getDataFromDB(sQuerySig);
											logInfo("insertDataInIntegrationTable",
													"SIGNATURE_UPLOAD output2: "
															+ output2);

											// sQuerySig =
											// "SELECT COUNT(DISTINCT COMMENTS) AS COUNT_WI "
											// +
											// "FROM USR_0_DOC_DETAILS_HISTORY WHERE WI_NAME ='"+sWorkitemId+"' AND "
											// +
											// "DOC_NAME='signature' and COMMENTS='"+(sNo+1)+"'";
											// logInfo("insertDataInIntegrationTable","SIGNATURE_UPLOAD sQuerySig1: "
											// +sQuerySig);
											// List<List<String>> output5 =
											// formObject.getDataFromDB(sQuerySig);
											// logInfo("insertDataInIntegrationTable","SIGNATURE_UPLOAD output5: "+output5);
											/*
											 * if(Integer.parseInt(output2.get(0)
											 * .get(0)) > 1) {
											 * sMaintainOption="M"; } else {
											 * sMaintainOption=""; }
											 */
											if (Integer.parseInt(output2.get(0)
													.get(0)) == 0) {
												sMaintainOption = "";
											}
										}
									}
									if (null == sCustID
											|| sCustID.equalsIgnoreCase("")) {
										sCustID = "#" + "CUST_" + (sNo + 1)
												+ "#";
									}
									if (!sMaintainOption.equalsIgnoreCase("")) {
										sInputXML = getSignatureInputXML(
												sNo + 1, sMaintainOption,
												sCustID);
										logInfo("insertDataInIntegrationTable",
												"SIGNATURE_UPLOAD sInputXML---"
														+ sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','"
													+ (sNo + 1)
													+ "','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "',"
													+ "'0',("
													+ sInputXML
													+ "),'Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (sNo + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") " + "VALUES ("
													+ sValues + ")";
											logInfo("insertDataInIntegrationTable",
													"SIGNATURE_UPLOAD updatequery: "
															+ updatequery);
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"SIGNATURE_UPLOAD updatequery sout: "
															+ sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											} else {
												sendMessageValuesList("",
														"Error in inserting Signature XML");
												sFinalStatus = "Error";
											}
										} else {
											sendMessageValuesList("",
													"Error in getting Signature XML");
											sFinalStatus = "Error";
										}
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='" + iCallOrder
										+ "' where WI_NAME='" + sWorkitemId
										+ "' and CALL_NAME='" + sCallName + "'";
								sout = formObject.saveDataInDB(updatequery);
								logInfo("insertDataInIntegrationTable",
										"SIGNATURE_UPLOAD else updatequery: "
												+ updatequery);
								iCallOrder = iCallOrder + 1;
							}
						}
						logInfo("insertDataInIntegrationTable",
								"Customer Signature call Inserted---"
										+ iCallOrder);
					} else if (formObject.getValue(CHANNEL_TYPE).toString()
							.equalsIgnoreCase("Alternate")
							&& sActivityName
									.equalsIgnoreCase("DDE_Acc_INFO_CHK")
							&& formObject.getValue(RD_INST_DEL).toString()
									.equalsIgnoreCase("Yes")) {
						logInfo("", "--11--inside 1st if-----");
						if (sCallType.equalsIgnoreCase("DEBITCARD_NEW")) {
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_NEW");
							logInfo("Inside", " Call Type DEBITCARD_NEW");
							logInfo("",
									"--11--calltype====DEBITCARD_NEW........ 11111111");
							sQuery = "SELECT REP_EMBOSS_NAME,REP_GROUP_TYPE,PROD_GROUP FROM DEBIT_CARD_REP WHERE WI_NAME ='"
									+ sWorkitemId
									+ "' AND REP_NEW_LINK='New' ORDER BY TO_NUMBER(CID)";
							logInfo("squery for debitcard_new", sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							iNoOfCard = output2.size();
							sAccTitle = output2.get(0).get(0);
							String sGroup = output2.get(0).get(1);
							sProdGroup = output2.get(0).get(2);
							sTemp = sGroup;
							String[] sEmbossName = sAccTitle.split(",");
							sProduct = sProdGroup.split(",");
							for (int i = 0; i < iNoOfCard; i++) {
								sCallName = "DEBITCARD_NEW_" + (i + 1);
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME='"
										+ sCallName
										+ "' and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								logInfo("squery for debitcard_new Success status", sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								logInfo("squery for debitcard_new Success status count", ""+iCount);
								if (iCount == 0) {
									sInputXML = setAddDebitCardIssueInputXML(
											sEmbossName[i], sTemp, sProduct[i]);
									logInfo("sInputXML09022016---", sInputXML);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "','Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										updatequery = "insert into " + sTable
												+ " (" + sColumn + ") VALUES ("
												+ sValues + ")";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"DEBITCARD_NEW updatequery: "
														+ updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout: " + sout);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								} else {									
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
						} else if (sCallType.equalsIgnoreCase("DEBITCARD_LINK")) {
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_LINK");
							logInfo("Inside ", "Call Type DEBITCARD_LINK");
							sQuery = "SELECT REP_EXISTING_CARD_NO,PROD_GROUP FROM DEBIT_CARD_REP WHERE WI_NAME ='"
									+ sWorkitemId
									+ "' "
									+ "AND REP_NEW_LINK='Link' ORDER BY TO_NUMBER(CID)";
							logInfo("insertDataInIntegrationTable", "sQuery: "
									+ sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							logInfo("insertDataInIntegrationTable", "output2: "
									+ output2);
							if (output2 != null && output2.size() > 0) {
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								iNoOfCard = output2.size();
								// String sExistingCard = output2.get(0).get(0);
								// sProdGroup = output2.get(0).get(1);
								// String[] sCard = sExistingCard.split(",");
								sProduct = sProdGroup.split(",");
								for (int i = 0; i < iNoOfCard; i++) {
									String sExistingCard = output2.get(i)
											.get(0);
									sProdGroup = output2.get(i).get(1);
									sCallName = "DEBITCARD_LINK_" + (i + 1);
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
											+ "WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='"
											+ sCallName
											+ "' and " + "STATUS = 'Success'";
									logInfo("insertDataInIntegrationTable",
											"sQuery: " + sQuery);
									List<List<String>> outputCount = formObject
											.getDataFromDB(sQuery);
									logInfo("insertDataInIntegrationTable",
											"outputCount: " + outputCount);
									iCount = Integer.parseInt(outputCount
											.get(0).get(0));
									if (iCount == 0) {
										sInputXML = getLinkDebitCardInputXML(
												sProdGroup, sExistingCard);
										logInfo("sInputXML---", sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"DEBITCARD_NEW updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "' "
												+ " and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
						} else if (sCallType.equalsIgnoreCase("BASE24")) {
							logInfo("insertDataInIntegrationTable", "BASE24");
							String count_call = "";
							sQuery = "SELECT COUNT(CALL_NAME) AS COUNT_CALL FROM USR_0_INTEGRATION_CALLS WHERE call_name like '%DEBITCARD_NEW%' AND WI_NAME='"
									+ sWorkitemId + "'";
							output2 = formObject.getDataFromDB(sQuery);
							iNoOfCard = output2.size();
							int scount_call = Integer.parseInt(output2.get(0)
									.get(0));
							for (int i = 0; i < scount_call; i++) {
								sCallName = "BASE24_" + (i + 1);
								sQuery = "SELECT replace(response,'DEBIT CARD:','')RESPONSE FROM "
										+ "USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME"
										+ "='DEBITCARD_NEW_"
										+ (i + 1)
										+ "' and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								String sdebitCard = output2.get(0).get(0);
								String sCard = "";
								if (sdebitCard.equalsIgnoreCase("")) {
									sCard = "#CARD_" + (i + 1) + "#";
									logInfo("card222222", sCard);
								} else
									sCard = sdebitCard;
								logInfo("insertDataInIntegrationTable",
										"inside for loop ---i value is ===="
												+ i + sCard);
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
										+ "WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME='"
										+ sCallName
										+ "' and STATUS = " + "'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								if (iCount == 0) {
									sInputXML = getBase24InputXML(sCard);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "','Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										updatequery = "insert into " + sTable
												+ " (" + sColumn + ") VALUES ("
												+ sValues + ")";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"updatequery: " + updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout: " + sout);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
							logInfo("insertDataInIntegrationTable",
									"base24 call Inserted-------");
						}
					} else if (sCallType.equalsIgnoreCase("ACCOUNT_MODIFY")
							&& !sActivityName.equalsIgnoreCase("CPD Checker")
							&& !sActivityName
									.equalsIgnoreCase("Delivery_Checker")) {
						logInfo("insertDataInIntegrationTable",
								"ACCOUNT_MODIFY");
						sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
								+ sWorkitemId
								+ "' and CALL_NAME like 'ACCOUNT_MODIFY_%' and STATUS = 'Success'";
						logInfo(" sQuery ", sQuery);
						output2 = formObject.getDataFromDB(sQuery);
						iCount = Integer.parseInt(output2.get(0).get(0));
						if (iCount != 0) {
							updatequery = "update " + sTable
									+ " set CALL_ORDER='" + iCallOrder
									+ "' where WI_NAME='" + sWorkitemId + "' "
									+ " and CALL_NAME like 'ACCOUNT_MODIFY_%'";
							sout = formObject.saveDataInDB(updatequery);
							iCallOrder = iCallOrder + 1;
						}
						logInfo("Account Creation", " call Order Updated---");
					} //added by krishna 
					else if(sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk")){
				    if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade"))	{
					if (sCallType.equalsIgnoreCase("DEBITCARD_UPGRADE_DOWNGRADE")) {
						logInfo("insertDataInIntegrationTable",
								"Inside Call Type DEBITCARD_UPGRADE_DOWNGRADE");
						sQuery = "SELECT SUM(COUNT_WI) COUNT_WI FROM (SELECT COUNT(WI_NAME) AS COUNT_WI "
								+ "FROM USR_0_DEBITCARD_EXISTING WHERE WI_NAME='"
								+ sWorkitemId
								+ "' UNION "
								+ "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_DEBITCARD_EXISTING_CPD "
								+ "WHERE WI_NAME='"
								+ sWorkitemId
								+ "')";
						logInfo("insertDataInIntegrationTable",
								"sQuery-----krishna" + sQuery);
						output2 = formObject.getDataFromDB(sQuery);
						iCount = Integer
								.parseInt(output2.get(0).get(0));
						if (iCount != 0) {
							sCallName = "DEBITCARD_UPGRADE_DOWNGRADE";
							sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS "
									+ "WHERE WI_NAME='"
									+ sWorkitemId
									+ "' and CALL_NAME='"
									+ sCallName
									+ "' and " + "STATUS = 'Success'";
							logInfo("insertDataInIntegrationTable",
									"sQuery-----" + sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							iCount = Integer.parseInt(output2.get(0)
									.get(0));
							if (iCount == 0) {
								sInputXML = getUpgradeDowngradeDCInputXML();
								logInfo("insertDataInIntegrationTable",
										"sInputXML---krishna" + sInputXML);
								sRequestDate = getReqDate();
								if (!sInputXML.equalsIgnoreCase("")) {
									sValues = "'"
											+ sWorkitemId
											+ "','','"
											+ sUserName
											+ "','"
											+ sCallName
											+ "','"
											+ iCallOrder
											+ "','0','"
											+ sInputXML
											+ "','Pending','"
											+ sStatus
											+ "',to_date('"
											+ sRequestDate
											+ "','dd/MM/yyyy HH24:mi:ss'),'1','"
											+ sActivityName + "'"
											+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
									updatequery = "insert into "
											+ sTable + " (" + sColumn
											+ ") VALUES (" + sValues
											+ ")";
									sout = formObject
											.saveDataInDB(updatequery);
									logInfo("insertDataInIntegrationTable",
											"updatequery: "
													+ updatequery);
									logInfo("insertDataInIntegrationTable",
											"sout: " + sout);
									if (String.valueOf(sout)
											.equalsIgnoreCase("1")) {
										iCallOrder = iCallOrder + 1;
									}
								}
							} else {
								updatequery = "update " + sTable
										+ " set CALL_ORDER='"
										+ iCallOrder
										+ "' where WI_NAME='"
										+ sWorkitemId + "'"
										+ "  and CALL_NAME='"
										+ sCallName + "'";
								sout = formObject
										.saveDataInDB(updatequery);
								iCallOrder = iCallOrder + 1;
								} 
							}
						}
					}
			} 
		     //end krishna
					else if (sActivityName.equalsIgnoreCase("CPD Checker")
							|| sActivityName
									.equalsIgnoreCase("Delivery_Checker")) {
						if (sCallType.equalsIgnoreCase("DEBITCARD_NEW")) {
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_NEW");
							sQuery = "SELECT REP_EMBOSS_NAME,REP_GROUP_TYPE,PROD_GROUP FROM DEBIT_CARD_REP WHERE "
									+ "WI_NAME ='"
									+ sWorkitemId
									+ "' AND REP_NEW_LINK='New' and instr(card_number,'_')=0 "
									+ "ORDER BY TO_NUMBER(CID)";
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_NEW sQuery: " + sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_NEW output2: " + output2);
							iNoOfCard = output2.size();
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_NEW iNoOfCard: " + iNoOfCard);
							if (iNoOfCard > 0) {
								// sAccTitle= output2.get(0).get(0);
								// String sGroup = output2.get(0).get(1);
								// sProdGroup = output2.get(0).get(2);
								// sTemp = sGroup;
								// String[] sEmbossName = sAccTitle.split(",");
								// sProduct = sProdGroup.split(",");
								for (int i = 0; i < iNoOfCard; i++) {
									sCallName = "DEBITCARD_NEW_" + (i + 1);
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
											+ "WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME='"
											+ sCallName
											+ "' and "
											+ "STATUS = 'Success' and source='DDE_Acc_Info_Chk'";
									List<List<String>> result = formObject
											.getDataFromDB(sQuery);
									iCount = Integer.parseInt(result.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = setAddDebitCardIssueInputXML(
												output2.get(i).get(0), output2
														.get(i).get(1), output2
														.get(i).get(2));
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") " + "VALUES ("
													+ sValues + ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										logInfo("insertDataInIntegrationTable","updatequery: DebitCard CPD Checker Else ");
										//iCallOrder = updateDebitCardOrder(iCallOrder);
										updatequery = "update " + sTable + " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "' "
												+ " and CALL_NAME='"
												+ sCallName + "'";
										logInfo("insertDataInIntegrationTable",
												"update query ELSE Condition: "
														+ updatequery);
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout update output: " + sout);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
						} else if (sCallType.equalsIgnoreCase("DEBITCARD_LINK")) {
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_LINK");
							sQuery = "SELECT REP_EXISTING_CARD_NO,PROD_GROUP FROM DEBIT_CARD_REP WHERE WI_NAME ='"
									+ sWorkitemId
									+ "'"
									+ " AND REP_NEW_LINK='Link' and instr(card_number,'_')=0 ORDER BY TO_NUMBER(CID)";
							output2 = formObject.getDataFromDB(sQuery);
							iNoOfCard = output2.size();
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_LINK sQuery: " + sQuery);
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_LINK output2: " + output2);
							logInfo("insertDataInIntegrationTable",
									"DEBITCARD_LINK iNoOfCard: " + iNoOfCard);
							if (iNoOfCard > 0) {
								// String sExistingCard = output2.get(0).get(0);
								// sProdGroup = output2.get(0).get(1);
								// String[] sCard = sExistingCard.split(",");
								// sProduct = sProdGroup.split(",");
								for (int i = 0; i < iNoOfCard; i++) {
									sCallName = "DEBITCARD_LINK_" + (i + 1);
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME='"
											+ sCallName
											+ "' and STATUS = 'Success' and source='DDE_Acc_Info_Chk'";
									List<List<String>> result = formObject
											.getDataFromDB(sQuery);
									iCount = Integer.parseInt(result.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getLinkDebitCardInputXML(
												output2.get(i).get(1), output2
														.get(i).get(0));
										logInfo("insertDataInIntegrationTable",
												"DEBITCARD_LINK sInputXML---"
														+ sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "'"
													+ ",'Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "'" + ",'"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") " + "VALUES ("
													+ sValues + ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
						}
						if (sCallType.equalsIgnoreCase("BASE24")) {
							logInfo("insertDataInIntegrationTable", "BASE24");
							String count_call = null;
							sQuery = "SELECT COUNT(CALL_NAME) AS COUNT_CALL FROM USR_0_INTEGRATION_CALLS WHERE call_name like "
									+ "'%DEBITCARD_NEW%' AND WI_NAME='"
									+ sWorkitemId
									+ "' and status='Success' and source='DDE_Acc_Info_Chk'";
							logInfo(" sQuery ", sQuery);
							output2 = formObject.getDataFromDB(sQuery);
							iNoOfCard = output2.size();
							logInfo("insertDataInIntegrationTable",
									"BASE24 sQuery: " + sQuery);
							logInfo("insertDataInIntegrationTable",
									"BASE24 output2: " + output2);
							logInfo("insertDataInIntegrationTable",
									"BASE24 iNoOfCard: " + iNoOfCard);
							if (iNoOfCard > 0) {
								int scount_call = Integer.parseInt(output2.get(
										0).get(0));
								logInfo("insertDataInIntegrationTable",
										"call_name is: "
												+ String.valueOf(scount_call));
								for (int i = 0; i < scount_call; i++) {
									sCallName = "BASE24_" + (i + 1);
									sQuery = "SELECT replace(response,'DEBIT CARD:','')RESPONSE FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='DEBITCARD_NEW_"
											+ (i + 1)
											+ "' and STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									String sdebitCard = output2.get(0).get(0);
									String sCard = "";
									if (sdebitCard.equalsIgnoreCase("")) {
										sCard = "#CARD_" + (i + 1) + "#";
										logInfo("insertDataInIntegrationTable",
												"BASE24 sCard: " + sCard);
									} else
										sCard = sdebitCard;
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='"
											+ sCallName
											+ "' and STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									logInfo("insertDataInIntegrationTable",
											"BASE24 iCount: " + iCount);
									if (iCount == 0) {
										sInputXML = getBase24InputXML(sCard);
										logInfo("insertDataInIntegrationTable",
												"--11--sInputXML-BASE24--"
														+ sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											logInfo("insertDataInIntegrationTable",
													"--11--sInputXML is not empty");
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}

										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "' "
												+ " and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
								logInfo("insertDataInIntegrationTable",
										"base24 call Inserted-------");
							}
						}
						if (sCallType.equalsIgnoreCase("FATCA_UPDATE")) {
							logInfo("insertDataInIntegrationTable",
									"Inside Call Type FATCA_UPDATE");
							for (int i = 0; i < iNoOfCustomer; i++) {
								String sName = formObject.getTableCellValue(
										ACC_RELATION, i, 1);
								String sRelation = formObject
										.getTableCellValue(ACC_RELATION, i, 7);
								sCallName = "FATCA_UPDATE_" + (i + 1) + "_"
										+ sName;
								int cust_no = i + 1;
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
										+ "WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME like 'FATCA_UPDATE_"
										+ cust_no
										+ "%' "
										+ "and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								if (iCount == 0) {
									sInputXML = getFATCAUpdateInputXML(
											sRelation, (i + 1));
									logInfo("insertDataInIntegrationTable",
											"sInputXML---" + sInputXML);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "','Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										updatequery = "insert into " + sTable
												+ " (" + sColumn + ") VALUES ("
												+ sValues + ")";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"updatequery: " + updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout: " + sout);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "' " + " and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									iCallOrder = iCallOrder + 1;
								}
							}
						}
						if (sCallType.equalsIgnoreCase("KYC_UPDATE")) {
							logInfo("insertDataInIntegrationTable",
									"Inside Call Type KYC_UPDATEE");
							for (int i = 0; i < iNoOfCustomer; i++) {
								String sName = formObject.getTableCellValue(
										ACC_RELATION, i, 1);
								sCallName = "KYC_UPDATE_" + (i + 1) + "_"
										+ sName;
								int cust_no = i + 1;
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
										+ "WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME like 'KYC_UPDATE_"
										+ cust_no
										+ "%' "
										+ "and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								if (iCount == 0) {
									sInputXML = getKYCUpdateInputXML((i + 1));
									logInfo("insertDataInIntegrationTable",
											"sInputXML---" + sInputXML);
									sRequestDate = getReqDate();
									if (!sInputXML.equalsIgnoreCase("")) {
										sValues = "'"
												+ sWorkitemId
												+ "','','"
												+ sUserName
												+ "','"
												+ sCallName
												+ "','"
												+ iCallOrder
												+ "','0','"
												+ sInputXML
												+ "','Pending','"
												+ sStatus
												+ "',to_date('"
												+ sRequestDate
												+ "','dd/MM/yyyy HH24:mi:ss'),'"
												+ (i + 1) + "','"
												+ sActivityName + "'"
												+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
										updatequery = "insert into " + sTable
												+ "(" + sColumn + ") VALUES ("
												+ sValues + ")";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"updatequery: " + updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout: " + sout);
										if (String.valueOf(sout)
												.equalsIgnoreCase("1")) {
											iCallOrder = iCallOrder + 1;
										}
									}
								} else {
									updatequery = "update " + sTable
											+ " set CALL_ORDER='" + iCallOrder
											+ "' where WI_NAME='" + sWorkitemId
											+ "'" + "  and CALL_NAME='"
											+ sCallName + "'";
									sout = formObject.saveDataInDB(updatequery);
									logInfo("insertDataInIntegrationTable",
											"else updatequery: " + updatequery);
									logInfo("insertDataInIntegrationTable",
											"else sout: " + sout);
									iCallOrder = iCallOrder + 1;
								}
							}
						}
						if (sCallType.equalsIgnoreCase("EIDA_UPDATE")) {
							logInfo("insertDataInIntegrationTable",
									"Inside Call Type EIDA_UPDATE");
							for (int i = 0; i < iNoOfCustomer; i++) {
								// commented by Ayush for AO Release
								// if(formObject.getTableCellValue(ACC_RELATION,
								// i, 10).equalsIgnoreCase("EIDA")) {
								if (formObject.getTableCellValue(ACC_RELATION,
										i, 9).equalsIgnoreCase("EIDA")) {
									String sName = formObject
											.getTableCellValue(ACC_RELATION, i,
													1);
									sCallName = "EIDA_UPDATE_" + (i + 1) + "_"
											+ sName;
									int cust_no = i + 1;
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME like 'EIDA_UPDATE_"
											+ cust_no
											+ "%' and STATUS = 'Success'";
									logInfo("insertDataInIntegrationTable",
											"sQuery-----" + sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getEIDAUpdateInputXML((i + 1));
										logInfo("insertDataInIntegrationTable",
												"sInputXML---" + sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							}

						}
						if (!sRequestType
								.equalsIgnoreCase("Category Change Only")) {
							if (sCallType.equalsIgnoreCase("ACCOUNT_MODIFY")
									&& !formObject.getValue("SCAN_MODE")
											.toString()
											.equalsIgnoreCase("New WMS ID")) {
								sQuery = "SELECT PROD_CODE,ACC_NO,ACC_BRANCH,CURRENCY FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME="
										+ "'"
										+ sWorkitemId
										+ "' ORDER BY TO_NUMBER(CID)";
								output2 = formObject.getDataFromDB(sQuery);
								iNoOfProduct = output2.size();
								if (iNoOfProduct > 0) {
									// sProdCode = output2.get(0).get(0);
									// sTemp = sProdCode;
									// String[] sAccBranch =
									// output2.get(0).get(2).split(",");
									// String[] sCurrency=
									// output2.get(0).get(3).split(",");
									for (int i = 0; i < iNoOfProduct; i++) {
										sCallName = "ACCOUNT_MODIFY_"
												+ output2.get(i).get(0) + "_"
												+ (i + 1);
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME="
												+ "'"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and STATUS = 'Success'";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
										List<List<String>> result = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(result.get(0)
												.get(0));
										if (iCount == 0) {
											sInputXML = getModifyAccountInputXML(
													output2.get(i).get(0),
													output2.get(i).get(2),
													(i + 1), output2.get(i)
															.get(3));
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0',"
														+ "'"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ (i + 1) + "','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder + "' where "
													+ "WI_NAME='" + sWorkitemId
													+ "'" + "  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
									String sQuery2 = "select is_acc_title_update from "
											+ sExtTable
											+ " where wi_name='"
											+ sWorkitemId + "'";
									output2 = formObject.getDataFromDB(sQuery2);
									String acc_title_flag1 = output2.get(0)
											.get(0);
									if (acc_title_flag1
											.equalsIgnoreCase("TRUE")) {
										String sQ1 = "update "
												+ sExtTable
												+ " set is_acc_title_update='False' where wi_name='"
												+ sWorkitemId + "'";
										formObject.saveDataInDB(sQ1);
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("LEAD_GENERATION")) {
								sQuery = "SELECT IS_AUTO,IS_PERSONAL FROM "
										+ sExtTable + " WHERE WI_NAME='"
										+ sWorkitemId + "'";
								output2 = formObject.getDataFromDB(sQuery);
								String sAuto = output2.get(0).get(0);
								String sPersonal = output2.get(0).get(1);
								if (sAuto.equalsIgnoreCase("true")) {
									sCallName = "LEAD_GENERATION_AUTO";
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME='"
											+ sCallName
											+ "' and STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getLeadInputXML("Auto");
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + "' (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
								if (sPersonal.equalsIgnoreCase("true")) {
									sCallName = "LEAD_GENERATION_PERSONAL";
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME='"
											+ sCallName
											+ "' and STATUS = 'Success'";
									logInfo("insertDataInIntegrationTable",
											"sQuery-----" + sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getLeadInputXML("Personal");
										logInfo("insertDataInIntegrationTable",
												"sInputXML---" + sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0',"
													+ "'"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update '" + sTable
												+ "' set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
								logInfo("insertDataInIntegrationTable",
										"Lead generation call Inserted---");
							} else if (sCallType
									.equalsIgnoreCase("CUSTOMER_RELATION")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type CUSTOMER_RELATION");
								int sCustNo = Integer
										.parseInt(getPrimaryCustomerSNO());
								String sPrimaryRel = formObject
										.getTableCellValue(ACC_RELATION,
												sCustNo - 1, 1);
								String sBankRel = formObject.getTableCellValue(
										ACC_RELATION, sCustNo - 1, 7);
								sCustID = formObject.getTableCellValue(
										ACC_RELATION, sCustNo - 1, 2);
								logInfo("insertDataInIntegrationTable",
										"sCustID====" + sCustID);
								logInfo("insertDataInIntegrationTable",
										"sPrimaryRel====" + sPrimaryRel);
								if (sCustID.equalsIgnoreCase("")) {
									sCustID = "#CUST_" + sCustNo + "#";
								}
								for (int sNo = 1; sNo <= iNoOfCustomer; sNo++) {
									if (sNo != sCustNo) {
										sCallName = "CUSTOMER_RELATION_" + sNo;
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and STATUS = 'Success'";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getCustRelationInputXML(
													sCustID, sNo, sPrimaryRel,
													sBankRel);
											sRequestDate = getReqDate();
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "',"
														+ "'Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ sNo + "','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update '" + sTable
													+ "' set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId + "'"
													+ "  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType.equalsIgnoreCase("ADD_ETIHAD")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type ADD_ETIHAD");
								if (formObject.getValue("EXISTING_ETIHAD_CUST")
										.toString() != null) {
									if (formObject
											.getValue("EXISTING_ETIHAD_CUST")
											.toString().equalsIgnoreCase("No")) {
										sCallName = "ADD_ETIHAD";
										String sCustNo = getPrimaryCustomerSNO();
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS "
												+ "WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and "
												+ "STATUS = 'Success'";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getAddEtihadXML(
													sCustNo, "A");
											sRequestDate = getReqDate();
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update '" + sTable
													+ "' set CALL_ORDER='"
													+ iCallOrder + "' where "
													+ "WI_NAME='" + sWorkitemId
													+ "'" + "  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("UPDATE_ETIHAD")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type UPDATE_ETIHAD");
								if (formObject.getValue("EXISTING_ETIHAD_CUST")
										.toString() != null) {
									sQuery = "SELECT ETIHAD_UPDATE_REQ FROM "
											+ sExtTable + " WHERE WI_NAME ='"
											+ sWorkitemId + "'";
									output2 = formObject.getDataFromDB(sQuery);
									if (formObject
											.getValue("EXISTING_ETIHAD_CUST")
											.toString().equalsIgnoreCase("Yes")
											&& output2.get(0).get(0).toString()
													.equalsIgnoreCase("Yes")) {
										sCallName = "UPDATE_ETIHAD";
										String sCustNo = getPrimaryCustomerSNO();
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME"
												+ "='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and STATUS = 'Success'";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getAddEtihadXML(
													sCustNo, "M");
											sRequestDate = getReqDate();
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "',"
														+ "'"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn + ")"
														+ " VALUES (" + sValues
														+ ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId
													+ "'  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("ACCOUNT_SERVICE_CHARGE")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type ACCOUNT_SERVICE_CHARGE");
								for (int i = 0; i < iNoOfProduct; i++) {
									sTemp = sProdCode;
									logInfo("insertDataInIntegrationTable",
											"ACCOUNT_SERVICE_CHARGE sTemp: "
													+ sTemp);
									sCallName = "ACCOUNT_SERVICE_CHARGE_"
											+ sTemp + "_" + (i + 1);
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='"
											+ sCallName
											+ "' and STATUS = 'Success'";
									logInfo("insertDataInIntegrationTable",
											"sQuery-----" + sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getSCInputXML(sTemp, "A",
												(i + 1));
										logInfo("insertDataInIntegrationTable",
												"sInputXML---" + sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'"
													+ (i + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId
												+ "'  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("FUND_TRANSFER")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type FUND_TRANSFER");
								for (int i = 0; i < iNoOfProduct; i++) {
									sDebitAccNo = formObject.getTableCellValue(
											PRODUCT_QUEUE, i, 9);
									logInfo("insertDataInIntegrationTable",
											"sDebitAccNo=" + sDebitAccNo);
									if (!sDebitAccNo.equalsIgnoreCase("")) {
										sCallName = "FUND_TRANSFER_" + (i + 1);
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and STATUS = 'Success'";
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getFTInputXML((i + 1),
													sDebitAccNo);
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ (i + 1) + "','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId
													+ "'  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType.equalsIgnoreCase("SI_UPDATE")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type SI_UPDATE");
								int iSICount = getGridCount("STANDING_INSTR");
								logInfo("insertDataInIntegrationTable",
										"iSICount---" + iSICount);
								for (int i = 0; i < iSICount; i++) {
									sCallName = "SI_UPDATE_" + (i + 1);
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS "
											+ "WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='"
											+ sCallName
											+ "' and " + "STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getSIInputXML(i + 1);
										sRequestDate = getReqDate();
										logInfo("insertDataInIntegrationTable",
												"sInputXML---" + sInputXML);
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder + "' where "
												+ "WI_NAME='" + sWorkitemId
												+ "'  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("DEBITCARD_NEW")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type DEBITCARD_NEW");
								logInfo("insertDataInIntegrationTable",
										"2nd existing debit card new");
								sQuery = "SELECT REP_EMBOSS_NAME,REP_GROUP_TYPE,PROD_GROUP FROM DEBIT_CARD_REP "
										+ "WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND REP_NEW_LINK='New'  ORDER BY "
										+ "TO_NUMBER(CID)";
								output2 = formObject.getDataFromDB(sQuery);
								iNoOfCard = output2.size();
								if (iNoOfCard > 0) {
									sAccTitle = output2.get(0).get(0);
									// String sGroup = output2.get(0).get(1);
									// sProdGroup = output2.get(0).get(2);
									// sTemp = sGroup;
									// String[] sEmbossName =
									// sAccTitle.split(",");
									// sProduct = sProdGroup.split(",");
									for (int i = 0; i < iNoOfCard; i++) {
										sCallName = "DEBITCARD_NEW_" + (i + 1);
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
												+ "WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and "
												+ "STATUS = 'Success' and source!='DDE_Acc_Info_Chk'";
										List<List<String>> result = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(result.get(0)
												.get(0));
										if (iCount == 0) {
											sInputXML = getNewDebitCardInputXML(
													output2.get(i).get(0),
													output2.get(i).get(1),
													output2.get(i).get(2));
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ (i + 1) + "','"
														+ sActivityName + "'"
														+ ",'"+NOT_APPLICABLE_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder + "' where "
													+ "WI_NAME='" + sWorkitemId
													+ "'  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("DEBITCARD_LINK")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type DEBITCARD_LINK");
								sQuery = "SELECT REP_EXISTING_CARD_NO,PROD_GROUP FROM DEBIT_CARD_REP WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND REP_NEW_LINK='Link' ORDER BY TO_NUMBER(CID)";
								logInfo("insertDataInIntegrationTable",
										"sQuery-----" + sQuery);
								output2 = formObject.getDataFromDB(sQuery);
								iNoOfCard = output2.size();
								if (iNoOfCard > 0) {
									// String sExistingCard =
									// output2.get(0).get(0);
									// sProdGroup = output2.get(0).get(1);
									// String[] sCard =
									// sExistingCard.split(",");
									// sProduct = sProdGroup.split(",");
									for (int i = 0; i < iNoOfCard; i++) {
										sCallName = "DEBITCARD_LINK_" + (i + 1);
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME='"
												+ sCallName
												+ "' and STATUS = 'Success' and source!='DDE_Acc_Info_Chk'";
										List<List<String>> result = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(result.get(0)
												.get(0));
										if (iCount == 0) {
											sInputXML = getLinkDebitCardInputXML(
													output2.get(i).get(1),
													output2.get(i).get(0));
											logInfo("insertDataInIntegrationTable",
													"sInputXML---" + sInputXML);
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ (i + 1) + "','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId
													+ "'  and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("SMS_REGISTRATION")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type SMS_REGISTRATION");
								sCallName = "SMS_REGISTRATION";
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and CALL_NAME='"
										+ sCallName
										+ "' and STATUS = 'Success'";
								output2 = formObject.getDataFromDB(sQuery);
								iCount = (output2 != null && output2.size() > 0) ? Integer
										.parseInt(output2.get(0).get(0)
												.toString()) : 0;
								sCustID = getPrimaryCustomerID();
								String sNo = getPrimaryCustomerSNO();
								sQuery = "SELECT FINAL_MOBILE_NO,SMS_FLAG FROM USR_0_CUST_TXN WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and CUST_SNO = '"
										+ sNo + "'";
								logInfo("insertDataInIntegrationTable",
										"sQuery-----" + sQuery);
								output2 = formObject.getDataFromDB(sQuery);
								String sMobileNo = (output2 != null && output2
										.size() > 0) ? output2.get(0).get(0)
										.toString() : "";
								// if(null != output2.get(0).get(1) &&
								// !output2.get(0).get(1).isEmpty()
								if (!output2.get(0).get(1)
										.equalsIgnoreCase("Yes")) { // above
																	// line
																	// commented
																	// as SMS
																	// not going
																	// -
																	// 14042022
																	// Gautam
									if (iCount == 0) {
										sInputXML = getSMSInputXML(sCustID,
												sMobileNo);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0',"
													+ "'"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'1','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId
												+ "'  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							} else if (sCallType
									.equalsIgnoreCase("ESUBSCRIPTION")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type ESUBSCRIPTION");
								logInfo("insertDataInIntegrationTable",
										"In ESUBSCRIPTION");
								String sEmail = null;
								String sEstatement = null;
								String sName = null;
								for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
									sCustomerID = formObject.getTableCellValue(
											ACC_RELATION, sNo, 2);
									if (sCustomerID.equalsIgnoreCase("")) {
										sQuery = "SELECT FINAL_EMAIL,ESTATEMENT_FLAG FROM USR_0_CUST_TXN WHERE "
												+ "WI_NAME ='"
												+ sWorkitemId
												+ "' AND CUST_SNO = '"
												+ (sNo + 1) + "'";
										sCustomerID = "#CUST_" + (sNo + 1)
												+ "#";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
									} else {
										sQuery = "SELECT FINAL_EMAIL,ESTATEMENT_FLAG FROM USR_0_CUST_TXN WHERE "
												+ "WI_NAME ='"
												+ sWorkitemId
												+ "' AND CUST_ID = '"
												+ sCustomerID + "'";
										logInfo("insertDataInIntegrationTable",
												"sQuery-----" + sQuery);
									}
									output2 = formObject.getDataFromDB(sQuery);
									sEmail = (output2 != null && output2.size() > 0) ? output2
											.get(0).get(0).toString()
											: "";
									sEstatement = (output2 != null && output2
											.size() > 0) ? output2.get(0)
											.get(1).toString() : "";
									if (null != sEmail
											&& !sEmail.equalsIgnoreCase("")
											&& !sEstatement
													.equalsIgnoreCase("Yes")) {
										sName = formObject.getTableCellValue(
												ACC_RELATION, sNo, 1);
										sCallName = "ESUBSCRIPTION_"
												+ (sNo + 1) + "_" + sName;
										int cust_no = sNo + 1;
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS"
												+ " WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME like 'ESUBSCRIPTION_"
												+ cust_no
												+ "%'"
												+ " and STATUS = 'Success'";
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getEstatementInputXML(
													(sNo + 1), sCustomerID);
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "',"
														+ "'"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "',"
														+ "'Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),"
														+ "'" + (sNo + 1)
														+ "','" + sActivityName
														+ "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId + "' "
													+ " and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							}
							if (sCallType
									.equalsIgnoreCase("CUSTOMER_MEMO_UPDATE")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type CUSTOMER_MEMO_UPDATE");
								sQuery = "SELECT SNO,VISA_STATUS FROM ACC_RELATION_REPEATER A, USR_0_CUST_TXN B "
										+ "WHERE A.WI_NAME =B.WI_NAME AND A.BANK_RELATION ='New' AND "
										+ "B.VISA_STATUS ='Under Processing' AND A.SNO=B.CUST_SNO AND "
										+ "A.WI_NAME ='"
										+ sWorkitemId
										+ "' union all SELECT SNO,VISA_STATUS FROM "
										+ "ACC_RELATION_REPEATER C, USR_0_CUST_TXN B WHERE C.WI_NAME =B.WI_NAME AND "
										+ "B.VISA_STATUS ='Residency Visa' AND B.res_eida='Yes' AND C.SNO=B.CUST_SNO "
										+ "AND C.WI_NAME ='"
										+ sWorkitemId
										+ "'";
								output2 = formObject.getDataFromDB(sQuery);
								if (output2.size() > 0
										&& null != output2.get(0)
										&& !output2.get(0).get(0)
												.equalsIgnoreCase("")) {
									// String[] sCustNo =
									// output2.get(0).get(0).split(",");
									// String[] sVisaStatus =
									// output2.get(0).get(1).split(",");
									String sName = null;
									for (int sNo = 0; sNo < output2.size(); sNo++) {
										sName = formObject.getTableCellValue(
												ACC_RELATION, sNo, 1);
										sCustID = formObject.getTableCellValue(
												ACC_RELATION, sNo, 2);
										sCallName = "CUSTOMER_MEMO_UPDATE_"
												+ (sNo + 1) + "_" + sName;
										int cust_no = sNo + 1;
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
												+ "WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME like 'CUSTOMER_MEMO_UPDATE_"
												+ cust_no
												+ "%' and STATUS = 'Success'";
										List<List<String>> result = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(result.get(0)
												.get(0));
										if (iCount == 0) {
											if (sCustID.equalsIgnoreCase("")) {
												sCustID = "#"
														+ "CUST_"
														+ output2.get(sNo).get(
																0) + "#";
											}
											sInputXML = getMemoInputXML(
													sCustID, "A", "C", output2
															.get(sNo).get(1));
											sRequestDate = getReqDate();
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','"
														+ (sNo + 1)
														+ "','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'"
														+ (sNo + 1) + "','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn
														+ ") VALUES ("
														+ sValues + ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder
													+ "' where WI_NAME='"
													+ sWorkitemId + "' "
													+ " and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							}
						}
						if (!sRequestType.equalsIgnoreCase("New Account")) {
							if (sCallType
									.equalsIgnoreCase("DEBITCARD_UPGRADE_DOWNGRADE")) {
								logInfo("insertDataInIntegrationTable",
										"Inside Call Type DEBITCARD_UPGRADE_DOWNGRADE");
								sQuery = "SELECT SUM(COUNT_WI) COUNT_WI FROM (SELECT COUNT(WI_NAME) AS COUNT_WI "
										+ "FROM USR_0_DEBITCARD_EXISTING WHERE WI_NAME='"
										+ sWorkitemId
										+ "' UNION "
										+ "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_DEBITCARD_EXISTING_CPD "
										+ "WHERE WI_NAME='"
										+ sWorkitemId
										+ "')";
								logInfo("insertDataInIntegrationTable",
										"sQuery-----" + sQuery);
								output2 = formObject.getDataFromDB(sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								if (iCount != 0) {
									sCallName = "DEBITCARD_UPGRADE_DOWNGRADE";
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS "
											+ "WHERE WI_NAME='"
											+ sWorkitemId
											+ "' and CALL_NAME='"
											+ sCallName
											+ "' and " + "STATUS = 'Success'";
									logInfo("insertDataInIntegrationTable",
											"sQuery-----" + sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount == 0) {
										sInputXML = getUpgradeDowngradeDCInputXML();
										logInfo("insertDataInIntegrationTable",
												"sInputXML---" + sInputXML);
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'1','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
						}
						if (sCallType.equalsIgnoreCase("ADD_CRS_DETAILS")
								&& (sRequestType
										.equalsIgnoreCase("New Account") || sRequestType
										.equalsIgnoreCase("New Account with Category Change"))) {
							logInfo("insertDataInIntegrationTable",
									"Inside Call Type ADD_CRS_DETAILS" + "");
							for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
								sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CRS_DETAILS WHERE WI_NAME='"
										+ sWorkitemId
										+ "' and acc_relation_sno='"
										+ (sNo + 1) + "'";
								logInfo("insertDataInIntegrationTable",
										"sQuery-----" + sQuery);
								output2 = formObject.getDataFromDB(sQuery);
								iCount = Integer
										.parseInt(output2.get(0).get(0));
								if (iCount > 0) {
									sCallName = "ADD_CRS_DETAILS_" + (sNo + 1);
									sQuery = "select cust_category_type as CUST_CAT  from usr_0_cust_txn a, "
											+ "usr_0_cust_cat b ,usr_0_cust_segment c where a.cust_seg= c.cust_segment "
											+ "and b.cust_category_code=c.unique_id and  WI_NAME='"
											+ sWorkitemId
											+ "' "
											+ "and cust_sno='"
											+ (sNo + 1)
											+ "'";
									logInfo("insertDataInIntegrationTable",
											"sQuery-----" + sQuery);
									output2 = formObject.getDataFromDB(sQuery);
									if (output2.size() > 0) {
										String custcat = "";
										if (null != output2.get(0)) {
											custcat = output2.get(0).get(0);
										}
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
												+ "WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME like 'ADD_CRS_DETAILS_"
												+ (sNo + 1)
												+ "%' and STATUS = 'Success'";
										output2 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(output2
												.get(0).get(0));
										sRequestDate = getReqDate();
										if (iCount == 0) {
											sInputXML = getAddCRSInputXML(
													sNo + 1, custcat);
											if (!sInputXML.equalsIgnoreCase("")) {
												sValues = "'"
														+ sWorkitemId
														+ "','','"
														+ sUserName
														+ "','"
														+ sCallName
														+ "','"
														+ iCallOrder
														+ "','0','"
														+ sInputXML.replace(
																"'", "''")
														+ "','Pending','"
														+ sStatus
														+ "',to_date('"
														+ sRequestDate
														+ "','dd/MM/yyyy HH24:mi:ss'),'1','"
														+ sActivityName + "'"
														+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
												updatequery = "insert into "
														+ sTable + " ("
														+ sColumn + ") "
														+ " VALUES (" + sValues
														+ ")";
												sout = formObject
														.saveDataInDB(updatequery);
												logInfo("insertDataInIntegrationTable",
														"updatequery: "
																+ updatequery);
												logInfo("insertDataInIntegrationTable",
														"sout: " + sout);
												if (String.valueOf(sout)
														.equalsIgnoreCase("1")) {
													iCallOrder = iCallOrder + 1;
												}
											}
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder + "' where "
													+ "WI_NAME='" + sWorkitemId
													+ "' " + " and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"else updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"else sout: " + sout);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							}
						}
						if (sCallType.equalsIgnoreCase("ADD_CRS_DETAILS")
								&& (sRequestType
										.equalsIgnoreCase("Category Change Only")|| sRequestType
										.equalsIgnoreCase("Upgrade"))) {
							logInfo("insertDataInIntegrationTable",
									"Inside Call Type ADD_CRS_DETAILS"
											+ sRequestType);
							String custSegment = this.formObject.getValue(
									"NEW_CUST_SEGMENT").toString();
							logInfo("insertDataInIntegrationTable",
									"Category change for " + custSegment);
							if (true) {
								for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_CRS_DETAILS WHERE WI_NAME='"
											+ sWorkitemId
											+ "' "
											+ "and acc_relation_sno='"
											+ (sNo + 1) + "'";
									output2 = formObject.getDataFromDB(sQuery);
									iCount = Integer.parseInt(output2.get(0)
											.get(0));
									if (iCount > 0) {
										sCallName = "ADD_CRS_DETAILS_"
												+ (sNo + 1);
										sQuery = "select cust_category_type as CUST_CAT  from usr_0_cust_txn a, "
												+ "usr_0_cust_cat b ,usr_0_cust_segment c where "
												+ "a.cust_seg= c.cust_segment and b.cust_category_code=c.unique_id "
												+ "and  WI_NAME='"
												+ sWorkitemId
												+ "' and cust_sno='"
												+ (sNo + 1) + "'";
										logInfo("insertDataInIntegrationTable",
												"ADD_CRS_DETAILS sQuery-----"
														+ sQuery);
										List<List<String>> result = formObject
												.getDataFromDB(sQuery);
										String custcat = "";
										if (result.size() > 0) {
											custcat = result.get(0).get(0);
										}
										sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS "
												+ "WHERE WI_NAME='"
												+ sWorkitemId
												+ "' and CALL_NAME like "
												+ "'ADD_CRS_DETAILS_"
												+ (sNo + 1)
												+ "%' and STATUS = 'Success'";
										List<List<String>> result1 = formObject
												.getDataFromDB(sQuery);
										iCount = Integer.parseInt(result1
												.get(0).get(0));
										if (iCount == 0) {
											sInputXML = getAddCRSInputXML(
													sNo + 1, custcat);
											sValues = "'"
													+ sWorkitemId
													+ "','','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0','"
													+ sInputXML.replace("'",
															"''")
													+ "',"
													+ "'Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),'1','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											updatequery = "insert into "
													+ sTable + " (" + sColumn
													+ ") VALUES (" + sValues
													+ ")";
											sout = formObject
													.saveDataInDB(updatequery);
											logInfo("insertDataInIntegrationTable",
													"updatequery: "
															+ updatequery);
											logInfo("insertDataInIntegrationTable",
													"sout: " + sout);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
											logInfo("insertDataInIntegrationTable",
													"ADD_CRS_DETAILS sInputXML: "
															+ sInputXML);
										} else {
											updatequery = "update " + sTable
													+ " set CALL_ORDER='"
													+ iCallOrder + "' where "
													+ "WI_NAME='" + sWorkitemId
													+ "' and CALL_NAME='"
													+ sCallName + "'";
											sout = formObject
													.saveDataInDB(updatequery);
											iCallOrder = iCallOrder + 1;
										}
									}
								}
							}
						}
						if (sActivityName.equalsIgnoreCase("CPD Checker")
								&& sCallType.equalsIgnoreCase("FETCH_FAMILY")) {
							String familyStatus = checkFamilyStatus();
							// familyStatus = "N";//FB SUPPRESSED
							logInfo("insertDataInIntegrationTable",
									" if FETCH_FAMILY familyStatus: "
											+ familyStatus);
							if (familyStatus.equalsIgnoreCase("Y")) {
								for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
									String sName = formObject
											.getTableCellValue(ACC_RELATION,
													sNo, 1);
									sCallName = "FETCH_FAMILY_" + (sNo + 1)
											+ "_" + sName;
									int cust_no = sNo + 1;
									start_Time1 = System.currentTimeMillis();
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME like 'FETCH_FAMILY_"
											+ cust_no
											+ "%' and STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									end_Time = System.currentTimeMillis();
									diff = start_Time1 - end_Time;
									iCount = (output2 != null && output2.size() > 0) ? Integer
											.parseInt(output2.get(0).get(0)
													.toString()) : 0;
									if (iCount == 0) {
										/*
										 * sInputXML=
										 * getECBValidationRequestXml(sNo+1,
										 * formObject
										 * .getTableCellValue(ACC_RELATION, sNo
										 * , 7), iNoOfCustomer);
										 */
										sInputXML = getFetchFamilyRequestXml("abc");
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','"
													+ (sNo + 1)
													+ "','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0',"
													+ "'"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),"
													+ "'" + (sNo + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											sout = insertDataIntoDB(
													"USR_0_INTEGRATION_CALLS",
													sColumn, sValues);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"updatequery1" + updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout1" + sout);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
							logInfo("insertDataInIntegrationTable",
									"outside FETCH_FAMILY");

						}
						if (sActivityName.equalsIgnoreCase("CPD Checker")
								&& sCallType
										.equalsIgnoreCase("MAINTAIN_FAMILY")) {
							String familyStatus = checkFamilyStatus();
							// familyStatus = "N";//FB SUPPRESSED
							logInfo("insertDataInIntegrationTable",
									" if MAINTAIN_FAMILY familyStatus: "
											+ familyStatus);
							if (familyStatus.equalsIgnoreCase("Y")) {
								logInfo("insertDataInIntegrationTable",
										" if MAINTAIN_FAMILY");
								for (int sNo = 0; sNo < iNoOfCustomer; sNo++) {
									String sName = formObject
											.getTableCellValue(ACC_RELATION,
													sNo, 1);
									sCallName = "MAINTAIN_FAMILY_" + (sNo + 1)
											+ "_" + sName;
									int cust_no = sNo + 1;
									start_Time1 = System.currentTimeMillis();
									sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE WI_NAME='"
											+ sWorkitemId
											+ "'"
											+ " and CALL_NAME like 'MAINTAIN_FAMILY_"
											+ cust_no
											+ "%' and STATUS = 'Success'";
									output2 = formObject.getDataFromDB(sQuery);
									end_Time = System.currentTimeMillis();
									diff = start_Time1 - end_Time;
									iCount = (output2 != null && output2.size() > 0) ? Integer
											.parseInt(output2.get(0).get(0)
													.toString()) : 0;
									if (iCount == 0) {
										sInputXML = getMaintainFamilyRequestXml();
										sRequestDate = getReqDate();
										if (!sInputXML.equalsIgnoreCase("")) {
											sValues = "'"
													+ sWorkitemId
													+ "','"
													+ (sNo + 1)
													+ "','"
													+ sUserName
													+ "','"
													+ sCallName
													+ "','"
													+ iCallOrder
													+ "','0',"
													+ "'"
													+ sInputXML
													+ "','Pending','"
													+ sStatus
													+ "',to_date('"
													+ sRequestDate
													+ "','dd/MM/yyyy HH24:mi:ss'),"
													+ "'" + (sNo + 1) + "','"
													+ sActivityName + "'"
													+ ",'"+POST_FULFILLMENT+"'";// NEW VALUE ADDED FOR FULFILLMENT
											sout = insertDataIntoDB(
													"USR_0_INTEGRATION_CALLS",
													sColumn, sValues);
											if (String.valueOf(sout)
													.equalsIgnoreCase("1")) {
												iCallOrder = iCallOrder + 1;
											}
										}
									} else {
										updatequery = "update " + sTable
												+ " set CALL_ORDER='"
												+ iCallOrder
												+ "' where WI_NAME='"
												+ sWorkitemId + "'"
												+ "  and CALL_NAME='"
												+ sCallName + "'";
										sout = formObject
												.saveDataInDB(updatequery);
										logInfo("insertDataInIntegrationTable",
												"updatequery1" + updatequery);
										logInfo("insertDataInIntegrationTable",
												"sout1" + sout);
										iCallOrder = iCallOrder + 1;
									}
								}
							}
							logInfo("insertDataInIntegrationTable",
									"outside MAINTAIN_FAMILY");
						}
					}
				}
			}
		} catch (Exception e) {
			logError("insertDataInIntegrationTable", e);
			sendMessageValuesList(
					"",
					"There is some Technical Error ,Please contact the system administrator before proceeding.");
			String sWsName = formObject.getValue("CURR_WS_NAME").toString();
			String sTableName = "USR_0_CALLS_INSERT_FAILURE";
			String sCallColumn = "WI_NAME,ENTRYDATETIME,WS_NAME,ERROR_MESSAGE";
			String sCallValue = "'" + sWorkitemId + "',sysdate,'" + sWsName
					+ "','" + e.getMessage() + "'";
			logInfo("insertDataInIntegrationTable Exception", "sWsName: "
					+ sWsName);
			logInfo("insertDataInIntegrationTable Exception", "sCallValue: "
					+ sCallValue);
			String resAPInsert = "insert into USR_0_CALLS_INSERT_FAILURE (WI_NAME,ENTRYDATETIME,WS_NAME,ERROR_MESSAGE) "
					+ "values ('" + sCallValue + "')";
			logInfo("insertDataInIntegrationTable Exception", "resAPInsert: "
					+ resAPInsert);
			int sout = formObject.saveDataInDB(resAPInsert);
			logInfo("insertDataInIntegrationTable Exception",
					"sout: " + String.valueOf(sout));
			if (resAPInsert.trim().equalsIgnoreCase("")
					|| resAPInsert.trim().equalsIgnoreCase("null")
					|| !String.valueOf(sout).equalsIgnoreCase("1")) {
				logInfo("insertDataInIntegrationTable Exception",
						" into table USR_0_CALLS_INSERT_FAILURE failed....");
			}
			logInfo("insertDataInIntegrationTable Exception",
					"USR_0_CALLS_INSERT_FAILURE output: " + resAPInsert);
		}
		logInfo("Integration Time:",
				String.valueOf((System.currentTimeMillis() - start_Time1)));
		return sFinalStatus;
	}

	public String getCheqBookHandoffRequestXml(int sNo) {
		logInfo("getCheqBookHandoffRequestXml", "CHEQUEBOOK-HANDOFF");
		String inputXml = "";
		try {
			logInfo("getCheqBookHandoffRequestXml", "Inside sNo: " + sNo);
			inputXml = "<?xml version=\"1.0\"?>\n" + "<APWebService_Input>\n"
					+ "<Option>WebService</Option>\n"
					+ "<Calltype>CHQBOOK_HANDOFF</Calltype>\n" + "<WIName>"
					+ sWorkitemId + "</WIName>\n" + "<WMSID>"
					+ formObject.getValue("WMS_ID") + "</WMSID>\n" + "<AOType>"
					+ senderId + "</AOType>\n" + "<SENDERID>" + source
					+ "</SENDERID>\n" + "<Workstep>" + sActivityName
					+ "</Workstep>\n" + "<NoOfCust>" + sNo + "</NoOfCust>\n"
					+ "<PerformValidation>"
					+ formObject.getValue("P_ECB_CHQ_VALIDATION")
					+ "</PerformValidation>\n" + "</APWebService_Input>";
			logInfo("getCheqBookHandoffRequestXml",
					"getCheqBookHandoffRequestXml created" + inputXml);
		} catch (Exception e) {
			logError("Exception in  getCheqBookHandoffRequestXml", e);
		}
		return inputXml;
	}

	public String getECBExclusionRequestXml(int sNo, String CID,
			String accRelation, int iNoOfCustomer) {
		logInfo("getCheqBookHandoffRequestXml", "Inside sNo" + sNo);
		logInfo("getCheqBookHandoffRequestXml", "Inside CID" + CID);
		logInfo("getCheqBookHandoffRequestXml", "Inside accRelation"
				+ accRelation);
		logInfo("getCheqBookHandoffRequestXml", "Inside iNoOfCustomer"
				+ iNoOfCustomer);
		StringBuffer inputXML = new StringBuffer();
		try {
			String sChequeBook = "N";
			int iRows = getGridCount(PRODUCT_QUEUE);
			for (int i = 0; i < iRows; i++) {
				/*
				 * String sProdCode =
				 * formObject.getTableCellValue(PRODUCT_QUEUE, i , 1); String
				 * query1 =
				 * "SELECT CHEQUE_BOOK_FAC FROM USR_0_PRODUCT_MASTER WHERE PRODUCT_CODE='"
				 * +sProdCode+"'";
				 * logInfo("getECBExclusionRequestXml","query-----"+query1);
				 * List<List<String>> output1 =
				 * formObject.getDataFromDB(query1); String sChequeBookFac =
				 * (output1 != null && output1.size() > 0) ?
				 * output1.get(0).get(0).toString() : "";
				 * if(sChequeBookFac.equalsIgnoreCase("Y")) { sChequeBook="Y";
				 * break; }
				 */
				logInfo("getCheqBookHandoffRequestXml",
						"index "
								+ i
								+ ", prod code: "
								+ formObject.getTableCellValue(PRODUCT_QUEUE,
										i, 1)
								+ ", chqbk flag: "
								+ formObject.getTableCellValue(PRODUCT_QUEUE,
										i, 6));
				if (formObject.getTableCellValue(PRODUCT_QUEUE, i, 6)
						.equalsIgnoreCase("Yes")) {
					sChequeBook = "Y";
					break;
				}
			}
			logInfo("getECBExclusionRequestXml",
					"Account with Chequebook facility :: " + sChequeBook);
			String query = "SELECT UNIQUE_CODE FROM USR_0_OWNERSHIP WHERE OWNERSHIP='"
					+ formObject.getValue("ACC_OWN_TYPE") + "'";
			logInfo("getECBExclusionRequestXml", "query-----" + query);
			List<List<String>> output = formObject.getDataFromDB(query);
			String ownership = (output != null && output.size() > 0) ? output
					.get(0).get(0).toString() : "";
			query = "SELECT FINAL_EIDA_NO, VISA.UNIQUE_ID AS VISA_STATUS, PASS.UNIQUE_ID AS PASS_CODE, PASS_TYPE,"
					+ "COUNTRY_CODE AS NATIONALITY FROM USR_0_CUST_TXN TXN "
					+ "JOIN USR_0_VISA_STATUS VISA ON VISA.VISA_STATUS=TXN.VISA_STATUS  "
					+ "JOIN USR_0_COUNTRY_MAST COUNTRY ON TXN.FINAL_NATIONALITY=COUNTRY.COUNTRY "
					+ "JOIN USR_0_PASSPORT_TYPE PASS ON PASS.PASSPORT_TYPE=TXN.PASS_TYPE "
					+ "WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and cust_sno='"
					+ sNo + "'";
			// JOIN USR_0_PASSPORT_TYPE PASS ON PASS.PASSPORT_TYPE=TXN.PASS_TYPE
			logInfo("getECBExclusionRequestXml", "query-----" + query);
			output = formObject.getDataFromDB(query);
			logInfo("getECBExclusionRequestXml",
					"output-----getECBExclusionRequestXml" + output);
			String eidaNo = "";
			String visaStatus = "";
			String passType = ""; // output.get(0).get(2);
			String passCode = "";
			String nationality = "";
			if (output != null && output.size() > 0) {
				eidaNo = output.get(0).get(0);
				visaStatus = output.get(0).get(1);
				// passType= "1" ; //output.get(0).get(2);
				passType = output.get(0).get(3);
				passCode = output.get(0).get(2);
				nationality = output.get(0).get(4);
			}
			String performChqValidation = "";
			if (formObject.getValue("P_ECB_CHQ_VALIDATION").toString()
					.equalsIgnoreCase("true")) {
				performChqValidation = "Y";
			} else {
				performChqValidation = "N";
			}

			logInfo("getECBExclusionRequestXml", "eidaNo-----" + eidaNo);
			if (eidaNo != null && !eidaNo.equals("")) {
				eidaNo = "Y";
			} else {
				eidaNo = "N";
			}
			try {
				CID = String.valueOf(Integer.parseInt(CID));
			} catch (Exception e) {
				logError("getECBExclusionRequestXml ", e);
			}
			logInfo("getECBExclusionRequestXml",
					"setting getECBExclusionRequestXml");
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>WBG_BRMS_RULES_RESPONSE</InnerCallType>")
					.append("\n")
					.append("<WIName>" + sWorkitemId + "</WIName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<WMSID>" + formObject.getValue("WMS_ID")
							+ "</WMSID>")
					.append("\n")
					.append("<AOType>" + senderId + "</AOType>")
					.append("\n")
					.append("<SENDERID>" + source + "</SENDERID>")
					.append("\n")
					.append("<passType>" + passType + "</passType>")
					.append("\n")
					.append("<CID>" + CID + "</CID>")
					.append("\n")
					.append("<AccRelation>" + accRelation + "</AccRelation>")
					.append("\n")
					.append("<PerformValidation>"
							+ formObject.getValue("P_ECB_CHQ_VALIDATION")
									.toString() + "</PerformValidation>")
					.append("\n")
					.append("<PerformValidationReason>"
							+ formObject.getValue("P_ECB_REASON").toString()
							+ "</PerformValidationReason>")
					.append("\n")
					.append("<REF_NO>#REF_NO#</REF_NO>")
					.append("\n")
					.append("<ruleFlowGroup>DSA-Sales</ruleFlowGroup>")
					.append("\n")
					.append("<requestChannelName>REQCH</requestChannelName>")
					.append("\n")
					.append("<Eligibility> <PAYLOAD type=\"CHECK_BOOK_ISSUANCE\">")
					.append("\n")
					.append("<Ecb_Exclusion>")
					.append("\n")
					.append("<process>AO</process>")
					.append("\n")
					.append("<performValidationFlag>" + performChqValidation
							+ "</performValidationFlag>")
					.append("\n")
					.append("<accountWithChequeBookFacility>" + sChequeBook
							+ "</accountWithChequeBookFacility>")
					.append("\n")
					.append("<eid>" + eidaNo + "</eid>")
					.append("\n")
					.append("<tradeLicense></tradeLicense>")
					.append("\n")
					.append("<visaStatus>" + visaStatus + "</visaStatus>")
					.append("\n")
					.append("<passportType>" + passCode + "</passportType>")
					.append("\n")
					.append("<nationality>" + nationality + "</nationality>")
					.append("\n")
					.append("<accountOwnership>" + ownership
							+ "</accountOwnership>").append("\n")
					.append("</Ecb_Exclusion> </PAYLOAD> </Eligibility>")
					.append("\n")
					.append("<NoOfCust>" + iNoOfCustomer + "</NoOfCust>")
					.append("\n")
					.append("<UserName>" + sUserName + "</UserName>")
					.append("\n").append("</APWebService_Input>");

			logInfo("getECBExclusionRequestXml",
					" getECBExclusionRequestXml created ===> "
							+ inputXML.toString());
		} catch (Exception e) {
			logInfo("getECBExclusionRequestXml",
					"Exception in getECBExclusionRequestXml");
			logError("Exception in getECBExclusionRequestXml", e);
		}
		logInfo("getECBExclusionRequestXml", "returning inputxml");
		return inputXML.toString();
	}

	public String getECBValidationRequestXml(int sNo, String bankRelation,
			int iNoOfCustomer) {
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestXml sNo" + sNo);
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestXml bankRelation" + bankRelation);
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestXml iNoOfCustomer"
						+ iNoOfCustomer);
		StringBuffer inputXML = new StringBuffer();
		try {
			String query = "SELECT FINAL_EIDA_NO,COUNTRY_CODE AS NATIONALITY,TO_CHAR(FINAL_DOB,'ddMMyyyy') AS DOB,"
					+ "FINAL_FULL_NAME,GENDER.UNIQUE_CODE AS GENDER,FINAL_PASS_NO,TO_CHAR(FINAL_PASS_EXP_DATE,"
					+ "'dd/MM/yyyy') AS PASS_EXP_DATE,FINAL_MOBILE_NO FROM USR_0_CUST_TXN TXN JOIN USR_0_GENDER "
					+ "GENDER ON TXN.FINAL_GENDER=GENDER.GENDER JOIN USR_0_COUNTRY_MAST COUNTRY ON "
					+ "TXN.FINAL_NATIONALITY=COUNTRY.COUNTRY WHERE WI_NAME='"
					+ sWorkitemId + "' and cust_sno='" + sNo + "'";
			logInfo("getECBValidationRequestXml", "query-----" + query);
			List<List<String>> output = formObject.getDataFromDB(query);
			String eidaNo = "";
			String nationality = "";
			String dob = "";
			String fullName = "";
			String gender = "";
			String passNo = "";
			String passExpDate = "";
			String mobileNo = "";
			if (output != null && output.size() > 0) {
				eidaNo = output.get(0).get(0);
				nationality = output.get(0).get(1);
				dob = output.get(0).get(2);
				fullName = output.get(0).get(3);
				gender = output.get(0).get(4);
				passNo = output.get(0).get(5);
				passExpDate = output.get(0).get(6);
				mobileNo = output.get(0).get(7);
			}
			logInfo("getECBValidationRequestXml",
					"setting getECBValidationRequestXml");
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>WBG_ECB_REPORT_DETAILS</InnerCallType>")
					.append("\n")
					.append("<WIName>" + sWorkitemId + "</WIName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<WMSID>" + formObject.getValue("WMS_ID")
							+ "</WMSID>")
					.append("\n")
					.append("<AOType>" + senderId + "</AOType>")
					.append("\n")
					.append("<SENDERID>" + source + "</SENDERID>")
					.append("\n")
					.append("<BankRelation>" + bankRelation + "</BankRelation>")
					.append("\n")
					.append("<PerformValidation>"
							+ formObject.getValue("P_ECB_CHQ_VALIDATION")
							+ "</PerformValidation>")
					.append("\n")
					.append("<REF_NO>#REF_NO#</REF_NO>")
					.append("\n")
					.append("<fetchECBReportDtlsReq>")
					.append("\n")
					.append("<Type>Individual</Type>")
					.append("\n")
					.append("<Channel>" + source + "</Channel>")
					.append("\n")
					.append("<ConsentFlag>" + consentFlag + "</ConsentFlag>")
					.append("\n")
					.append("<ContractType>" + contractType + "</ContractType>")
					.append("\n")
					.append("<EnquiryType>" + enquiryType + "</EnquiryType>")
					.append("\n")
					.append("<DOB>" + dob + "</DOB>")
					.append("\n")
					.append("<EmiratesId>" + eidaNo + "</EmiratesId>")
					.append("\n")
					.append("<FullName>" + fullName + "</FullName>")
					.append("\n")
					.append("<Nationality>" + nationality + "</Nationality>")
					.append("\n")
					.append("<Passport>" + passNo + "</Passport>")
					.append("\n")
					.append("<PassportExpiryDate>" + passExpDate
							+ "</PassportExpiryDate>")
					.append("\n")
					.append("<Gender>" + gender + "</Gender>")
					.append("\n")
					.append("<PrimaryMobileNo>" + mobileNo
							+ "</PrimaryMobileNo>")
					.append("\n")
					.append("<CreditLimit></CreditLimit>")
					.append("\n")
					.append("<ReferenceNumber>" + sWorkitemId
							+ "</ReferenceNumber>")
					.append("\n")
					.append("<ReportType>" + reportType + "</ReportType>")
					.append("\n")
					.append("<Role>" + role + "</Role>")
					.append("\n")
					.append("<UserID>" + userId + "</UserID>")
					.append("\n")
					.append("<LocalDBSearchReq>" + localDBSearchReq
							+ "</LocalDBSearchReq>").append("\n")
					.append("</fetchECBReportDtlsReq>").append("\n")
					.append("<NoOfCust>" + iNoOfCustomer + "</NoOfCust>")
					.append("\n")
					.append("<UserName>" + sUserName + "</UserName>")
					.append("\n").append("</APWebService_Input>");
			logInfo("getECBValidationRequestXml",
					" getECBValidationRequestXml created ===> "
							+ inputXML.toString());
		} catch (Exception e) {
			logError("Exception in getECBExclusionRequestXml", e);
		}
		return inputXML.toString();
	}

	public String getBRMSEligibilityRequestXml(int sNo, int iNoOfCustomer,
			String bankRelation) {
		logInfo("getBRMSEligibilityRequestXml",
				"inside getBRMSEligibilityRequestXml sNo" + sNo);
		logInfo("getBRMSEligibilityRequestXml",
				"inside getBRMSEligibilityRequestXml bankRelation"
						+ bankRelation);
		logInfo("getBRMSEligibilityRequestXml",
				"inside getBRMSEligibilityRequestXml iNoOfCustomer"
						+ iNoOfCustomer);
		StringBuffer inputXML = new StringBuffer();
		try {
			logInfo("getBRMSEligibilityRequestXml",
					"setting getBRMSEligibilityRequestXml");
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>WBG_BRMS_RULES_RESPONSE</InnerCallType>")
					.append("\n")
					.append("<WIName>" + sWorkitemId + "</WIName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<WMSID>" + formObject.getValue("WMS_ID")
							+ "</WMSID>")
					.append("\n")
					.append("<AOType>" + senderId + "</AOType>")
					.append("\n")
					.append("<SENDERID>" + source + "</SENDERID>")
					.append("\n")
					.append("<BankRelation>" + bankRelation + "</BankRelation>")
					.append("\n")
					.append("<PerformValidation>"
							+ formObject.getValue("P_ECB_CHQ_VALIDATION")
							+ "</PerformValidation>")
					.append("\n")
					.append("<REF_NO>#REF_NO#</REF_NO>")
					.append("\n")
					.append("<ruleFlowGroup>DSA-Sales</ruleFlowGroup>")
					.append("\n")
					.append("<requestChannelName>REQCH</requestChannelName>")
					.append("\n")
					.append("<Eligibility> <PAYLOAD type=\"CHECK_BOOK_ISSUANCE\">")
					.append("\n")
					.append("<Ecb_Customer_Eligibility_Status>")
					.append("\n")
					.append("<minBouncedCheque>#Last12Months#</minBouncedCheque>")
					.append("\n")
					.append("<maxBouncedCheque>#Last12Months#</maxBouncedCheque>")
					.append("\n")
					.append("<hitOrNoHit>#HitOrNoHit#</hitOrNoHit>")
					.append("\n")
					.append("</Ecb_Customer_Eligibility_Status> </PAYLOAD> </Eligibility>")
					.append("\n")
					.append("<NoOfCust>" + iNoOfCustomer + "</NoOfCust>")
					.append("\n").append("</APWebService_Input>");
			logInfo("getBRMSEligibilityRequestXml",
					" getBRMSEligibilityRequestXml created ===> "
							+ inputXML.toString());
		} catch (Exception e) {
			logError("Exception in getBRMSEligibilityRequestXml", e);
		}
		return inputXML.toString();
	}

	public String getBRMSJointEligibilityRequestXml(int iNoOfCustomer) {
		logInfo("getBRMSEligibilityRequestXml",
				"inside getBRMSJointEligibilityRequestXml" + iNoOfCustomer);
		StringBuffer inputXML = new StringBuffer();
		try {
			logInfo("getBRMSJointEligibilityRequestXml",
					"setting getBRMSJointEligibilityRequestXml");
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>WBG_BRMS_RULES_RESPONSE</InnerCallType>")
					.append("\n")
					.append("<WIName>" + sWorkitemId + "</WIName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<WMSID>" + formObject.getValue("WMS_ID")
							+ "</WMSID>")
					.append("\n")
					.append("<AOType>" + senderId + "</AOType>")
					.append("\n")
					.append("<SENDERID>" + source + "</SENDERID>")
					.append("\n")
					.append("<PerformValidation>"
							+ formObject.getValue("P_ECB_CHQ_VALIDATION")
							+ "</PerformValidation>")
					.append("\n")
					.append("<REF_NO>#REF_NO#</REF_NO>")
					.append("\n")
					.append("<ruleFlowGroup>DSA-Sales</ruleFlowGroup>")
					.append("\n")
					.append("<requestChannelName>REQCH</requestChannelName>")
					.append("\n")
					.append("<Eligibility> <PAYLOAD type=\"CHECK_BOOK_ISSUANCE\">")
					.append("\n").append("#Ecb_JointCustomer#").append("\n")
					.append("</PAYLOAD> </Eligibility>").append("\n")
					.append("<NoOfCust>" + iNoOfCustomer + "</NoOfCust>")
					.append("\n").append("</APWebService_Input>");
			logInfo("getBRMSJointEligibilityRequestXml",
					" getBRMSJointEligibilityRequestXml created ===> "
							+ inputXML.toString());
		} catch (Exception e) {
			logError("Exception in getBRMSJointEligibilityRequestXml", e);
		}
		return inputXML.toString();
	}
    // DCRA KRISHNA
	public String getCreateCustInputXML(String sWIName, String sNo) {
		logInfo("getCreateCustInputXML", "inside getCreateCustInputXML sNo: "
				+ sNo + ", sWIName:" + sWIName);
		long start_Time1 = System.currentTimeMillis();
		String sQuery = "SELECT FINAL_FULL_NAME,FINAL_PREFIX,FINAL_GENDER, CUST_MARITAL_STATUS,FINAL_CITY,FINAL_STATE,FINAL_NATIONALITY,"
				+ "FINAL_EIDA_NO,FINAL_EMP_NAME, EMP_POSITION, EMP_STATE, EMP_PHONE, EMP_SAL, FINAL_ADDRESS,CORR_PO_BOX, CORR_FLOOR,"
				+ "CORR_STREET, FINAL_DOB,FINAL_EMAIL,CORR_PHONE,FINAL_MOBILE_NO,CUST_SEG,STAFF_FLAG,SIGN_STYLE, FINAL_PROFESSION,"
				+ "COUNTRY_RESIDENCE,RM_CODE,FINAL_PASS_NO,IS_UAE_RESIDENT,RES_BUILDING,DECODE(RES_CITY,'OTHERS',"
				+ "OTHER_RESI_CITY,RES_CITY) AS RES_CITY,(select country_code from usr_0_country_mast where country=RES_CNTRY)RES_CNTRY,"
				+ "DECODE(RES_STATE,'OTHERS',RES_OTHER,RES_STATE) AS RES_STATE, RES_VILLA, RES_LANDMARK,(select country_code from usr_0_country_mast"
				+ " where country=FINAL_COUNTRY)FINAL_COUNTRY, FINAL_PHONE_NO, CORR_MOB,CORR_EMAIL,"
				+ "DECODE(CORR_STATE,'OTHERS',CORR_OTHER,CORR_STATE) AS CORR_STATE,DECODE(CORR_CITY,'OTHERS',"
				+ "OTHER_CORR_CITY,CORR_CITY) AS CORR_CITY,RELIGION,(select country_code from usr_0_country_mast "
				+ "where country=FINAL_RESIDENCE_COUNTRY)FINAL_RESIDENCE_COUNTRY,CUST_SHORT_NAME,EMP_ID,"
				+ "PRI_SRC_OF_INCOME,DUAL_NATIONALITY,EMP_ANNUAL_INCOME,OTHER_PERK_ALLOWANCES_AED,COMP_WEBSITE,EMP_NAME,PRIMARYSRCCTRY,EMP_STATUS,EIDA_EXPIRY " //Added by Shivanshu ATP-377
				+ "FROM USR_0_CUST_TXN WHERE"
				+ " WI_NAME ='" + sWIName + "' AND CUST_SNO='" + sNo + "'";
		logInfo("getCreateCustInputXML sQuery ", sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("getCreateCustInputXML sOutput ", sOutput.toString());
		long end_Time = System.currentTimeMillis();
		long diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		List<List<String>> sTableOutput = null;
		String sReligion = "";
		String sMaritalStatus = "";
		String sNationality = "";
		String sSignCode = "";
		String sCountry = "";
		String sProfession = "";
		String sAccBranch = "";
		String sAccClass = "";
		String sMinorFlag = "";
		String sAddress1 = "";
		String sCity = "";
		String sState = "";
		String sEmail = "";
		String sPhone = "";
		String sMobile = "";
		String code = "";
		String country = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(42).toString() : "";
		String sDOB = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
				.get(17).toString() : "";
		sDOB = setDateValue1(sDOB);
		String sSalary = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(12).toString() : "";
		String sCenterCode = "";
		String sResident = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(28).toString() : "";
		String sGender = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(2).toString() : "";
		if (!sGender.isEmpty()) {
			sGender = sGender.substring(0, 1);
		}
		String sCustSeg = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(21).toString() : "";
		String sStaffFlag = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(22).toString() : "";
		String sEmpName = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(8).toString() : "";
		logInfo("getCreateCustInputXML", "sOutput---" + sOutput);
		logInfo("getCreateCustInputXML", "sDOB---" + sDOB);
		if (sResident.equalsIgnoreCase("Yes")) {
			sResident = "Resident";
			sCountry = "AE";
		} else {
			start_Time1 = System.currentTimeMillis();
			sResident = "Non-Resident";
			sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY='"
					+ country + "'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sCountry = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
		}
		if (!sStaffFlag.equalsIgnoreCase("")) {
			sStaffFlag = sStaffFlag.substring(0, 1);
		}
		// sCustSeg = "Aspire";
		start_Time1 = System.currentTimeMillis();
		sQuery = "SELECT UNIQUE_ID,PROFIT_CENTER_CODE FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT ='"
				+ sCustSeg + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		sCenterCode = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(1).toString()
				: "";
		sCustSeg = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		start_Time1 = System.currentTimeMillis();
		sQuery = "SELECT VALUE,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='"
				+ sResident
				+ "')RESIDENT FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='MISCODE4'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		sResident = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(1).toString()
				: "";
		String sMis4 = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		if (sSalary.equalsIgnoreCase("")) {
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Salary_QDE'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sSalary = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
		}
		if (formObject.getValue(DATA_ENTRY_MODE).toString()
				.equalsIgnoreCase("Quick Data Entry")) {
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Religion_QDE'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sReligion = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			start_Time1 = System.currentTimeMillis();
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
			sQuery = "SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Marital_QDE'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sMaritalStatus = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Staff_Flag_QDE'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sStaffFlag = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				sAddress1 = sOutput.get(0).get(13);
				sCity = sOutput.get(0).get(4);
				sState = sOutput.get(0).get(5);
				sEmail = sOutput.get(0).get(18);
				sPhone = sOutput.get(0).get(36);
				sMobile = sOutput.get(0).get(20);
			}
		} else {
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT UNIQUE_CODE FROM USR_0_RELIGION WHERE RELIGION='"
					+ sOutput.get(0).get(41) + "'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sReligion = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT UNIQUE_CODE FROM USR_0_MARITAL_STATUS WHERE MARITAL_STATUS='"
					+ sOutput.get(0).get(3) + "'";
			sTableOutput = formObject.getDataFromDB(sQuery);
			sMaritalStatus = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			logInfo("getCreateCustInputXML", "Time Difference: " + diff
					+ " for Query: " + sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				sAddress1 = sOutput.get(0).get(14);
				sCity = sOutput.get(0).get(40);
				sState = sOutput.get(0).get(39);
				sEmail = sOutput.get(0).get(38);
				sPhone = sOutput.get(0).get(19);
				sMobile = sOutput.get(0).get(19);
			}
		}
		start_Time1 = System.currentTimeMillis();
		sQuery = "SELECT ACC_HOME_BRANCH,ACC_CLASS FROM " + sExtTable
				+ " WHERE WI_NAME ='" + sWIName + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		String accClass = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(1).toString()
				: "";
		if (accClass.equalsIgnoreCase("Both")) {
			sAccClass = "C";
		} else {
			sAccClass = sTableOutput.get(0).get(1).substring(0, 1);
		}
		start_Time1 = System.currentTimeMillis();
		code = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString() : "";
		sQuery = "SELECT CODE FROM USR_0_HOME_BRANCH WHERE HOME_BRANCH='"
				+ code + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		sAccBranch = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		start_Time1 = System.currentTimeMillis();
		sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY='"
				+ sOutput.get(0).get(6) + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		sNationality = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		logInfo("getCreateCustInputXML", "bikash: " + sQuery);
		logInfo("getCreateCustInputXML", "bikash: " + sNationality);
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		start_Time1 = System.currentTimeMillis();
		sQuery = "SELECT SIGN_CODE FROM USR_0_SIGN_STYLE WHERE SIGN_DESC='"
				+ sOutput.get(0).get(23) + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		sSignCode = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		start_Time1 = System.currentTimeMillis();
		code = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString() : "";
		sQuery = "SELECT PROFESSION_CODE FROM USR_0_PROFESSION WHERE PROFESSION_DESC='"
				+ code + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		sProfession = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		sQuery = "SELECT CUST_CATEGORY_TYPE FROM usr_0_cust_cat WHERE CUST_CATEGORY_CODE='"
				+ sCustSeg + "'";
		sTableOutput = formObject.getDataFromDB(sQuery);
		String sCustClass = (sTableOutput != null && sTableOutput.size() > 0) ? sTableOutput
				.get(0).get(0).toString()
				: "";
		end_Time = System.currentTimeMillis();
		diff = start_Time1 - end_Time;
		logInfo("getCreateCustInputXML", "Time Difference: " + diff
				+ " for Query: " + sQuery);
		if (sProfession.equalsIgnoreCase("")) {
			sProfession = "99";
		}
		int iAge = CalculateAge1(sDOB);
		String sQueryy = "select VALUE from usr_0_defaultvalue_fcr where name='Minor_Age'";
		List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
		logInfo("getCreateCustInputXML", "sOutputt------" + sOutputt);
		int sMinorAge = (sOutputt != null && sOutputt.size() > 0) ? Integer
				.parseInt(sOutputt.get(0).get(0).toString()) : 0;
		logInfo("getCreateCustInputXML", "sMinorAge....." + sMinorAge);
		
		//Added by Shivanshu ATP-377			
			String natureOfBussiness= sOutput.get(0).get(45);
			String secondNationality = sOutput.get(0).get(46);
			String annualIncome = sOutput.get(0).get(47);
			String sourceOfIncome = sOutput.get(0).get(48);
			String website = sOutput.get(0).get(49);
			String companyName = sOutput.get(0).get(50);
			String countryOfIncome= sOutput.get(0).get(51);
			String employmentType = sOutput.get(0).get(52);
			String eidaExpiryDate = sOutput.get(0).get(53);
			String dualNationalityFlag = "";
			String selfCompanyName = "";
			String secondNationalityCode = "";
						
			String natureOfBussinessCode = getIndustryRisk(natureOfBussiness);
			String bussinessQuery = "SELECT INDUSTRY_TYPE FROM USR_0_AO_INDUSTRY_RISK WHERE INDUSTRY_CD = '"+natureOfBussinessCode+"'";
			List<List<String>> output = formObject.getDataFromDB(bussinessQuery);								
			if (output != null && output.size() > 0) {
				natureOfBussiness=output.get(0).get(0);
			}

			String queryCountry = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY='"+ secondNationality + "'";
			List<List<String>> outputCountry = formObject.getDataFromDB(queryCountry);								
			if (outputCountry != null && outputCountry.size() > 0) {
				secondNationalityCode=outputCountry.get(0).get(0);
			}
			if (secondNationality != null && !secondNationality.isEmpty()) {
				dualNationalityFlag = "Y";
			}else {
				dualNationalityFlag = "N";
			}

			String employmentTypeCode = "SELECT EMP_CODE FROM USR_0_EMPLOYMENT_STATUS WHERE EMP_STATUS ='"+employmentType+"'";
			List<List<String>> outputCode = formObject.getDataFromDB(employmentTypeCode);								
			if (outputCode != null && outputCode.size() > 0) {
				employmentType=outputCode.get(0).get(0);
			}
			
			if ("S".equalsIgnoreCase(employmentType)) {
				selfCompanyName = companyName;
			}
			
			logInfo("Customer_add", " annualIncome : " + annualIncome + " , sourceOfIncome: " + sourceOfIncome + " , website: "
					+ website + " ,companyName : "+ companyName + " ,natureOfBussiness : "+ natureOfBussiness
					+ " ,employmentType : "+ employmentType + " ,eidaExpiryDate " +eidaExpiryDate + " ,countryOfIncome :" 
					+ countryOfIncome + " ,secondNationality : "+ secondNationality + " ,secondNationalityCode : "+ secondNationalityCode);

		if (iAge < sMinorAge) {
			sMinorFlag = "Y";
		} else {
			sMinorFlag = "N";
		}
		if (sEmpName.length() > 40) {
			sEmpName = sEmpName.substring(0, 40);
		}
		if (sMinorFlag.equalsIgnoreCase("Y")) {
			logInfo("getCreateCustInputXML",
					"getCreateCustInputXML ---if minor Input XML.....27122016 111");
			String sCustGuardian = "";
			int sSNOGuardian;
			try {
				String sQueryGuardianCidSNO = "Select CID,SNO from acc_relation_repeater where wi_name='"
						+ sWorkitemId + "' and acc_relation='Guardian'";
				List<List<String>> sOutputGuardianCidSNO = formObject
						.getDataFromDB(sQueryGuardianCidSNO);
				logInfo("getCreateCustInputXML", "sQueryGuardianCid :"
						+ sQueryGuardianCidSNO);
				logInfo("getCreateCustInputXML", "sOutputGuardianCid :"
						+ sOutputGuardianCidSNO);
				int sCustGuardianCIdTag = sOutputGuardianCidSNO.size();
				logInfo("getCreateCustInputXML", "sCustGuardianCIdTag..."
						+ sCustGuardianCIdTag);
				sCustGuardian = (sOutputGuardianCidSNO != null && sOutputGuardianCidSNO
						.size() > 0) ? sOutputGuardianCidSNO.get(0).get(0)
						.toString() : "";
				sSNOGuardian = (sOutputGuardianCidSNO != null && sOutputGuardianCidSNO
						.size() > 0) ? Integer.parseInt(sOutputGuardianCidSNO
						.get(0).get(1).toString()) : 0;
				logInfo("getCreateCustInputXML", "sCustGuardian...."
						+ sCustGuardian);
				logInfo("getCreateCustInputXML", "sSNOGuardian ....."
						+ sSNOGuardian);
				if (sCustGuardianCIdTag != 0) {
					if (!sCustGuardian.equalsIgnoreCase("")) {
						logInfo("getCreateCustInputXML",
								"inside 19042017#### sCustGuardian is not null...."
										+ sCustGuardian);
					} else {
						logInfo("getCreateCustInputXML",
								"before sSNOGuardian.equalsIgnoreCase(sNo)");
						int SnoCompare = Integer.parseInt((sNo + 1));
						logInfo("getCreateCustInputXML", "SnoCompare..."
								+ SnoCompare);
						sCustGuardian = "#CUST_" + (sSNOGuardian) + "#";
						logInfo("getCreateCustInputXML",
								"else sCustGuardian is null 19042017....."
										+ sCustGuardian);
					}
				}
				logInfo("getCreateCustInputXML", "if sCustGuardian:"
						+ sCustGuardian);
			} catch (Exception e) {
				logError("Exception in getCreateCustInputXML  ", e);
			}
			String sInputXML = "";
			if (sOutput != null && sOutput.size() > 0) {
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>ADD_Customer</Calltype>" + "<Customer>"
						+ "<custFullName>"
						+ sOutput.get(0).get(0)
						+ "</custFullName>"
						+ "<custShortName>"
						+ sOutput.get(0).get(43)
						+ "</custShortName>"
						+ "<custPrefix>"
						+ sOutput.get(0).get(1)
						+ "</custPrefix>"
						+ "<custGender>"
						+ sGender
						+ "</custGender>"
						+ "<txtCustDOB>"
						+ sDOB
						+ "</txtCustDOB>"
						+ "<custReligion>"
						+ sReligion
						+ "</custReligion>"
						+ "<custMaritalStatus>"
						+ sMaritalStatus
						+ "</custMaritalStatus>"
						+ "<custNationality>"
						+ sNationality
						+ "</custNationality>"
						+
						// 06112017"<custResidence>"+sCountry+"</custResidence>"+
						"<custResidence>"
						+ sOutput.get(0).get(42)
						+ "</custResidence>"
						+ "<custNationalId>"
						+ sOutput.get(0).get(27)
						+ "</custNationalId>"
						+ "<custEmployerName>"
						+ sEmpName
						+ "</custEmployerName>"
						+ "<custPosition>"
						+ sOutput.get(0).get(9)
						+ "</custPosition>"
						+ "<custEmployerEmirate>"
						+ sOutput.get(0).get(10)
						+ "</custEmployerEmirate>"
						+ "<custEmployerPhone>"
						+ sOutput.get(0).get(11)
						+ "</custEmployerPhone>"
						+ "<custMonthlySalary>"
						+ sSalary
						+ "</custMonthlySalary>"
						+ "<txtCustAddr1>"
						+ sAddress1
						+ "</txtCustAddr1>"
						+ "<txtCustAddr2>"
						+ sOutput.get(0).get(15)
						+ "</txtCustAddr2>"
						+ "<txtCustAddr3>"
						+ sOutput.get(0).get(16)
						+ "</txtCustAddr3>"
						+ "<custEmirate>"
						+ sCity
						+ "</custEmirate>"
						+ "<custState>"
						+ sState
						+ "</custState>"
						+ "<custEmail>"
						+ sEmail
						+ "</custEmail>"
						+ "<txtCustPhone>"
						+ sPhone
						+ "</txtCustPhone>"
						+ "<custMobile>"
						+ sMobile
						+ "</custMobile>"
						+ "<ICType>P</ICType>"
						+ "<flgCustType>"
						+ sCustSeg
						+ "</flgCustType>"
						+ "<flgCustClass>"
						+ sCustClass
						+ "</flgCustClass>"
						+ "<flgStaff>"
						+ sStaffFlag
						+ "</flgStaff>"
						+ "<homeBranch>"
						+ sAccBranch
						+ "</homeBranch>"
						+ "<signType>"
						+ sSignCode
						+ "</signType>"
						+ "<professCategory>"
						+ sProfession
						+ "</professCategory>"
						+ "<custCountry>"
						+ sOutput.get(0).get(35)
						+ "</custCountry>"
						+ "<zip></zip>"
						+ "<flgMinor>"
						+ sMinorFlag
						+ "</flgMinor>"
						+ // CQRN-0000071149-Process
						"<codCustType>"
						+ sAccClass
						+ "</codCustType>"
						+ "<misCod1>"
						+ sCenterCode
						+ "</misCod1>"
						+ "<misCod2>"
						+ sOutput.get(0).get(26)
						+ "</misCod2>"
						+ "<misCod3>"
						+ sResident
						+ "</misCod3>"
						+ "<misCod4>"
						+ sMis4
						+ "</misCod4>"
						+ "<makerId>WMSUSER</makerId>"
						+ "<checkerId>WMSUSER</checkerId>"
						+ "<citizenshipId>"
						+ sOutput.get(0).get(7)
						+ "</citizenshipId>"
						+ "<codEmpId>"
						+ sOutput.get(0).get(44)
						+ "</codEmpId>"
						+ // Added by mohit for FCR_CR_16112016
						"<permAddr1>"
						+ sOutput.get(0).get(29)
						+ "</permAddr1>"
						+ "<permAddr2>"
						+ sOutput.get(0).get(33)
						+ "</permAddr2>"
						+ "<permAddr3>"
						+ sOutput.get(0).get(34)
						+ "</permAddr3>"
						+ "<permAddrCity>"
						+ sOutput.get(0).get(30)
						+ "</permAddrCity>"
						+ "<permAddrCountry>"
						+ sOutput.get(0).get(31)
						+ "</permAddrCountry>"
						+ "<permAddrState>"
						+ sOutput.get(0).get(32)
						+ "</permAddrState>"
						+ "<permAddrZip></permAddrZip>"
						+ "<custGuardian>"
						+ sCustGuardian
						+ "</custGuardian>"
						
						//ADDED NEW TAGS ATP-377 by Shivanshu
						+ "<websiteAddress>"
						+ website
						+"</websiteAddress>"
						+ "<sourceOfIncome>"
						+ formObject.getValue(AO_INCOME_SRC).toString()//added by shivanshu DCRA
						+"</sourceOfIncome>" 
						+ "<natureOfBusiness>" 
						+ natureOfBussiness 
						+ "</natureOfBusiness>"
						+ "<employmentType>" 
						+ employmentType 
						+ "</employmentType>"
						+ "<annualIncome>" 
						+ annualIncome
						+ "</annualIncome>"
						+ "<eidaExpiryDate>"
						+ eidaExpiryDate
						+ "</eidaExpiryDate>"
						+ "<countryOfIncome>" 
						+  countryOfIncome
						+ "</countryOfIncome>"
						+ "<selfEmpCompanyName>" 
						+ selfCompanyName
						+ "</selfEmpCompanyName>"
						+ "<dualNationalityFlag>" 
						+ dualNationalityFlag
						+ "</dualNationalityFlag>"
						+ "<secondNationality>"
						+ secondNationalityCode
						+ "</secondNationality>"
						+  dcraCustomerCreation() //Added by Shivanshu DCRA
						+ "</Customer>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<REF_NO>#REF_NO#</REF_NO>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "</APWebService_Input>";
			}
			return sInputXML;
		} else {
			logInfo("getCreateCustInputXML",
					"getCreateCustInputXML ---if not minor Input XML.........15122016");
			String sInputXML = "";
			if (sOutput != null && sOutput.size() > 0) {
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>ADD_Customer</Calltype>" + "<Customer>"
						+ "<custFullName>"
						+ sOutput.get(0).get(0)
						+ "</custFullName>"
						+ "<custShortName>"
						+ sOutput.get(0).get(43)
						+ "</custShortName>"
						+ "<custPrefix>"
						+ sOutput.get(0).get(1)
						+ "</custPrefix>"
						+ "<custGender>"
						+ sGender
						+ "</custGender>"
						+ "<txtCustDOB>"
						+ sDOB
						+ "</txtCustDOB>"
						+ "<custReligion>"
						+ sReligion
						+ "</custReligion>"
						+ "<custMaritalStatus>"
						+ sMaritalStatus
						+ "</custMaritalStatus>"
						+ "<custNationality>"
						+ sNationality
						+ "</custNationality>"
						+
						// 06112017"<custResidence>"+sCountry+"</custResidence>"+
						"<custResidence>"
						+ sOutput.get(0).get(42)
						+ "</custResidence>"
						+ "<custNationalId>"
						+ sOutput.get(0).get(27)
						+ "</custNationalId>"
						+ "<custEmployerName>"
						+ sEmpName
						+ "</custEmployerName>"
						+ "<custPosition>"
						+ sOutput.get(0).get(9)
						+ "</custPosition>"
						+ "<custEmployerEmirate>"
						+ sOutput.get(0).get(10)
						+ "</custEmployerEmirate>"
						+ "<custEmployerPhone>"
						+ sOutput.get(0).get(11)
						+ "</custEmployerPhone>"
						+ "<custMonthlySalary>"
						+ sSalary
						+ "</custMonthlySalary>"
						+ "<txtCustAddr1>"
						+ sAddress1
						+ "</txtCustAddr1>"
						+ "<txtCustAddr2>"
						+ sOutput.get(0).get(15)
						+ "</txtCustAddr2>"
						+ "<txtCustAddr3>"
						+ sOutput.get(0).get(16)
						+ "</txtCustAddr3>"
						+ "<custEmirate>"
						+ sCity
						+ "</custEmirate>"
						+ "<custState>"
						+ sState
						+ "</custState>"
						+ "<custEmail>"
						+ sEmail
						+ "</custEmail>"
						+ "<txtCustPhone>"
						+ sPhone
						+ "</txtCustPhone>"
						+ "<custMobile>"
						+ sMobile
						+ "</custMobile>"
						+ "<ICType>P</ICType>"
						+ "<flgCustType>"
						+ sCustSeg
						+ "</flgCustType>"
						+ "<flgCustClass>"
						+ sCustClass
						+ "</flgCustClass>"
						+ "<flgStaff>"
						+ sStaffFlag
						+ "</flgStaff>"
						+ "<homeBranch>"
						+ sAccBranch
						+ "</homeBranch>"
						+ "<signType>"
						+ sSignCode
						+ "</signType>"
						+ "<professCategory>"
						+ sProfession
						+ "</professCategory>"
						+ "<custCountry>"
						+ sOutput.get(0).get(35)
						+ "</custCountry>"
						+ "<zip></zip>"
						+ "<flgMinor>"
						+ sMinorFlag
						+ "</flgMinor>"
						+ "<codCustType>"
						+ sAccClass
						+ "</codCustType>"
						+ "<misCod1>"
						+ sCenterCode
						+ "</misCod1>"
						+ "<misCod2>"
						+ sOutput.get(0).get(26)
						+ "</misCod2>"
						+ "<misCod3>"
						+ sResident
						+ "</misCod3>"
						+ "<misCod4>"
						+ sMis4
						+ "</misCod4>"
						+ "<makerId>WMSUSER</makerId>"
						+ "<checkerId>WMSUSER</checkerId>"
						+ "<citizenshipId>"
						+ sOutput.get(0).get(7)
						+ "</citizenshipId>"
						+ "<codEmpId>"
						+ sOutput.get(0).get(44)
						+ "</codEmpId>"
						+ "<permAddr1>"
						+ sOutput.get(0).get(29)
						+ "</permAddr1>"
						+ "<permAddr2>"
						+ sOutput.get(0).get(33)
						+ "</permAddr2>"
						+ "<permAddr3>"
						+ sOutput.get(0).get(34)
						+ "</permAddr3>"
						+ "<permAddrCity>"
						+ sOutput.get(0).get(30)
						+ "</permAddrCity>"
						+ "<permAddrCountry>"
						+ sOutput.get(0).get(31)
						+ "</permAddrCountry>"
						+ "<permAddrState>"
						+ sOutput.get(0).get(32)
						+ "</permAddrState>"
						+ "<permAddrZip></permAddrZip>"
						+ "<custGuardian></custGuardian>"
						//ADDED NEW TAGS ATP-377 by Shivanshu
						+ "<websiteAddress>"
						+ website
						+"</websiteAddress>"
						+ "<sourceOfIncome>"
						+  formObject.getValue(AO_INCOME_SRC).toString()//added by shivanshu DCRA
						+"</sourceOfIncome>" 
						+ "<natureOfBusiness>" 
						+ natureOfBussiness 
						+ "</natureOfBusiness>"
						+ "<employmentType>" 
						+ employmentType 
						+ "</employmentType>"
						+ "<annualIncome>" 
						+ annualIncome
						+ "</annualIncome>"
						+ "<eidaExpiryDate>"
						+ eidaExpiryDate
						+ "</eidaExpiryDate>"
						+ "<countryOfIncome>" 
						+  countryOfIncome
						+ "</countryOfIncome>"
						+ "<dualNationalityFlag>" 
						+ dualNationalityFlag
						+ "</dualNationalityFlag>"
						+ "<secondNationality>"
						+ secondNationalityCode
						+ "</secondNationality>"
						+  dcraCustomerCreation() //Added by Shivanshu DCRA
						+ "</Customer>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<REF_NO>#REF_NO#</REF_NO>"
						+ "<WiName>"
						+ sWorkitemId + "</WiName>" + "</APWebService_Input>";
			}
			return sInputXML;
		}
	}

	public String getUpdateAccountInputXML(String sProductCode, int iNo,
			String sActivityName) {
		logInfo("getUpdateAccountInputXML", "ACCOUNT_UPDATE");
		logInfo("getUpdateAccountInputXML", "sProductCode" + sProductCode);
		logInfo("getUpdateAccountInputXML", "iNo" + iNo);
		logInfo("getUpdateAccountInputXML", "sActivityName" + sActivityName);
		String sInputXML = "";
		try {
			String sCustomerID = getPrimaryCustomerID();
			logInfo("getUpdateAccountInputXML", "sCustomerID" + sCustomerID);
			logInfo("getUpdateAccountInputXML", "sCustomerID" + sCustomerID);
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE "
							+ "PROD_CODE='"
							+ sProductCode
							+ "' AND WI_NAME ='"
							+ sWorkitemId + "' AND CID= '" + iNo + "'");
			log.info("sOutput---" + sOutput);
			String sAccount = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			if (sAccount.equalsIgnoreCase("")) {
				sAccount = "#ACCOUNT_" + iNo + "#";
			}
			logInfo("getUpdateAccountInputXML", "CHANNEL_TYPE "
					+ formObject.getValue("CHANNEL_TYPE").toString());
			logInfo("getUpdateAccountInputXML", "SCAN_MODE "
					+ formObject.getValue("SCAN_MODE").toString());
			logInfo("getUpdateAccountInputXML", "sActivityName" + sActivityName);

			sOutput = formObject
					.getDataFromDB("SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='STATUSCHANGEREASON'");
			if ((formObject.getValue("CHANNEL_TYPE").toString()
					.equalsIgnoreCase("Alternate")
					&& (!sActivityName.equalsIgnoreCase("CPD Checker") && (!formObject
							.getValue("SCAN_MODE").toString()
							.equalsIgnoreCase("New WMS ID"))) || ((sActivityName
					.equalsIgnoreCase("CPD Checker") && (formObject.getValue(
					"SCAN_MODE").toString().equalsIgnoreCase("New WMS ID")))))
					|| (!(formObject.getValue("CHANNEL_TYPE").toString()
							.equalsIgnoreCase("Alternate"))
							&& (!sActivityName.equalsIgnoreCase("CPD Checker")) && (!formObject
							.getValue("SCAN_MODE").toString()
							.equalsIgnoreCase("New WMS ID")))) {
				log.info("FCR changes...26012017....code==3");
				List<List<String>> sOutput1 = formObject
						.getDataFromDB("SELECT RECORD_STATUS,NO_DEBIT,NO_CREDIT,DORMANT,"
								+ "FROZEN FROM usr_0_account_status_code WHERE code='3'");
				if (sOutput1 != null && sOutput1.size() > 0) {
					logInfo("getUpdateAccountInputXML if  Query : ", sOutput1
							.get(0).get(0) + " " + sOutput1.get(0).get(1) + " ");
					logInfo("getUpdateAccountInputXML if  Query : ", sOutput1
							.get(0).get(2) + " " + sOutput1.get(0).get(3) + " ");
					logInfo("getUpdateAccountInputXML if Query : ", sOutput1
							.get(0).get(4) + " " + sOutput.get(0).get(0) + " ");
					try {
						sCustomerID = String.valueOf(Integer
								.parseInt(sCustomerID));
					} catch (Exception e) {
						logError("getUpdateAccountInputXML ", e);
					}
					sInputXML = "<?xml version=\"1.0\"?>"
							+ "<APWebService_Input>"
							+ "<Option>WebService</Option>"
							+ "<Calltype>MODIFY_Account</Calltype>"
							+ "<custAccountNumber>"
							+ sAccount
							+ "</custAccountNumber>"
							+ "<customerId>"
							+ sCustomerID
							+ "</customerId>"
							+ "<ServiceName>accountStatusUpdate</ServiceName>"
							+ "<maintenanceOption>M</maintenanceOption>"
							+
							// "<accountNewStatus>6</accountNewStatus>" +
							"<Record_Status>"
							+ sOutput1.get(0).get(0)
							+ "</Record_Status>"
							+ "<No_Debit>"
							+ sOutput1.get(0).get(1)
							+ "</No_Debit>"
							+ "<No_Credit>"
							+ sOutput1.get(0).get(2)
							+ "</No_Credit>"
							+ "<Dormant>"
							+ sOutput1.get(0).get(3)
							+ "</Dormant>"
							+ "<Frozen>"
							+ sOutput1.get(0).get(4)
							+ "</Frozen>"
							+ "<accountPrevStatus>3</accountPrevStatus>"
							+ "<statusChangeReason>"
							+ sOutput.get(0).get(0)
							+ "</statusChangeReason>"
							+ "<EngineName>"
							+ sEngineName
							+ "</EngineName>"
							+ "<SessionId>"
							+ sSessionId
							+ "</SessionId>"
							+ "<WiName>"
							+ sWorkitemId
							+ "</WiName>"
							+ "<REF_NO>#REF_NO#</REF_NO>"
							+ "</APWebService_Input>";
				}
			} else if ((formObject.getValue("CHANNEL_TYPE").toString()
					.equalsIgnoreCase("Alternate") && (sActivityName
					.equalsIgnoreCase("Delivery_Checker") || ((sActivityName
					.equalsIgnoreCase("CPD Checker") && (!formObject
					.getValue("SCAN_MODE").toString()
					.equalsIgnoreCase("New WMS ID"))))))
					|| (!(formObject.getValue("CHANNEL_TYPE").toString()
							.equalsIgnoreCase("Alternate")) && ((sActivityName
							.equalsIgnoreCase("CPD Checker")) || (formObject
							.getValue("SCAN_MODE").toString()
							.equalsIgnoreCase("New WMS ID"))))) {
				log.info("FCR changes...26012017....code==8");
				List<List<String>> sOutput1 = formObject
						.getDataFromDB("SELECT RECORD_STATUS,NO_DEBIT,NO_CREDIT,DORMANT,FROZEN FROM usr_0_account_status_code WHERE code='8'");
				if (sOutput1 != null && sOutput1.size() > 0) {
					try {
						sCustomerID = String.valueOf(Integer
								.parseInt(sCustomerID));
					} catch (Exception e) {
						logError("getUpdateAccountInputXML ", e);
					}
					sInputXML = "<?xml version=\"1.0\"?>"
							+ "<APWebService_Input>"
							+ "<Option>WebService</Option>"
							+ "<Calltype>MODIFY_Account</Calltype>"
							+ "<custAccountNumber>"
							+ sAccount
							+ "</custAccountNumber>"
							+ "<customerId>"
							+ sCustomerID
							+ "</customerId>"
							+ "<ServiceName>accountStatusUpdate</ServiceName>"
							+ "<maintenanceOption>M</maintenanceOption>"
							+
							// "<accountNewStatus>6</accountNewStatus>" +
							"<Record_Status>"
							+ sOutput1.get(0).get(0)
							+ "</Record_Status>"
							+ "<No_Debit>"
							+ sOutput1.get(0).get(1)
							+ "</No_Debit>"
							+ "<No_Credit>"
							+ sOutput1.get(0).get(2)
							+ "</No_Credit>"
							+ "<Dormant>"
							+ sOutput1.get(0).get(3)
							+ "</Dormant>"
							+ "<Frozen>"
							+ sOutput1.get(0).get(4)
							+ "</Frozen>"
							+ "<accountPrevStatus>3</accountPrevStatus>"
							+ "<statusChangeReason>"
							+ sOutput.get(0).get(0)
							+ "</statusChangeReason>"
							+ "<EngineName>"
							+ sEngineName
							+ "</EngineName>"
							+ "<SessionId>"
							+ sSessionId
							+ "</SessionId>"
							+ "<WiName>"
							+ sWorkitemId
							+ "</WiName>"
							+ "<REF_NO>#REF_NO#</REF_NO>"
							+ "</APWebService_Input>";
				}
			}
		} catch (Exception e) {
			logError("Exception in  getUpdateAccountInputXML ", e);
		}
		return sInputXML;
	}

	public String getChequebookInputXML(int iNo) {
		logInfo("getChequebookInputXML", "CHEQUEBOOK");
		String sInputXML = "";
		try {
			String sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE,
					iNo - 1, 4);
			Date d = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String sDate = dateFormat.format(d);
			String sCustomerID = getPrimaryCustomerID();
			String sQuery = "";
			List<List<String>> sOutput = null;
			if (sCustomerID.indexOf("#") != -1) {
				sQuery = "SELECT COUNT(CB_CODES) AS CB_CODE FROM USR_0_CB_RESTRICT_CODE WHERE CB_CODES = (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME = (SELECT DECODE(IS_UAE_RESIDENT,'Yes','Resident','Non-Resident') FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUST_SNO = '"
						+ sCustomerID.substring(6, sCustomerID.length() - 1)
						+ "'))";
			} else {
				sQuery = "SELECT COUNT(CB_CODES) AS CB_CODE FROM USR_0_CB_RESTRICT_CODE WHERE CB_CODES = (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME = (SELECT DECODE(IS_UAE_RESIDENT,'Yes','Resident','Non-Resident') FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUST_ID = '"
						+ sCustomerID
						+ "'))";
			}
			logInfo(" sQuery ", sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			if (sAccNo.equalsIgnoreCase("")) {
				sAccNo = "#ACCOUNT_" + iNo + "#";
			}
			if (sOutput != null && sOutput.size() > 0) {
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sQuery = "SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='ChequeBookStatus') "
							+ "ChequeBookStatus ,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
							+ "NAME ='FlagChequeBookType')FlagChequeBookType,(SELECT VALUE FROM "
							+ "USR_0_DEFAULTVALUE_FCR WHERE NAME ='FlagChequeType')FlagChequeType,"
							+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='FlagPRN')FlagPRN,"
							+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='FlagServiceChargesWaiver')"
							+ "FlagServiceChargesWaiver,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
							+ "NAME ='NoOfLeavesRequested')NoOfLeavesRequested FROM DUAL";
					sOutput = formObject.getDataFromDB(sQuery);
					sInputXML = "<?xml version=\"1.0\"?>"
							+ "<APWebService_Input>"
							+ "<Option>WebService</Option>"
							+ "<Calltype>Cheque_Book</Calltype>"
							+ "<MaintenanceOption>A</MaintenanceOption>"
							+ "<CustAccountNumber>"
							+ sAccNo
							+ "</CustAccountNumber>"
							+ "<ChequeBookIssueDate>"
							+ sDate
							+ "</ChequeBookIssueDate>"
							+ "<ChequeBookSerialNo></ChequeBookSerialNo>"
							+ "<ChequeStartNumber></ChequeStartNumber>"
							+ "<ChequeEndNumber></ChequeEndNumber>"
							+ "<ChequePaidStatus></ChequePaidStatus>"
							+ "<UpdateSerialNo></UpdateSerialNo>"
							+ "<ChequeBookStatus>"
							+ sOutput.get(0).get(0)
							+ "</ChequeBookStatus>"
							+ "<FlagChequeBookType>"
							+ sOutput.get(0).get(1)
							+ "</FlagChequeBookType>"
							+ "<FlagChequeType>"
							+ sOutput.get(0).get(2)
							+ "</FlagChequeType>"
							+ "<FlagPRN>"
							+ sOutput.get(0).get(3)
							+ "</FlagPRN>"
							+ "<FlagServiceChargesWaiver>"
							+ sOutput.get(0).get(4)
							+ "</FlagServiceChargesWaiver>"
							+ "<NoOfLeavesRequested>"
							+ sOutput.get(0).get(5)
							+ "</NoOfLeavesRequested>"
							+ "<EngineName>"
							+ sEngineName
							+ "</EngineName>"
							+ "<SessionId>"
							+ sSessionId
							+ "</SessionId>"
							+ "<WiName>"
							+ sWorkitemId
							+ "</WiName>"
							+ "<REF_NO>#REF_NO#</REF_NO>"
							+ "</APWebService_Input>";
				}
			}
		} catch (Exception e) {
			logError("Exception in  getChequebookInputXML ", e);
			sendMessageValuesList(
					"",
					"There is some Technical Error in Cheque book ,Please contact the administrator.");
		}
		return sInputXML;
	}

	public String getCustSCInputXML(String sType, int iNo) {
		String sInputXML = "";
		String sReqType = formObject.getValue("REQUEST_TYPE").toString();
		try {
			if (sActivityName.equalsIgnoreCase("QDE_Acc_Info_Chk")
					|| sActivityName.equalsIgnoreCase("DDE_ACC_INFO_CHK")) {
				if (sReqType.equalsIgnoreCase("Category Change Only")) {
					return sInputXML;
				}
			} else if (sActivityName.equalsIgnoreCase("CPD Checker")
					&& formObject.getValue("SCAN_MODE").toString()
							.equalsIgnoreCase("Existing WMS ID")) {
				if (sReqType.equalsIgnoreCase("New Account")
						|| sReqType
								.equalsIgnoreCase("New Account with Category Change")) {
					return sInputXML;
				}
			}
			String sOption = "";
			String sQuery = "SELECT SERVICE_PACKAGE,CUST_SEG,CUST_ID FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO = '" + iNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo(" sQuery ", sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", String.valueOf(sOutput.size()));
			String sOldPackage = sOutput.get(0).get(0);
			String sCustSegment = sOutput.get(0).get(1);
			String sCustID = sOutput.get(0).get(2);
			if (sReqType.equalsIgnoreCase("Category Change Only")
					|| sReqType
							.equalsIgnoreCase("New Account with Category Change")) {
				sCustSegment = formObject.getValue("NEW_CUST_SEGMENT")
						.toString();
			}
			if (sCustSegment.equalsIgnoreCase("Aspire")) {
				return sInputXML;
			}
			if (sCustID.equalsIgnoreCase("")) {
				sCustID = "#CUST_" + iNo + "#";
			}
			sQuery = "SELECT PACKAGE_NAME FROM USR_0_CUST_SERVICE_CHARGE WHERE CUST_SEGMENT='"
					+ sCustSegment + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sNewPackage = sOutput.get(0).get(0);
			if (sNewPackage.equalsIgnoreCase("")) {
				return sInputXML;
			}
			if (sOldPackage.equalsIgnoreCase("")) {
				sOption = "A";
			} else {
				sOption = "M";
			}
			if (!sOldPackage.equalsIgnoreCase(sNewPackage)) {
				try {
					sCustID = String.valueOf(Integer.parseInt(sCustID));
				} catch (Exception e) {
					logError("getCustSCInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>Modify_Account</Calltype>"
						+ "<ServiceName>serviceChargesUpdate</ServiceName>"
						+ "<maintenanceOption>"
						+ sOption
						+ "</maintenanceOption>"
						+ "<SCCustAccountLevel>"
						+ sType
						+ "</SCCustAccountLevel>"
						+ "<custAccountNumber></custAccountNumber>"
						+ "<customerId>"
						+ sCustID
						+ "</customerId>"
						+ "<SCPackageNewValue>"
						+ sNewPackage
						+ "</SCPackageNewValue>"
						+ "<SCPackageOldValue>"
						+ sOldPackage
						+ "</SCPackageOldValue>"
						+ "<SCWaiverFlag>N</SCWaiverFlag>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
			}
		} catch (Exception e) {
			logError("Exception in  getCustSCInputXML ", e);
		}
		return sInputXML;
	}

	public String getSignatureInputXML(int iNo, String sMaintainOption,
			String sCustID) {
		logInfo("getSignatureInputXML", "INSIDE iNo: " + iNo
				+ ", sMaintainOption: " + sMaintainOption + ", sCustID: "
				+ sCustID);
		String sInputXML = "";
		try {
			try {
				sCustID = String.valueOf(Integer.parseInt(sCustID));
			} catch (Exception e) {
				logError("getSignatureInputXML ", e);
			}
			if (!formObject.getTableCellValue(ACC_RELATION, iNo - 1, 9)
					.toString().equalsIgnoreCase("Minor")) {
				Date d = new Date();
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String sDate = dateFormat.format(d);
				sInputXML = "select '<?xml version=\"1.0\"?>"
						+ "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>MODIFY_Account</Calltype>"
						+ "<ServiceName>customerSignatureUpdate</ServiceName>"
						+ "<maintenanceOption>"
						+ sMaintainOption
						+ "</maintenanceOption>"
						+ "<customerId>"
						+ sCustID
						+ "</customerId>"
						+ "<imageType>S</imageType>"
						+ "<imageAddDate>"
						+ sDate
						+ "</imageAddDate>"
						+ "<imageBinaryData>'||sign||'</imageBinaryData>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>"
						+ "</APWebService_Input>' from USR_0_DOC_DETAILS B WHERE WI_NAME='"
						+ sWorkitemId
						+ "' AND UPPER(DOC_NAME)='SIGNATURE' AND COMMENTS='"
						+ iNo
						+ "' AND ROWID=(SELECT MAX(ROWID) FROM USR_0_DOC_DETAILS WHERE COMMENTS=B.COMMENTS AND WI_NAME=B.WI_NAME  AND UPPER(DOC_NAME)='SIGNATURE')";
				                logInfo("getSignatureInputXML", " sInputXML: " + sInputXML);
			} else {
				Date d = new Date();
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String sDate = dateFormat.format(d);
				sInputXML = "select '<?xml version=\"1.0\"?>"
						+ "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>MODIFY_Account</Calltype>"
						+ "<ServiceName>customerSignatureUpdate</ServiceName>"
						+ "<maintenanceOption>"
						+ sMaintainOption
						+ "</maintenanceOption>"
						+ "<customerId>"
						+ sCustID
						+ "</customerId>"
						+ "<imageType>S</imageType>"
						+ "<imageAddDate>"
						+ sDate
						+ "</imageAddDate>"
						+ "<imageBinaryData>'||to_clob(value)||'</imageBinaryData>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>"
						+ "</APWebService_Input>' from usr_0_defaultvalue_fcr B WHERE UPPER(NAME)='MINOR_SIGN'";
				logInfo("getSignatureInputXML", " sInputXML: " + sInputXML);
			}
		} catch (Exception e) {
			logError("getSignatureInputXML", e);
		}
		return sInputXML;
	}

	public String setAddDebitCardIssueInputXML(String sName, String sProduct,
			String sProductName) {
		logInfo("setAddDebitCardIssue", "INSIDE sName: " + sName.trim()
				+ ", sProduct: " + sProduct + ", sProductName: " + sProductName);
		String sInputXML = "";
		String sSeqNo = "";
		String sCustId = "";
		String sInstantYes = "";
		String sInstantNo = "";
		String sInstantFlag = "";
		try {
			try {
				sCustId = formObject.getTableCellValue(ACC_RELATION,
						Integer.parseInt(getPrimaryCustomerSNO()) - 1, 2);
			} catch (Exception e) {
				logError("setAddDebitCardIssue", e);
			}
			String val = formObject.getValue(RD_INST_DEL).toString();
			if ("Yes".equalsIgnoreCase(val)) {
				sInstantYes = "true";
				sInstantNo = "false";
			} else if ("No".equalsIgnoreCase(val)) {
				sInstantYes = "false";
				sInstantNo = "true";
			}

			logInfo("INSTANT_DEL_YES====", sInstantYes + " and INSTANT_DEL_NO"
					+ sInstantNo);
			if (sInstantYes.equalsIgnoreCase("true")
					&& sInstantNo.equalsIgnoreCase("false")) {
				sInstantFlag = "Y";
				log.info(" inside 1st if --------sInstantFlag ====="
						+ sInstantFlag);
			} else if (sInstantYes.equalsIgnoreCase("false")
					&& sInstantNo.equalsIgnoreCase("true")) {
				sInstantFlag = "N";
				log.info(" inside 2nd if --------sInstantFlag ====="
						+ sInstantFlag);
			}
			logInfo("setAddDebitCardIssue", "sProductName----" + sProductName);
			String[] sProductTemp = sProductName.split("_");
			logInfo("setAddDebitCardIssue", "sProductTemp----"
					+ sProductTemp[1]);
			String sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME ='"
					+ sWorkitemId + "' ORDER BY INSERTIONORDERID";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setAddDebitCardIssue", "sOutput----" + sOutput);
			String sPrimaryAcc = "";
			logInfo("setAddDebitCardIssue", "sProductTemp[2]: "
					+ sProductTemp[2]);
			if (!sOutput.get(Integer.parseInt(sProductTemp[2]) - 1).get(0)
					.equalsIgnoreCase("")) {
				// String[] sAccTemp = sOutput.get(0).get(0).split(",");
				sPrimaryAcc = sOutput
						.get(Integer.parseInt(sProductTemp[2]) - 1).get(0);
			} else {
				sPrimaryAcc = "#ACCOUNT_" + sProductTemp[2] + "#";
			}
			if (sProduct.equalsIgnoreCase("Islamic")) {
				sProduct = "ISM";
			} else if (sProduct.equalsIgnoreCase("Etihad")) {
				sProduct = "ETD";
			} else {
				sProduct = "CVNONS";
			}
			logInfo("setAddDebitCardIssue", "sPrimaryAcc: " + sPrimaryAcc);
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>DebitCard_New</Calltype>" + "<Customer>"
					+ "<CUST_ID>"
					+ sCustId
					+ "</CUST_ID>"
					+ "<CardPrimaryAccount>"
					+ sPrimaryAcc
					+ "</CardPrimaryAccount>"
					+ "<CardEmbossName>"
					+ sName.trim()
					+ "</CardEmbossName>"
					+ "<CardProductGroup>"
					+ sProduct
					+ "</CardProductGroup>"
					+ "<InstantFlag>"
					+ sInstantFlag
					+ "</InstantFlag>"
					+ "<REF_NO>#REF_NO#</REF_NO>"
					+ "<USER>"
					+ sUserName
					+ "</USER>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "</Customer>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  setAddDebitCardIssueInputXML ", e);
			sendMessageValuesList(
					"",
					"There is some Technical Error in Add Debit Card ,Please contact the administrator.");
		}
		return sInputXML;
	}

	public String getLinkDebitCardInputXML(String sProduct, String sCard) {
		logInfo("getLinkDebitCardInputXML", "sProduct  " + sProduct + " sCard "
				+ sCard);
		String sInputXML = "";
		try {
			String sCardNo = "";
			String sAccNo = "";
			String sQuery = "";
			String sOutput = "";
			String[] sProductTemp = sProduct.split("_");
			sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED A WHERE WI_NAME ='"
					+ sWorkitemId + "' order by " + "INSERTIONORDERID";
			List<List<String>> sOutputAcc = formObject.getDataFromDB(sQuery);
			logInfo("getLinkDebitCardInputXML", "sQuery: " + sQuery);
			logInfo("getLinkDebitCardInputXML",
					"sOutput: " + sOutput.toString());
			logInfo("getLinkDebitCardInputXML", "sProductTemp[2]: "
					+ sProductTemp[2]);
			if (!sOutputAcc.get(Integer.parseInt(sProductTemp[2]) - 1).get(0)
					.equalsIgnoreCase("")) {
				// String[] sAccTemp = sOutputAcc.get(0).get(0).split(",");
				sAccNo = sOutputAcc.get(Integer.parseInt(sProductTemp[2]) - 1)
						.get(0);
			} else {
				sAccNo = "#ACCOUNT_" + sProductTemp[2] + "#";
			}
			logInfo("getLinkDebitCardInputXML", "sAccNo: " + sAccNo);
			if (sCard.indexOf("_") != -1) {
				sProductTemp = sCard.split("_");
				String sQuery1 = "select response  from usr_0_integration_calls where wi_name='"
						+ sWorkitemId
						+ "' "
						+ "and call_name='DEBITCARD_NEW_"
						+ sProductTemp[1] + "' ";
				List<List<String>> sOutput11 = formObject
						.getDataFromDB(sQuery1);
				logInfo("getLinkDebitCardInputXML",
						"sQuery1sQuery1sQuery1sQuery1" + sQuery1);
				logInfo("getLinkDebitCardInputXML", "sOutput11-ssss--"
						+ sOutput11);
				logInfo("getLinkDebitCardInputXML", "sOutputAcc---"
						+ sOutputAcc);
				if (sOutput11.get(0).get(0).indexOf(":") == -1) {
					sCardNo = "#" + sCard + "#";
					logInfo("getLinkDebitCardInputXML", "sCardNo: " + sCardNo);
				} else {
					sCardNo = sOutput11.get(0).get(0)
							.replace("DEBIT CARD:", "");
					logInfo("getLinkDebitCardInputXML", "sCardNo: " + sCardNo);
				}
			} else {
				sCardNo = sCard;
			}

			logInfo("getLinkDebitCardInputXML", "sCardNo----" + sCardNo);
			logInfo("getLinkDebitCardInputXML", "sAccNo----" + sAccNo);

			sInputXML = "<?xml version=\"1.0\"?>"
					+ "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Debit_Card</Calltype>"
					+ "<CardMaintenanceType>cardAccountLinking</CardMaintenanceType>"
					+ "<AccountType>S</AccountType>" + "<CardNumber>" + sCardNo
					+ "</CardNumber>" + "<PrimaryAccountNumber>" + sAccNo
					+ "</PrimaryAccountNumber>" + "<EngineName>" + sEngineName
					+ "</EngineName>" + "<SessionId>" + sSessionId
					+ "</SessionId>" + "<WiName>" + sWorkitemId + "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getLinkDebitCardInputXML ", e);
		}
		logInfo("getLinkDebitCardInputXML", "sInputXML----" + sInputXML);
		return sInputXML;
	}

	public String getBase24InputXML(String sCard) {
		logInfo("--11--call  to getBase24InputXML---sCard----", sCard);
		String sInputXML = "";
		try {
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Base24</Calltype>"
					+ "<AccountType>S</AccountType>" + "<DebitCardNumber>"
					+ sCard + "</DebitCardNumber>" + "<EngineName>"
					+ sEngineName + "</EngineName>" + "<SessionId>"
					+ sSessionId + "</SessionId>" + "<WiName>" + sWorkitemId
					+ "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getBase24InputXML ", e);
		}
		return sInputXML;
	}

	public String getFATCAUpdateInputXML(String sRelation, int iCustNo) {
		logInfo("getFATCAUpdateInputXML", "INSIDE");
		String sInputXML = "";
		try {
			String sCustomer = formObject.getTableCellValue(ACC_RELATION,
					iCustNo - 1, 2);
			String sQuery = "SELECT IS_HOLDING_GREENCARD,IS_US_TAX_LIABLE,IS_US_TIN_PRESENT,DOCUMENT_TO_BE_COLLECTED,"
					+ "TO_CHAR(CLASSIFICATION_DATE,'dd/MM/yyyy') as CLASSIFICATION_DATE,"
					+ "TO_CHAR(W8_SIGNUP_DATE,'dd/MM/yyyy') as W8_SIGNUP_DATE,IS_US_INDICIA_FOUND,IS_US_CLASSIFICATION,"
					+ "BIRTH_COUNTRY,IS_POA_US_PERSON,FATCA_MAINTAIN_OPTION FROM USR_0_CUST_TXN WHERE "
					+ "WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUST_SNO='"
					+ iCustNo
					+ "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getFATCAUpdateInputXML", "sQuery----" + sQuery + "\n"
					+ "sOutput----" + sOutput);
			if (sCustomer.equalsIgnoreCase("")) {
				sCustomer = "#CUST_" + iCustNo + "#";
			}
			String sOption = sOutput.get(0).get(10);
			logInfo("getFATCAUpdateInputXML", "sOption..." + sOption);
			String sCust_id = formObject.getValue("cust_id").toString();
			logInfo("getFATCAUpdateInputXML", "scust_id...." + sCust_id);
			if (sOption.equalsIgnoreCase("UPD")
					&& sCustomer.equalsIgnoreCase("")) {
				sOption = "ADD";
			}
			if (sOption.equalsIgnoreCase("")) {
				sOption = "ADD";
			}
			try {
				sCustomer = String.valueOf(Integer.parseInt(sCustomer));
			} catch (Exception e) {
				logError("getFATCAUpdateInputXML ", e);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>SaveFATCADetails</Calltype>" + "<customerId>"
					+ sCustomer
					+ "</customerId>"
					+ "<customerInfoType>FATCADetails</customerInfoType>"
					+ "<maintenanceOption>"
					+ sOption
					+ "</maintenanceOption>"
					+ "<USpassportholder>"
					+ sOutput.get(0).get(0)
					+ "</USpassportholder>"
					+ "<USTaxLiable>"
					+ sOutput.get(0).get(1)
					+ "</USTaxLiable>"
					+ "<TINorSSN>"
					+ sOutput.get(0).get(2)
					+ "</TINorSSN>"
					+ "<W8_Sign_Date>"
					+ sOutput.get(0).get(5)
					+ "</W8_Sign_Date>"
					+ "<customerFATCAClsfctnDate>"
					+ sOutput.get(0).get(4)
					+ "</customerFATCAClsfctnDate>"
					+ "<documentCollected>"
					+ sOutput.get(0).get(3)
					+ "</documentCollected>"
					+ "<USIndiaciaFound>"
					+ sOutput.get(0).get(6)
					+ "</USIndiaciaFound>"
					+ "<customerFATCAClsfctn>"
					+ sOutput.get(0).get(7)
					+ "</customerFATCAClsfctn>"
					+ "<countryOfBirth>"
					+ sOutput.get(0).get(8)
					+ "</countryOfBirth>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getFATCAUpdateInputXML ", e);
		}
		logInfo("getFATCAUpdateInputXML", "sInputXML: " + sInputXML);
		return sInputXML;
	}

	public String getKYCUpdateInputXML(int iCustNo) {
		logInfo("getKYCUpdateInputXML", "INSIDE");
		String sInputXML = "";
		try {
			String sReqType = formObject.getValue(REQUEST_TYPE).toString();
			String sCustomer = formObject.getTableCellValue(ACC_RELATION,
					iCustNo - 1, 2);
			String sRelation = formObject.getTableCellValue(ACC_RELATION,
					iCustNo - 1, 7);
			String sOption = "ADD";
			String sQuery = "";
			logInfo("getKYCUpdateInputXML", "sCustomer: " + sCustomer
					+ ", sRelation: " + sRelation);
			if (sRelation.equalsIgnoreCase("Existing")) {
				sOption = "UPD";
			}
			if (sCustomer.equalsIgnoreCase("")) {
				sCustomer = "#CUST_" + iCustNo + "#";
			}
			if (sReqType.equalsIgnoreCase("Category Change Only")
					|| (sReqType
							.equalsIgnoreCase("New Account with Category Change") && iCustNo == 1)) {
				sQuery = "SELECT case when IS_SALARY_TRANSFER_CAT_CHANGE ='True'  then 'SALARY TRANSFER'  "
						+ "			when IS_MORTAGAGE_CAT_CHANGE ='True'  then 'MORTAGAGE'"
						+ "		    when IS_INSURANCE_CAT_CHANGE ='True'  then 'INSURANCE'"
						+ "		    when IS_TRB_CAT_CHANGE ='True'  then 'TRB'"
						+ "		    when IS_OTHERS_CAT_CHANGE ='True'  then 'OTHERS'"
						+ "			else ''  end Membership_With,"
						+ " 		case when IS_PREVILEGE_TP_CAT_CHANGE ='True'  then 'PREVILEGE_TP'  "
						+ "			when IS_TRAVEL_CAT_CHANGE ='True'  then 'TRAVEL'"
						+ "		    when IS_SPORT_CAT_CHANGE ='True'  then 'SPORT'"
						+ "		    when IS_SHOPPING_CAT_CHANGE ='True'  then 'SHOPPING'"
						+ "		    when IS_ENTERTAINMENT_CAT_CHANGE ='True'  then 'ENTERTAINMENT'"
						+ "			else ''  end Privilege_Club,"
						+ "DECODE(IS_EXCELLENCY_TP_CAT_CHANGE,'True','EXCELLENCY_TP','') Excellency,TO_CHAR(LAST_CAT_CAHNGE_DATE,'dd/MM/yyyy') LAST_CAT_CAHNGE_DATE FROM "
						+ sExtTable + " WHERE WI_NAME ='" + sWorkitemId + "'";
			} else {
				sQuery = "SELECT case when IS_SALARY_TRANSFER ='True'  then 'SALARY TRANSFER'  "
						+ "			when IS_MORTAGAGE ='True'  then 'MORTAGAGE'"
						+ "		    when IS_INSURANCE ='True'  then 'INSURANCE'"
						+ "		    when IS_TRB ='True'  then 'TRB'"
						+ "		    when IS_OTHERS ='True'  then 'OTHERS'"
						+ "			else ''  end Membership_With,"
						+ " 		case when IS_PREVILEGE_TP ='True'  then 'PREVILEGE_TP'  "
						+ "			when IS_TRAVEL ='True'  then 'TRAVEL'"
						+ "		    when IS_SPORT ='True'  then 'SPORT'"
						+ "		    when IS_SHOPPING ='True'  then 'SHOPPING'"
						+ "		    when IS_ENTERTAINMENT ='True'  then 'ENTERTAINMENT'"
						+ "			else ''  end Privilege_Club,"
						+ "DECODE(IS_EXCELLENCY_TP,'True','EXCELLENCY_TP','') Excellency	FROM USR_0_CUST_TXN WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUST_SNO ='" + iCustNo + "'";
			}

			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getKYCUpdateInputXML", "sQuery----" + sQuery);
			logInfo("getKYCUpdateInputXML", "sOutput----" + sOutput);
			String sMemberShipWith = sOutput.get(0).get(0);
			String sPrivilegeClub = sOutput.get(0).get(1);
			String sExcellency = sOutput.get(0).get(2);
			String sLastCatChangeDate = "";
			if (sOutput.size() == 4) {
				sLastCatChangeDate = sOutput.get(0).get(3);
			}
			if (formObject.getValue(SCAN_MODE).toString()
					.equalsIgnoreCase("New WMS ID")) {
				// sQuery
				// ="SELECT USERID FROM USR_0_DEC_HIST WHERE WI_NAME ='"+sWorkitemId+"' AND ROWNUM=1 ORDER BY "
				// + "CREATE_DAT";//Commented for invalid column on
				// 27042023(Performanceissue) by Ameena

				sQuery = "SELECT USERID FROM USR_0_AO_DEC_HIST WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND ROWNUM=1 ORDER BY "
						+ "CREATE_DAT";
			} else {
				// sQuery
				// ="SELECT USERID FROM USR_0_DEC_HIST WHERE WI_NAME ='"+sWorkitemId+"' AND "
				// + "WS_NAME ='Introduction'";//Commented for invalid column on
				// 27042023(Performanceissue) by Ameena
				sQuery = "SELECT USERID FROM USR_0_AO_DEC_HIST WHERE WI_NAME ='"
						+ sWorkitemId + "' AND " + "WS_NAME ='Introduction'";
			}
			sOutput = formObject.getDataFromDB(sQuery);
			String sMakerID = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			logInfo("getKYCUpdateInputXML", "sQuery----" + sQuery);
			logInfo("getKYCUpdateInputXML", "sOutput----" + sOutput);
			sQuery = "SELECT TO_CHAR(DATE_ATTAINING_MAJORITY,'dd/MM/yyyy') DATE_ATTAINING_MAJORITY,RES_BUILDING,"
					+ "RES_VILLA,RES_LANDMARK,DECODE(RES_STATE,'OTHERS',RES_OTHER,RES_STATE) AS RES_STATE,RES_CNTRY,"
					+ "DECODE(RES_CITY,'OTHERS',OTHER_PERM_CITY,RES_CITY) AS RES_CITY,VISA_STATUS, PASS_TYPE,"
					+ "TO_CHAR(KYC_PREPARE_DATE,'dd/MM/yyyy') KYC_PREPARE_DATE, TO_CHAR(EXISTING_SINCE,'dd/MM/yyyy') "
					+ "EXISTING_SINCE, ACC_COVERED_IN_FORM,ACC_RELATIONSHIP_PURPOSE,FINANCIAL_ACT_COUNTRIES,"
					+ "INTERNATIONAL_ACT_NATURE,MONTHLY_DEPOSIT_CASH,MONTHLY_DEPOSIT_CHEQUE, MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH, "
					+ "MONTHLY_WITHDRAWL_CHEQUE, MONTHLY_WITHDRAWL_TRANSFER,DEALS_ARMAMENT,HAWALA,PEP,IS_UAE_RESIDENT,"
					+ "DETAILS_REAL_ESTATE,DETAILS_INVESTMENT,DETAILS_CASH_EQUIVALENT,DETAILS_ESTIMETED_NETWORTH,"
					+ "BANK_NAME_1,BANK_NAME_2,BANK_NAME_3,BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,"
					+ "CURR_RELATION_TYPE,NEW_RELATION_TYPE,salary_transfer,deals_in_wmd from usr_0_cust_txn "
					+ "where WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUST_SNO ='"
					+ iCustNo + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getKYCUpdateInputXML", "sQuery----" + sQuery);
			logInfo("getKYCUpdateInputXML", "sOutput----" + sOutput);
			try {
				sCustomer = String.valueOf(Integer.parseInt(sCustomer));
			} catch (Exception e) {
				logError("getKYCUpdateInputXML ", e);
			}
			if (sOutput != null && sOutput.size() > 0) {
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>SaveKYCDetails</Calltype>" + "<Customer>"
						+ "<customerId>"
						+ sCustomer
						+ "</customerId>"
						+ "<maintenanceOption>"
						+ sOption
						+ "</maintenanceOption>"
						+ "<dateOfMaturity>"
						+ sOutput.get(0).get(0)
						+ "</dateOfMaturity>"
						+ "<permAddBuildingName>"
						+ sOutput.get(0).get(1)
						+ "</permAddBuildingName>"
						+ "<permAddVillaFlatNo>"
						+ sOutput.get(0).get(2)
						+ "</permAddVillaFlatNo>"
						+ "<permAddStreetNoNameLandmark>"
						+ sOutput.get(0).get(3)
						+ "</permAddStreetNoNameLandmark>"
						+ "<permAddState>"
						+ sOutput.get(0).get(4)
						+ "</permAddState>"
						+ "<permAddCountry>"
						+ sOutput.get(0).get(5)
						+ "</permAddCountry>"
						+ "<permAddCity>"
						+ sOutput.get(0).get(6)
						+ "</permAddCity>"
						+ "<visaStatus>"
						+ sOutput.get(0).get(7)
						+ "</visaStatus>"
						+ "<passportType>"
						+ sOutput.get(0).get(8)
						+ "</passportType>"
						+ "<dateOfKYCPreparation>"
						+ sOutput.get(0).get(9)
						+ "</dateOfKYCPreparation>"
						+ "<existingRelationshipSince>"
						+ sOutput.get(0).get(10)
						+ "</existingRelationshipSince>"
						+ "<accountNoCovered>"
						+ sOutput.get(0).get(11)
						+ "</accountNoCovered>"
						+ "<purposeForAccountReltnship>"
						+ sOutput.get(0).get(12)
						+ "</purposeForAccountReltnship>"
						+ "<finActivitiesCountries>"
						+ sOutput.get(0).get(13)
						+ "</finActivitiesCountries>"
						+ "<natureOfActivityOfIntlFTs>"
						+ sOutput.get(0).get(14)
						+ "</natureOfActivityOfIntlFTs>"
						+ "<expctdMonDepCash>"
						+ sOutput.get(0).get(15)
						+ "</expctdMonDepCash>"
						+ "<expctdMonDepCheque>"
						+ sOutput.get(0).get(16)
						+ "</expctdMonDepCheque>"
						+ "<expctdMonDepTransfer>"
						+ sOutput.get(0).get(17)
						+ "</expctdMonDepTransfer>"
						+ "<expctdMonWthdrlCash>"
						+ sOutput.get(0).get(18)
						+ "</expctdMonWthdrlCash>"
						+ "<expctdMonWthdrlCheque>"
						+ sOutput.get(0).get(19)
						+ "</expctdMonWthdrlCheque>"
						+ "<expctdMonWthdrlTransfer>"
						+ sOutput.get(0).get(20)
						+ "</expctdMonWthdrlTransfer>"
						+ "<dealsInArmaments>"
						+ sOutput.get(0).get(21)
						+ "</dealsInArmaments>"
						+ "<hawala>"
						+ sOutput.get(0).get(22)
						+ "</hawala>"
						+ "<customerPEPFlag>"
						+ sOutput.get(0).get(23)
						+ "</customerPEPFlag>"
						+ "<customerUAEResidentFlag>"
						+ sOutput.get(0).get(24)
						+ "</customerUAEResidentFlag>"
						+ "<detailRealEstate>"
						+ sOutput.get(0).get(25)
						+ "</detailRealEstate>"
						+ "<detailInvestment>"
						+ sOutput.get(0).get(26)
						+ "</detailInvestment>"
						+ "<detailCASH>"
						+ sOutput.get(0).get(27)
						+ "</detailCASH>"
						+ "<detailNetWorth>"
						+ sOutput.get(0).get(28)
						+ "</detailNetWorth>"
						+ "<membershipWith>"
						+ sMemberShipWith
						+ "</membershipWith>"
						+ "<privilegeClub>"
						+ sPrivilegeClub
						+ "</privilegeClub>"
						+ "<excellencyBenifit>"
						+ sExcellency
						+ "</excellencyBenifit>"
						+ "<relationship1BankName>"
						+ sOutput.get(0).get(29)
						+ "</relationship1BankName>"
						+ "<relationship2BankName>"
						+ sOutput.get(0).get(30)
						+ "</relationship2BankName>"
						+ "<relationship3BankName>"
						+ sOutput.get(0).get(31)
						+ "</relationship3BankName>"
						+ "<relationship1Address>"
						+ sOutput.get(0).get(32)
						+ "</relationship1Address>"
						+ "<relationship2Address>"
						+ sOutput.get(0).get(33)
						+ "</relationship2Address>"
						+ "<relationship3Address>"
						+ sOutput.get(0).get(34)
						+ "</relationship3Address>"
						+ "<customerTypeOldFlag>"
						+ sOutput.get(0).get(35)
						+ "</customerTypeOldFlag>"
						+ "<customerTypeNewFlag>"
						+ sOutput.get(0).get(36)
						+ "</customerTypeNewFlag>"
						+
						// kyc
						// "<salaryTransfer>"+sOutput.get(0).get(37)+"</salaryTransfer>"+
						// "<dealsInWMD>"+sOutput.get(0).get(38)+"</dealsInWMD>"+
						"<lastCategoryChangeDate>"
						+ sLastCatChangeDate
						+ "</lastCategoryChangeDate>"
						+ "<onshoreOffshoreFlag>Onshore</onshoreOffshoreFlag>"
						+
						// "<dealsInWMD>No</dealsInWMD>"+
						"<makerid>"
						+ sMakerID
						+ "</makerid>"
						+ "</Customer>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
			}
			logInfo("getKYCUpdateInputXML", "sInputXML: " + sInputXML);
			return sInputXML;
		} catch (Exception e) {
			logError("getKYCUpdateInputXML", e);
		}
		return sInputXML;
	}

	public String getEIDAUpdateInputXML(int iCustNo) {
		logInfo("getEIDAUpdateInputXML", "INSIDE");
		String sInputXML = "";
		try {
			String sCustomer = formObject.getTableCellValue(ACC_RELATION,
					iCustNo - 1, 2); // String sCustomer=
										// objChkRepeater.getValue(iCustNo,"acc_relation.cid");
			String sRelation = formObject.getTableCellValue(ACC_RELATION,
					iCustNo - 1, 7); // String sRelation=
										// objChkRepeater.getValue(iCustNo,"acc_relation.BANK_RELATION");
			String sOption = "ADD";
			if (sRelation.equalsIgnoreCase("Existing")) {
				sOption = "UPD";
			}
			if (sCustomer.equalsIgnoreCase("")) {
				sCustomer = "#CUST_" + iCustNo + "#";
			}
			String sQuery = "SELECT EIDA_EIDA_NO,EIDA_FULL_NAME,MOTHER_NAME_EIDA,EIDA_ADDRESS, EIDA_CITY, EIDA_STATE,EIDA_COUNTRY,EIDA_PHONE_NO,EIDA_MOBILE_NO,EIDA_EMAIL,TO_CHAR(EIDA_DOB,'dd/MM/yyyy') EIDA_DOB, EIDA_PASS_NO,TO_CHAR(EIDA_PASS_ISSUE_DATE,'dd/MM/yyyy') EIDA_PASS_ISSUE_DATE,TO_CHAR(EIDA_PASS_EXP_DATE,'dd/MM/yyyy') EIDA_PASS_EXP_DATE,EIDA_NATIONALITY,EIDA_PROFESSION,TO_CHAR(EIDA_VISA_EXP_DATE,'dd/MM/yyyy') EIDA_VISA_EXP_DATE,EIDA_EMP_NAME,EIDA_COUNTRY_RESIDENCE,EIDA_GENDER,TO_CHAR(EIDA_VISA_ISSUE_DATE,'DD/MM/YYYY') EIDA_VISA_ISSUE_DATE,PASS_TYPE from usr_0_cust_txn where WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO='" + iCustNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo(" sQuery ", sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", String.valueOf(sOutput.size()));
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>SaveEIDADetails</Calltype>" + "<Customer>"
					+ "<customerId>"
					+ sCustomer
					+ "</customerId>"
					+ "<maintenanceOption>"
					+ sOption
					+ "</maintenanceOption>"
					+ "<EIDANo>"
					+ sOutput.get(0).get(0)
					+ "</EIDANo>"
					+ "<full_Name>"
					+ sOutput.get(0).get(1)
					+ "</full_Name>"
					+ "<motherName>"
					+ sOutput.get(0).get(2)
					+ "</motherName>"
					+ "<addressType>"
					+ sOutput.get(0).get(3)
					+ "</addressType>"
					+ "<city>"
					+ sOutput.get(0).get(4)
					+ "</city>"
					+ "<stateEmirate>"
					+ sOutput.get(0).get(5)
					+ "</stateEmirate>"
					+ "<country>"
					+ sOutput.get(0).get(6)
					+ "</country>"
					+ "<phoneNo>"
					+ sOutput.get(0).get(7)
					+ "</phoneNo>"
					+ "<mobileNo>"
					+ sOutput.get(0).get(8)
					+ "</mobileNo>"
					+ "<email>"
					+ sOutput.get(0).get(9)
					+ "</email>"
					+ "<dateOfBirth>"
					+ sOutput.get(0).get(10)
					+ "</dateOfBirth>"
					+ "<passportNo>"
					+ sOutput.get(0).get(11)
					+ "</passportNo>"
					+ "<passportIssueDate>"
					+ sOutput.get(0).get(12)
					+ "</passportIssueDate>"
					+ "<passportExpiryDate>"
					+ sOutput.get(0).get(13)
					+ "</passportExpiryDate>"
					+ "<passportType>"
					+ sOutput.get(0).get(21)
					+ "</passportType>"
					+ // changes for CQRN-0000178215
					"<nationality>"
					+ sOutput.get(0).get(14)
					+ "</nationality>"
					+ // changes for CQRN-0000178215
					"<profession>"
					+ sOutput.get(0).get(15)
					+ "</profession>"
					+ // changes for CQRN-0000178215
					"<gender>"
					+ sOutput.get(0).get(19)
					+ "</gender>"
					+ // changes for CQRN-0000178215
					"<employerName>"
					+ sOutput.get(0).get(17)
					+ "</employerName>"
					+ // changes for CQRN-0000178215
					"<EIDAIssueDate>"
					+ sOutput.get(0).get(20)
					+ "</EIDAIssueDate>"
					+ // changes for CQRN-0000178215
					"<EIDAExpiryDate>"
					+ sOutput.get(0).get(16)
					+ "</EIDAExpiryDate>"
					+ "<cardNumber>"
					+ sOutput.get(0).get(0)
					+ "</cardNumber>"
					+ "</Customer>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
			return sInputXML;
		} catch (Exception e) {
			logError("Exception in  getEIDAUpdateInputXML ", e);
		}
		return sInputXML;
	}

	public String getLeadInputXML(String sType) {
		String sInputXML = "";
		try {
			String sCustomerID = getPrimaryCustomerID();
			String sQuery = "SELECT CRM_PRODUCT FROM USR_0_LEAD_PRODUCTS WHERE WMS_PRODUCT='"
					+ sType + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String sProduct = sOutput.get(0).get(0);
			sQuery = "SELECT CUST_ID,EMP_SAL,CUST_FULL_NAME,CORR_PO_BOX,CORR_EMAIL,CORR_MOB,CORR_PHONE, CORR_CITY,CORR_STATE,EMP_NAME,EMP_FAX,EMP_PHONE FROM USR_0_CUST_TXN WHERE WI_NAME='"
					+ sWorkitemId + "' AND CUST_ID='" + sCustomerID + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sSal = sOutput.get(0).get(1);
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Lead_Generation</Calltype>"
					+ "<existingCustomer>Yes</existingCustomer>"
					+ "<accountNumber></accountNumber>" + "<branch></branch>"
					+ "<customerID>"
					+ sCustomerID
					+ "</customerID>"
					+ "<creditCardNumber></creditCardNumber>"
					+ "<preferredContactTime></preferredContactTime>"
					+ "<preferredContactMode></preferredContactMode>"
					+ "<salary>"
					+ sSal
					+ "</salary>"
					+ "<customerCategory>C</customerCategory>"
					+ "<customerName>"
					+ sOutput.get(0).get(2)
					+ "</customerName>"
					+ "<contactEmail>"
					+ sOutput.get(0).get(4)
					+ "</contactEmail>"
					+ "<contactLanguage></contactLanguage>"
					+ "<contactAddress>"
					+ sOutput.get(0).get(7)
					+ "</contactAddress>"
					+ "<contactEmirate>"
					+ sOutput.get(0).get(8)
					+ "</contactEmirate>"
					+ "<contactPOBox>"
					+ sOutput.get(0).get(3)
					+ "</contactPOBox>"
					+ "<contactResidenceNo>"
					+ sOutput.get(0).get(6)
					+ "</contactResidenceNo>"
					+ "<contactMobileNo>"
					+ sOutput.get(0).get(5)
					+ "</contactMobileNo>"
					+ "<employmentName>"
					+ sOutput.get(0).get(9)
					+ "</employmentName>"
					+ "<employmentOfficeNo>"
					+ sOutput.get(0).get(11)
					+ "</employmentOfficeNo>"
					+ "<employmentFaxNo>"
					+ sOutput.get(0).get(10)
					+ "</employmentFaxNo>"
					+ "<businessCategory></businessCategory>"
					+ "<businessCategoryType></businessCategoryType>"
					+ "<productService>"
					+ sProduct
					+ "</productService>"
					+ "<feedBack></feedBack>"
					+ "<priority></priority>"
					+ "<contactBefore></contactBefore>"
					+ "<leadDescription></leadDescription>"
					+ "<receivedBy></receivedBy>"
					+ "<receiverPosition></receiverPosition>"
					+ "<receiverLocation></receiverLocation>"
					+ "<receiverAccessPoint></receiverAccessPoint>"
					+ "<receiverBranch></receiverBranch>"
					+ "<leadInitiation></leadInitiation>"
					+ "<staffId></staffId>"
					+ "<publishFlag></publishFlag>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getLeadInputXML ", e);
		}
		return sInputXML;
	}

	public String getCustRelationInputXML(String sCustId, int sNo,
			String sPrimaryRel, String sBankRel) {
		logInfo("getCustRelationInputXML", "INSIDE");
		String sInputXML = "";
		try {
			String sCustomer = formObject.getTableCellValue(ACC_RELATION,
					sNo - 1, 2);
			String sRelation = formObject.getTableCellValue(ACC_RELATION,
					sNo - 1, 8);
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					sNo - 1, 7);
			String sOption = "A";
			String sQuery = "SELECT UNIQUE_ID FROM USR_0_CUST_RELATION WHERE CUST_RELATION ='"
					+ sPrimaryRel + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			log.info("sOutput===" + sOutput);
			sPrimaryRel = sOutput.get(0).get(0);
			sQuery = "SELECT UNIQUE_ID FROM USR_0_CUST_RELATION WHERE CUST_RELATION ='"
					+ sRelation + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			log.info("sOutput1===" + sOutput);
			sRelation = sOutput.get(0).get(0);
			if (sCustomer.equalsIgnoreCase("")) {
				sCustomer = "#CUST_" + sNo + "#";
			}
			if (sBankRel.equalsIgnoreCase("Existing")
					&& sBankRelation.equalsIgnoreCase("Existing")) {
				sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_EXISTING_CUST_RELATION WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND PRIMARY_CUST_ID = '"
						+ sCustId
						+ "' AND SECONDARY_CUST_ID = '" + sCustomer + "'";
				sOutput = formObject.getDataFromDB(sQuery);
				log.info("sQuery===" + sQuery);
				if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sOption = "M";
				}
			}
			try {
				sCustId = String.valueOf(Integer.parseInt(sCustId));
			} catch (Exception e) {
				logError("getCustRelationInputXML ", e);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Account</Calltype>"
					+ "<ServiceName>customerRelationUpdate</ServiceName>"
					+ "<maintenanceOption>"
					+ sOption
					+ "</maintenanceOption>"
					+ "<custAccountNumber></custAccountNumber>"
					+ "<customerId>"
					+ sCustId
					+ "</customerId>"
					+ "<Relation>"
					+ "<RelatedCustomerId>"
					+ sCustomer
					+ "</RelatedCustomerId>"
					+ "<CustomerRelationship>"
					+ sPrimaryRel
					+ "</CustomerRelationship>"
					+ "<InvRelationship>"
					+ sRelation
					+ "</InvRelationship>"
					+ "<Relation>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("getCustRelationInputXML", e);
		}
		return sInputXML;
	}

	public String getAddEtihadXML(String sCustNo, String sType) {
		logInfo("getAddEtihadXML", "INSIDE");
		String sInputXML = "";
		String sEtihadNo = "";
		try {
			if (sType.equalsIgnoreCase("M")) {
				sEtihadNo = formObject.getValue("ETIHAD_NO").toString();
			}
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT FINAL_FULL_NAME,STAFF_FLAG FROM "
							+ "USR_0_CUST_TXN WHERE CUST_SNO ='" + sCustNo
							+ "' AND WI_NAME ='" + sWorkitemId + "'");
			logInfo("getAddEtihadXML", "Etihad Output--" + sOutput);
			String sStaffFlag = sOutput.get(0).get(1);

			if (sStaffFlag.equalsIgnoreCase("")) {
				sStaffFlag = "N";
			} else {
				sStaffFlag = sStaffFlag.substring(0, 1);
			}

			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>ADD_ETIHAD_GUEST</Calltype>" + "<CUST_ID>"
					+ getPrimaryCustomerID()
					+ "</CUST_ID>"
					+ "<CUST_NAME>"
					+ sOutput.get(0).get(0)
					+ "</CUST_NAME>"
					+ "<STAFF_FLAG>"
					+ sStaffFlag
					+ "</STAFF_FLAG>"
					+ "<ACTION_FLAG>"
					+ sType
					+ "</ACTION_FLAG>"
					+ "<ETIHAD_NO>"
					+ sEtihadNo
					+ "</ETIHAD_NO>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getAddEtihadXML ", e);
		}
		return sInputXML;
	}

	public String getSCInputXML(String sProdCode, String sType, int iNo) {
		String sInputXML = "";
		try {
			String sOption = "";
			String sCurrCode = formObject.getTableCellValue(PRODUCT_QUEUE,
					iNo - 1, 3);// String sCurrCode =
								// objChkRepeater.getValue(iNo,"PRODUCT_QUEUE.CURRENCY");
			String sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE,
					iNo - 1, 4); // String sAccNo =
									// objChkRepeater.getValue(iNo,"PRODUCT_QUEUE.ACC_NO");
			String sQuery = "SELECT SERVICE_PACKAGE FROM USR_0_PRODUCT_MASTER WHERE PRODUCT_CODE ='"
					+ sProdCode + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String sOldPackage = sOutput.get(0).get(0);

			String sPrimaryCustNo = getPrimaryCustomerSNO();
			sQuery = "SELECT CUST_SEG,CUST_ID FROM USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId + "' AND CUST_SNO ='" + sPrimaryCustNo + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sCustSegment = sOutput.get(0).get(0);
			String sCustID = sOutput.get(0).get(1);

			sQuery = "SELECT PACKAGE_NAME FROM USR_0_ACC_SERVICE_CHARGES WHERE CURRENCY_CODE ='"
					+ sCurrCode
					+ "' AND "
					+ "CUST_SEGMENT='"
					+ sCustSegment
					+ "'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sNewPackage = sOutput.get(0).get(0);

			if (sOldPackage.equalsIgnoreCase("")) {
				sOption = "A";
			} else {
				sOption = "M";
			}

			if (sAccNo.equalsIgnoreCase("")) {
				sAccNo = "#ACCOUNT_" + iNo + "#";
			}

			if (sCustID.equalsIgnoreCase("")) {
				sCustID = "#CUST_" + sPrimaryCustNo + "#";
			}

			if (!sOldPackage.equalsIgnoreCase(sNewPackage)
					&& !sNewPackage.equalsIgnoreCase("")) {
				try {
					sCustID = String.valueOf(Integer.parseInt(sCustID));
				} catch (Exception e) {
					logError("getSCInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>Modify_Account</Calltype>"
						+ "<ServiceName>serviceChargesUpdate</ServiceName>"
						+ "<maintenanceOption>"
						+ sOption
						+ "</maintenanceOption>"
						+ "<SCCustAccountLevel>"
						+ sType
						+ "</SCCustAccountLevel>"
						+ "<custAccountNumber>"
						+ sAccNo
						+ "</custAccountNumber>"
						+ "<customerId>"
						+ sCustID
						+ "</customerId>"
						+ "<SCPackageNewValue>"
						+ sNewPackage
						+ "</SCPackageNewValue>"
						+ "<SCPackageOldValue>"
						+ sOldPackage
						+ "</SCPackageOldValue>"
						+ "<SCWaiverFlag>N</SCWaiverFlag>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
			}
		} catch (Exception e) {
			logError("Exception in  getSCInputXML ", e);
		}
		return sInputXML;
	}

	public String getFTInputXML(int iSno, String sDebitAccNo) {
		String sInputXML = "";
		try {
			String sToCurrency = formObject.getTableCellValue(PRODUCT_QUEUE,
					iSno - 1, 3); // String sToCurrency
									// =objChkRepeaterAcc.getValue(iSno,"PRODUCT_QUEUE.CURRENCY");
			String sFromCurrency = formObject.getTableCellValue(PRODUCT_QUEUE,
					iSno - 1, 11).toString();// String sFromCurrency
												// =objChkRepeaterAcc.getValue(iSno,"PRODUCT_QUEUE.TRNSFR_FROM_CURRENCY");
			String sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE,
					iSno - 1, 4).toString();// String sAccNo
											// =objChkRepeaterAcc.getValue(iSno,"PRODUCT_QUEUE.ACC_NO");
			String sAmtTransfer = formObject.getTableCellValue(PRODUCT_QUEUE,
					iSno - 1, 13).toString();// String sAmtTransfer
												// =objChkRepeaterAcc.getValue(iSno,"PRODUCT_QUEUE.AMT_TRNSFERED");
			String sCustID = getPrimaryCustomerID();
			String sCreditConvRate = "";
			String sDebitConvRate = "";
			String sAmtLocal = "";
			String sCreditAmt = "";
			String sOutput;
			if (!sFromCurrency.equalsIgnoreCase(sToCurrency)) {
				sOutput = fetchConvRate(sCustID, sFromCurrency, sToCurrency,
						sAmtTransfer); // needs to be checked
				xmlDataParser = new XMLParser(sOutput);
				sCreditConvRate = xmlDataParser.getValueOf("ToAmountToAEDRate");
				sDebitConvRate = xmlDataParser
						.getValueOf("FromAmountToAEDRate");
				sAmtLocal = xmlDataParser.getValueOf("AmountAED");
				sCreditAmt = xmlDataParser.getValueOf("ToAmount");
			} else {
				sCreditConvRate = "1";
				sDebitConvRate = "1";
				sAmtLocal = sAmtTransfer;
				sCreditAmt = sAmtTransfer;
			}
			if (sAccNo.equalsIgnoreCase("")) {
				sAccNo = "#ACCOUNT_" + iSno + "#";
			}
			String sQuery = "SELECT DISTINCT BRANCH_CODE FROM USR_0_PRODUCT_EXISTING WHERE ACC_NO ='"
					+ sDebitAccNo + "' " + "AND WI_NAME ='" + sWorkitemId + "'";
			List<List<String>> sOutput1 = formObject.getDataFromDB(sQuery);
			String sDebitBranch = sOutput1.get(0).get(0);

			sQuery = "SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='debitNarration') DEBITNARRATION ,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='creditNarration')CREDITNARRATION,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='valueDate')valueDate FROM DUAL";
			sOutput1 = formObject.getDataFromDB(sQuery);
			String sDebitNarration = sOutput1.get(0).get(0) + " " + sAccNo;
			String sCreditNarration = sOutput1.get(0).get(1) + " "
					+ sDebitAccNo;
			String sDate = sOutput1.get(0).get(2);
			if (sDate.equalsIgnoreCase("SYSDATE")) {
				Date d = new Date();
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				sDate = dateFormat.format(d);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Funds_Transfer</Calltype>"
					+ "<transactionAmount>"
					+ sAmtTransfer
					+ "</transactionAmount>"
					+ "<transactionCode>INT</transactionCode>"
					+ "<transactionCurrencyCode>"
					+ sFromCurrency
					+ "</transactionCurrencyCode>"
					+ "<localCurrencyCode>AED</localCurrencyCode>"
					+ "<convRateTRNtoLCY>"
					+ sDebitConvRate
					+ "</convRateTRNtoLCY>"
					+ "<orgBranchCode>049</orgBranchCode>"
					+ "<calculateAmountFlag>N</calculateAmountFlag>"
					+ "<txnAmountLocalCurr>"
					+ sAmtLocal
					+ "</txnAmountLocalCurr>"
					+ "<repeatFlag>N</repeatFlag>"
					+ "<serviceChargeFlag>N</serviceChargeFlag>"
					+ "<forceDebitFlag>N</forceDebitFlag>"
					+ "<postSuspenseFlag>N</postSuspenseFlag>"
					+ "<debitAcctNumber>"
					+ sDebitAccNo
					+ "</debitAcctNumber>"
					+ "<debitAcctBrCode>"
					+ sDebitBranch
					+ "</debitAcctBrCode>"
					+ "<debitNarration>"
					+ sDebitNarration
					+ "</debitNarration>"
					+ "<debitChequeNo></debitChequeNo>"
					+ "<debitCustId></debitCustId>"
					+ "<debitAcctCurrCode>"
					+ sFromCurrency
					+ "</debitAcctCurrCode>"
					+ "<debitAcctCurrTranAmount>"
					+ sAmtTransfer
					+ "</debitAcctCurrTranAmount>"
					+ "<debitConvRateAcctCurrToLCY>"
					+ sDebitConvRate
					+ "</debitConvRateAcctCurrToLCY>"
					+ "<creditAcctNumber>"
					+ sAccNo
					+ "</creditAcctNumber>"
					+ "<creditAcctBrCode></creditAcctBrCode>"
					+ "<creditNarration>"
					+ sCreditNarration
					+ "</creditNarration>"
					+ "<creditCustId>"
					+ sCustID
					+ "</creditCustId>"
					+ "<creditAcctCurrCode>"
					+ sToCurrency
					+ "</creditAcctCurrCode>"
					+ "<creditAcctCurrTranAmount>"
					+ sCreditAmt
					+ "</creditAcctCurrTranAmount>"
					+ "<creditConvRateAcctCurrToLCY>"
					+ sCreditConvRate
					+ "</creditConvRateAcctCurrToLCY>"
					+ "<noDebitFlag>N</noDebitFlag>"
					+ "<customerReferenceNumber></customerReferenceNumber>"
					+ "<valueDate>"
					+ sDate
					+ "</valueDate>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getFTInputXML ", e);
		}
		return sInputXML;
	}

	public String getSIInputXML(int iNo) {
		logInfo("getSIInputXML", "INSIDE");
		String sInputXML = "";
		try {
			String sQuery = "SELECT DEBIT_ACC_NO,CREDIT_PRODUCT,TO_CHAR(FIRST_PAY_DATE,'dd/MM/yyyy') as FIRST_PAY_DATE,"
					+ "TO_CHAR(LAST_PAY_DATE,'dd/MM/yyyy') as LAST_PAY_DATE,(SELECT UNIQUE_ID FROM USR_0_SI_PERIOD A "
					+ "WHERE A.PERIOD=B.PERIOD)PERIOD,AMOUNT FROM USR_0_STANDING_INSTRUCTION B WHERE WI_NAME ='"
					+ sWorkitemId + "' AND SNO ='" + iNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getSIInputXML", "sQuery---" + sQuery);
			logInfo("getSIInputXML", "sOutput---" + sOutput);
			sQuery = "SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='SIForceDebitFlag')SIForceDebitFlag ,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='SIMaxRetriesCount')SIMaxRetriesCount,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='SISCCodeFailure')SISCCodeFailure,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='SISCCodeSuccess')SISCCodeSuccess,"
					+ "(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='SIType')SIType FROM DUAL";
			List<List<String>> sOutputStatic = formObject.getDataFromDB(sQuery);
			logInfo("getSIInputXML", "sOutputStatic---" + sOutputStatic);
			String sFirstPay = sOutput.get(0).get(2);
			String sLastPay = sOutput.get(0).get(3);
			String sProduct = sOutput.get(0).get(1);
			String sDebitAcc = sOutput.get(0).get(0);
			String[] sTemp = sProduct.split("_");
			String sAccNo = "";
			String sSIAccNo = "";
			String sCurrency = "";
			sQuery = "SELECT ACC_NO,(SELECT CURR_CODE FROM USR_0_CURRENCY WHERE CURR_SHORT = A.CURRENCY) CURRENCY "
					+ "FROM USR_0_PRODUCT_SELECTED A WHERE WI_NAME ='"
					+ sWorkitemId + "' order by INSERTIONORDERID";
			List<List<String>> sOutputAcc = formObject.getDataFromDB(sQuery);
			logInfo("getSIInputXML", "2 sQuery---" + sQuery);
			logInfo("getSIInputXML", "sOutputAcc---" + sOutputAcc);
			/*
			 * sAccNo = sOutputAcc.get(0).get(0).replaceAll("\r",""); sAccNo =
			 * sOutputAcc.get(0).get(0).replaceAll("\n",""); sAccNo =
			 * sOutputAcc.get(0).get(0).replaceAll("\t","");
			 */
			sCurrency = sOutputAcc.get(0).get(1).replaceAll("\r", "");
			sCurrency = sCurrency.replaceAll("\n", "");
			sCurrency = sCurrency.replaceAll("\t", "");
			Date d = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String sDate = dateFormat.format(d);
			if (!(sOutputAcc.get(Integer.parseInt(sTemp[2]) - 1)).get(0)
					.equalsIgnoreCase("")) {
				// String[] sAccTemp = sOutput.get(0).get(0).split(",");
				sAccNo = sOutputAcc.get(Integer.parseInt(sTemp[2]) - 1).get(0);
				// sAccTemp[(Integer.parseInt(sTemp[2])-1)];
				sSIAccNo = sAccNo.substring(sAccNo.length() - 6,
						sAccNo.length());
			} else {
				sAccNo = "#ACCOUNT_" + sTemp[2] + "#";
				sSIAccNo = "#ACC_" + sTemp[2] + "#";
			}
			String sNarration = "SI From "
					+ sDebitAcc.substring(sDebitAcc.length() - 6,
							sDebitAcc.length()) + " to " + sSIAccNo;
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Account</Calltype>"
					+ "<ServiceName>standingInstructionUpdate</ServiceName>"
					+ "<maintenanceOption>A</maintenanceOption>"
					+ "<custAccountNumber>"
					+ sDebitAcc
					+ "</custAccountNumber>"
					+ "<SIAmount>"
					+ sOutput.get(0).get(5)
					+ "</SIAmount>"
					+ "<SIBenefAccountBrCode></SIBenefAccountBrCode>"
					+ "<SIBenefAccountNo>"
					+ sAccNo
					+ "</SIBenefAccountNo>"
					+ "<SIBenefCurrency>"
					+ sCurrency
					+ "</SIBenefCurrency>"
					+ "<SIStartDate>"
					+ sDate
					+ "</SIStartDate>"
					+ "<SIEndDate>"
					+ sLastPay
					+ "</SIEndDate>"
					+ "<SIForceDebitFlag>"
					+ sOutputStatic.get(0).get(0)
					+ "</SIForceDebitFlag>"
					+ "<SIFrequency>"
					+ sOutput.get(0).get(4)
					+ "</SIFrequency>"
					+ "<SIInstrcutionNo></SIInstrcutionNo>"
					+ "<SIMaxRetriesCount>"
					+ sOutputStatic.get(0).get(1)
					+ "</SIMaxRetriesCount>"
					+ "<SINarration>"
					+ sNarration
					+ "</SINarration>"
					+ "<SINextDate>"
					+ sFirstPay
					+ "</SINextDate>"
					+ "<SIPriority></SIPriority>"
					+ "<SISCCodeFailure>"
					+ sOutputStatic.get(0).get(2)
					+ "</SISCCodeFailure>"
					+ "<SISCCodeSuccess>"
					+ sOutputStatic.get(0).get(3)
					+ "</SISCCodeSuccess>"
					+ "<SISCCurrencyFailure></SISCCurrencyFailure>"
					+ "<SISCCurrencySuccess></SISCCurrencySuccess>"
					+ "<SIType>"
					+ sOutputStatic.get(0).get(4)
					+ "</SIType>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getSIInputXML ", e);
		}
		logInfo("getSIInputXML", "sInputXML: " + sInputXML);
		return sInputXML;
	}

	public String getNewDebitCardInputXML(String sName, String sProduct,
			String sProductName) {
		String sInputXML = "";
		try {
			logInfo("getNewDebitCardInputXML", "sName: " + sName
					+ ", sProduct: " + sProduct + ", sProductName: "
					+ sProductName);
			String[] sProductTemp = sProductName.split("_");
			logInfo("getNewDebitCardInputXML", "sProductTemp----"
					+ sProductTemp[1]);
			String sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME ='"
					+ sWorkitemId + "' ORDER BY " + "INSERTIONORDERID";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getNewDebitCardInputXML", "sOutput----" + sOutput);
			logInfo("getNewDebitCardInputXML", "sProductTemp[2]: "
					+ sProductTemp[2]);
			String sPrimaryAcc = "";
			if (!sOutput.get((Integer.parseInt(sProductTemp[2]) - 1)).get(0)
					.equalsIgnoreCase("")) {
				// String[] sAccTemp = sOutput.get(0).get(0).split(",");
				sPrimaryAcc = sOutput.get(
						(Integer.parseInt(sProductTemp[2]) - 1)).get(0);
			} else {
				sPrimaryAcc = "#ACCOUNT_" + sProductTemp[2] + "#";
			}

			if (sProduct.equalsIgnoreCase("Islamic")) {
				sProduct = "ISM";
			} else if (sProduct.equalsIgnoreCase("Etihad")) {
				sProduct = "ETD";
			} else {
				sProduct = "CVNONS";
			}

			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Add_Debit_Card_Issuence</Calltype>"
					+ "<CardEmbossName>" + sName.trim() + "</CardEmbossName>"
					+ "<CardPrimaryAccount>" + sPrimaryAcc
					+ "</CardPrimaryAccount>" + "<CardProductGroup>" + sProduct
					+ "</CardProductGroup>" + "<EngineName>" + sEngineName
					+ "</EngineName>" + "<SessionId>" + sSessionId
					+ "</SessionId>" + "<WiName>" + sWorkitemId + "</WiName>"
					+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
		} catch (Exception e) {
			logError("getNewDebitCardInputXML", e);
			sendMessageValuesList(
					"",
					"There is some Technical Error in New Debit Card ,Please contact the administrator.");
		}
		logInfo("getNewDebitCardInputXML", "sInputXML----" + sInputXML);
		return sInputXML;
	}

	public String getSMSInputXML(String sCustID, String sMobile) {
		logInfo("getSMSInputXML", "INSIDE");
		String sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME ='"
				+ sWorkitemId + "' AND CID='1'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String sInputXML = "";
		String sAccount = "";
		logInfo("getSMSInputXML", "sOutput.size(): " + sOutput.size());
		if (sOutput != null && sOutput.size() > 0) {
			sAccount = sOutput.get(0).get(0);
		}
		if (sAccount.equalsIgnoreCase("")) {
			sAccount = "#ACCOUNT_1#";
		}
		try {
			try {
				sCustID = String.valueOf(Integer.parseInt(sCustID));
			} catch (Exception e) {
				logError("getSMSInputXML ", e);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Add_SMS_Reg</Calltype>"
					+ "<DefaultAccountNumber>" + sAccount
					+ "</DefaultAccountNumber>" + "<CustomerId>" + sCustID
					+ "</CustomerId>" + "<MobileNumber>" + sMobile
					+ "</MobileNumber>"
					+ "<PreferedLanguage>EN</PreferedLanguage>"
					+ "<RequestType>A</RequestType>" + "<EngineName>"
					+ sEngineName + "</EngineName>" + "<SessionId>"
					+ sSessionId + "</SessionId>" + "<WiName>" + sWorkitemId
					+ "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("getSMSInputXML", e);
		}
		logInfo("getSMSInputXML", "sInputXML----" + sInputXML);
		return sInputXML;
	}

	public String getEstatementInputXML(int iNo, String sCustomerID) {
		String sInputXML = "";
		try {

			try {
				sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
			} catch (Exception e) {
				logError("getEstatementInputXML ", e);
			}

			sInputXML = "<?xml version=\"1.0\"?>"
					+ "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>estatement_registration</Calltype>"
					+ "<CustomerID>"
					+ sCustomerID
					+ "</CustomerID>"
					+
					// "<AcctNumber>"+sAccNo+"</AcctNumber>"+
					"<AccountType>CH</AccountType>"
					+ "<EstmtSubStatus>Y</EstmtSubStatus>"
					+ // ally it was SU 22122016 initi
					"<PhysicalstmtSubStatus>N</PhysicalstmtSubStatus>"
					+ // initially it was UN
					"<CHANNEL_ID>WMS</CHANNEL_ID>" + "<EngineName>"
					+ sEngineName + "</EngineName>" + "<SessionId>"
					+ sSessionId + "</SessionId>" + "<WiName>" + sWorkitemId
					+ "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("Exception in  getEstatementInputXML ", e);
		}
		return sInputXML;
	}

	public String getMemoInputXML(String sData, String sOption,
			String sMemoType, String Visa) {
		logInfo("getMemoInputXML", "INSIDE");
		String sInputXML = "";
		try {
			List<List<String>> sOutput;
			String sAccount = "";
			String sCustID = getPrimaryCustomerID();
			if (sMemoType.equalsIgnoreCase("C")) {
				if (Visa.equalsIgnoreCase("Under Processing")) {
					sOutput = formObject
							.getDataFromDB("SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='Customer_Memo_Text') MemoText ,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Customer_Memo_Severity') MemoSeverity FROM DUAL");
				} else {
					sOutput = formObject
							.getDataFromDB("SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME='Customer_Memo_EIDA_Text') MemoText ,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='Customer_Memo_Severity') MemoSeverity FROM DUAL");
				}
			} else {
				sOutput = formObject
						.getDataFromDB("SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE PROD_CODE='"
								+ sData
								+ "' AND WI_NAME ='"
								+ sWorkitemId
								+ "' AND CID= '1'");
				logInfo("getMemoInputXML", "sOutput---" + sOutput);
				if (sOutput.size() > 0) {
					sAccount = sOutput.get(0).get(0);
				}
				if (sAccount.equalsIgnoreCase("")) {
					sAccount = "#ACCOUNT_1#";
				}
				sOutput = formObject
						.getDataFromDB("SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
								+ "NAME='Account_Memo_Text') MemoText ,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
								+ "NAME ='Account_Memo_Severity') MemoSeverity FROM DUAL");
				logInfo("getMemoInputXML",
						"query: SELECT (SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
								+ "NAME='Account_Memo_Text') MemoText ,(SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE "
								+ "NAME ='Account_Memo_Severity') MemoSeverity FROM DUAL");
				logInfo("getMemoInputXML", "sOutput: " + sOutput);
			}
			Date d = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String sDate = dateFormat.format(d);

			if (sMemoType.equalsIgnoreCase("C")) {
				try {
					sData = String.valueOf(Integer.parseInt(sData));
				} catch (Exception e) {
					logError("getMemoInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>MODIFY_Account</Calltype>"
						+ "<ServiceName>memoDetailsUpdate</ServiceName>"
						+ "<custAccountNumber></custAccountNumber>"
						+ "<customerId>"
						+ sData
						+ "</customerId>"
						+ "<maintenanceOption>"
						+ sOption
						+ "</maintenanceOption>"
						+ "<MemoText>"
						+ sOutput.get(0).get(0)
						+ "</MemoText>"
						+ "<MemoType>"
						+ sMemoType
						+ "</MemoType>"
						+ "<MemoSeverity>"
						+ sOutput.get(0).get(1)
						+ "</MemoSeverity>"
						+ "<MemoDate>"
						+ sDate
						+ "</MemoDate>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
			} else {
				try {
					sCustID = String.valueOf(Integer.parseInt(sCustID));
				} catch (Exception e) {
					logError("getMemoInputXML ", e);
				}

				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>MODIFY_Account</Calltype>"
						+ "<ServiceName>memoDetailsUpdate</ServiceName>"
						+ "<custAccountNumber>"
						+ sAccount
						+ "</custAccountNumber>"
						+ "<customerId>"
						+ sCustID
						+ "</customerId>"
						+ "<maintenanceOption>"
						+ sOption
						+ "</maintenanceOption>"
						+ "<MemoText>"
						+ sOutput.get(0).get(0)
						+ "</MemoText>"
						+ "<MemoType>"
						+ sMemoType
						+ "</MemoType>"
						+ "<MemoSeverity>"
						+ sOutput.get(0).get(1)
						+ "</MemoSeverity>"
						+ "<MemoDate>"
						+ sDate
						+ "</MemoDate>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>"
						+ "<REF_NO>#REF_NO#</REF_NO>" + "</APWebService_Input>";
			}
		} catch (Exception e) {
			logError("getMemoInputXML", e);
		}
		return sInputXML;
	}

	public String getUpgradeDowngradeDCInputXML() {
		logInfo("getUpgradeDowngradeDCInputXML", "INSIDE CRS");
		String sInputXML = "";
		try {
			String sCustomerID = getPrimaryCustomerID();
			String count = "";
			if (sCustomerID.length() < 6) {
				for (int i = 0; i < (6 - sCustomerID.length()); i++) {
					count = "0" + count;
					logInfo("getUpgradeDowngradeDCInputXML",
							"count inside getupgradedowngrade: " + count);
				}
			}
			sCustomerID = count + sCustomerID;
			logInfo("getUpgradeDowngradeDCInputXML",
					"sCustomerID inside getupgradedowngrade: " + sCustomerID);
			sInputXML = "<?xml version=\"1.0\"?>"
					+ "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Debit_Card</Calltype>"
					+ "<CardMaintenanceType>cardUpgradeDowngrade</CardMaintenanceType>"
					+ "<CustomerID>" + sCustomerID + "</CustomerID>"
					+ "<EngineName>" + sEngineName + "</EngineName>"
					+ "<SessionId>" + sSessionId + "</SessionId>" + "<WiName>"
					+ sWorkitemId + "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			logError("getUpgradeDowngradeDCInputXML", e);
		}
		return sInputXML;
	}

	public String getAddCRSInputXML(int iCustNo, String custype) {
		logInfo("getAddCRSInputXML", "INSIDE CRS");
		logInfo("getAddCRSInputXML", "iCustNo: " + iCustNo + ", custype: "
				+ custype);
		String sCustomer = formObject.getTableCellValue(ACC_RELATION,
				iCustNo - 1, 2); // String sCustomer=
									// objChkRepeater.getValue(iCustNo,"acc_relation.cid");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String cust_relation = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow - 1, 8); // String cust_relation=
										// objChkRepeater.getValue(iSelectedRow,"acc_relation.cust_relation");
		String sQuery = "select first_name,last_name,birthcity,cntry_code taxresidencycountry,tinnumber,reason_id, "
				+ "crscertificationformobtained, classification_id, to_char(crsclassificationdate,'dd/mm/yyyy') "
				+ "crsclassificationdate,to_char(crscertificationdate,'dd/mm/yyyy')crscertificationdate,a.REASON_DESC,"
				+ "'123' tmp,crs_invest_scheme,crs_jurisdiction,crs_income_tax_othr_cntry,"
				+ "(select cntry_code from usr_0_country_mast where country = crs_income_tax_cntry1) "
				+ "as crs_income_tax_cntry1,(select cntry_code from usr_0_country_mast where country "
				+ "=crs_income_tax_cntry2) as crs_income_tax_cntry2,(select cntry_code from usr_0_country_mast "
				+ "where country =crs_income_tax_cntry3) as crs_income_tax_cntry3 "
				+ " from usr_0_crs_details a,usr_0_crs_tin_reasons b,usr_0_crs_cls_types c,usr_0_country_mast d "
				+ "where a.reason_notprovidingtin= b.reason_desc(+) and c.classification_desc(+)= a.crsclassification "
				+ "and c.customer_type='"
				+ custype
				+ "' and acc_relation_sno='"
				+ iCustNo
				+ "' and a.wi_name='"
				+ sWorkitemId + "' " + "and country=taxresidencycountry";
		logInfo("getAddCRSInputXML", "sQuery: " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("getAddCRSInputXML", "sOutput: " + sOutput);
		int ListSize = sOutput.size();
		logInfo("getAddCRSInputXML", "ListSize: " + ListSize);
		if (ListSize == 0) {
			sQuery = "select first_name,last_name,birthcity,'' taxresidencycountry,''tinnumber,''reason_id,crscertificationformobtained, "
					+ " classification_id, to_char(crsclassificationdate,'dd/mm/yyyy')crsclassificationdate,"
					+ " to_char(crscertificationdate,'dd/mm/yyyy')crscertificationdate,'' REASON_DESC,'123' tmp,crs_invest_scheme,crs_jurisdiction,crs_income_tax_othr_cntry,crs_income_tax_cntry1,crs_income_tax_cntry2,crs_income_tax_cntry3 "
					+ " from usr_0_crs_details a,usr_0_crs_cls_types c "
					+ " where  c.classification_desc(+)= a.crsclassification "
					+ " and c.customer_type='"
					+ custype
					+ "' and acc_relation_sno='"
					+ iCustNo
					+ "' and a.wi_name='" + sWorkitemId + "' ";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("getAddCRSInputXML", "2- sQuery: " + sQuery);
			logInfo("getAddCRSInputXML", "2- sOutput: " + sOutput);
		}
		String sInputXML = "";
		if (sCustomer.equalsIgnoreCase("")) {
			sCustomer = "#CUST_" + iCustNo + "#";
		}
		try {
			if (sOutput.size() > 0) {
				String firstName = sOutput.get(0).get(0);
				String lastName = sOutput.get(0).get(1);
				String birthcity = sOutput.get(0).get(2);
				String crsclass = sOutput.get(0).get(7);
				String crsdate = sOutput.get(0).get(8);
				String crscerdate = sOutput.get(0).get(9);
				String crsObtained = sOutput.get(0).get(6);
				String taxResidency = sOutput.get(0).get(12);
				String jurisdiction = sOutput.get(0).get(13);
				String taxCountry = sOutput.get(0).get(14);
				String taxCountry1 = sOutput.get(0).get(15);
				String taxCountry2 = sOutput.get(0).get(16);
				String taxCountry3 = sOutput.get(0).get(17);

				boolean found = false;
				if ("Yes".equalsIgnoreCase(crsObtained)) {
					crsObtained = "Y";
				} else if ("No".equalsIgnoreCase(crsObtained)) {
					crsObtained = "N";
				}
				if ("Yes".equalsIgnoreCase(taxResidency)) {
					taxResidency = "Y";
				} else if ("No".equalsIgnoreCase(taxResidency)) {
					taxResidency = "N";
				}
				if ("Yes".equalsIgnoreCase(jurisdiction)) {
					jurisdiction = "Y";
				} else if ("No".equalsIgnoreCase(jurisdiction)) {
					jurisdiction = "N";
				}
				if ("Yes".equalsIgnoreCase(taxCountry)) {
					taxCountry = "Y";
				} else if ("No".equalsIgnoreCase(taxCountry)) {
					taxCountry = "N";
				}
				try {
					sCustomer = String.valueOf(Integer.parseInt(sCustomer));
				} catch (Exception e) {
					logError("getAddCRSInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>ADD_CRS_DETAILS</Calltype>" + "<CustID>"
						+ sCustomer
						+ "</CustID>"
						+ "<CustType>"
						+ custype
						+ "</CustType>"
						+ "<FIRST_NAME>"
						+ firstName
						+ "</FIRST_NAME>"
						+ "<LAST_NAME>"
						+ lastName
						+ "</LAST_NAME>"
						+ "<CITY_OF_BIRTH>"
						+ birthcity
						+ "</CITY_OF_BIRTH>"
						+ "<CLASS_ID>"
						+ crsclass
						+ "</CLASS_ID>"
						+ "<CERT_OBTAINED>"
						+ crsObtained
						+ "</CERT_OBTAINED>"
						+ "<CERT_DATE>"
						+ crscerdate
						+ "</CERT_DATE>"
						+ "<CLASS_DATE>"
						+ crsdate
						+ "</CLASS_DATE>"
						+ "<dueDiligenceInfo>"
						+ "<uaeResUnderInvestScheme>"
						+ taxResidency
						+ "</uaeResUnderInvestScheme>"
						+ "<resOtherThanUAE>"
						+ jurisdiction
						+ "</resOtherThanUAE>"
						+ "<taxPayerInOtherCountry>"
						+ taxCountry
						+ "</taxPayerInOtherCountry>"
						+ "<taxCountry1>"
						+ taxCountry1
						+ "</taxCountry1>"
						+ "<taxCountry2>"
						+ taxCountry2
						+ "</taxCountry2>"
						+ "<taxCountry3>"
						+ taxCountry3
						+ "</taxCountry3>"
						+ "</dueDiligenceInfo>"
						+ "<SessionId>"
						+ sSessionId
						+ "</SessionId>"
						+ "<EngineName>"
						+ sEngineName
						+ "</EngineName>"
						+ "<WiName>"
						+ sWorkitemId
						+ "</WiName>" + "<TaxCountry>";
				logInfo("getAddCRSInputXML", "partial sInputXML: " + sInputXML);
				for (int i = 0; i < sOutput.size(); i++) {
					sInputXML = sInputXML + "<TaxDetails>";
					sInputXML = sInputXML + "<country>" + sOutput.get(i).get(3)
							+ "</country>";
					sInputXML = sInputXML + "<reason>" + sOutput.get(i).get(5)
							+ "</reason>";
					sInputXML = sInputXML + "<tin>" + sOutput.get(i).get(4)
							+ "</tin>";
					sInputXML = sInputXML + "<reasonDesc>"
							+ sOutput.get(i).get(10) + "</reasonDesc>";
					sInputXML = sInputXML + "</TaxDetails>";
					if (!"".equalsIgnoreCase(sOutput.get(i).get(3))
							|| !"".equalsIgnoreCase(sOutput.get(i).get(5))
							|| !"".equalsIgnoreCase(sOutput.get(i).get(4))
							|| !"".equalsIgnoreCase(sOutput.get(0).get(10))) {
						logInfo("getAddCRSInputXML", "found true");
						found = true;
					}
				}
				sInputXML = sInputXML + "</TaxCountry>";
				sInputXML = sInputXML
						+ "<REF_NO>#REF_NO#</REF_NO></APWebService_Input>";
				logInfo("getAddCRSInputXML", "found: " + found
						+ ", cust_relation: " + cust_relation);
				if (!found && !cust_relation.equalsIgnoreCase("Heirs")) {
					sInputXML = "";
				}
			}
			logInfo("getAddCRSInputXML", "sInputXML: " + sInputXML);
		} catch (Exception e) {
			logError("getAddCRSInputXML", e);
		}
		return sInputXML;
	}

	public String getModifyCustInputXML(int iNo) {
		logInfo("getModifyCustInputXML CUSTOMER_MODIFY ", "iNo " + iNo);
		String sInputXML = "";
		long start_Time1 = System.currentTimeMillis();
		long end_Time = System.currentTimeMillis();
		long diff = System.currentTimeMillis();
		try {
			String sReqType = formObject.getValue("REQUEST_TYPE").toString();
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					iNo - 1, 2); // String sCustID=
									// objChkRepeater.getValue(iNo,"acc_relation.cid");
			String sQuery = "SELECT CUST_ID,RFERRED_BY,EMPLOYEE_TYPE,EXELLENCY_CENTER, REFFER_STAFF_ID,PROMO_CODE,"
					+ "IS_UAE_RESIDENT,RM_CODE,(select country_code from usr_0_country_mast where "
					+ "country=FINAL_RESIDENCE_COUNTRY)FINAL_RESIDENCE_COUNTRY FROM USR_0_CUST_TXN WHERE "
					+ "WI_NAME='"
					+ sWorkitemId
					+ "' AND CUST_SNO='"
					+ iNo
					+ "'";
			logInfo("getModifyCustInputXML sQuery ", sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String sRefferedBy = "";
			String sEmpType = "";
			String sExellencyCenter = "";
			String sRefferStaff = "";
			String sPromoCode = "";
			String sResident = "";
			String sRMCode = "";
			if (sOutput != null && sOutput.size() > 0) {
				sRefferedBy = sOutput.get(0).get(1);
				sEmpType = sOutput.get(0).get(2);
				sExellencyCenter = sOutput.get(0).get(3);
				sRefferStaff = sOutput.get(0).get(4);
				sPromoCode = sOutput.get(0).get(5);
				sResident = sOutput.get(0).get(6);
				sRMCode = sOutput.get(0).get(7);
			}
			String sSourceCode = formObject.getValue("SOURCE_CODE").toString();
			String sCustSeg = formObject.getValue("NEW_CUST_SEGMENT").toString();
			String sChanged = "False";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT (SELECT CURRENT_RISK_BUSSINESS FROM USR_0_RISK_ASSESSMENT_DATA WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND SNO='"
					+ iNo
					+ "') CUST_INDI_RISK, (SELECT CURRENT_RISK_BUSSINESS FROM USR_0_RISK_ASSESSMENT_DATA_CPD WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND SNO='"
					+ iNo
					+ "') CPD_CUST_INDI_RISK FROM DUAL";
			sOutput = formObject.getDataFromDB(sQuery);
			String sRisk = sOutput.get(0).get(0);
			String sCPDRisk = sOutput.get(0).get(1);
			if (sRisk == null) {
				sRisk = "";
			}
			if (sCPDRisk == null) {
				sCPDRisk = "";
			}
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			if (sResident.equalsIgnoreCase("Yes")) {
				sResident = "Resident";
			} else {
				sResident = "Non-Resident";
			}

			if ((sReqType.equalsIgnoreCase("Category Change Only") || sReqType
					.equalsIgnoreCase("New Account with Category Change"))
					&& sActivityName.equalsIgnoreCase("CPD Checker")
					&& iNo == 1) {
				sSourceCode = formObject.getValue("SOURCE_CODE_CAT_CHANGE")
						.toString();
				sRMCode = formObject.getValue("NEW_RM_CODE_CAT_CHANGE")
						.toString();
				sPromoCode = formObject.getValue("PROMO_CODE_CAT_CHANGE")
						.toString();
				sExellencyCenter = formObject.getValue("EXCELLENCY_CENTER_CC")
						.toString();
				if (sExellencyCenter == null) {
					sExellencyCenter = "";
				}

				if (formObject.getValue("NEW_CUST_SEGMENT").toString()
						.equalsIgnoreCase("Private Clients")) {
					sCPDRisk = "Increased Risk";
				}
			}
			
			if ((sReqType.equalsIgnoreCase("Upgrade") || sReqType
					.equalsIgnoreCase("Downgrade"))) {
				sRMCode = formObject.getValue("NEW_RM_CODE_CAT_CHANGE")
						.toString();
			}
			
			if (formObject.getValue("SCAN_MODE").toString()
					.equalsIgnoreCase("New WMS ID")) {
				sRisk = sCPDRisk;
			} else {
				if (!sRisk.equalsIgnoreCase(sCPDRisk)
						&& !sCPDRisk.equalsIgnoreCase("")) {
					sRisk = sCPDRisk;
					sChanged = "True";
				}
			}
			if (sCustID.equalsIgnoreCase("")) {
				sCustID = "#" + "CUST_" + iNo + "#";
			}
			log.info("sAcitivityName..." + sActivityName);
			String sQueryy = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK from usr_0_risk_data where (entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  where wi_name='"
					+ sWorkitemId
					+ "' AND SNO='"
					+ iNo
					+ "' and CUST_CUR_RISK_BANK is not null) and wi_name='"
					+ sWorkitemId + "' AND SNO='" + iNo + "'";
			List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
			log.info("sQueryy....." + sQueryy);
			log.info("sOutputt....." + sOutputt);
			String sCustCurRiskBank = (sOutputt != null && sOutputt.size() > 0) ? sOutputt
					.get(0).get(0).toString()
					: "";
			log.info("sCustCurRiskBank...CH_19042017.." + sCustCurRiskBank);
			if (sCustCurRiskBank == null) {
				sCustCurRiskBank = "";
			}
			if (!sCustCurRiskBank.equalsIgnoreCase("")) {
				log.info("sCustCurRiskBank is not null.....");
				sRisk = sCustCurRiskBank;
			} else {

				log.info("sCustCurRiskBank is null.....");
			}
			sQuery = "SELECT RISK_CODE FROM USR_0_RISK_VALUES WHERE RISK_VALUE=decode('"
					+ sRisk + "','Neutral','Neutral Risk','" + sRisk + "')";
			sOutput = formObject.getDataFromDB(sQuery);
			log.info("sOutput---" + sOutput);
			sRisk = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
					.get(0).toString() : "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT UNIQUE_ID,PROFIT_CENTER_CODE FROM USR_0_CUST_SEGMENT WHERE CUST_SEGMENT ='"
					+ sCustSeg + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			sCustSeg = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
					.get(0).toString() : "";
			String sCenterCode = "";
			sCenterCode = getProfitCenterForCall(formObject.getValue(
					"NEW_CUST_SEGMENT").toString());
			if (sCenterCode.isEmpty()) {
				sCenterCode = (sOutput != null && sOutput.size() > 0) ? sOutput
						.get(0).get(1).toString() : "";
			}
			log.info("sCenterCode...." + sCenterCode);
			sQuery = "SELECT CUST_CATEGORY_TYPE FROM usr_0_cust_cat WHERE CUST_CATEGORY_CODE='"
					+ sCustSeg + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sCustClass = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			if (sReqType.equalsIgnoreCase("Category Change Only")) {
				sQuery = "SELECT DISTINCT FIELD_NAME,replace(replace(NEWVAL,'<','#brace#'),'>','#brace1#') AS NEWVAL FROM USR_0_CHANGE_TRACKER WHERE WI_NAME='"
						+ sWorkitemId
						+ "' AND CUST_SNO='"
						+ iNo
						+ "' AND STATUS ='Pending' AND TRIM(NEWVAL) IS NOT NULL";
			} else if (sActivityName.equalsIgnoreCase("DDE_Acc_INFO_CHK")
					|| sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")) {
				sQuery = "SELECT DISTINCT FIELD_NAME,replace(replace(NEWVAL,'<','#brace#'),'>','#brace1#') AS NEWVAL FROM USR_0_CHANGE_TRACKER WHERE WI_NAME='"
						+ sWorkitemId
						+ "' AND CUST_SNO='"
						+ iNo
						+ "' AND STATUS ='Pending'  AND WORK_STEP IN ('DDE_Cust_Info','QDE_Cust_Info') AND TRIM(NEWVAL) IS NOT NULL";
			} else {
				sQuery = "SELECT DISTINCT FIELD_NAME,replace(replace(NEWVAL,'<','#brace#'),'>','#brace1#') AS NEWVAL FROM USR_0_CHANGE_TRACKER WHERE WI_NAME='"
						+ sWorkitemId
						+ "' AND CUST_SNO='"
						+ iNo
						+ "' AND STATUS ='Pending' AND WORK_STEP ='CPD Maker' AND TRIM(NEWVAL) IS NOT NULL";
			}
			sOutput = formObject.getDataFromDB(sQuery);
			log.info("sOutput---" + sOutput);
			int iTotalRetrived = sOutput.size();
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			if (sReqType.equalsIgnoreCase("New Account")) {
				if (sChanged.equalsIgnoreCase("False")) {
					if ((iTotalRetrived == 0)
							&& (sActivityName
									.equalsIgnoreCase("DDE_Acc_INFO_CHK") || sActivityName
									.equalsIgnoreCase("QDE_Acc_INFO_CHK"))) {
						return sInputXML;
					}
				}
			}
			try {
				sCustID = String.valueOf(Integer.parseInt(sCustID));
			} catch (Exception e) {
				logError("getModifyCustInputXML ", e);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Customer</Calltype>"
					+ "<codMntOption>M</codMntOption>" + "<customerId>"
					+ sCustID + "</customerId>";

			logInfo("getModifyCustInputXML", "sReqType : " + sReqType);
			logInfo("getModifyCustInputXML", "iNo : " + iNo);
			logInfo("getModifyCustInputXML", "sActivityName : " + sActivityName);
			if ((sReqType.equalsIgnoreCase("Category Change Only") || (sReqType
					.equalsIgnoreCase("New Account with Category Change") && iNo == 1))
					&& sActivityName.equalsIgnoreCase("CPD Checker")) {
				logInfo("getModifyCustInputXML", "inside cat change");
				sInputXML = sInputXML + "<custType>" + sCustSeg + "</custType>";
			}else {
				if(sReqType.equalsIgnoreCase("Downgrade")){//Added by krishna
					logInfo("getModifyCustInputXML", "inside cat change krishna");
					sInputXML = sInputXML + "<custType>" + sCustSeg + "</custType>";
				}
				if(sReqType.equalsIgnoreCase("Upgrade")){//Added by krishna
					logInfo("getModifyCustInputXML", "inside cat change krishna");
					sInputXML = sInputXML + "<custType>" + sCustSeg + "</custType>";
				}
			}
			sInputXML = sInputXML + "<custClass>" + sCustClass + "</custClass>";
			if (iTotalRetrived != 0) {
				sInputXML = sInputXML + getModifyValues(sOutput, iNo);
			}
			/* 22032022 SANAL GROVER FAMILY BANKING */
			try {
				sQuery = "SELECT IS_FAMILY_BANKING, HOF_RM_CODE FROM EXT_AO WHERE WI_NAME = N'"
						+ sWorkitemId + "'";
				logInfo("getModifyCustInputXML",
						"RM Code changed for Family Banking: sQuery" + sQuery);
				sOutput = formObject.getDataFromDB(sQuery);
				if (sOutput != null && sOutput.size() > 0) {
					logInfo("getModifyCustInputXML",
							"RM Code changed for Family Banking: IS_FAMILY_BANKING: "
									+ sOutput.get(0).get(0));
					if (sOutput.get(0).get(0).equalsIgnoreCase("Y")
							&& !(sOutput.get(0).get(1).equals(""))) {
						logInfo("getModifyCustInputXML",
								"RM Code changed for Family Banking: Original: "
										+ sRMCode + " : Updated: "
										+ sOutput.get(0).get(1));
						sRMCode = sOutput.get(0).get(1);
					}
				}
			} catch (Exception e) {
				logError("Exception in  getModifyCustInputXML FB ", e);
			}

			/* 22032022 SANAL GROVER FAMILY BANKING */
			sInputXML = sInputXML + "<misCodes>";

			if ((sReqType.equalsIgnoreCase("Category Change Only") || (sReqType
					.equalsIgnoreCase("New Account with Category Change") && iNo == 1))
					&& sActivityName.equalsIgnoreCase("CPD Checker")
					&& iNo == 1) {
				sInputXML = sInputXML + "<misCode>"
						+ "<misCodeType>Comp</misCodeType>"
						+ "<misCodeNumber>1</misCodeNumber>" + "<misCodeText>"
						+ sCenterCode + "</misCodeText>" + "</misCode>"
						+ "<misCode>" + "<misCodeType>Comp</misCodeType>"
						+ "<misCodeNumber>2</misCodeNumber>" + "<misCodeText>"
						+ sRMCode + "</misCodeText>" + "</misCode>";
			} // //added by krishna
			else if ((sReqType.equalsIgnoreCase("Downgrade") || (sReqType
					.equalsIgnoreCase("Upgrade") && iNo == 1)) && iNo == 1) {
				logInfo("getModifyCustInputXML",
						"RM Code changed for Downgrade: Downgrade: "
								+ sCenterCode);
				logInfo("getModifyCustInputXML",
						"RM Code changed for Downgrade: Downgrade: "
								+ sRMCode);
				sInputXML = sInputXML + "<misCode>"
						+ "<misCodeType>Comp</misCodeType>"
						+ "<misCodeNumber>1</misCodeNumber>" + "<misCodeText>"
						+ sCenterCode + "</misCodeText>" + "</misCode>"
						+ "<misCode>" + "<misCodeType>Comp</misCodeType>"
						+ "<misCodeNumber>2</misCodeNumber>" + "<misCodeText>"
						+ sRMCode + "</misCodeText>" + "</misCode>";
			}// end code
			else if (sActivityName.equalsIgnoreCase("CPD Checker")) {
				sInputXML = sInputXML + "<misCode>"
						+ "<misCodeType>Comp</misCodeType>"
						+ "<misCodeNumber>2</misCodeNumber>" + "<misCodeText>"
						+ sRMCode + "</misCodeText>" + "</misCode>";
			}

			List<List<String>> misDetails = formObject
					.getDataFromDB("SELECT SPECIAL_CUSTOMER_IDENTIFIER,SOURCE_CODE, SECRET_QUESTION, SECRET_ANSWER, CONCIERGE_MEMBER FROM USR_0_UDF_DETAILS WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND ACC_RELATION_SERIALNO='"
							+ iNo + "'");
			sQuery = "SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='"
					+ sResident + "'";
			List<List<String>> misQuery = formObject
					.getDataFromDB("select CUST_SEG,EXELLENCY_CENTER from usr_0_cust_txn where wi_name='"
							+ sWorkitemId + "' and cust_sno='" + iNo + "'");
			log.info("misQuery: " + misQuery);

			sOutput = formObject.getDataFromDB(sQuery);
			sResident = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sInputXML = sInputXML + "<misCode>"
					+ "<misCodeType>Comp</misCodeType>"
					+ "<misCodeNumber>3</misCodeNumber>" + "<misCodeText>"
					+ sResident + "</misCodeText>" + "</misCode>"
					+ "</misCodes><CBRCodes>";

			String centresCBRCode = "";
			String SPECIAL_CUSTOMER_IDENTIFIER = "";
			String SOURCE_CODE = "";
			String SECRET_QUESTION = "";
			String SECRET_ANSWER = "";
			String CONCIERGE_MEMBER = "";
			if (misQuery != null && misQuery.size() > 0) {
				if ("Excellency".equalsIgnoreCase(misQuery.get(0).get(0))
						|| "Emirati Excellency".equalsIgnoreCase(misQuery
								.get(0).get(0))) {
					centresCBRCode = "<CBRCode>" + "<Tag>15</Tag>" + "<Value>"
							+ misQuery.get(0).get(1) + "</Value>"
							+ "</CBRCode>";
				}
			}
			if (misDetails != null && misDetails.size() > 0) {
				// if(!("".equalsIgnoreCase(misDetails.get(0).get(0))||null==misDetails.get(0).get(0)))
				if (!(null == misDetails.get(0).get(0) || ""
						.equalsIgnoreCase(misDetails.get(0).get(0)))) {
					SPECIAL_CUSTOMER_IDENTIFIER = "<CBRCode>" + "<Tag>70</Tag>"
							+ "<Value>" + misDetails.get(0).get(0) + "</Value>"
							+ "</CBRCode>";
				}

				// if(!("".equalsIgnoreCase(misDetails.get(0).get(1))||null==misDetails.get(0).get(1)))
				// {
				if (!(null == misDetails.get(0).get(1) || ""
						.equalsIgnoreCase(misDetails.get(0).get(1)))) {
					SOURCE_CODE = "<CBRCode>" + "<Tag>5</Tag>" + "<Value>"
							+ misDetails.get(0).get(1) + "</Value>"
							+ "</CBRCode>";
				}

				// if(!("".equalsIgnoreCase(misDetails.get(0).get(2))||null==misDetails.get(0).get(2)))
				// {

				if (!(null == misDetails.get(0).get(2) || ""
						.equalsIgnoreCase(misDetails.get(0).get(2)))) {
					SECRET_QUESTION = "<CBRCode>" + "<Tag>38</Tag>" + "<Value>"
							+ misDetails.get(0).get(2) + "</Value>"
							+ "</CBRCode>";
				}

				// if(!("".equalsIgnoreCase(misDetails.get(0).get(3))||null==misDetails.get(0).get(3)))
				// {
				if (!(null == misDetails.get(0).get(3) || ""
						.equalsIgnoreCase(misDetails.get(0).get(3)))) {
					SECRET_ANSWER = "<CBRCode>" + "<Tag>39</Tag>" + "<Value>"
							+ misDetails.get(0).get(3) + "</Value>"
							+ "</CBRCode>";
				}

				// if(!("--Select--".equalsIgnoreCase(misDetails.get(0).get(4))||"".equalsIgnoreCase(misDetails.get(0).get(4))
				// ||null==misDetails.get(0).get(4))) {
				if (!(null == misDetails.get(0).get(4) || ""
						.equalsIgnoreCase(misDetails.get(0).get(4)))) {
					if (!("--Select--".equalsIgnoreCase(misDetails.get(0)
							.get(4)))) {
						CONCIERGE_MEMBER = "<CBRCode>" + "<Tag>51</Tag>"
								+ "<Value>" + misDetails.get(0).get(4)
								+ "</Value>" + "</CBRCode>";
					}
				}
			}
			sInputXML = sInputXML + SPECIAL_CUSTOMER_IDENTIFIER + SOURCE_CODE
					+ SECRET_QUESTION + SECRET_ANSWER + CONCIERGE_MEMBER
					+ centresCBRCode;
			if (!sRefferedBy.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>" + "<Tag>41</Tag>"
						+ "<Value>" + sRefferedBy + "</Value>" + "</CBRCode>";
			}
			if (!sRisk.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_23</Tag>"+
						"<Tag>23</Tag>" + "<Value>" + sRisk + "</Value>"
						+ "</CBRCode>";
			}
			if (!sRefferStaff.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_16</Tag>"+
						"<Tag>16</Tag>" + "<Value>" + sRefferStaff + "</Value>"
						+ "</CBRCode>";
			}
			if (!sPromoCode.equalsIgnoreCase("")
					&& !sPromoCode.equalsIgnoreCase("--Select--")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_22</Tag>"+
						"<Tag>22</Tag>" + "<Value>" + sPromoCode + "</Value>"
						+ "</CBRCode>";
			}
			if (!sEmpType.equalsIgnoreCase("")) {
				sOutput = formObject
						.getDataFromDB("SELECT UNIQUE_ID FROM USR_0_EMPLOYER_TYPE WHERE EMPLOYER_TYPE  ='"
								+ sEmpType + "'");
				if (sOutput != null && sOutput.size() > 0) {
					sInputXML = sInputXML + "<CBRCode>" + "<Tag>47</Tag>"
							+ "<Value>" + sOutput.get(0).get(0) + "</Value>"
							+ "</CBRCode>";
				}
			}
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			sQuery = "SELECT COUNT(1) AS PRODUCT_COUNT FROM USR_0_OUTSOURCE_PRODUCT WHERE PRODUCT_CODE IN (SELECT PROD_CODE FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME='"
					+ sWorkitemId + "')";
			sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				if (!sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					sInputXML = sInputXML + "<CBRCode>" + "<Tag>56</Tag>"
							+ "<Value>1</Value>" + "</CBRCode>";
				}
			}
			
			//Added by Shivanshu For KYC 04072023
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			String kycDate=sdf.format(new Date());
			
			//shahbaz
			if(formObject.getValue(REQUEST_TYPE).toString().
					equalsIgnoreCase("New Account with Category Change")||
					formObject.getValue(REQUEST_TYPE).toString().
					equalsIgnoreCase("New Account")){
			sInputXML = sInputXML + "<CBRCode>" 
						    	  + "<Tag>95</Tag>"
						       //   + "<Value>#ACC_OPEN_DATE#</Value>" 
						       + "<Value>"+kycDate+"</Value>" 
						          + "</CBRCode>";
			logInfo("getModifyCustInputXML", "sInputXML : " + sInputXML);
			}
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			start_Time1 = System.currentTimeMillis();
			/*
			 * sInputXML =sInputXML+"</CBRCodes>"+ "<EngineName>" + sEngineName
			 * + "</EngineName>" + "<SessionId>" + sSessionId + "</SessionId>" +
			 * "<REF_NO>#REF_NO#</REF_NO>"+ "<WiName>" + sWorkitemId +
			 * "</WiName>" + "</APWebService_Input>";
			 */

			sInputXML = sInputXML + "</CBRCodes>";
			if (sActivityName.equalsIgnoreCase("DDE_Acc_INFO_CHK")
					|| sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")
					|| sActivityName.equalsIgnoreCase("CPD Checker")) {
				String custProductRelationValue = "";
				sQuery = "SELECT SIMPLYLIFE_FLAG  FROM USR_0_CUST_MASTER_WMS WHERE CUST_ID = '"
						+ sCustID + "'";
				sOutput = formObject.getDataFromDB(sQuery);
				custProductRelationValue = (sOutput != null && sOutput.size() > 0) ? sOutput
						.get(0).get(0).toString()
						: "";
				if (custProductRelationValue.equalsIgnoreCase("Yes")) {
					sInputXML = sInputXML
							+ "<customerProductRelationInfo><custProductRelation2>BOTH</custProductRelation2></customerProductRelationInfo>";
				}
			}
			
			//Changes by Shivanshu for Modify Tag ATP-400
			sQuery = "SELECT PRI_SRC_OF_INCOME,DUAL_NATIONALITY,EMP_ANNUAL_INCOME,OTHER_PERK_ALLOWANCES_AED,"
					+ " COMP_WEBSITE,EMP_NAME,PRIMARYSRCCTRY,EMP_STATUS,EIDA_EXPIRY " //Added by Shivanshu ATP-400
					+ " FROM USR_0_CUST_TXN WHERE "
					+ " WI_NAME='" + sWorkitemId + "' AND CUST_SNO='" + iNo	+ "'";
			logInfo("getModifyCustInputXML sQueryNewTag ", sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			
			
			String natureOfBussinessCode = sOutput.get(0).get(0);
			String secondNationality = sOutput.get(0).get(1) ;
			String annualIncome = sOutput.get(0).get(2);
			String sourceOfIncome =  formObject.getValue(AO_INCOME_SRC).toString(); //added by shivanshu DCRA // sOutput.get(0).get(3);
			String website = sOutput.get(0).get(4);
			String companyName = sOutput.get(0).get(5);
			String countryOfIncome = sOutput.get(0).get(6);
			String employmentTypeCode=sOutput.get(0).get(7);
			String eidaExpiryDate = sOutput.get(0).get(8);
			String dualNationalityFlag = "";
			String selfCompanyName = "";
			String employmentType = "";
			String natureOfBussiness = "";
			String secondNationalityCode = "";
			
			if (sOutput != null && sOutput.size() > 0)	{

				String queryEmp = "SELECT EMP_CODE FROM USR_0_EMPLOYMENT_STATUS WHERE EMP_STATUS ='"+employmentTypeCode+"'";
				List<List<String>> outputCode = formObject.getDataFromDB(queryEmp);								
				if (outputCode != null && outputCode.size() > 0) {
					employmentType	=outputCode.get(0).get(0);
				}
				
				natureOfBussinessCode = getIndustryRisk(natureOfBussinessCode);
				String bussinessQuery = "SELECT INDUSTRY_TYPE FROM USR_0_AO_INDUSTRY_RISK WHERE INDUSTRY_CD = '"+natureOfBussinessCode+"'";
				List<List<String>> output = formObject.getDataFromDB(bussinessQuery);								
				if (output != null && output.size() > 0) {
					natureOfBussiness=output.get(0).get(0);
				}

				String queryCountry = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE COUNTRY='"+ secondNationality + "'";
				List<List<String>> outputCountry = formObject.getDataFromDB(queryCountry);								
				if (outputCountry != null && outputCountry.size() > 0) {
					secondNationalityCode=outputCountry.get(0).get(0);
				}
				if (secondNationality != null && !secondNationality.isEmpty()) {
					dualNationalityFlag = "Y";
				}else {
					dualNationalityFlag = "N";
				}
				
				logInfo("Customer_Modify ", " annualIncome:" + annualIncome + " , sourceOfIncome: " + sourceOfIncome + " , website: "
						+ website + ",companyName : "+ companyName + ",natureOfBussiness : "+ natureOfBussiness
						+ " ,employmentType : "+ employmentType + " ,eidaExpiryDate " +eidaExpiryDate + " ,countryOfIncome :" 
						+ countryOfIncome + " ,secondNationality : "+ secondNationality  + " ,secondNationalityCode : "+ secondNationalityCode);
				
				//ADDED NEW TAGS ATP-400 by Shivanshu
				sInputXML = sInputXML + "<websiteAddress>"+ website	+"</websiteAddress>"
							+ "<sourceOfIncome>"+ sourceOfIncome+"</sourceOfIncome>" 
							+ "<natureOfBusiness>" + natureOfBussiness + "</natureOfBusiness>"
							+ "<employmentType>" + employmentType + "</employmentType>"
							+ "<annualIncome>" + annualIncome	+ "</annualIncome>"
							+ "<eidaExpiryDate>"	+ eidaExpiryDate	+ "</eidaExpiryDate>"
							+ "<countryOfIncome>"+  countryOfIncome	+ "</countryOfIncome>"
							+ "<dualNationalityFlag>" + dualNationalityFlag	+ "</dualNationalityFlag>"
							+ "<secondNationality>"	+ secondNationalityCode	+ "</secondNationality>";

				if ("S".equalsIgnoreCase(employmentType)) {
					selfCompanyName = companyName;
					sInputXML =sInputXML  + "<selfEmpCompanyName>"	+ selfCompanyName	+ "</selfEmpCompanyName>";
				}  
			}	
			//NEW FIELD ADDED DCRA FOR MODIFICATION SHivanshu
			sInputXML= sInputXML + dcraCustomerModify();
			sInputXML = sInputXML + "<EngineName>" + sEngineName
					+ "</EngineName>" + "<SessionId>" + sSessionId
					+ "</SessionId>" + "<REF_NO>#REF_NO#</REF_NO>" + "<WiName>"
					+ sWorkitemId + "</WiName>" + "</APWebService_Input>";
			logInfo("sInputXML  ", sInputXML);
		} catch (Exception e) {
			logError("Exception in  getModifyCustInputXML ", e);
		}
		return sInputXML;
	}

	public String getCreateAccountInputXML(String sProdCode, String sAccBranch,
			String sCurrency) {
		logInfo("getCreateAccountInputXML", "ACCOUNT_CREATION");
		String sInputXML = "";
		long end_Time = System.currentTimeMillis();
		long start_Time1 = System.currentTimeMillis();
		long diff = System.currentTimeMillis();
		try {
			int iSearchedCustomer = Integer.parseInt(formObject.getValue(
					"NO_OF_CUST_SEARCHED").toString());
			String sOprInstruction = formObject.getValue("OPERATING_INST")
					.toString();
			String sAccTitle = formObject.getValue("ACC_TITLE").toString();
			String sSourceCode = formObject.getValue("SOURCE_CODE").toString();
			String sAccRelation = "";
			String sNo = "";
			String sCustomerID = "";
			String sNoOfLeaves = "0";
			String sStatusCode = "";
			if (formObject.getValue("SCAN_MODE").toString()
					.equalsIgnoreCase("New WMS ID")) {
				log.info("before writing channel_type again------"
						+ formObject.getValue("CHANNEL_TYPE").toString());
				if (formObject.getValue("CHANNEL_TYPE").toString()
						.equalsIgnoreCase("")) {
					log.info("writing channel_type again------");
					formObject
							.getDataFromDB("SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL ='"
									+ formObject.getValue("SOURCING_CHANNEL")
									+ "'");
				}
				end_Time = System.currentTimeMillis();
				diff = start_Time1 - end_Time;
				log.info("Time Difference: "
						+ diff
						+ " for Query: "
						+ "SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL ='"
						+ formObject.getValue("SOURCING_CHANNEL") + "'");
				if (formObject.getValue("CHANNEL_TYPE").toString()
						.equalsIgnoreCase("Direct")
						|| formObject.getValue("BRNCH_OF_INSTANT_ISSUE")
								.toString().equalsIgnoreCase("Kiosk"))
					sStatusCode = "8";
				else {
					sStatusCode = "3";
				}

			} else {
				sStatusCode = "3";
			}
			logInfo("getCreateAccountInputXML", "iSearchedCustomer "
					+ iSearchedCustomer);
			if (iSearchedCustomer == 1) {
				sNo = "1";
			} else {
				for (int i = 0; i < iSearchedCustomer; i++) {
					sAccRelation = formObject.getTableCellValue(ACC_RELATION,
							i + 1, 7);
					// sAccRelation=
					// objChkRepeater.getValue(i+1,"ACC_RELATION.ACC_RELATION");
					if (sAccRelation.equalsIgnoreCase("JAF")
							|| sAccRelation.equalsIgnoreCase("JOF")) {
						sNo = formObject.getTableCellValue(ACC_RELATION, i + 1,
								0); // objChkRepeater.getValue(i+1,"ACC_RELATION.sno");
						break;
					}
				}
			}
			logInfo("getCreateAccountInputXML", "sNo " + sNo);
			if (sNo.equalsIgnoreCase("")) {
				sNo = "1";
			}
			start_Time1 = System.currentTimeMillis();
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT CUST_ID from USR_0_CUST_TXN WHERE WI_NAME ='"
							+ sWorkitemId + "' AND CUST_SNO='" + sNo + "'");
			sCustomerID = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			logInfo("getCreateAccountInputXML", "sCustomerID " + sCustomerID);
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: "
					+ "SELECT CUST_ID from USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO='" + sNo + "'");
			if (sCustomerID.equalsIgnoreCase("")) {
				sCustomerID = "#" + "CUST_" + sNo + "#";
			}
			start_Time1 = System.currentTimeMillis();
			String sQuery = "SELECT STAFF_FLAG FROM USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' and CUST_SNO = '"
					+ sNo
					+ "'"
					+ " and STAFF_FLAG !='null'";
			sOutput = formObject.getDataFromDB(sQuery);
			String sStaffFlag = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery);
			if (sStaffFlag.equalsIgnoreCase("")) {
				sStaffFlag = "N";
			} else {
				sStaffFlag = sStaffFlag.substring(0, 1);
			}
			start_Time1 = System.currentTimeMillis();
			sOutput = formObject
					.getDataFromDB("SELECT distinct SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE ='"
							+ sProdCode + "'");
			log.info("sOutput EMSA----" + sOutput);
			String sSubProduct = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			logInfo("getCreateAccountInputXML", "sSubProduct " + sSubProduct);
			String sCode18 = "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: "
					+ diff
					+ " for Query: "
					+ "SELECT distinct SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE ='"
					+ sProdCode + "'");
			if (sSubProduct.equalsIgnoreCase("EMSA")) {
				if (formObject.getValue("FAMILY_REFFERED").toString()
						.equalsIgnoreCase("")) {
					sCode18 = getPrimaryCustomerID();
				} else {
					sCode18 = formObject.getValue("FAMILY_REFFERED").toString();
				}
			}
			start_Time1 = System.currentTimeMillis();
			log.info("COD18---" + sCode18);
			logInfo("getCreateAccountInputXML", "before sPrimaryCust ");
			String sPrimaryCust = getPrimaryCustomerSNO();
			logInfo("getCreateAccountInputXML", "after sPrimaryCust "
					+ sPrimaryCust);
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sPrimaryCust);
			start_Time1 = System.currentTimeMillis();
			sPrimaryCust = "1";
			String sQuery1 = "SELECT SIGN_STYLE FROM USR_0_CUST_TXN B WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO ='" + sPrimaryCust + "'";
			String sQuery3 = "select b.IVR_FACILITY,b.IB_FACILITY,b.POS_FACILITY,b.FLG_ATM_FAC from usr_0_product_master a , usr_0_atm_master b where product_code='"
					+ sProdCode
					+ "' and currency_code='"
					+ sCurrency
					+ "' and b.IVR_FACILITY=a.ivr_facility and b.IB_FACILITY=a.ib_facility and b.POS_FACILITY=a.pos_facility and b.FLG_ATM_FAC=a.atm_flag";
			String sQuery2 = "select IVR_FACILITY,IB_FACILITY,POS_FACILITY,FLG_ATM_FAC from usr_0_atm_master b where b.atm_flag='0'";

			String ATM_Flag = "";
			String ivr = "";
			String IB = "";
			String POS = "";
			String sign = "";
			sOutput = formObject.getDataFromDB(sQuery1);
			sign = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
					.get(0).toString() : "";
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: " + diff + " for Query: " + sQuery1);
			start_Time1 = System.currentTimeMillis();
			if (sign.indexOf("Signature") != -1) {
				logInfo("getCreateAccountInputXML", "inside sign if ");
				sOutput = formObject.getDataFromDB(sQuery3);
				if (sOutput != null && sOutput.size() > 0) {
					ATM_Flag = sOutput.get(0).get(3);
					ivr = sOutput.get(0).get(0);
					IB = sOutput.get(0).get(1);
					POS = sOutput.get(0).get(2);
				}
				end_Time = System.currentTimeMillis();
				diff = start_Time1 - end_Time;
				log.info("Time Difference.....: " + diff + " for Query: "
						+ sQuery3);
			} else if (sign.indexOf("Thumb") != -1) {
				logInfo("getCreateAccountInputXML", "inside else if 1 ");
				sOutput = formObject.getDataFromDB(sQuery2);
				ATM_Flag = sOutput.get(0).get(3);
				ivr = sOutput.get(0).get(0);
				IB = sOutput.get(0).get(1);
				POS = sOutput.get(0).get(2);
				end_Time = System.currentTimeMillis();
				diff = start_Time1 - end_Time;
				log.info("Time Difference: " + diff + " for Query: " + sQuery2);

			}
			List<List<String>> sOutput1 = formObject
					.getDataFromDB("SELECT RECORD_STATUS,NO_DEBIT,NO_CREDIT,DORMANT,FROZEN FROM usr_0_account_status_code WHERE code='"
							+ sStatusCode + "'");
			logInfo("getCreateAccountInputXML", "sOutput1 before xml "
					+ sOutput1);
			if (sOutput1 != null && sOutput1.size() > 0) {
				try {
					sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
				} catch (Exception e) {
					logError("getCreateAccountInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>ADD_Account</Calltype>"
						+ "<maintainenceOption>A</maintainenceOption>"
						+ "<Customer>" + "<customerId>"
						+ sCustomerID
						+ "</customerId>"
						+ "<accountTitle>"
						+ sAccTitle
						+ "</accountTitle>"
						+ "<productCode>"
						+ sProdCode
						+ "</productCode>"
						+ "<currency>"
						+ sCurrency
						+ "</currency>"
						+ "<customerBranchCode>"
						+ sAccBranch
						+ "</customerBranchCode>"
						+
						// "<accountStatusCode>"+sStatusCode+"</accountStatusCode>"+
						"<Record_Status>"
						+ sOutput1.get(0).get(0)
						+ "</Record_Status>"
						+ "<No_Debit>"
						+ sOutput1.get(0).get(1)
						+ "</No_Debit>"
						+ "<No_Credit>"
						+ sOutput1.get(0).get(2)
						+ "</No_Credit>"
						+ "<Dormant>"
						+ sOutput1.get(0).get(3)
						+ "</Dormant>"
						+ "<Frozen>"
						+ sOutput1.get(0).get(4)
						+ "</Frozen>"
						+ "<Acc_Curr>"
						+ sCurrency
						+ "</Acc_Curr>"
						+ "<flagEmpAccount>"
						+ sStaffFlag
						+ "</flagEmpAccount>"
						+ "<flagATM>"
						+ ATM_Flag
						+ "</flagATM>"
						+ "<flagIB>"
						+ IB
						+ "</flagIB>"
						+ "<flagIVR>"
						+ ivr
						+ "</flagIVR>"
						+ "<flagPOS>"
						+ POS
						+ "</flagPOS>"
						+ "<flagHoldMail>N</flagHoldMail>"
						+ "<flagMailAddCtrl>0</flagMailAddCtrl>"
						+ "<ctrlLeaves>"
						+ sNoOfLeaves
						+ "</ctrlLeaves>"
						+ "<statementCopies>1</statementCopies>"
						+ "<makerId>WMSUSER</makerId>"
						+ "<checkerId>WMSUSER</checkerId>"
						+ "<operatingInstruction>"
						+ sOprInstruction
						+ "</operatingInstruction>"
						+ "</Customer>"
						+ "<CBRCodes>";
			}
			logInfo("getCreateAccountInputXML", "sOutput1 after xml ");
			logInfo("getCreateAccountInputXML", "sCode18 after xml " + sCode18);
			if (!sCode18.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_18</Tag>"+
						"<Tag>18</Tag>" + "<Value>" + sCode18 + "</Value>"
						+ "</CBRCode>";
			}
			logInfo("getCreateAccountInputXML", "sSourceCode after xml "
					+ sSourceCode);
			if (!sSourceCode.equalsIgnoreCase("--Select--")
					&& !sSourceCode.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_2</Tag>"+
						"<Tag>2</Tag>" + "<Value>" + sSourceCode + "</Value>"
						+ "</CBRCode>";
			}
			List<List<String>> misDetails = formObject
					.getDataFromDB("SELECT TO_CHAR(TO_DATE(GRADUATION_DATE,'dd/MM/yyyy'),'yyyy-mm-dd') GRADUATION_DATE FROM USR_0_UDF_DETAILS WHERE WI_NAME='"
							+ sWorkitemId + "'");
			if (misDetails != null && misDetails.size() > 0) {
				if (!(misDetails.get(0).get(0).equalsIgnoreCase("--Select--") || misDetails
						.get(0).get(0).equalsIgnoreCase(""))) {
					sInputXML = sInputXML + "<CBRCode>" + "<Tag>48</Tag>"
							+ "<Value>" + misDetails.get(0).get(0) + "</Value>"
							+ "</CBRCode>";
				}
			}
			try {
				sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
			} catch (Exception e) {
				logError("getCreateAccountInputXML ", e);
			}

			sInputXML = sInputXML + "</CBRCodes>"
					+ "<misCode><misCodeType>IBD_UDF1</misCodeType>"
					+ "<misCodeNumber>1</misCodeNumber><misCodeText>EMSA-"
					+ sCustomerID + "</misCodeText></misCode>"
					+ "<CustomerRelation>";
			start_Time1 = System.currentTimeMillis();
			sOutput = formObject
					.getDataFromDB("SELECT CID,ACC_RELATION from ACC_RELATION_REPEATER WHERE WI_NAME ='"
							+ sWorkitemId + "' ORDER BY TO_NUMBER(SNO)");
			end_Time = System.currentTimeMillis();
			diff = start_Time1 - end_Time;
			log.info("Time Difference: "
					+ diff
					+ " for Query: "
					+ "SELECT CID,ACC_RELATION from ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId + "' ORDER BY TO_NUMBER(SNO)");
			log.info("sOutput---" + sOutput);
			log.info("kdd405---");
			int sTemp = sOutput.size();
			for (int i = 0; i < sTemp; i++) {
				if (sOutput != null && sOutput.size() > 0) {
					sCustomerID = sOutput.get(i).get(0).replaceAll("\r", "");
					sCustomerID = sCustomerID.replaceAll("\n", "");
					sCustomerID = sCustomerID.replaceAll("\t", "");
					sAccRelation = sOutput.get(i).get(1).replaceAll("\r", "");
					sAccRelation = sAccRelation.replaceAll("\n", "");
					sAccRelation = sAccRelation.replaceAll("\t", "");
				}
				log.info("sCustomerID---" + sTemp);
				if (sAccRelation.equalsIgnoreCase("Guardian")) {
					sAccRelation = "GUR";
				} else if (sAccRelation.equalsIgnoreCase("Minor")) {
					sAccRelation = "SOW";
				}

				if (sCustomerID.equalsIgnoreCase("")) {
					sCustomerID = "#" + "CUST_" + (i + 1) + "#";
				}
				log.info("sCustomerID---" + sCustomerID);
				log.info("sAccRelation---" + sAccRelation);
				try {
					sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
				} catch (Exception e) {
					logError("getCreateAccountInputXML ", e);
				}
				sInputXML = sInputXML + "<CustRel>" + "<CustomerId>"
						+ sCustomerID + "</CustomerId>" + "<Relation>"
						+ sAccRelation + "</Relation>" + "</CustRel>";
			}

			sInputXML = sInputXML + "</CustomerRelation>" + "<EngineName>"
					+ sEngineName + "</EngineName>" + "<SessionId>"
					+ sSessionId + "</SessionId>" + "<WiName>" + sWorkitemId
					+ "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";

			log.info("sInputXML---" + sInputXML);
		} catch (Exception e) {
			logError("Exception in  getCreateAccountInputXML ", e);
		}
		return sInputXML;
	}

	public String getModifyAccountInputXML(String sProdCode, String sAccBranch,
			int iNo, String sCurrency) {
		String sInputXML = "";
		try {
			log.info("Input getModifyAccountInputXML");
			int iSearchedCustomer = Integer.parseInt(formObject.getValue(
					"NO_OF_CUST_SEARCHED").toString());
			String sOprInstruction = formObject.getValue("OPERATING_INST")
					.toString();
			String sAccTitle = formObject.getValue("ACC_TITLE").toString();
			String sSourceCode = formObject.getValue("SOURCE_CODE").toString();
			String sAccRelation = "";
			String sNo = "";
			String sCustomerID = "";
			String sNoOfLeaves = "0";
			String sStatusCode = "";

			if (formObject.getValue("SCAN_MODE").toString()
					.equalsIgnoreCase("New WMS ID")) {
				sStatusCode = "8";
			} else {
				log.info("FCR Changes...24012017...");
				if (sActivityName.equalsIgnoreCase("CPD Checker")) {
					log.info("if condition sStatusCode is 8 ");
					sStatusCode = "8";
				} else {
					log.info("if condition sStatusCode is 3 ");
					sStatusCode = "3";
				}
			}
			if (iSearchedCustomer == 1) {
				sNo = "1";
			} else {
				for (int i = 0; i < iSearchedCustomer; i++) {
					sAccRelation = formObject.getTableCellValue(ACC_RELATION,
							i, 7);
					// sAccRelation=
					// objChkRepeater.getValue(i+1,"ACC_RELATION.ACC_RELATION");

					if (sAccRelation.equalsIgnoreCase("JAF")
							|| sAccRelation.equalsIgnoreCase("JOF")) {
						sNo = formObject.getTableCellValue(ACC_RELATION, i, 0);
						// sNo= objChkRepeater.getValue(i+1,"ACC_RELATION.sno");
						break;
					}
				}
			}

			if (sNo.equalsIgnoreCase("")) {
				sNo = "1";
			}

			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT CUST_ID from USR_0_CUST_TXN WHERE WI_NAME "
							+ "='"
							+ sWorkitemId
							+ "' AND CUST_SNO='"
							+ sNo
							+ "'");
			sCustomerID = sOutput.get(0).get(0);
			log.info("sCustomerID---" + sCustomerID);

			if (sCustomerID.equalsIgnoreCase("")) {
				sCustomerID = "#" + "CUST_" + sNo + "#";
			}
			String sQuery = "SELECT STAFF_FLAG FROM USR_0_CUST_TXN WHERE WI_NAME = '"
					+ sWorkitemId
					+ "' and CUST_SNO = '"
					+ sNo
					+ "' and STAFF_FLAG !='null'";
			log.info("sQuery modify---------" + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			String sStaffFlag = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			log.info("staff flag modify====" + sStaffFlag);

			if (sStaffFlag.equalsIgnoreCase("")) {
				sStaffFlag = "N";
			} else {
				sStaffFlag = sStaffFlag.substring(0, 1);
			}

			sOutput = formObject
					.getDataFromDB("SELECT distinct SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE ='"
							+ sProdCode + "'");
			log.info("sOutput EMSA----" + sOutput);
			String sSubProduct = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			log.info("sSubProduct----" + sSubProduct);
			String sCode18 = "";

			if (sSubProduct.equalsIgnoreCase("EMSA")) {
				if (formObject.getValue("FAMILY_REFFERED").toString()
						.equalsIgnoreCase("")) {
					sCode18 = getPrimaryCustomerID();
				} else {
					sCode18 = formObject.getValue("FAMILY_REFFERED").toString();
				}
			}
			log.info("COD18---" + sCode18);
			logInfo("sPrimaryCust", "before sPrimaryCust");
			String sPrimaryCust = getPrimaryCustomerSNO();
			logInfo("sPrimaryCust", "In sPrimaryCust" + sPrimaryCust);
			String sQuery1 = "SELECT SIGN_STYLE FROM USR_0_CUST_TXN B WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO ='" + sPrimaryCust + "'";
			String sQuery3 = "select IVR_FACILITY,IB_FACILITY,POS_FACILITY,FLG_ATM_FAC from usr_0_product_master a ,"
					+ " usr_0_atm_master b where product_code='"
					+ sProdCode
					+ "' and currency_code='"
					+ sCurrency
					+ "' and a.atm_flag=b.atm_flag";
			String sQuery2 = "select IVR_FACILITY,IB_FACILITY,POS_FACILITY,FLG_ATM_FAC from usr_0_atm_master b where b.atm_flag='0'";

			String ATM_Flag = "";
			String ivr = "";
			String IB = "";
			String POS = "";

			String row[];
			String value = "";
			String sign = "";
			int flag = 0;

			String ATM_Flag2 = "";
			sOutput = formObject.getDataFromDB(sQuery1);
			sign = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
					.get(0).toString() : "";
			logInfo("sign", "In sign" + sign);
			if (sign.indexOf("Signature") != -1) {
				sOutput = formObject.getDataFromDB(sQuery3);
				log.info("sOutput---" + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					ATM_Flag = sOutput.get(0).get(3);
					ivr = sOutput.get(0).get(0);
					IB = sOutput.get(0).get(1);
					POS = sOutput.get(0).get(2);
				}
			} else if (sign.indexOf("Thumb") != -1) {
				log.info("sOutput---" + sOutput);
				sOutput = formObject.getDataFromDB(sQuery2);
				if (sOutput != null && sOutput.size() > 0) {
					ATM_Flag = sOutput.get(0).get(3);
					ivr = sOutput.get(0).get(0);
					IB = sOutput.get(0).get(1);
					POS = sOutput.get(0).get(2);
				}
			}
			String sQueryAcc = "SELECT ACC_NO FROM USR_0_PRODUCT_SELECTED WHERE "
					+ "PROD_CODE='"
					+ sProdCode
					+ "' AND WI_NAME ='"
					+ sWorkitemId + "' AND CID= '" + iNo + "'";
			logInfo("getModifyAccountInputXML", "sQueryAcc : " + sQueryAcc);
			sOutput = formObject.getDataFromDB(sQueryAcc);
			logInfo("getModifyAccountInputXML", "sOutput : " + sOutput);
			String sAccount = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			if (sAccount.equalsIgnoreCase("")) {
				sAccount = "#ACCOUNT_" + iNo + "#";
			}
			List<List<String>> sOutput1 = formObject
					.getDataFromDB("SELECT RECORD_STATUS,NO_DEBIT,NO_CREDIT,DORMANT,"
							+ "FROZEN FROM usr_0_account_status_code WHERE code='"
							+ sStatusCode + "'");
			log.info("Before Preparing getModifyAccountInputXML");
			if (sOutput1 != null && sOutput1.size() > 0) {
				try {
					sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
				} catch (Exception e) {
					logError("getModifyAccountInputXML ", e);
				}
				sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
						+ "<Option>WebService</Option>"
						+ "<Calltype>ADD_Account</Calltype>"
						+ "<maintainenceOption>M</maintainenceOption>"
						+ "<Customer>" + "<customerId>"
						+ sCustomerID
						+ "</customerId>"
						+ "<accountTitle>"
						+ sAccTitle
						+ "</accountTitle>"
						+ "<productCode>"
						+ sProdCode
						+ "</productCode>"
						+ "<currency>"
						+ sCurrency
						+ "</currency>"
						+ "<customerBranchCode>"
						+ sAccBranch
						+ "</customerBranchCode>"
						+ "<custAccountNumber>"
						+ sAccount
						+ "</custAccountNumber>"
						+
						// "<accountStatusCode>"+sStatusCode+"</accountStatusCode>"+
						"<Record_Status>"
						+ sOutput1.get(0).get(0)
						+ "</Record_Status>"
						+ "<No_Debit>"
						+ sOutput1.get(0).get(1)
						+ "</No_Debit>"
						+ "<No_Credit>"
						+ sOutput1.get(0).get(2)
						+ "</No_Credit>"
						+ "<Dormant>"
						+ sOutput1.get(0).get(3)
						+ "</Dormant>"
						+ "<Frozen>"
						+ sOutput1.get(0).get(4)
						+ "</Frozen>"
						+ "<Acc_Curr>"
						+ sCurrency
						+ "</Acc_Curr>"
						+ "<flagEmpAccount>"
						+ sStaffFlag
						+ "</flagEmpAccount>"
						+ "<flagATM>"
						+ ATM_Flag
						+ "</flagATM>"
						+ "<flagIB>"
						+ IB
						+ "</flagIB>"
						+ "<flagIVR>"
						+ ivr
						+ "</flagIVR>"
						+ "<flagPOS>"
						+ POS
						+ "</flagPOS>"
						+ "<flagHoldMail>N</flagHoldMail>"
						+ "<flagMailAddCtrl>0</flagMailAddCtrl>"
						+ "<ctrlLeaves>"
						+ sNoOfLeaves
						+ "</ctrlLeaves>"
						+ "<statementCopies>1</statementCopies>"
						+ "<makerId>WMSUSER</makerId>"
						+ "<checkerId>WMSUSER</checkerId>"
						+ "<operatingInstruction>"
						+ sOprInstruction
						+ "</operatingInstruction>"
						+ "</Customer>"
						+ "<CBRCodes>";
			}
			log.info("Input XML before CBR Codes---" + sInputXML);

			if (!sCode18.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_18</Tag>"+
						"<Tag>18</Tag>" + "<Value>" + sCode18 + "</Value>"
						+ "</CBRCode>";
			}
			if (!sSourceCode.equalsIgnoreCase("--Select--")
					&& !sSourceCode.equalsIgnoreCase("")) {
				sInputXML = sInputXML + "<CBRCode>"
						+
						// "<Tag>COD_2</Tag>"+
						"<Tag>2</Tag>" + "<Value>" + sSourceCode + "</Value>"
						+ "</CBRCode>";
			}
			log.info("Input XML after CBR Codes 1---" + sInputXML);
			List<List<String>> misDetails = formObject
					.getDataFromDB("SELECT TO_CHAR(TO_DATE(GRADUATION_DATE,'dd/MM/yyyy'),'yyyy-mm-dd') GRADUATION_DATE FROM USR_0_UDF_DETAILS WHERE WI_NAME='"
							+ sWorkitemId + "'");
			if (misDetails != null && misDetails.size() > 0) {
				if (!(misDetails.get(0).get(0).equalsIgnoreCase("--Select--") || misDetails
						.get(0).get(0).equalsIgnoreCase(""))) {
					sInputXML = sInputXML + "<CBRCode>" + "<Tag>48</Tag>"
							+ "<Value>" + misDetails.get(0).get(0) + "</Value>"
							+ "</CBRCode>";
				}
			}
			log.info("Input XML after Grad Date---" + sInputXML);
			sInputXML = sInputXML + "</CBRCodes><CustomerRelation>";
			sOutput = formObject
					.getDataFromDB("SELECT CID,ACC_RELATION from ACC_RELATION_REPEATER WHERE "
							+ "WI_NAME ='"
							+ sWorkitemId
							+ "' ORDER BY TO_NUMBER(SNO)");
			log.info("sOutput---" + sOutput);
			/*
			 * if(sOutput != null && sOutput.size() > 0){ sCustomerID =
			 * sOutput.get(0).get(0).replaceAll("\r",""); sCustomerID =
			 * sCustomerID.replaceAll("\n",""); sCustomerID =
			 * sCustomerID.replaceAll("\t",""); sAccRelation =
			 * sOutput.get(0).get(1).replaceAll("\r",""); sAccRelation =
			 * sAccRelation.replaceAll("\n",""); sAccRelation =
			 * sAccRelation.replaceAll("\t",""); }
			 * 
			 * String sOutput2 = ""; // needs to checked String[] sTemp =
			 * getTagValue(sOutput2,"Record").split(";"); String [] sTempEach;
			 */

			for (int i = 0; i < sOutput.size(); i++) {
				log.info("sCustomerID---" + sOutput.get(i).get(0));
				sCustomerID = sOutput.get(i).get(0);
				sAccRelation = sOutput.get(i).get(1);
				if (sAccRelation.equalsIgnoreCase("Guardian")) {
					sAccRelation = "GUR";
				} else if (sAccRelation.equalsIgnoreCase("Minor")) {
					sAccRelation = "SOW";
				}
				if (sCustomerID.equalsIgnoreCase("")) {
					sCustomerID = "#" + "CUST_" + (i + 1) + "#";
				}
				try {
					sCustomerID = String.valueOf(Integer.parseInt(sCustomerID));
				} catch (Exception e) {
					logError("getModifyAccountInputXML ", e);
				}
				sInputXML = sInputXML + "<CustRel>" + "<CustomerId>"
						+ sCustomerID + "</CustomerId>" + "<Relation>"
						+ sAccRelation + "</Relation>" + "</CustRel>";
			}

			sInputXML = sInputXML + "</CustomerRelation>" + "<EngineName>"
					+ sEngineName + "</EngineName>" + "<SessionId>"
					+ sSessionId + "</SessionId>" + "<WiName>" + sWorkitemId
					+ "</WiName>" + "<REF_NO>#REF_NO#</REF_NO>"
					+ "</APWebService_Input>";
			log.info("sInputXML---" + sInputXML);
		} catch (Exception e) {
			logError("Exception in  getModifyAccountInputXML ", e);
		}
		return sInputXML;
	}

	public String getProfitCenterForCall(String segment) {
		try {

			log.info("getProfitCenterForCall Segment " + segment);
			String source_code = formObject.getValue("SOURCE_CODE").toString();
			String acc_class = formObject.getValue("ACC_CLASS").toString();
			List<List<String>> dsaList = formObject
					.getDataFromDB("SELECT COUNT(1) FROM USR_0_DSA_LIST WHERE DSA_CODE='"
							+ source_code + "'");
			log.info("dsaList  " + dsaList);
			logInfo("", "dsaList  " + dsaList.size());
			if (dsaList != null && dsaList.size() > 0) {
				log.info("inside if for dsa list");
				String sQuery1 = "SELECT PROFIT_CENTER_CODE FROM USR_0_PROFIT_CENTER WHERE CUST_SEGMENT='"
						+ segment + "' AND CUST_CATEGORY= '" + acc_class + "'";
				log.info("inside if for dsa list sQuery1" + sQuery1);
				dsaList = formObject.getDataFromDB(sQuery1);
				if (dsaList != null && dsaList.size() > 0) {
					return dsaList.get(0).get(0);
				}
			}
		} catch (Exception e) {
			logError("Exception in  getProfitCenterForCall ", e);
		}
		return "";
	}

	public String fetchConvRate(String sCustID, String sFromCurr,
			String sToCurr, String sFromAmt) {
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
		return socket.connectToSocket(getConvRateXML(sCustID, sOutput.get(0)
				.get(0), "TP906079", sFromCurr, sToCurr, sFromAmt));
	}

	public String getConvRateXML(String sCustID, String sSeqNo,
			String sUserName, String sFromCurr, String sToCurr, String sFromAmt) {
		String sQuery = "SELECT VALUE as channelName FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='channelName'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String sTxnType = null;
		if (sFromCurr.equalsIgnoreCase("AED")) {
			sTxnType = "SELL";
		} else {
			sTxnType = "BUY";
		}
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Rate_Convert</Calltype>" + "<customerId>"
				+ sCustID
				+ "</customerId>"
				+ "<fromCurrency>"
				+ sFromCurr
				+ "</fromCurrency>"
				+ "<fromAmount>"
				+ sFromAmt
				+ "</fromAmount>"
				+ "<toCurrency>"
				+ sToCurr
				+ "</toCurrency>"
				+ "<toAmount>0</toAmount>"
				+ "<txnType>"
				+ sTxnType
				+ "</txnType>"
				+ "<channelName>"
				+ sOutput.get(0).get(0)
				+ "</channelName>"
				+ "<REF_NO>"
				+ sSeqNo
				+ "</REF_NO>"
				+ "<USER>"
				+ sUserName
				+ "</USER>"
				+ "<WiName>"
				+ sWorkitemId
				+ "</WiName>"
				+ "<SessionId>"
				+ sSessionId
				+ "</SessionId>"
				+ "</APWebService_Input>";
		return sInputXML;
	}

	public void setMultipleFieldValues(String[] controlNames,
			String[] controlValues) {
		for (int i = 0; i < controlNames.length; i++) {
			formObject.setValue(controlNames[i], controlValues[i]);
		}
	}

	public String getModifyValues(List<List<String>> sData, int iNo) {
		logInfo("getModifyCustInputXML getModifyValues ", "sData " + sData);
		logInfo("getModifyCustInputXML getModifyValues ", "iNo " + iNo);
		String CorrAddressString = "";
		String ResAddressString = "";
		String PermanantAddressString = "";
		String[] CorrAddressArray;
		String EmployerAddressString = "";
		String[] ResAddressArray;
		String[] SEachRecord;
		int iLength = sData.size();
		String sXML = "";
		String sColumnName = "";
		String sValue = "";
		String sQuery = "";
		List<List<String>> sOutput;
		logInfo("getModifyCustInputXML getModifyValues ", "iLength " + iLength);
		for (int iLoopCount = 0; iLoopCount < iLength; iLoopCount++) {
			// SEachRecord= sAllRecord[iLoopCount].split(",");
			sColumnName = sData.get(iLoopCount).get(0);
			sValue = sData.get(iLoopCount).get(1);
			logInfo("getModifyCustInputXML getModifyValues ", "sColumnName "
					+ sColumnName);
			logInfo("getModifyCustInputXML getModifyValues ", "sValue "
					+ sValue);
			sValue = sValue.replaceAll("#brace#", "<");
			sValue = sValue.replaceAll("#brace1#", ">");
			logInfo("getModifyCustInputXML getModifyValues ",
					"after replace sValue " + sValue);
			// //Added by Sahiba for customer full name change
			if (sColumnName.equalsIgnoreCase("NAME")) {
				sXML = sXML + "<customerName>" + sValue + "</customerName>";
			}
			if (sColumnName.equalsIgnoreCase("PREFIX")) {
				sXML = sXML + "<custPrefix>" + sValue.replaceAll("\\*", "")
						+ "</custPrefix>";
			}
			if (sColumnName.equalsIgnoreCase("CUST_SEGMENT")) {
				sQuery = "SELECT UNIQUE_ID FROM USR_0_CUST_SEGMENT WHERE UPPER(CUST_SEGMENT) =UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				String val = (sOutput != null && sOutput.size() > 0) ? sOutput
						.get(0).get(0).toString() : "";
				sXML = sXML + "<custType>" + val + "</custType>";
			}
			String val = "";
			if (sColumnName.equalsIgnoreCase("SHORT_NAME")) {
				sXML = sXML + "<custShortName>" + sValue + "</custShortName>";
			} else if (sColumnName.equalsIgnoreCase("PROFESSION")) {
				sQuery = "SELECT PROFESSION_CODE FROM USR_0_PROFESSION WHERE UPPER(PROFESSION_DESC)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("getModifyValues", "PROFESSION_CODE sOutput: "
						+ sOutput);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "99";
				logInfo("getModifyValues", "val: " + val);
				sXML = sXML + "<custProfessionCategory>" + val
						+ "</custProfessionCategory>";
			} else if (sColumnName.equalsIgnoreCase("SIGN_TYPE")) {
				sQuery = "SELECT SIGN_CODE FROM USR_0_SIGN_STYLE WHERE UPPER(SIGN_DESC)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				sXML = sXML + "<custSignatureType>" + val
						+ "</custSignatureType>";
			} else if (sColumnName.equalsIgnoreCase("CORR_OFF_PHONE")) {
				sXML = sXML + "<custPhoneOff>" + sValue + "</custPhoneOff>";
			} else if (sColumnName.equalsIgnoreCase("PHONE")) {
				sXML = sXML + "<custPhone>" + sValue + "</custPhone>";
			} else if (sColumnName.equalsIgnoreCase("MOBILE")) {
				sXML = sXML + "<custMobile>" + sValue + "</custMobile>";
			} else if (sColumnName.equalsIgnoreCase("EMAIL")) {
				sXML = sXML + "<custEmail>" + sValue + "</custEmail>";
			} else if (sColumnName.equalsIgnoreCase("GENDER")) {
				sXML = sXML + "<custSex>" + sValue.substring(0, 1)
						+ "</custSex>";
			} else if (sColumnName.equalsIgnoreCase("CUST_MARITAL_STATUS")) {
				sQuery = "SELECT UNIQUE_CODE FROM USR_0_MARITAL_STATUS WHERE UPPER(MARITAL_STATUS)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				sXML = sXML + "<custMaritalStatus>" + val
						+ "</custMaritalStatus>";
			} else if (sColumnName.equalsIgnoreCase("NATIONALITY")) {
				sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE UPPER(COUNTRY)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				sXML = sXML + "<custNationality>" + val + "</custNationality>";
			} else if (sColumnName.equalsIgnoreCase("EMP_NAME")) {
				if (sValue.length() > 40) {
					sValue = sValue.substring(0, 40);
				}
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT EMP_OTHERS FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId
							+ "'"
							+ "AND CUST_SNO='"
							+ iNo
							+ "' AND UPPER(EMP_NAME)=UPPER('" + sValue + "') ";
					sOutput = formObject.getDataFromDB(sQuery);
					sValue = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0) : "";
				}
				sXML = sXML + "<custEmployerName>" + sValue
						+ "</custEmployerName>";
			} else if (sColumnName.equalsIgnoreCase("EMP_NO_YRS_BIZ")) {
				sXML = sXML + "<custNumberOfYearsInJob>" + sValue
						+ "</custNumberOfYearsInJob>";
			} else if (sColumnName.equalsIgnoreCase("EMP_SAL")) {
				sXML = sXML + "<custCurrentJobSalaryAmount>" + sValue
						+ "</custCurrentJobSalaryAmount>";
			} else if (sColumnName.equalsIgnoreCase("EMP_ID")) {
				sXML = sXML + "<codEmployeeId>" + sValue + "</codEmployeeId>";
			} else if (sColumnName.equalsIgnoreCase("EMP_POSITION")) {
				sXML = sXML + "<custDesignation>" + sValue
						+ "</custDesignation>";
			} else if (sColumnName.equalsIgnoreCase("EMP_PROFESSION_NAME")) {
				sQuery = "SELECT PROFESSION_CODE FROM USR_0_PROFESSION WHERE UPPER(PROFESSION_DESC)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				sXML = sXML + "<custOccupationCategory>" + val
						+ "</custOccupationCategory>";
			} else if (sColumnName.equalsIgnoreCase("EMP_DOJ")) {
				sXML = sXML + "<custCurrentJobStartDate>" + sValue
						+ "</custCurrentJobStartDate>";
			} else if (sColumnName.equalsIgnoreCase("EMP_PHONE")) {
				sXML = sXML + "<custEmployerPhone>" + sValue
						+ "</custEmployerPhone>";
			} else if (sColumnName.equalsIgnoreCase("STAFF_FLAG")) {
				try {
					String sflagStaff = sValue.substring(0, 1);
					logInfo("getModifyValues", "sflagStaff...." + sflagStaff);
					if (sflagStaff.equalsIgnoreCase("*")) {
						sflagStaff = sValue.substring(1, 2);
						logInfo("getModifyValues", "sflagStaff 111...."
								+ sflagStaff);
						if (!(sflagStaff.equalsIgnoreCase("N") || sflagStaff
								.equalsIgnoreCase("Y")))
							sflagStaff = "";
					}
					sXML = sXML + "<flagStaff>" + sflagStaff + "</flagStaff>";
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else if (sColumnName.equalsIgnoreCase("MOTHER_NAME")) {
				sXML = sXML + "<custMotherMaidenName>" + sValue
						+ "</custMotherMaidenName>";
			} else if (sColumnName.equalsIgnoreCase("PASSPORT_NO")) {
				sXML = sXML + "<custPassportNumber>" + sValue
						+ "</custPassportNumber>";
			} else if (sColumnName.equalsIgnoreCase("PASS_ISSUE_DATE")) {
				sXML = sXML + "<custPassportIssueDate>" + sValue
						+ "</custPassportIssueDate>";
			} else if (sColumnName.equalsIgnoreCase("PASS_EXP_DATE")) {
				sXML = sXML + "<custPassportExpiryDate>" + sValue
						+ "</custPassportExpiryDate>";
			} else if (sColumnName.equalsIgnoreCase("VISA_NO")) {
				sXML = sXML + "<custVisaNumber>" + sValue + "</custVisaNumber>";
			} else if (sColumnName.equalsIgnoreCase("VISA_ISSUE_DATE")) {
				logInfo("getModifyCustInputXML getModifyValues ",
						"VISA_ISSUE_DATE " + sValue);
				sXML = sXML + "<custVisaIssueDate>" + sValue
						+ "</custVisaIssueDate>";
			} else if (sColumnName.equalsIgnoreCase("VISA_EXP_DATE")) {
				logInfo("getModifyCustInputXML getModifyValues ",
						"VISA_EXP_DATE " + sValue);
				sXML = sXML + "<custVisaExpiryDate>" + sValue
						+ "</custVisaExpiryDate>";
			} else if (sColumnName.equalsIgnoreCase("CORR_OFF_PHONE")) {
				sXML = sXML + "<custPhoneOff>" + sValue + "</custPhoneOff>";
			} else if (sColumnName.equalsIgnoreCase("EIDA_NO")) {
				sXML = sXML + "<custEIDA>" + sValue.replaceAll("\\*", "")
						+ "</custEIDA>";
			} else if (sColumnName.equalsIgnoreCase("RESIDENCE COUNTRY")) {
				sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE UPPER(COUNTRY)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				sXML = sXML + "<txtCustResidence>" + val
						+ "</txtCustResidence>";
			} else if (sColumnName.equalsIgnoreCase("POBOX")) {
				CorrAddressString = CorrAddressString + "<addressLine1>"
						+ sValue + "</addressLine1>;";
			} else if (sColumnName.equalsIgnoreCase("CITY")) {
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT OTHER_CORR_CITY FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
					logInfo("getModifyValues", "sQuery----" + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					val = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					CorrAddressString = CorrAddressString + "<addressCity>"
							+ val + "</addressCity>";
				} else {
					CorrAddressString = CorrAddressString + "<addressCity>"
							+ sValue + "</addressCity>;";
				}
			} else if (sColumnName.equalsIgnoreCase("STATE")) {
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT CORR_OTHER FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
					logInfo("getModifyValues", "sQuery----" + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					val = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					CorrAddressString = CorrAddressString + "<addressState>"
							+ val + "</addressState>";
				} else {
					CorrAddressString = CorrAddressString + "<addressState>"
							+ sValue + "</addressState>;";
				}
			} else if (sColumnName.equalsIgnoreCase("COUNTRY")) {
				sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE UPPER(COUNTRY)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				CorrAddressString = CorrAddressString + "<addressCountry>"
						+ val + "</addressCountry>;";
			} else if (sColumnName.equalsIgnoreCase("CORR_FLOOR")) {
				CorrAddressString = CorrAddressString + "<addressLine2>"
						+ sValue + "</addressLine2>;";
			} else if (sColumnName.equalsIgnoreCase("CORR_STREET")) {
				CorrAddressString = CorrAddressString + "<addressLine3>"
						+ sValue + "</addressLine3>;";
			} else if (sColumnName.equalsIgnoreCase("PER_BUILDING")) {
				PermanantAddressString = PermanantAddressString
						+ "<addressLine1>" + sValue + "</addressLine1>;";
			} else if (sColumnName.equalsIgnoreCase("PER_VILLA")) {
				PermanantAddressString = PermanantAddressString
						+ "<addressLine2>" + sValue + "</addressLine2>;";
			} else if (sColumnName.equalsIgnoreCase("PER_LANDMARK")) {
				PermanantAddressString = PermanantAddressString
						+ "<addressLine3>" + sValue + "</addressLine3>;";
			} else if (sColumnName.equalsIgnoreCase("PER_CITY")) {
				PermanantAddressString = PermanantAddressString
						+ "<addressCity>" + sValue + "</addressCity>;";
			} else if (sColumnName.equalsIgnoreCase("PER_STATE")) {
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT PER_OTHER FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
					logInfo("getModifyValues", "sQuery----" + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					val = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					PermanantAddressString = PermanantAddressString
							+ "<addressState>" + val + "</addressState>";
				} else {
					PermanantAddressString = PermanantAddressString
							+ "<addressState>" + sValue + "</addressState>;";
				}
			} else if (sColumnName.equalsIgnoreCase("PER_COUNTRY")) {
				sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE UPPER(COUNTRY)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				PermanantAddressString = PermanantAddressString
						+ "<addressCountry>" + val + "</addressCountry>;";
			} else if (sColumnName.equalsIgnoreCase("RES_BUILDING")) {
				ResAddressString = ResAddressString + "<addressLine1>" + sValue
						+ "</addressLine1>;";
			} else if (sColumnName.equalsIgnoreCase("RES_CITY")) {
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT OTHER_PERM_CITY FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
					logInfo("getModifyValues", "sQuery----" + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					val = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					ResAddressString = ResAddressString + "<addressCity>" + val
							+ "</addressCity>";
				} else {
					ResAddressString = ResAddressString + "<addressCity>"
							+ sValue + "</addressCity>;";
				}
			} else if (sColumnName.equalsIgnoreCase("RES_LANDMARK")) {
				ResAddressString = ResAddressString + "<addressLine3>" + sValue
						+ "</addressLine3>;";
			} else if (sColumnName.equalsIgnoreCase("RES_VILLA")) {
				ResAddressString = ResAddressString + "<addressLine2>" + sValue
						+ "</addressLine2>;";
			} else if (sColumnName.equalsIgnoreCase("RES_STATE")) {
				if (sValue.equalsIgnoreCase("OTHERS")) {
					sQuery = "SELECT RES_OTHER FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId + "' AND CUST_SNO='" + iNo + "'";
					logInfo("getModifyValues", "sQuery----" + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					val = (sOutput != null && sOutput.size() > 0) ? sOutput
							.get(0).get(0).toString() : "";
					ResAddressString = ResAddressString + "<addressState>"
							+ val + "</addressState>";
				} else {
					ResAddressString = ResAddressString + "<addressState>"
							+ sValue + "</addressState>;";
				}
			} else if (sColumnName.equalsIgnoreCase("RES_CNTRY")) {
				sQuery = "SELECT COUNTRY_CODE FROM USR_0_COUNTRY_MAST WHERE UPPER(COUNTRY)=UPPER('"
						+ sValue + "')";
				sOutput = formObject.getDataFromDB(sQuery);
				val = (sOutput != null && sOutput.size() > 0) ? sOutput.get(0)
						.get(0).toString() : "";
				ResAddressString = ResAddressString + "<addressCountry>" + val
						+ "</addressCountry>;";
			}
		}

		try {
			sQuery = "SELECT EMP_POBOX, EMP_STREET, EMP_CITY, EMP_STATE, EMP_COUNTRY "
					+ "FROM USR_0_CUST_TXN WHERE WI_NAME= '"
					+ sWorkitemId
					+ "' AND CUST_SNO= '" + iNo + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("", "sOutput---" + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				EmployerAddressString = "<addressLine1>"
						+ sOutput.get(0).get(0)
						+ "</addressLine1><addressLine2>"
						+ sOutput.get(0).get(1) + "</addressLine2>"
					//	+ "<addressLine3>" + sOutput.get(0).get(2) + "</addressLine3>
						+ "<addressCity>" + sOutput.get(0).get(2)  //Added by SHivanshu ATP-400
						+ "</addressCity><addressState>"
						+ sOutput.get(0).get(3) + "</addressState>"
						+ "<addressCountry>"
						+ getCodeFromCountry(sOutput.get(0).get(4), 0)
						+ "</addressCountry>";
			}
		} catch (Exception e) {
			logError("getModifyValues", e);
		}
		logInfo("getModifyValues", "CorrAddressString---" + CorrAddressString);
		logInfo("getModifyValues", "ResAddressString---" + ResAddressString);
		logInfo("getModifyValues", "PermanantAddressString---"
				+ PermanantAddressString);
		logInfo("getModifyValues", "EmployerAddressString---"
				+ EmployerAddressString);
		if (CorrAddressString.length() > 0) {
			CorrAddressArray = CorrAddressString.split(";");
			sXML = sXML + "<Corr_Addresses>"
					+ "<addressType>CorrespondingAddress</addressType>";
			for (int i = 0; i < CorrAddressArray.length; i++) {
				if (CorrAddressArray[i] != null) {
					sXML = sXML + CorrAddressArray[i];
				}
			}
			sXML = sXML + "</Corr_Addresses>";
		}
		if (ResAddressString.length() > 0) {
			ResAddressArray = ResAddressString.split(";");
			sXML = sXML + "<Res_Addresses>"
					+ "<addressType>PermanentAddress</addressType>";
			for (int i = 0; i < ResAddressArray.length; i++) {
				if (ResAddressArray[i] != null) {
					sXML = sXML + ResAddressArray[i];
				}
			}
			sXML = sXML + "</Res_Addresses>";
		}
		if (EmployerAddressString.length() > 0) {
			sXML = sXML + "<Emp_Addresses>"
					+ "<addressType>EmployerAddress</addressType>";
			sXML = sXML + EmployerAddressString;
			sXML = sXML + "</Emp_Addresses>";
			logInfo("getModifyValues", "EmployerAddressString is set ---"
					+ sXML);
		}
		sXML = sXML.replaceAll("#col#", ";");
		logInfo("getModifyValues", "return sXML: " + sXML);
		return sXML;
	}

	public void manageCategoryChangeSectionCPDChecker() {
		if (formObject.getValue(NEW_CUST_SEGMENT) == "Aspire"
				|| formObject.getValue(NEW_CUST_SEGMENT) == "Simplylife") {
			showControls(new String[] { IS_VVIP, IS_OTHERS_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_SALARY_TRANSFER_CAT_CHANGE,
					IS_MORTAGAGE_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE });
			hideControls(new String[] { IS_EXCELLENCY_TP_CAT_CHANGE,
					IS_TRAVEL_CAT_CHANGE, IS_SPORT_CAT_CHANGE,
					IS_SHOPPING_CAT_CHANGE, IS_PREVILEGE_TP_CAT_CHANGE,
					IS_ENTERTAINMENT_CAT_CHANGE });
		} else if (formObject.getValue(NEW_CUST_SEGMENT) == "Emirati Excellency"
				|| formObject.getValue(NEW_CUST_SEGMENT) == "Excellency"
				|| formObject.getValue(NEW_CUST_SEGMENT) == "Private Clients") {
			showControls(new String[] { IS_MORTAGAGE_CAT_CHANGE,
					IS_TRAVEL_CAT_CHANGE, IS_SPORT_CAT_CHANGE,
					IS_SHOPPING_CAT_CHANGE, IS_ENTERTAINMENT_CAT_CHANGE,
					IS_PREVILEGE_TP_CAT_CHANGE, IS_VVIP, IS_OTHERS_CAT_CHANGE,
					IS_TRB_CAT_CHANGE, IS_INSURANCE_CAT_CHANGE,
					IS_SALARY_TRANSFER_CAT_CHANGE });
			hideControls(new String[] { IS_EXCELLENCY_TP_CAT_CHANGE });
		} else if (formObject.getValue(NEW_CUST_SEGMENT) == "Signatory") {
			formObject.setValue(NEW_CUST_SEGMENT, TRUE);
		}
	}

	public void populateScreeningDataCPD() {
		logInfo("populateScreeningDataCPD", "Inside PopulateScreeningDataCPD");
		try {
			int iSelectedRow = 0;
			List<List<String>> recordList = null;
			String sCustNo = "";
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			sCustNo = iSelectedRow + "";
			logInfo("populateScreeningDataCPD",
					"In PopulateScreeningDataCPD iSelectedRow = "
							+ iSelectedRow);
			String sQuery = "SELECT SYSTEM_DEC_CPD,BANK_DEC_CPD,BLACKLIST_DEC_CPD,WORLD_CHECK_DEC_CPD,BAD_CHECK_DEC_CPD, "
					+ "FINAL_ELIGIBILITY_CPD,BLACKLIST_REMARKS_CPD,BAD_CHECK_REMARKS_CPD,WORLD_CHECK_REMARKS_CPD,"
					+ "SYSTEM_REMARKS_CPD FROM USR_0_CUST_TXN WHERE WI_NAME='"
					+ sWorkitemId + "' AND CUST_SNO= '" + sCustNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateScreeningDataCPD",
					"sOutput-PopulateScreeningData--" + sOutput);
			String columns[] = { SANC_SYS_DEC, CPD_BANK_DECISION,
					SANC_SCRN_MATCH_FOUND, SANC_FINAL_ELIGIBILITY,
					CPD_MATCH_FOUND, CPD_FINAL_ELIGIBILITY, CPD_CHK_REMARKS,
					CPD_REMARKS, CPD_WRLD_CHK_REMARKS, CPD_RISK_ASSESS_MARKS };
			if (sOutput != null && sOutput.size() > 0) {
				setValuesFromDB(sOutput, columns);
			}
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD "
					+ "WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN "
					+ "(SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
			logInfo("populateScreeningDataCPD", "Loading Internal Blacklist---"
					+ sQuery);
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("PopulateScreeningDataCPD", sQuery);
			loadListView(recordList,
					"Name,Nationality,DOB,Passport_No,Reason,Department",
					CPD_CHK_INT_BLK_LVW);
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD"
					+ " WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN"
					+ " (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')";
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("PopulateScreeningDataCPD", sQuery);
			loadListView(
					recordList,
					"Name,Nationality,DOB,Passport_No,Expiry_Peroid,Department",
					CPD_HD2_LVW);
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT FROM USR_0_CENTRAL_BANK_DATA_CPD"
					+ " WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND CUST_SNO = '"
					+ sCustNo + "'";
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("PopulateScreeningDataCPD", sQuery);
			loadListView(
					recordList,
					"Name,Nationality,DOB,Passport_No,Expiry_Peroid,Department",
					CPD_CNTRL_BNK_BAD_LVW);
			if (!sActivityName.equalsIgnoreCase("CPD Maker")) {
				sQuery = "SELECT CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM, CURRENT_RISK_BUSSINESS, PREVIOUS_RISK, FCR_RISK,"
						+ " APPROVAL_REQ,RISK_CLASSIFICATION,CPDRISK_CLASSIFICATION,cpdcust_assessment_date"
						+ " FROM USR_0_RISK_ASSESSMENT_DATA_CPD WHERE WI_NAME ='"
						+ sWorkitemId + "' AND SNO = '" + sCustNo + "'";
				List<List<String>> sOutput1 = formObject.getDataFromDB(sQuery);
				logInfo("PopulateScreeningDataCPD", sQuery);
				String columns1[] = { CPD_RISK_CID, CPD_RISK_NAME,
						CPD__RISK_CURRENT_RSK_SYSTEM,
						CPD_RISK_CURRENT_RSK_BANK, CPD_RISK_PREVIOUS_RSK,
						CPD_RISK_FCR_RSK, CPD_RISK_COMPL_APP_REQ,
						CPD_RISK_INITIAL_ASSESS_DATE, CPD_RISK_RSK_CLSF };
				if (sOutput1 != null && sOutput1.size() > 0) {
					setValuesFromDB(sOutput1, columns1);
				}
				set_Values_From_Usr_0_Risk_Data();
			}
		} catch (Exception e) {
			logError("Exception in PopulateScreeningDataCPD", e);
		}
	}

	public void populateTRSDCPD() {
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String Query = "select count(1)CNT from usr_0_trsd_details where wi_name='"
				+ sWorkitemId
				+ "' "
				+ "and acc_relation_sno="
				+ iSelectedRow
				+ "  and user_id='CPD' ";

		List<List<String>> out = formObject.getDataFromDB(Query);
		logInfo("populateTRSDCPD", Query + "list output" + out);
		/*if (out.size() > 0 && out != null) {
			if (!out.get(0).get(0).equalsIgnoreCase("0")) {
				Query = "select TRSD_CASE_ID,FULL_NAME,TRSD_1_STATUS,TRSD_2_STATUS,decode(TRSD_APPROVALREQUIRED,'Yes','Yes',"
						+ "'No','No','Yes') as TRSD_APPROVALREQUIRED ,"
						+ "to_char(TRSD_SCREENINGDATE,'dd/mm/yyyy hh:mi:ss')TRSD_SCREENINGDATE,TRSD_CHANNELREFNO,"
						+ "to_char(TRSD_ASSESSMENT_DATE,'dd/mm/yyyy hh:mi:ss')TRSD_ASSESSMENTDATE "
						+ "from usr_0_trsd_details where wi_name='"
						+ sWorkitemId
						+ "' "
						+ "and acc_relation_sno='"
						+ iSelectedRow + "' and user_id='CPD'";
				logInfo("populateTRSDCPD", "inside first if" + Query);
				out = formObject.getDataFromDB(Query);
				if (out != null && out.size() > 0) {
					logInfo("populateTRSDCPD", "inside second if");
					formObject.setValue(CPD_TRSD_CASE_ID, out.get(0).get(0));
					formObject.setValue(CPD_TRSD_NAME, out.get(0).get(1));
					formObject.setValue(CPD_TRSD_SYS_CALC_RES, out.get(0)
							.get(2));
					formObject.setValue(CPD_TRSD_FINAL_DECISION, out.get(0)
							.get(3));
					formObject.setValue(CPD_TRSD_APPROVAL_REQUIRED, out.get(0)
							.get(4));
					formObject.setValue(CPD_TRSD_CHANNEL_REF_NO, out.get(0)
							.get(5));
					trsdDate();
				}
			} else {
				logInfo("populateTRSDCPD", "inside first else");
				formObject.setValue(CPD_TRSD_CASE_ID, "");
				formObject.setValue(CPD_TRSD_NAME, "");
				formObject.setValue(CPD_TRSD_SYS_CALC_RES, "");
				// formObject.setValue(CPD_TRSD_FINAL_DECISION,"");
				formObject.setValue(CPD_TRSD_APPROVAL_REQUIRED, "");
				formObject.setValue(CPD_TRSD_ASSESSMENT_DATE, "");
				formObject.setValue(CPD_TRSD_CHANNEL_REF_NO, "");
				formObject.setValue(CPD_TRSD_SCREENING_DATE, "");

			}
		} */
		if ((formObject.getValue("TRSD_DECISION").toString()
				.equalsIgnoreCase("Approved") || formObject
				.getValue("TRSD_DECISION").toString()
				.equalsIgnoreCase("Pending"))
				&& checkTRSDDataChange() == true) {
			formObject.setStyle(BTN_CPD_TRSD_CHK, "disable", "true");
		} else {
			logInfo("populateTRSDCPD", "inside else for trsd btn enable");
			formObject.setStyle(BTN_CPD_TRSD_CHK, "disable", "false");

		}
	}

	public void visibleonSegmentBasisCPDCHECKER(String category) {
		if (category.equalsIgnoreCase("Aspire")
				|| category.equalsIgnoreCase("Simplylife")) {
			formObject.setStyle(IDS_CB_SAL_TRANSFER, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_MORTGAGES, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_INSURANCE, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_TRB, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_OTHERS, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_VVIP, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_TP, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_TRAVEL, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_SPORT, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_SHOPPING, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, FALSE);
		} else if (category.equalsIgnoreCase("Emirati Excellency")
				|| category.equalsIgnoreCase("Excellency")
				|| category.equalsIgnoreCase("Private Clients")) {
			formObject.setStyle(IDS_CB_SAL_TRANSFER, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_MORTGAGES, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_INSURANCE, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_TRB, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_OTHERS, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_VVIP, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_TP, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_TRAVEL, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_SPORT, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_SHOPPING, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, FALSE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, TRUE);
		} else if (category.equalsIgnoreCase("Privilege")
				|| category.equalsIgnoreCase("Emirati")) {
			formObject.setStyle(IDS_CB_SAL_TRANSFER, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_MORTGAGES, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_INSURANCE, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_TRB, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_OTHERS, VISIBLE, TRUE);
			formObject.setStyle(IDS_CB_VVIP, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_TP, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_TRAVEL, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_SPORT, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_SHOPPING, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, TRUE);
			formObject.setStyle(IDS_PC_CB_ENTERTAINMENT, VISIBLE, FALSE);
		}
	}

	public boolean isExistingCustomer() {
		logInfo("isExistingCustomer", "INSIDE");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		List<List<String>> sOutput = formObject
				.getDataFromDB("select bank_relation from acc_relation_repeater "
						+ "where wi_name='"
						+ sWorkitemId
						+ "' and sno='"
						+ iSelectedRow + "'");
		LoadInstantDelivery();
		logInfo("isExistingCustomer",
				"-------- IsExistingCustomer Result------- : " + sOutput);
		if (sOutput != null && sOutput.size() > 0
				&& "Existing".equalsIgnoreCase(sOutput.get(0).get(0))) {
			return true;
		} else {
			return false;
		}
	}

	public String getRealTimeDetails() {
		logInfo("getRealTimeDetails", "INSIDE getRealTimeDetails");
		// NGRepeater objChkRepeater = formObject.getNGRepeater("acc_repeater");
		int iRows1 = getGridCount(PRODUCT_QUEUE);
		logInfo("getRealTimeDetails", "iRows1...." + iRows1);
		String sMessege = "";
		boolean flagAcc = true;
		try {
			if (iRows1 < 0) {
				sendMessageValuesList(PRODUCT_QUEUE, "Please add product");
			} else {
				logInfo("getRealTimeDetails", "INSIDE ELSE getRealTimeDetails");
				String sInputXML = "";
				String sOutput = "";
				String sReturnCode = "";
				String sAccNO = "";
				String sAMount = "";
				String sCurr = "";
				String modeFund = "";
				String sCid = "";
				// AO_product_queue.cid
				for (int i = 0; i < iRows1; i++) {
					modeFund = formObject
							.getTableCellValue(PRODUCT_QUEUE, i, 8);// (i,
																	// "AO_product_queue.mode_of_funding");
					logInfo("getRealTimeDetails", "modeFund" + modeFund);
					// NGRepeater objChkRepeater2 =
					// formObject.getNGRepeater("REPEAT_FRAME");
					int iSelectedRow = Integer.parseInt(formObject.getValue(
							SELECTED_ROW_INDEX).toString());
					sCid = formObject.getTableCellValue(ACC_RELATION,
							iSelectedRow, 2);
					// sCid=objChkRepeater.getValue(i, "AO_product_queue.cid");
					logInfo("getRealTimeDetails", "sCid" + sCid);
					sAccNO = formObject.getTableCellValue(PRODUCT_QUEUE, i, 9);
					sAMount = formObject
							.getTableCellValue(PRODUCT_QUEUE, i, 10);
					sCurr = formObject.getTableCellValue(PRODUCT_QUEUE, i, 11);
					logInfo("getRealTimeDetails", "sAccNO" + sCid);
					logInfo("getRealTimeDetails", "sAMount" + sCid);
					logInfo("getRealTimeDetails", "sCurr" + sCid);
					if ("Transfer - Internal".equalsIgnoreCase(modeFund)) {
						sInputXML = FetchRealTimeDetails(sAccNO, sAMount,
								sCurr, sCid);
						logInfo("getRealTimeDetails", "sInputXML----"
								+ sInputXML);
						sOutput = socket.connectToSocket(sInputXML);
						logInfo("getRealTimeDetails", "sOutput----" + sOutput);
						sReturnCode = getTagValues(sOutput, "returnCode");
						logInfo("getRealTimeDetails", "OUTSIDE RETURN CODE"
								+ sReturnCode);
						if (sReturnCode.equalsIgnoreCase("0")
								|| sReturnCode.equalsIgnoreCase("2")) {
							logInfo("getRealTimeDetails", "INSIDE RETURN CODE"
									+ sReturnCode);
							if (!getTagValues(sOutput, "CurrentBalance")
									.equalsIgnoreCase("")) {
								logInfo("getRealTimeDetails",
										"INSIDE CurrentBalanceE"
												+ getTagValues(sOutput,
														"CurrentBalance"));
								formObject
										.setTableCellValue(
												PRODUCT_QUEUE,
												i,
												12,
												getTagValues(sOutput,
														"CurrentBalance"));// (i,
																			// "AO_product_queue.from_acc_bal",getTagValues(sOutput,"CurrentBalance"));
							}
						} else {
							try {
								sMessege = sAccNO
										+ ":"
										+ getTagValue(sOutput,
												"errorDescription") + "\n";
							} catch (Exception e) {
								logError("Exception in getRealTimeDetails", e);
							}
							if (sMessege.equalsIgnoreCase("")) {
								flagAcc = false;
								sMessege = sAccNO
										+ ":Error in Fetching Balance \n";

							}
						}
					}
				}
				if (!flagAcc) {
					logInfo("getRealTimeDetails", "INSIDE ERROR");
					logInfo("getRealTimeDetails", sMessege);
				}
			}
		} catch (Exception e) {
			logError("Exception in getRealTimeDetails", e);
		}

		return "";
	}

	public String FetchRealTimeDetails(String AccNo, String Amount,
			String Currency, String Cid) {
		String sInputXML = "";
		try {
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
			String sCallType = "FETCH_CUSTOMER_BALANCE";
			logInfo("FetchRealTimeDetails", "AccNo" + AccNo);
			logInfo("FetchRealTimeDetails", "Amount" + Amount);
			logInfo("FetchRealTimeDetails", "Currency" + Currency);
			logInfo("FetchRealTimeDetails", "Cid" + Cid);
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>" + "<Calltype>" + sCallType
					+ "</Calltype>" + "<Customer>" + "<CustID>" + Cid
					+ "</CustID>\n" + "<AccountNumber>" + AccNo
					+ "</AccountNumber>\n" + "<TranAmount>" + Amount
					+ "</TranAmount>\n" + "<TranCurrency>" + Currency
					+ "</TranCurrency>\n";
			sInputXML += "</Customer>" + "<EngineName>" + sEngineName
					+ "</EngineName>" + "<SessionId>" + sSessionId
					+ "</SessionId>" + "<REF_NO>" + sOutput.get(0).get(0)
					+ "</REF_NO>" + "<WiName>" + sWorkitemId + "</WiName>"
					+ "</APWebService_Input>";
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logError("Exception in FetchRealTimeDetails", e);
		}
		return sInputXML;
	}

	public void LoadFacilitiesData(String sFacilityGrid) {
		try {
			JSONArray jsonArray = new JSONArray();
			JSONObject obj = new JSONObject();
			JSONObject obj1 = new JSONObject();
			int sPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			logInfo("Inside sPrimaryCust: ", "" + sPrimaryCust);
			String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					sPrimaryCust, 7).toString();
			logInfo("Inside sAccRelation: ", "" + sAccRelation);
			formObject.clearTable(sFacilityGrid);
			String sQuery = "SELECT CUST_ID,SMS_FLAG,IB_FLAG,IVR_FLAG,STAFF_FLAG_EXISTING,ESTATEMENT_FLAG, "
					+ "CHEQUEBOOK_BLOCK,DECODE(SIGNATUREPRESENTFLAG,'Y','Yes','No') AS SIGNATUREPRESENTFLAG,"
					+ "DECODE(PHOTOPRESENTFLAG,'Y','Yes','No') AS PHOTOPRESENTFLAG,CUSTOMER_OPEN_DATE,"
					+ "TOUCHPOINTS,MIB_FLAG FROM USR_0_CUST_TXN WHERE CUST_SNO ='"
					+ sPrimaryCust
					+ "' AND "
					+ "WI_NAME = '"
					+ sWorkitemId
					+ "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadFacilitiesData", "sOutput----" + sOutput);
			logInfo("LoadFacilitiesData", "sAccRelation----" + sAccRelation);
			if (sOutput != null && sOutput.size() > 0) {
				String sCID = sOutput.get(0).get(0);
				if (sAccRelation.equalsIgnoreCase("New")) {
					// showList.append("<ListItems><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Customer Open Date</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Estatement Registered</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>IB Flag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>IVR Flag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>MIB Flag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>PhotoPresentFlag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>SMS Flag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>SignaturePresentFlag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Staff Flag</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>TouchPoints</SubItem><SubItem>Not Defined-NTB</SubItem></ListItem></ListItems>");
					obj.put("CID", sCID);
					obj.put("FACILITY", "Customer Open Date");
					obj.put("DESCRIPTION", "Not Defined-NTB");
					obj1.put("CID", sCID);
					obj1.put("FACILITY", "Estatement Registered");
					obj1.put("DESCRIPTION", "Not Defined-NTB");
					jsonArray.add(obj);
					jsonArray.add(obj1);
					logInfo("LoadFacilitiesData", "JsonArray" + jsonArray);
					formObject.addDataToGrid(FAC_LVW_CRO, jsonArray);
				} else {
					// showList.append("<ListItems><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Customer Open Date</SubItem><SubItem>"+getTagValue(sOutput,"CUSTOMER_OPEN_DATE")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Estatement Registered</SubItem><SubItem>"+getTagValue(sOutput,"ESTATEMENT_FLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>IB Flag</SubItem><SubItem>"+getTagValue(sOutput,"IB_FLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>IVR Flag</SubItem><SubItem>"+getTagValue(sOutput,"IVR_FLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>MIB Flag</SubItem><SubItem>"+getTagValue(sOutput,"MIB_FLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>PhotoPresentFlag</SubItem><SubItem>"+getTagValue(sOutput,"PHOTOPRESENTFLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>SMS Flag</SubItem><SubItem>"+getTagValue(sOutput,"SMS_FLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>SignaturePresentFlag</SubItem><SubItem>"+getTagValue(sOutput,"SIGNATUREPRESENTFLAG")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>Staff Flag</SubItem><SubItem>"+getTagValue(sOutput,"STAFF_FLAG_EXISTING")+"</SubItem></ListItem><ListItem><SubItem>"+sCID+"</SubItem><SubItem>TouchPoints</SubItem><SubItem>"+getTagValue(sOutput,"TOUCHPOINTS")+"</SubItem></ListItem></ListItems>");
					obj.put("CID", sCID);
					obj.put("FACILITY", "Customer Open Date");
					obj.put("DESCRIPTION", sOutput.get(0).get(0));
					obj1.put("CID", sCID);
					obj1.put("FACILITY", "Estatement Registered");
					obj1.put("DESCRIPTION", sOutput.get(0).get(1));
					jsonArray.add(obj);
					jsonArray.add(obj1);
					logInfo("LoadFacilitiesData", "JsonArray" + jsonArray);
					formObject.addDataToGrid(FAC_LVW_CRO, jsonArray);
				}
				logInfo("", "sOutput----" + sOutput);
				// formObject.NGAddListItem(sFacilityGrid,showList.toString());
			}
		} catch (Exception e) {
			logError("Exception in LoadFacilitiesData", e);
		}
	}

	public void LoadOfferedProduct(String sGridName) {
		logInfo("LoadOfferedProduct", "INSIDE");
		String sInputXML = getProdEligibilityInputXML();
		String sClassification = "";
		String sProductCategory = "";
		String sProductType = "";
		String sCurrency = "";
		String sSaving = "";
		String sCall = "";
		String sTerm = "";
		String sCurrent = "";
		String sCurrentCurrency = "";
		String sProdTypeQuery1 = "";
		String sProdCatQuery1 = "";
		String sQuery1 = "";
		List<List<String>> sOutput;
		String sBranch = "";
		String code = "";
		String islamicCode = "";
		try {
			String sAccHomeBranch = formObject.getValue(ACC_HOME_BRANCH)
					.toString();
			sQuery1 = "SELECT CODE,EQV_ISLAMIC_BR_CODE FROM USR_0_HOME_BRANCH WHERE HOME_BRANCH = '"
					+ sAccHomeBranch + "'";
			logInfo("sQuery1 offered Product :: ", sQuery1);
			sOutput = formObject.getDataFromDB(sQuery1);
			if (sOutput != null && sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					code = sOutput.get(i).get(0);
					islamicCode = sOutput.get(i).get(1);
					if (!code.equalsIgnoreCase("")) {
						sBranch = sBranch + "'" + code + "',";
					}
					if (!islamicCode.equalsIgnoreCase("")) {
						sBranch = sBranch + "'" + islamicCode + "',";
					}
				}
			}
			sBranch = sBranch.substring(1, sBranch.length() - 2);
			String sOutputXML = socket.connectToSocket(sInputXML);
			sProductCategory = getTagValues(sOutputXML, "subcategory");
			sQuery1 = "";
			logInfo("LoadOfferedProduct",
					"socket xml offered Product sOutputXML :: " + sOutputXML
							+ "sProductCategory " + sProductCategory);
			if (sProductCategory.equalsIgnoreCase("")) {
				sendMessageValuesList("",
						"Error in calculating offered products");
				return;
			} else if (sProductCategory.equalsIgnoreCase("Select")) {
				sendMessageValuesList(
						"",
						"No product found as per rule engine.Generic product list is getting "
								+ "displayed"
								+ "\n"
								+ "Or Customer information validations are not run.");
			} else {
				sProductType = "";
				sClassification = getTagValues(sOutputXML,
						"classification_output");
				sCurrent = getTagValues(sOutputXML, "current");
				sSaving = getTagValues(sOutputXML, "savings");
				sCall = getTagValues(sOutputXML, "call");
				sTerm = getTagValues(sOutputXML, "term");
				sCurrentCurrency = getTagValues(sOutputXML, "current_currency");
				if (sClassification.equalsIgnoreCase("Conventional")) {
					sClassification = "C";
				} else if (sClassification.equalsIgnoreCase("Islamic")) {
					sClassification = "I";
				}
				if (sCurrent.equalsIgnoreCase("Yes")) {
					sProductType = sProductType + "'Current',";
				}
				if (sSaving.equalsIgnoreCase("Yes")) {
					sProductType = sProductType + "'Saving',";
				}
				if (sCall.equalsIgnoreCase("Yes")) {
					sProductType = sProductType + "'Call',";
				}
				if (sTerm.equalsIgnoreCase("Yes")) {
					sProductType = sProductType + "'Term',";
				}
				if (sCurrentCurrency.equalsIgnoreCase("NON AED")) {
					sCurrency = "Arab Emirates Dirham";
				}
				String[] sTempCategory = sProductCategory.split(",");
				sProductCategory = "";
				for (int i = 0; i < sTempCategory.length; i++) {
					sProductCategory = sProductCategory + "'"
							+ sTempCategory[i] + "',";
				}
				sProductCategory = sProductCategory + "'Others','Investment',";
				if (!sProductType.equalsIgnoreCase("")) {
					sProductType = sProductType.substring(1,
							sProductType.length() - 2);
				}
				if (!sProductCategory.equalsIgnoreCase("")) {
					sProductCategory = sProductCategory.substring(1,
							sProductCategory.length() - 2);
				}
				sQuery1 = sQuery1
						+ "SELECT DISTINCT A.PRODUCT_CODE, A.PRODUCT_DESC,CURRENCY CURRENCY_CODE,'' FROM "
						+ "USR_0_PRODUCT_MASTER A,USR_0_PRODUCT_BRANCH_MAPPING B,USR_0_PRODUCT_TYPE_MASTER C,"
						+ "USR_0_CURRENCY D WHERE A.PRODUCT_CODE = B.PRODUCT_CODE AND A.PRODUCT_CODE = C.PRODUCT_CODE "
						+ "AND C.COD_PROD_TYPE ='" + sClassification
						+ "' AND C.PROCESS_TYPE ='Onshore' AND "
						+ "CURR_CODE = CURRENCY_CODE AND ";
				if (!sProductType.equalsIgnoreCase("")) {
					sProdTypeQuery1 = "C.PRODUCT_TYPE IN ('" + sProductType
							+ "')";
				} else {
					sProdTypeQuery1 = "C.PRODUCT_TYPE NOT IN ('Internal','NonRetail')";
				}
				if (!sProductCategory.equalsIgnoreCase("")) {
					sProdCatQuery1 = "C.SUB_PRODUCT_TYPE IN('"
							+ sProductCategory + "')";
				}
				sQuery1 = sQuery1 + sProdTypeQuery1
						+ (sProdTypeQuery1.length() > 0 ? " AND " : "")
						+ sProdCatQuery1 + " AND BRANCH_CODE IN ('" + sBranch
						+ "')";
				if (!sCurrency.equalsIgnoreCase("")) {
					sQuery1 = sQuery1
							+ " AND CURRENCY_CODE != (CASE WHEN PRODUCT_TYPE='Current' THEN "
							+ "(SELECT CURR_CODE FROM USR_0_CURRENCY WHERE UPPER(CURRENCY) = "
							+ "UPPER('Arab Emirates Dirham')) ELSE '1090' END )";
				}
				sQuery1 = sQuery1 + " ORDER BY TO_NUMBER(PRODUCT_CODE)";
				logInfo("LoadOfferedProduct", "sProductCategory: "
						+ sProductCategory);
			}
			if (!sQuery1.equalsIgnoreCase("")) {
				List<List<String>> sFinalOutput = formObject
						.getDataFromDB(sQuery1);
				logInfo("LoadOfferedProduct", "sFinalOutput: " + sFinalOutput);
				if (sFinalOutput != null && sFinalOutput.size() > 0) {
					loadListView(
							sFinalOutput,
							"PRODUCT_CODE,PRODUCT_DESCRIPTION,CURRENCY,PROD_ACC_OPENING",
							sGridName);
				}
			}
			int iListViewRows = getGridCount(sGridName);
			if (iListViewRows == 0) {
				logInfo("LoadOfferedProduct", "sGridName: " + sGridName
						+ " count is 0");
				if (formObject.getValue(ACC_CLASS).toString()
						.equalsIgnoreCase("Conventional")) {
					sClassification = "'C'";
				} else if (formObject.getValue(ACC_CLASS).toString()
						.equalsIgnoreCase("Islamic")) {
					sClassification = "'I'";
				} else {
					sClassification = "'I','C'";
				}
				if (formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Minor")) {
					sProdCatQuery1 = "SUB_PRODUCT_TYPE IN ('Child Saver";
				} else {
					sProdCatQuery1 = "SUB_PRODUCT_TYPE NOT IN ('Child Saver";
				}
				sQuery1 = "SELECT PRODUCT_CODE, PRODUCT_DESC,(SELECT CURRENCY FROM USR_0_CURRENCY WHERE "
						+ "CURR_CODE = CURRENCY_CODE) CURRENCY_CODE,'' FROM USR_0_PRODUCT_MASTER WHERE "
						+ "PRODUCT_CODE IN (SELECT DISTINCT PRODUCT_CODE FROM USR_0_PRODUCT_BRANCH_MAPPING "
						+ "WHERE PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_TYPE_MASTER WHERE "
						+ "COD_PROD_TYPE IN ("
						+ sClassification
						+ ") AND PROCESS_TYPE ='Onshore' AND PRODUCT_TYPE "
						+ "NOT IN ('Internal','NonRetail') AND "
						+ sProdCatQuery1
						+ "')) AND BRANCH_CODE "
						+ "IN ('"
						+ sBranch + "')) ORDER BY TO_NUMBER(PRODUCT_CODE)";
				logInfo("LoadOfferedProduct", "product sQuery1: " + sQuery1);
				List<List<String>> out3 = formObject.getDataFromDB(sQuery1);
				logInfo("LoadOfferedProduct", "product output: " + out3);
				if (out3 != null && out3.size() > 0) {
					loadListView(
							out3,
							"PRODUCT_CODE,PRODUCT_DESCRIPTION,CURRENCY,PROD_ACC_OPENING",
							sGridName);
				}
			}
		} catch (Exception e) {
			logError("Exception in LoadOfferedProduct ", e);
		}
	}

	public String getProdEligibilityInputXML() {
		logInfo("getProdEligibilityInputXML", "Inside");
		String sXML = "";
		String sSeqNo = "";
		List<List<String>> sOutput;
		String sSignType = "";
		String sEmpType = "";
		String signStyle = "";
		String dob = "";
		String finalNationality = "";
		String finalCountry = "";
		String empStatus = "";
		int sMinorAge = 0;
		try {
			String sPrimaryCust = getPrimaryCustomerSNO();
			sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
			logInfo("getProdEligibilityInputXML", "sOutput:" + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				sSeqNo = sOutput.get(0).get(0);
			}
			sOutput = formObject
					.getDataFromDB("SELECT B.SIGN_STYLE AS SIGN_STYLE,B.EMPLOYEE_TYPE as EMPLOYEE_TYPE,"
							+ "(SELECT DISTINCT A.TYPE FROM USR_0_EMPLOYMENT_STATUS A WHERE A.EMP_STATUS =B.EMP_STATUS) "
							+ "EMP_STATUS,B.FINAL_RESIDENCE_COUNTRY AS FINAL_COUNTRY, to_char(B.FINAL_DOB,'dd/MM/yyyy') "
							+ "FINAL_DOB,B.CUST_ID AS CUST_ID,B.FINAL_NATIONALITY AS FINAL_NATIONALITY FROM USR_0_CUST_TXN "
							+ "B WHERE WI_NAME ='"
							+ sWorkitemId
							+ "' AND CUST_SNO ='" + sPrimaryCust + "'");
			logInfo("getProdEligibilityInputXML", "sOutput:" + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				sEmpType = sOutput.get(0).get(1);
				signStyle = sOutput.get(0).get(0);
				dob = sOutput.get(0).get(4);
				finalNationality = sOutput.get(0).get(6);
				finalCountry = sOutput.get(0).get(3);
				empStatus = sOutput.get(0).get(2);
			}
			int iAge = 0;
			String sOwnership = formObject.getValue(ACC_OWN_TYPE).toString();
			if (sOwnership.equalsIgnoreCase("Joint")) {
				sOwnership = "Single";
			}
			if (signStyle.indexOf("Signature") != -1) {
				sSignType = "Sign";
			} else if (signStyle.indexOf("Thumb") != -1) {
				sSignType = "Thumb Impression";
			}

			if (!dob.equalsIgnoreCase("")) {
				iAge = CalculateAge1(dob);
			}

			if (sEmpType.equalsIgnoreCase("")) {
				sEmpType = "*";
			}
			sOutput = formObject
					.getDataFromDB("select VALUE from usr_0_defaultvalue_fcr where name='Minor_Age'");
			if (sOutput != null && sOutput.size() > 0) {
				sMinorAge = Integer.parseInt(sOutput.get(0).get(0));
			}
			sXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Product_Eligibility</Calltype>" + "<Customer>"
					+ "<acc_classification>"
					+ formObject.getValue(ACC_CLASS).toString()
					+ "</acc_classification>"
					+ "<acc_ownership>"
					+ sOwnership
					+ "</acc_ownership>"
					+ "<country_of_res>"
					+ finalCountry
					+ "</country_of_res>"
					+ "<emp_type>"
					+ sEmpType
					+ "</emp_type>"
					+ "<sign_type>"
					+ sSignType
					+ "</sign_type>"
					+ "<emp_status>"
					+ empStatus
					+ "</emp_status>"
					+ "<casa_availed>No</casa_availed>"
					+ "<cust_age>"
					+ iAge
					+ "</cust_age>"
					+ "<nationality>"
					+ finalNationality
					+ "</nationality>"
					+ "<call>Select</call>"
					+ "<call_currency>Select</call_currency>"
					+ "<classification_output>Select</classification_output>"
					+ "<cntry_specific>Select</cntry_specific>"
					+ "<current>Select</current>"
					+ "<current_currency>Select</current_currency>"
					+ "<cust_literacy>Yes</cust_literacy>"
					+ "<max_age>*</max_age>"
					+ "<min_age>"
					+ sMinorAge
					+ "</min_age>"
					+ // 21
					"<res_status>Yes</res_status>"
					+ "<savings>Select</savings>"
					+ "<savings_currency>Select</savings_currency>"
					+ "<subcategory>Select</subcategory>"
					+ "<term>Select</term>"
					+ "<term_currency>Select</term_currency>"
					+ "<trade_license>No</trade_license>"
					+ "<REF_NO>"
					+ sSeqNo
					+ "</REF_NO>"
					+ "<userName>"
					+ sUserName
					+ "</userName>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<WiName>"
					+ sWorkitemId
					+ "</WiName>"
					+ "</Customer></APWebService_Input>";

			logInfo("getProdEligibilityInputXML", "inputXML: " + sXML);
		} catch (Exception e) {
			logError("getProdEligibilityInputXML", e);
		}
		return sXML;
	}

	public String getEDMSDocs(String doctype, String cust_id) {
		String dataNt = fetchEDMSDocs(cust_id, doctype);
		logInfo("getEDMSDocs", "  EDMS DOCS  -->" + dataNt);
		return dataNt;
	}

	public String fetchEDMSDocs(String sCustID, String docname) {
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>EMDS_DOCS</Calltype>" + "<CUST_ID>" + sCustID
				+ "</CUST_ID>" + "<Doc_Name>" + docname + "</Doc_Name>"
				+ "<EngineName>" + sEngineName + "</EngineName>"
				+ "<SessionId>" + sSessionId + "</SessionId>"
				+ "</APWebService_Input>";
		logInfo("fetchEDMSDocs", "sInputXML: " + sInputXML);
		String sOutput = socket.connectToSocket(sInputXML);
		logInfo("fetchEDMSDocs", "sOutput: " + sOutput);
		return sOutput;
	}

	public JSONObject getDocumentList(String sCustName, String sDocName,
			String sEDMSDocType, String CUST_ID, String sDocGroupType,
			String sDocDesc, String sCustType, String sEDMSAvail,
			String sBankRelation) {
		logInfo("getDocumentList", "INSIDE");
		String dataNt = "";
		JSONArray jsonArray = new JSONArray();
		JSONObject obj = new JSONObject();
		try {
			if (sBankRelation.equalsIgnoreCase("New")) {

			} else if (sEDMSAvail.equalsIgnoreCase("Yes")) {
				dataNt = getEDMSDocs(sEDMSDocType, CUST_ID);
			}
			if (sDocGroupType == null) {
				sDocGroupType = "";
			}
			if (sDocDesc.equalsIgnoreCase("Yes")) {
				sDocDesc = "";
			}
			logInfo("getDocumentList", "sBankRelation: " + sBankRelation
					+ ", dataNt: " + dataNt + ", sEDMSAvail: " + sEDMSAvail
					+ ", sDocGroupType: " + sDocGroupType + ", sDocDesc: "
					+ sDocDesc);
			if (dataNt.equalsIgnoreCase("")) {
				// return
				// "<ListItem><SubItem>"+SNO+++"</SubItem><SubItem>"+sCustName+"</SubItem><SubItem>"+CUST_ID+"</SubItem><SubItem>"+sDocName+"</SubItem><SubItem>"+sDocGroupType+"</SubItem><SubItem>"+sDocDesc+"</SubItem><SubItem>NO</SubItem><SubItem></SubItem><SubItem>"+sCustType+"</SubItem><SubItem></SubItem><SubItem></SubItem></ListItem>";
				obj.put("SNO", SNO++);
				obj.put("CUST_NAME", sCustName);
				obj.put("CID", CUST_ID);
				obj.put("DOC_TYPE", sDocName);
				obj.put("DOC_GROUP", sDocGroupType);
				obj.put("DOC_DESC", sDocDesc);
				obj.put("DOC_FRM_EDMS", "NO");
				obj.put("DOC_UPLOAD_DATE", "");
				obj.put("ACC_RELATION", sCustType);
				obj.put("FolderIndex", "");
				obj.put("documentIndex", "");
				return obj;
				// logInfo("sDebitCardGrid","jsonArray2:: "+jsonArray.toString());
				// formObject.addDataToGrid(sDebitCardGrid,jsonArray);
			} else {
				String Rdate = getTagValues(dataNt, "Rdate");
				String foldInd = getTagValues(dataNt, "FI3");
				String docInd = getTagValues(dataNt, "Docindex");
				// return
				// "<ListItem><SubItem>"+SNO+++"</SubItem><SubItem>"+sCustName+"</SubItem><SubItem>"+CUST_ID+"</SubItem><SubItem>"+sDocName+"</SubItem><SubItem>"+sDocGroupType+"</SubItem><SubItem>"+sDocDesc+"</SubItem><SubItem>YES</SubItem><SubItem>"+Rdate+"</SubItem><SubItem>"+sCustType+"</SubItem><SubItem>"+foldInd+"</SubItem><SubItem>"+docInd+"</SubItem></ListItem>";
				obj.put("SNO", SNO++);
				obj.put("CUST_NAME", sCustName);
				obj.put("CID", CUST_ID);
				obj.put("DOC_TYPE", sDocName);
				obj.put("DOC_GROUP", sDocGroupType);
				obj.put("DOC_DESC", sDocDesc);
				obj.put("DOC_FRM_EDMS", "YES");
				obj.put("DOC_UPLOAD_DATE", Rdate);
				obj.put("ACC_RELATION", sCustType);
				obj.put("FolderIndex", foldInd);
				obj.put("documentIndex", docInd);
				return obj;
			}
		} catch (Exception e) {
			logError("getDocumentList", e);
		}
		return obj;
	}

	public void CalculateCustomerRisk() {
		try {
			logInfo("CalculateCustomerRisk", "INSIDE");
			String sQuery = "SELECT  BANK_DEC FROM USR_0_CUST_TXN WHERE WI_NAME='"
					+ sWorkitemId + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String sFinalRisk = "";
			if (sOutput != null && sOutput.size() > 0) {
				for (int iLoop = 0; iLoop < sOutput.size(); iLoop++) {
					String bankDec = sOutput.get(iLoop).get(0);
					logInfo("CalculateCustomerRisk",
							"inside CalculateCustomerRisk 33333333");
					if (bankDec.equalsIgnoreCase("Not Approved")) {
						logInfo("", "inside CalculateCustomerRisk 444444");
						sFinalRisk = "Not Eligible";
						break;
					} else if (bankDec
							.equalsIgnoreCase("Further Approval Required")) {
						logInfo("CalculateCustomerRisk",
								"inside CalculateCustomerRisk 5555555");
						sFinalRisk = "Approval Required";
					} else if (bankDec.equalsIgnoreCase("Pending")) {
						logInfo("CalculateCustomerRisk",
								"inside Pending 5555555");
						sFinalRisk = "Pending";
					} else if (bankDec.equalsIgnoreCase("Approved")) {
						logInfo("CalculateCustomerRisk",
								"inside CalculateCustomerRisk 666666");
						if (!sFinalRisk.equalsIgnoreCase("Approval Required")) {
							logInfo("CalculateCustomerRisk",
									"inside CalculateCustomerRisk 777777");
							sFinalRisk = "Eligible";
						}
					}
				}
			}
			formObject.setValue(FINAL_CUSTOMER_RISK, sFinalRisk);
		} catch (Exception e) {
			logError("CalculateCustomerRisk", e);
		}
	}

	public void saveOfferedDebitCard(String sTableName, String sGridName) {
		logInfo("saveOfferedDebitCard", "Inside sTableName: " + sTableName
				+ ",sGridName: " + sGridName);
		try {
			String sColumn = "WI_NAME,CUST_ID,CUST_NAME,CARD_TYPE";
			String sWhere = "WI_NAME='" + sWorkitemId + "'";
			String sValue = "";
			int sCount = getGridCount(sGridName);
			formObject.saveDataInDB("DELETE FROM " + sTableName + " WHERE "
					+ sWhere);
			for (int row = 0; row < sCount; row++) {
				sValue = "'"
						+ sWorkitemId
						+ "','"
						+ formObject.getTableCellValue(sGridName, row, 0)
								.toString()
						+ "',"
						+ "'"
						+ formObject.getTableCellValue(sGridName, row, 1)
								.toString()
						+ "',"
						+ "'"
						+ formObject.getTableCellValue(sGridName, row, 2)
								.toString() + "'";
				logInfo("SaveOfferedDebitCard", "sColumn:" + sColumn
						+ "  ,sValue: " + sValue);
				insertDataIntoDB(sTableName, sColumn, sValue);
			}
		} catch (Exception e) {
			logError("Exception in saveOfferedDebitCard", e);
		}
		logInfo("saveOfferedDebitCard", "Outside");
	}

	public void saveFacilitiesData(String sTableName, String sGridName) {
		try {
			logInfo("saveFacilitiesData", "Inside sTableName: " + sTableName
					+ ",sGridName: " + sGridName);
			String sColumn = "WI_NAME,CID,FACILITY,DESCRIPTION";
			String sWhere = "";
			String sValue = "";
			int sCount = getGridCount(sGridName);
			sWhere = "WI_NAME='" + sWorkitemId + "'";
			formObject.saveDataInDB("DELETE FROM " + sTableName + " WHERE "
					+ sWhere);
			for (int row = 0; row < sCount; row++) {
				sValue = "'"
						+ sWorkitemId
						+ "','"
						+ formObject.getTableCellValue(sGridName, row, 0)
								.toString()
						+ "','"
						+ formObject.getTableCellValue(sGridName, row, 1)
								.toString()
						+ "','"
						+ formObject.getTableCellValue(sGridName, row, 2)
								.toString() + "'";
				logInfo("saveFacilitiesData", "sValue----" + sValue);
				insertDataIntoDB(sTableName, sColumn, sValue);
			}
			logInfo("saveFacilitiesData", "Outside");
		} catch (Exception e) {
			logError("saveFacilitiesData", e);
		}
	}

	public void saveOfferedProduct(String sTableName, String sGridName) {
		try {
			logInfo("SaveOfferedProduct", "Inside sTableName: " + sTableName
					+ " ,sGridName: " + sGridName);
			String sColumns = "WI_NAME,PRODUCT_CODE,PRODUCT_DESC,CURRENCY_CODE,CURRENCY_SHORT_NAME,CURRENCY_DESC";
			String sWhere = "";
			String sQuery = "";
			List<List<String>> sOutput = null;
			String sValues = "";
			String sCurrency = "";
			int sCount = getGridCount(sGridName);
			sWhere = "WI_NAME='" + sWorkitemId + "'";
			formObject.saveDataInDB("DELETE FROM " + sTableName + " WHERE "
					+ sWhere);
			for (int row = 0; row < sCount; row++) {
				sCurrency = formObject.getTableCellValue(sGridName, row, 2)
						.toString();
				sQuery = "SELECT CURR_CODE, CURR_SHORT FROM USR_0_CURRENCY WHERE CURRENCY='"
						+ sCurrency + "'";
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("SaveOfferedProduct", "sQuery: " + sQuery
						+ ",sOutput: " + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					String curr_code = sOutput.get(0).get(0);
					String curr_short = sOutput.get(0).get(1);
					sValues = "'"
							+ sWorkitemId
							+ "','"
							+ formObject.getTableCellValue(sGridName, row, 0)
									.toString()
							+ "','"
							+ formObject.getTableCellValue(sGridName, row, 1)
									.toString() + "','" + curr_code + "','"
							+ curr_short + "','" + sCurrency + "'";
					logInfo("SaveOfferedProduct", "sColumns: " + sColumns
							+ ",sValue: " + sValues);
					insertDataIntoDB(sTableName, sColumns, sValues);
				}
			}
			logInfo("SaveOfferedProduct", "Outside");
		} catch (Exception e) {
			logError("SaveOfferedProduct", e);
		}
	}

	public boolean mandatoryCategoryChangeData() {
		if (sActivityName.equalsIgnoreCase("CPD Maker")) {
			if (formObject.getValue(NEW_RM_CODE_CAT_CHANGE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(NEW_RM_CODE_CAT_CHANGE, CA091);
				return false;
			}
			if (formObject.getValue(NEW_RM_NAME_CAT_CHANGE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(NEW_RM_NAME_CAT_CHANGE, CA092);
				return false;
			}
		} else {
			if (formObject.getValue(NEW_RM_CODE_CAT_CHANGE).toString()
					.equalsIgnoreCase("--Select--")) {
				sendMessageValuesList(NEW_RM_CODE_CAT_CHANGE, CA091);
				return false;
			}
			if (formObject.getValue(NEW_RM_NAME_CAT_CHANGE).toString()
					.equalsIgnoreCase("--Select--")) {
				sendMessageValuesList(NEW_RM_NAME_CAT_CHANGE, CA092);
				return false;
			}
		}//Added by krishna
		if (formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade")&&
				(formObject.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Aspire")
			 ||formObject.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Simplylife"))){
				return true;
			}else if(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") &&
				    (formObject.getValue("OLD_CUST_SEGMENT").toString().equalsIgnoreCase("Private Clients"))){
		        return true;
			}else{
			   if (formObject.getValue("NEW_CUST_SEGMENT").toString().equalsIgnoreCase("")) {
				sendMessageValuesList("NEW_CUST_SEGMENT", CA016);
				return false;
			  }
			}
		if (formObject.getValue(NEW_CUST_SEGMENT).toString().equalsIgnoreCase(
						formObject.getValue(OLD_CUST_SEGMENT).toString())) {
			sendMessageValuesList(NEW_CUST_SEGMENT,
					"New Customer Segment can not be same as Old Customer Segment");
			return false;
		}
		if (formObject.getValue(REQUEST_TYPE).toString()
				.equalsIgnoreCase("Category Change Only")) {
			if (formObject.getValue(SOURCE_NAME_CAT_CHANGE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SOURCE_NAME_CAT_CHANGE,
						"Please Select Source Name.");
				return false;
			}
			if (formObject.getValue(SOURCE_CODE_CAT_CHANGE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SOURCE_CODE_CAT_CHANGE,
						"Please Select Source Code.");
				return false;
			}
		}
		return true;
	}

	public void setAutoFilledFieldsLocked() {
		formObject.setStyle(CP_CITY, DISABLE, TRUE);
		formObject.setStyle(CORR_STATE, DISABLE, TRUE);
		formObject.setStyle(CORR_CNTRY, DISABLE, TRUE);
		formObject.setStyle(CUST_NATIONALITY, DISABLE, TRUE);
		formObject.setStyle(CUST_PREFIX, DISABLE, TRUE);
		formObject.setStyle(CUST_GENDER, DISABLE, TRUE);
		formObject.setStyle(PROF_CODE, DISABLE, TRUE);
		formObject.setStyle(EMPNAME, DISABLE, TRUE);
		formObject.setStyle(PROFESION, DISABLE, TRUE);
	}

	public void Frame52_Disable() {
		formObject.setStyle(SOURCING_CHANNEL, DISABLE, TRUE);
		// formObject.setStyle(SOURCING_CENTER,DISABLE,TRUE);
		formObject.setStyle(REQUEST_TYPE, DISABLE, TRUE);
		formObject.setStyle(DATA_ENTRY_MODE, DISABLE, TRUE);
		formObject.setStyle(FORM_AUTO_GENERATE, DISABLE, TRUE);
		formObject.setStyle(ACC_OWN_TYPE, DISABLE, TRUE);
		formObject.setStyle(ACC_CLASS, DISABLE, TRUE);
		formObject.setStyle(ACC_HOME_BRANCH, DISABLE, TRUE);
		logInfo("Form 52 Disable.", "");
	}

	public void saveScreeningDataCPD() {
		logInfo("saveScreeningDataCPD", "inside saveScreeningDataCPD123...");
		try {
			int iSelectedRow = 0;
			String cust_id = "";
			iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			cust_id = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
					2);// cid
			String sCustNo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 0);// SNO;
			String wms_id = formObject.getValue(WMS_ID).toString();
			String sSystemDec = formObject.getValue(SANC_SYS_DEC).toString();
			logInfo("saveScreeningDataCPD", "CPD_TRSD_FINAL_DECISION: "
					+ formObject.getValue(CPD_TRSD_FINAL_DECISION));
			String sBankDec = formObject.getValue(CPD_TRSD_FINAL_DECISION)
					.toString(); // eligible or not eligible
			String sBlackListDec = formObject.getValue(CPD_CHK_MATCH_FOUND)
					.toString();
			String sBadCheckDec = formObject.getValue(CPD_MATCH_FOUND)
					.toString();
			String sWorldCheckDec = formObject.getValue(CPD_MTCH_FOUND)
					.toString();
			String sFinalEligibility = formObject.getValue(
					CPD_FINAL_ELIGIBILITY).toString();
			String sInternalRemarks = formObject.getValue(
					"INTRNL_BLCKLICT_CMNTS_CPD").toString();
			String sBadCheckRemarks = formObject.getValue(CPD_REMARKS)
					.toString();
			String sWorldCheckRemarks = formObject.getValue(
					CPD_WRLD_CHK_REMARKS).toString();
			String sSystemRemarks = formObject.getValue(CPD_RISK_ASSESS_MARKS)
					.toString();
			if (!sCustNo.equalsIgnoreCase("")) {
				logInfo("saveScreeningDataCPD", "sCustNo!!!!!" + sCustNo);
				String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,SYSTEM_DEC_CPD,BANK_DEC_CPD,BLACKLIST_DEC_CPD,"
						+ "WORLD_CHECK_DEC_CPD,BAD_CHECK_DEC_CPD, FINAL_ELIGIBILITY_CPD,BLACKLIST_REMARKS_CPD,"
						+ "BAD_CHECK_REMARKS_CPD,WORLD_CHECK_REMARKS_CPD,SYSTEM_REMARKS_CPD";
				String value1 = "'" + cust_id + "'" + (char) 25 + "'" + wms_id
						+ "'" + (char) 25 + "'" + sWorkitemId + "'" + (char) 25
						+ "'" + sCustNo + "'" + (char) 25 + "'" + sSystemDec
						+ "'" + (char) 25 + "'" + sBankDec + "'" + (char) 25
						+ "'" + sBlackListDec + "'" + (char) 25 + "'"
						+ sWorldCheckDec + "'" + (char) 25 + "'" + sBadCheckDec
						+ "'" + (char) 25 + "'" + sFinalEligibility + "'"
						+ (char) 25 + "'" + sInternalRemarks + "'" + (char) 25
						+ "'" + sBadCheckRemarks + "'" + (char) 25 + "'"
						+ sWorldCheckRemarks + "'" + (char) 25 + "'"
						+ sSystemRemarks + "'";
				insertIntoCustomerTXNTable(sCustNo, sWorkitemId, column1,
						value1);
				String sCustomerID = formObject.getValue(CPD_RISK_CID)
						.toString();
				String sCustomerName = formObject.getValue(CPD_RISK_NAME)
						.toString();
				String sCurrentRiskSystem = formObject.getValue(
						CPD__RISK_CURRENT_RSK_SYSTEM).toString();// ch_09052017
				String sCurrentRiskBank = formObject.getValue(
						CPD_RISK_CURRENT_RSK_BANK).toString();
				String sPreviousRisk = formObject.getValue(
						CPD_RISK_PREVIOUS_RSK).toString();
				String sFCRRisk = formObject.getValue(CPD_RISK_FCR_RSK)
						.toString();
				String sApprovalReq = formObject.getValue(
						CPD_RISK_COMPL_APP_REQ).toString();
				String srisk_classification = formObject.getValue(
						CPD_RISK_RSK_CLSF).toString();
				String sInitialAssessmentDateTime = formObject.getValue(
						CPD_RISK_INITIAL_ASSESS_DATE).toString();
				String sValues = "";
				String resAPInsert = "";
				String sWsName = formObject.getValue(CURR_WS_NAME).toString();
				String sriskColumn = "SNO,WI_NAME,WS_NAME,CUST_NAME,CUST_CUR_RISK,CUST_CUR_RISK_BANK,CUST_PREV_RISK,"
						+ "CUST_FCR_RISK,RISK_CLASSIFICATION,cust_assessment_date";
				String sriskValue = "'" + sCustNo + "','" + sWorkitemId + "','"
						+ sWsName + "','" + formObject.getValue("cust_name")
						+ "','" + sCurrentRiskSystem + "','" + sCurrentRiskBank
						+ "','" + sPreviousRisk + "','" + sFCRRisk + "','"
						+ srisk_classification + "',to_date('"
						+ sInitialAssessmentDateTime + "','dd/mm/yyyy')";
				logInfo("", "sriskColumn.." + sriskColumn);
				logInfo("", "sriskValue.." + sriskValue);
				insert_Into_Usr_0_Risk_Data(sriskColumn, sriskValue);
				String sTableName = "USR_0_RISK_ASSESSMENT_DATA_CPD";
				String sColumnName = "SNO,WI_NAME,CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM,CURRENT_RISK_BUSSINESS,"
						+ "PREVIOUS_RISK, FCR_RISK,APPROVAL_REQ,PREV_RISK_DATE,CPDRISK_CLASSIFICATION,"
						+ "cpdcust_assessment_date";
				String sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_RISK_ASSESSMENT_DATA_CPD "
						+ "WHERE WI_NAME='"
						+ sWorkitemId
						+ "' and SNO='"
						+ sCustNo + "'";
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				logInfo("saveScreeningDataCPD", "sOutput---" + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					int iCount = Integer.parseInt(sOutput.get(0).get(0));
					if (iCount > 0) {
						String tableName = "USR_0_RISK_ASSESSMENT_DATA_CPD";
						String where = "WI_NAME='" + sWorkitemId
								+ "' and SNO='" + sCustNo + "'";
						formObject.saveDataInDB("DELETE FROM " + tableName
								+ " WHERE " + where);
						logInfo("saveScreeningDataCPD", "sOutput Delete---"
								+ sOutput);
					}
				}
				String srisk_classificationcpd = formObject.getValue(
						CPD_RISK_RSK_CLSF).toString();
				sValues = "'" + sCustNo + "','" + sWorkitemId + "','"
						+ sCustomerID + "','" + sCustomerName + "','"
						+ sCurrentRiskSystem + "'," + "'" + sCurrentRiskBank
						+ "','" + sPreviousRisk + "','" + sFCRRisk + "','"
						+ sApprovalReq + "',sysdate," + "'"
						+ srisk_classificationcpd + "',to_date('"
						+ sInitialAssessmentDateTime + "','dd/mm/yyyy')";
				logInfo("saveScreeningDataCPD", "sValues---" + sValues);
				try {
					int sOut = insertDataIntoDB(sTableName, sColumnName,
							sValues);
					logInfo("saveScreeningDataCPD", "output---" + sOut);
					if (sOut < 1) {
						sendMessageValuesList("",
								"Error in Inserting Risk Data. Kindly reopen the workitem.");
						return;
					}
				} catch (Exception e) {
					logInfo("saveScreeningDataCPD", "error---" + e.getMessage());
				}
				sTableName = "USR_0_CENTRAL_BANK_DATA_CPD";
				sColumnName = "WI_NAME,CUST_SNO,CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT";
				String sWhere = "WI_NAME='" + sWorkitemId + "'";
				int sCount = getGridCount(CPD_CNTRL_BNK_BAD_LVW);
				int Output = formObject.saveDataInDB("DELETE FROM "
						+ sTableName + " WHERE " + sWhere);
				String sValue = "";
				for (int row = 0; row < sCount; row++) {
					sValue = "'"
							+ sWorkitemId
							+ "','"
							+ sCustNo
							+ "','"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 0)
							+ "',"
							+ "'"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 1)
							+ "',"
							+ "'"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 2)
							+ "',"
							+ "'"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 3)
							+ "',"
							+ "'"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 4)
							+ "',"
							+ "'"
							+ formObject.getTableCellValue(
									CPD_CNTRL_BNK_BAD_LVW, row, 5) + "'";
					logInfo("saveScreeningDataCPD", "sValue----" + sValue);
					int iOutput = insertDataIntoDB(sTableName, sColumnName,
							sValue);
					logInfo("saveScreeningDataCPD", "sOutput =" + iOutput);
				}
			}
		} catch (Exception e) {
			logError("Exception in saveScreeningDataCPD", e);
		}
	}

	public void lockOthersFields() {
		logInfo("lockOthersFields", "inside lockOthersFields");// BY KISHAN
		logInfo("value of profession", ""
				+ formObject.getValue("profession").toString());
		if (!formObject.getValue("profession").toString()
				.equalsIgnoreCase("Others")) {
			logInfo("Inside else condition of if", "profession");
			formObject.setStyle(ED_OTHER, DISABLE, "true");
			logInfo(ED_OTHER, "disabling");
		} else {
			formObject.setStyle(ED_OTHER, DISABLE, "false");
		}
		if (formObject.getValue(CUST_PREFIX).toString()
				.equalsIgnoreCase("Others")) {
			formObject.setStyle(PD_OTHERS, DISABLE, "true");
		} else {
			formObject.setStyle(PD_OTHERS, DISABLE, "false");
		}
		if (formObject.getValue(MARITAL_STATUS).toString()
				.equalsIgnoreCase("Others")) {
			formObject.setStyle(PD_MARITALSTATUSOTHER, DISABLE, "true");
		} else {
			formObject.setStyle(PD_MARITALSTATUSOTHER, DISABLE, "false");
		}
		if (formObject.getValue(CORR_STATE).toString()
				.equalsIgnoreCase("Others")) {
			formObject.setStyle(CP_OTHERS, DISABLE, "true");
		} else {
			formObject.setStyle(CP_OTHERS, DISABLE, "false");
		}
		if (formObject.getValue(RES_STATE).toString()
				.equalsIgnoreCase("Others")) {
			formObject.setStyle(PA_OTHERS, DISABLE, "true");
		} else {
			formObject.setStyle(PA_OTHERS, DISABLE, "false");
		}
		if (formObject.getValue(PERM_STATE).toString()
				.equalsIgnoreCase("Others")) {
			formObject.setStyle(RA_OTHERS, DISABLE, "true");
		} else {
			formObject.setStyle(RA_OTHERS, DISABLE, "false");
		}

		if (!formObject.getValue(MANUAL_DOB).toString().equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_DOB_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				logInfo("lockOthersFields", "In dob Manual");
				formObject.setValue(PD_DOB, formObject.getValue(MANUAL_DOB)
						.toString());
				logInfo("lockOthersFields", "In dob Manual Changed");
			}
		}
		if (!formObject.getValue(MANUAL_PASSPORTISSDATE).toString()
				.equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_PASS_ISS_DT_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				formObject.setValue(HD_PASS_ISS_DATE,
						formObject.getValue(MANUAL_PASSPORTISSDATE).toString());
			}
		}
		if (!formObject.getValue(MANUAL_PASSPORTEXPDATE).toString()
				.equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_PASS_EXP_DT_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				formObject.setValue(HD_PASS_EXP_DATE,
						formObject.getValue(MANUAL_PASSPORTEXPDATE).toString());
			}
		}
		if (!formObject.getValue(MANUAL_VISAISSDATE).toString()
				.equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_VISA_ISSUE_DATE_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				formObject.setValue(HD_VISA_ISSUE_DATE,
						formObject.getValue(MANUAL_VISAISSDATE).toString());
			}
		}
		if (!formObject.getValue(MANUAL_VISAEXPDATE).toString()
				.equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_VISA_EXPIRY_DATE_MANUAL)
					.toString().equalsIgnoreCase("True")) {
				formObject.setValue(HD_EXP_DATE,
						formObject.getValue(MANUAL_VISAEXPDATE).toString());
			}
		}
		if (!formObject.getValue(MANUAL_NATIONALITY).toString()
				.equalsIgnoreCase("")) {
			if (formObject.getValue(CHECKBOX_NATIONALITY_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				formObject.setValue(CUST_NATIONALITY,
						formObject.getValue(MANUAL_NATIONALITY).toString());
			}
		}
		if (!formObject.getValue(PD_CUSTSEGMENT).toString()
				.equalsIgnoreCase("Excellency")
				|| !formObject.getValue(PD_CUSTSEGMENT).toString()
						.equalsIgnoreCase("Emirati Excellency")) {
			formObject.setStyle(EXCELLENCY_CNTR, ENABLE, "false");
			formObject.setStyle(EXCELLENCY_CNTR, DISABLE, "false");
		}
	}

	public void LockChequebookField() {// LockChequebookField name to be changed
		int iRows = getGridCount(PRODUCT_QUEUE);
		String sProdCode = "";
		String sQuery = "";
		List<List<String>> sOutput = null;
		String visa = "";
		String getQuery = "SELECT visa_status FROM USR_0_CUST_TXN WHERE cust_sno = N'"
				+ getPrimaryCustomerSNO()
				+ "' "
				+ "AND WI_NAME = N'"
				+ WI_NAME
				+ "'";
		List<List<String>> getQueryOutput = formObject.getDataFromDB(getQuery);
		if (getQueryOutput != null && getQueryOutput.size() > 0) {
			visa = getQueryOutput.get(0).get(0);// VISA_STATUS);
		}
		for (int i = 1; i < iRows; i++) {
			sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE, i, 1);// "PRODUCT_QUEUE.PROD_CODE");
			sQuery = "SELECT CHEQUE_BOOK_FAC FROM USR_0_PRODUCT_MASTER WHERE PRODUCT_CODE = '"
					+ sProdCode + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			// yamini check in js
			/*
			 * if(sOutput.get(0).get(0).equalsIgnoreCase("N")) {
			 * objChkRepeater.setEnabled(i, "PRODUCT_QUEUE.CHEQUE_BOOK", false);
			 * objChkRepeater.setEditable(i, "PRODUCT_QUEUE.CHEQUE_BOOK",
			 * false); } else { objChkRepeater.setEnabled(i,
			 * "PRODUCT_QUEUE.CHEQUE_BOOK", true); objChkRepeater.setEditable(i,
			 * "PRODUCT_QUEUE.CHEQUE_BOOK", true); }
			 * 
			 * if(visa.equalsIgnoreCase("Under Processing")) {
			 * objChkRepeater.setValue(i,"PRODUCT_QUEUE.CHEQUE_BOOK","No");
			 * objChkRepeater.setEnabled(i, "PRODUCT_QUEUE.CHEQUE_BOOK", false);
			 * objChkRepeater.setEditable(i, "PRODUCT_QUEUE.CHEQUE_BOOK",
			 * false); }
			 */
		}
	}

	public void fieldValueBagSetCPDMaker() { // NEED TO CHECK AGAIN
		logInfo(" Inside fieldValueBagSetCPDMaker ", "  ");
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			gotFocusCustInfoDataCPDOnload();
			if (formObject.getValue(DATA_ENTRY_MODE).toString()
					.equalsIgnoreCase("Quick Data Entry")
					&& formObject.getValue(RA_BUILDINGNAME).toString()
							.equalsIgnoreCase("")
					&& sBankRelation.equalsIgnoreCase("Existing")) {
				populateQDEModeOtherData(formObject.getTableCellValue(
						ACC_RELATION, iSelectedRow, 2).toString());
			}
		} catch (Exception e) {
			logError("Exception in fieldValueBagSetCPDMaker ", e);
		} finally {
			logInfo("Outside fieldValueBagSetCPDMaker ", "  ");
		}
	}

	// Kishan Code Start Here
	public void setProd_Group() {
		try {
			String sQuery = "SELECT COUNT(1) AS COUNT FROM DEBIT_CARD_REP WHERE WI_NAME='"
					+ sWorkitemId + "'";
			logInfo("setProd_Group", "sQuery22 ::" + sQuery);
			// String sOutput22=formObject.getDataFromDB(sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("setProd_Group", "sOutput2 ::" + sOutput.get(0).toString());
			int sCount2 = Integer.parseInt(sOutput.get(0).get(0));
			logInfo("setProd_Group", "sCount2  ::" + sCount2);
			if (sCount2 == 0) {
				logInfo("setProd_Group", "INSIDE ::");
				String sQuery4 = "SELECT CHANNEL_TYPE FROM USR_0_SERVICE_CHANNEL WHERE SERVICE_CHANNEL='"
						+ formObject.getValue(SOURCING_CHANNEL).toString()
						+ "'";
				logInfo("setProd_Group", "sQuery4  ::" + sQuery4);
				List<List<String>> sOutput4 = formObject.getDataFromDB(sQuery4);
				formObject.setValue(CHANNEL_TYPE, sOutput4.get(0).get(0));
				if (formObject.getValue(CHANNEL_TYPE).toString()
						.equalsIgnoreCase("Alternate")
						&& (formObject.getValue(SOURCING_CHANNEL).toString()
								.equalsIgnoreCase("DFC") || formObject
								.getValue(SOURCING_CHANNEL).toString()
								.equalsIgnoreCase("Online Request"))) {
					logInfo("setProd_Group", "INSIDE IF CONDITION");
					String sLodgement_no = formObject.getValue(LODGEMENT_NO)
							.toString();
					logInfo("setProd_Group", "slodge :: " + sLodgement_no);
					if (!sLodgement_no.equalsIgnoreCase("")) {
						logInfo("setProd_Group", "inside setProd_Group");
						String sQueryS = "select prod_code from USR_0_AO_DebitCard where lodgement_ref_no"
								+ "='"
								+ formObject.getValue(LODGEMENT_NO).toString()
								+ "' order by prod_code";
						logInfo("setProd_Group", "sQuery for prod_code........"
								+ sQueryS);
						// String sOutputS=formObject.getDataFromDB(sQueryS);
						List<List<String>> sOutputS = formObject
								.getDataFromDB(sQueryS);

						// int
						// sCount1=Integer.parseInt(getTagValues(sOutput,"TotalRetrieved"));
						int sCount1 = sOutputS.get(0).size();
						// String []sProd_code = new String[sCount1];
						// sProd_code=getTagValues(sOutputS,"PROD_CODE").split(",");

						String[] sProductgrp = new String[sCount1];
						String sPrevCode = sOutputS.get(0).get(0);
						for (int i = 0; i < sCount1; i++) {
							int k = 1;
							String sQuery1 = "select PRODUCT_DESC from usr_0_product_master  where"
									+ " PRODUCT_CODE='"
									+ sOutputS.get(0).get(i) + "'";
							logInfo("setProd_Group", "sQuery for prod_code ::"
									+ sQuery1);
							// String
							// sOutput1=formObject.getDataFromDB(sQuery1);
							List<List<String>> sOutput1 = formObject
									.getDataFromDB(sQuery1);
							logInfo("setProd_Group", "sOutput1 ::" + sOutput1);

							String sProd_desc = sOutput1.get(0).get(0);// .split(",");
							logInfo("setProd_Group",
									"outside if sProd_code[i].equalsIgnoreCase(sPrevCode"
											+ sProd_desc);
							if (sOutputS.get(0).get(i)
									.equalsIgnoreCase(sPrevCode)) {
								logInfo("setProd_Group",
										"inside  if sProd_code[i].equalsIgnoreCase(sPrevCode");
								sProductgrp[i] = sProd_desc + "_"
										+ sOutputS.get(0).get(i) + "_" + k;
								String sQuery2 = "update USR_0_AO_DebitCard set productgrp='"
										+ sProductgrp[i]
										+ "'"
										+ " where lodgement_ref_no='"
										+ formObject.getValue(LODGEMENT_NO)
												.toString() + "'";
								formObject.saveDataInDB(sQuery2);
								logInfo("setProd_Group", "Update successful"
										+ sQuery2);
								logInfo("setProd_Group", "sProductgrp[i] ::"
										+ i + sProductgrp[i]);
							} else {
								sPrevCode = sOutputS.get(0).get(i);
								k = k + 1;
								sProductgrp[i] = sProd_desc + "_"
										+ sOutputS.get(0).get(i) + "_" + k;
								String sQuery2 = "update USR_0_AO_DebitCard set productgrp='"
										+ sProductgrp[i]
										+ "'"
										+ " where lodgement_ref_no='"
										+ formObject.getValue(LODGEMENT_NO)
												.toString() + "'";
								formObject.saveDataInDB(sQuery2);
								logInfo("setProd_Group", "Udate successful"
										+ sQuery2);
								logInfo("setProd_Group", "sProductgrp[i] ::"
										+ i + sProductgrp[i]);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logError("", e);
		}
	}

	public void gotFocusCustInfoDataCPDOnload() {
		logInfo("gotFocusCustInfoDataCPDOnload", "INSIDE");
		try {
			String sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					0, 7);
			String sAccRelation = formObject.getTableCellValue(ACC_RELATION, 0,
					9);
			String sName = formObject.getTableCellValue(ACC_RELATION, 0, 1);
			String sDOB = formObject.getTableCellValue(ACC_RELATION, 0, 5);
			String cust_id = formObject.getTableCellValue(ACC_RELATION, 0, 2);
			long start_Time1 = System.currentTimeMillis();
			setManualFieldsBlank();
			setManualChecksBlank();
			clearComparisonFields();
			clearPersonalData();
			clearKYCData();
			clearRiskData();
			populatePersonalDataCPD();
			populateRiskData();
			populateKYCData();
			populateKycMultiDrop();
			populatePreAssesmentDetails();  //shahbaz
			populateComparisonFields();
			setManualFieldsEnable();
			setDetailsinBelowfields();
			setCustomerRelation();
			loadDedupeSearchData(sWorkitemId);
			manageCustomerChangeCheckboxes(sBankRelation, sAccRelation);
			// PopulateCRSData();
			PopulatePrivateClientQuestions();
			clearUdfGrid();
			int custNo = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			String sQuery2 = "SELECT GRADUATION_DATE, SPECIAL_CUSTOMER_IDENTIFIER FROM USR_0_UDF_DETAILS"
					+ " WHERE ACC_RELATION_SERIALNO='"
					+ custNo
					+ "' AND WI_NAME='" + sWorkitemId + "'";
			logInfo("gotFocusCustInfoDataCPDOnload", "sQuery2: " + sQuery2);
			/*
			 * String listContent=ExecuteQuery_APSelectWithColumnNames(sQuery2);
			 * Doubt
			 * if(Integer.parseInt(getTagValues(listContent,"TotalRetrieved"
			 * ))>0) populateUDFGrid(listContent);
			 */
			populateUDFGrid(sQuery2);
			logInfo("gotFocusCustInfoDataCPDOnload", "disable makani 3 step:");
			String sFinalCountry = getFinalData(
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_FCR).toString(),
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_EIDA).toString(),
					formObject.getValue(CHECKBOX_CNTRY_OF_CORR_MANUAL)
							.toString(), formObject.getValue(FCR_CNTRY)
							.toString(), formObject.getValue(EIDA_CNTRY)
							.toString(), formObject.getValue(MANUAL_CNTRY)
							.toString());
			String sFinalResidentNew = getFinalData(
					formObject.getValue(CHECKBOX_COUNTRY_RES_FCR).toString(),
					formObject.getValue(CHECKBOX_COUNTRY_RES_EIDA).toString(),
					formObject.getValue(CHECKBOX_COUNTRY_RES_MANUAL).toString(),
					formObject.getValue(FCR_RESIDENT).toString(), formObject
							.getValue(EIDA_RESIDENT).toString(), formObject
							.getValue(MANUAL_RESIDENT).toString());
			String sFinalPermanentCountry = getFinalData(
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_FCR)
							.toString(),
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_EIDA)
							.toString(),
					formObject.getValue(CHECKBOX_COUNTRY_PER_RES_MANUAL)
							.toString(), formObject.getValue(FCR_PER_CNTRY)
							.toString(), formObject.getValue(EIDA_PER_CNTRY)
							.toString(), formObject.getValue(MANUAL_PER_CNTRY)
							.toString());
			if (!"UNITED ARAB EMIRATES".equalsIgnoreCase(sFinalCountry)) {
				formObject.setStyle(COR_MAKANI, DISABLE, "false");
			}
			if (!"UNITED ARAB EMIRATES".equalsIgnoreCase(sFinalResidentNew)) {
				formObject.setStyle(RES_MAKANI, DISABLE, "false");
			}
			if (!"UNITED ARAB EMIRATES"
					.equalsIgnoreCase(sFinalPermanentCountry)) {
				formObject
						.setStyle(CONTACT_DETAILS_MAKANI_NO, DISABLE, "false");
			}
			if (formObject.getValue(CHECKBOX_SELECTALL_MANUAL).toString()
					.equalsIgnoreCase("True")) {
				manageManualCheckBoxes();
			} else {
				setManualFieldsLock();
			}
			try {
				Calendar calendar = Calendar.getInstance();
				SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
				String scurrentDate = simpledateformat.format(calendar.getTime());
				if (formObject.getValue(GI_DATE_KYC_PREP).toString().equalsIgnoreCase("")) {
					formObject.setValue(GI_DATE_KYC_PREP, scurrentDate);
				}
			} catch (Exception e) {
				logError("Exception in gotFocusCustInfoDataCPDOnload ", e);
			}
			if (!formObject.getValue(SEARCH_PASS_NO).toString()
					.equalsIgnoreCase("")) {
				if (formObject.getValue(SEARCH_PASS_NO).toString()
						.equalsIgnoreCase("Aspire")) {
					formObject.setValue(IDS_PROF_CENTER_CODE, "104");
				} else if (formObject.getValue(SEARCH_PASS_NO).toString()
						.equalsIgnoreCase("Privilege")) {
					formObject.setValue(IDS_PROF_CENTER_CODE, "171");
				} else if (formObject.getValue("COMBO4").toString()
						.equalsIgnoreCase("Excellency")) {
					formObject.setValue(IDS_PROF_CENTER_CODE, "239");
				}
			}
			if (!formObject.getValue(SEARCH_PASS_NO).toString()
					.equalsIgnoreCase("")) {
				manageInternalSection();
			}
			try {
				loadCPDcustdata();
				populateScreeningDataCPD();
			} catch (Exception e) {
				logError("Exception in gotFocusCustInfoDataCPDOnload ", e);
			}
			try {
				formObject.setValue(TXT_CUSTOMERNAME, sName);
				formObject.setValue(TXT_DOB, sDOB);
				formObject.setValue(TXT_CUSTOMERID, cust_id);
			} catch (Exception e) {
				logError("Exception in gotFocusCustInfoDataCPDOnload", e);
			}
		} catch (Exception e) {
			logError("Exception in gotFocusCustInfoDataCPDOnload ", e);
		} finally {
			logInfo("Outside gotFocusCustInfoDataCPDOnload ", "  ");
		}
	}

	public void LoadInstantBranchValue() { // BY KISHAN
		String delivery_mode = formObject.getValue(DEL_DELIVERY_MODE)
				.toString();
		String sDeliveryBranch = formObject.getValue(BRNCH_OF_INSTANT_ISSUE)
				.toString();
		if (sDeliveryBranch == null) {
			sDeliveryBranch = "";
		}
		if (delivery_mode.equalsIgnoreCase("")) {
			formObject.clearCombo(BRNCH_OF_INSTANT_ISSUE);
			formObject.addItemInCombo(BRNCH_OF_INSTANT_ISSUE, "", "");
			// formObject.setNGListIndex(BRNCH_OF_INSTANT_ISSUE,0);
		} else {
			formObject.clearCombo(DI_CODE);
			addDataInComboFromQuery(
					"select code from usr_0_delivery_mode where delivery_mode"
							+ " ='" + delivery_mode + "'", DI_CODE);
			// fromObject.setValue();
			logInfo("LoadInstantBranchValue",
					"DI_CODE ::" + formObject.getValue(DI_CODE));
			if (formObject.getValue(DI_CODE).toString()
					.equalsIgnoreCase("COLC")) {
				addDataInComboFromQuery(
						"select to_char(branch_name) from USR_0_DELIVRY_BRANCH_MAPPING "
								+ "where delivery_mode='COLC'",
						BRNCH_OF_INSTANT_ISSUE);
				// addItemsDropDown(BRNCH_OF_INSTANT_ISSUE,BRNCH_OF_INSTANT_ISSUE);
			} else if (formObject.getValue(DI_CODE).toString()
					.equalsIgnoreCase("ARD")) {
				List<List<String>> sOutput = formObject
						.getDataFromDB("SELECT FINAL_STATE FROM USR_0_CUST_TXN"
								+ " WHERE WI_NAME ='" + sWorkitemId
								+ "' AND CUST_SNO ='1'");
				addDataInComboFromQuery(
						"select to_char(branch_name) from USR_0_DELIVRY_BRANCH_MAPPING "
								+ "where emirates_name ='"
								+ sOutput.get(0).get(0) + "' AND "
								+ "delivery_mode='ARD'", BRNCH_OF_INSTANT_ISSUE);
				/*
				 * formObject.getNGDataFromDataSource(
				 * "select to_char(branch_name) from USR_0_DELIVRY_BRANCH_MAPPING "
				 * +
				 * "where emirates_name ='"+getTagValues(sOutput,"FINAL_STATE")
				 * +"' AND " + "delivery_mode='ARD'",1,BRNCH_OF_INSTANT_ISSUE);
				 */
				// addItemsDropDown(BRNCH_OF_INSTANT_ISSUE,BRNCH_OF_INSTANT_ISSUE);
			}
			if (formObject.getValue(BRNCH_OF_INSTANT_ISSUE) == null) {
				formObject.setValue(BRNCH_OF_INSTANT_ISSUE, "");
			}
			if (!sDeliveryBranch.equalsIgnoreCase("")) {
				formObject.setValue(BRNCH_OF_INSTANT_ISSUE, sDeliveryBranch);
			}
		}
		logInfo("LoadInstantBranchValue", "END OF LoadInstantBranchValue");
	}

	public void loadCPDcustdata() { // LoadCPDcustdata()
		logInfo(" Inside LoadCPDcustdata kddd1 ", "  ");
		try {
			int iListViewRows = 0;
			List<List<String>> sOutput = null;
			iListViewRows = getGridCount(CPD_CHK_INT_BLK_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_CHK_MATCH_FOUND,
						"Verified False Positive");
			}
			iListViewRows = getGridCount(CPD_CNTRL_BNK_BAD_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_MATCH_FOUND, "Verified False Positive");
			}
			iListViewRows = getGridCount(CPD_HD2_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_MTCH_FOUND, "Verified False Positive");
			}
			int iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString()) + 1;
			logInfo("iSelectedRow--------", iSelectedRow + "");
	               // ISSUE RISK NOT POPULATE FOR CCO ON 3 STEP - ATP-306
			int iProcessedCustomer = Integer.parseInt((String) formObject.getValue(SELECTED_ROW_INDEX)) + 1;
			if(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") || formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")) {
				String sQuery = "SELECT CUST_CUR_RISK FROM USR_0_RISK_DATA "
						+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_CUR_RISK is not null and ROWNUM=1";
				logInfo("submitWorkitem","sUpdateDecision: "+sQuery);
				List<List<String>> custCurrent = formObject.getDataFromDB(sQuery);
				if(custCurrent != null && custCurrent.size() > 0) {
					String sUpdateDecision = "update USR_0_CUST_TXN set CPD_CUST_INDI_RISK='"+ custCurrent.get(0).get(0) +"' Where "
							+ "WI_NAME='"+ sWorkitemId +"' AND CUST_SNO ='"+iSelectedRow+"'";
					logInfo("submitWorkitem","sUpdateDecision: "+sUpdateDecision);
					formObject.saveDataInDB(sUpdateDecision);
				}
			}//END
			String sQuery = "SELECT CUST_ID,CPD_CUST_INDI_RISK,FCR_RISK,CUST_FULL_NAME FROM USR_0_CUST_TXN WHERE WI_NAME='"
					+ sWorkitemId
					+ "' "
					+ "AND CUST_SNO = '"
					+ iSelectedRow
					+ "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("sOutput--------", sOutput.toString() + " sQuery " + sQuery);
			String custIndiRisk = "";
			String sCustID = "";
			String sFCRRisk = "";
			String sCustName = "";
			String custIndiRiskBank = "";
			if (sOutput != null && sOutput.size() > 0) {
				custIndiRisk = sOutput.get(0).get(1);
				sCustID = sOutput.get(0).get(0);
				sFCRRisk = sOutput.get(0).get(2);
				sCustName = sOutput.get(0).get(3);
				custIndiRiskBank = custIndiRisk;
			}
			String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
			String sPrevRisk = "";
			String sPrevRiskDate = "";
			String sComplainceApproval = "";
			if (!sCustID.equalsIgnoreCase("")
					&& sAccRelation.equalsIgnoreCase("Existing")) {
				sOutput = formObject
						.getDataFromDB("SELECT TO_CHAR(COMP_APPROVAL_DT,'dd/MM/yyyy') COMP_APPROVAL_DT,"
								+ "CUSTOMER_RISK FROM USR_0_CUST_WMS WHERE CUST_ID='"
								+ sCustID + "'");
				if (sOutput != null && sOutput.size() > 0) {
					sPrevRisk = sOutput.get(0).get(1);
					sPrevRiskDate = sOutput.get(0).get(0);
				}
			}
			int iMonthDiff = 10;
			if (!sPrevRiskDate.equalsIgnoreCase("")) {
				iMonthDiff = getDateDiffInMonth(sPrevRiskDate); // doubt
			}
			if (custIndiRisk.equalsIgnoreCase("Neutral Risk")) {
				int custSno = Integer.parseInt(formObject.getTableCellValue(
						ACC_RELATION, Integer.parseInt(formObject.getValue(
								SELECTED_ROW_INDEX).toString()), 0));
				/*
				 * String query =
				 * "select CURRENT_RISK_BUSSINESS from USR_0_RISK_ASSESSMENT_DATA_CPD where "
				 * + "wi_name='"+sWorkitemId+"' and SNO='"+custSno+"'";
				 * List<List<String>> output = formObject.getDataFromDB(query);
				 * if(output.size()>0 && !output.get(0).get(0).isEmpty() &&
				 * !output.get(0).get(0).contains("Neutral")) {
				 * sComplainceApproval = "Yes"; custIndiRiskBank =
				 * output.get(0).get(0); } else { sComplainceApproval = "No";
				 * custIndiRiskBank = "Neutral"; }
				 */
				sComplainceApproval = "No";
				custIndiRiskBank = "Neutral";
			} else if (custIndiRisk.equalsIgnoreCase("Medium Risk")) { // changed
																		// 27022023

				sComplainceApproval = "No";
			} else if (custIndiRisk.equalsIgnoreCase(sPrevRisk)
					&& iMonthDiff < 6) {
				sComplainceApproval = "No";
			} else {
				sComplainceApproval = "Yes";
			}
			formObject.setValue(CPD_RISK_CID, sCustID);
			formObject.setValue(CPD_RISK_NAME, sCustName);
			formObject.setValue(CPD__RISK_CURRENT_RSK_SYSTEM, custIndiRisk);
			formObject.setValue(CPD_RISK_CURRENT_RSK_BANK, custIndiRiskBank);
			formObject.setValue(CPD_RISK_PREVIOUS_RSK, sPrevRisk);
			formObject.setValue(CPD_RISK_FCR_RSK, sFCRRisk);
			formObject.setValue(CPD_RISK_COMPL_APP_REQ, sComplainceApproval);
			formObject.setStyle(CPD_RISK_CID, DISABLE, TRUE);
			formObject.setStyle(CPD_RISK_NAME, DISABLE, TRUE);
			formObject.setStyle(CPD__RISK_CURRENT_RSK_SYSTEM, DISABLE, TRUE);
			formObject.setStyle(CPD_RISK_PREVIOUS_RSK, DISABLE, TRUE);
			formObject.setStyle(CPD_RISK_FCR_RSK, DISABLE, TRUE);
			formObject.setStyle(CPD_RISK_COMPL_APP_REQ, DISABLE, TRUE);
			set_Values_From_Usr_0_Risk_Data();
		} catch (Exception e) {
			logError("Exception in LoadCPDcustdata ", e);
		}
	}

	public void setDetailsinBelowfields() {
		logInfo("Inside setDetailsinBelowfields ", "  ");
		try {
			String sFinalDOB = getFinalDataComparison(CHECKBOX_DOB_FCR,
					CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB,
					MANUAL_DOB);
			String sFinalPassportIssueDate = getFinalData(
					CHECKBOX_PASS_ISS_DT_FCR, CHECKBOX_PASS_ISS_DT_EIDA,
					CHECKBOX_PASS_ISS_DT_MANUAL, FCR_PASSPORTISSDATE,
					EIDA_PASSPORTISSDATE, MANUAL_PASSPORTISSDATE);
			String sFinalPassportExpDate = getFinalData(
					CHECKBOX_PASS_EXP_DT_FCR, CHECKBOX_PASS_EXP_DT_EIDA,
					CHECKBOX_PASS_EXP_DT_MANUAL, FCR_PASSPORTEXPDATE,
					EIDA_PASSPORTEXPDATE, MANUAL_PASSPORTEXPDATE);
			String sFinalVisaIssueDate = getFinalData(
					CHECKBOX_VISA_ISSUE_DATE_FCR,
					CHECKBOX_VISA_EXPIRY_DATE_EIDA,
					CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAISSDATE,
					EIDA_VISAISSDATE, MANUAL_VISAISSDATE);
			String sFinalVisaExpDate = getFinalData(
					CHECKBOX_VISA_EXPIRY_DATE_FCR,
					CHECKBOX_VISA_ISSUE_DATE_EIDA,
					CHECKBOX_VISA_ISSUE_DATE_MANUAL, FCR_VISAEXPDATE,
					EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE);
			if (!sFinalDOB.equalsIgnoreCase("")) {
				logInfo("",
						"In dob Manual----"
								+ formObject.getValue(CHECKBOX_DOB_MANUAL)
										.toString());
				formObject.setValue(PD_DOB, sFinalDOB);
			}
			if (!sFinalPassportIssueDate.equalsIgnoreCase("")) {
				formObject.setValue(HD_PASS_ISS_DATE, sFinalPassportIssueDate);
			}
			if (!sFinalPassportExpDate.equalsIgnoreCase("")) {
				formObject.setValue(HD_PASS_EXP_DATE, sFinalPassportExpDate);
			}
			if (!sFinalVisaIssueDate.equalsIgnoreCase("")) {
				formObject.setValue(HD_VISA_ISSUE_DATE, sFinalVisaIssueDate);
			}
			if (!sFinalVisaExpDate.equalsIgnoreCase("")) {
				formObject.setValue(HD_EXP_DATE, sFinalVisaExpDate);
			}
		} catch (Exception e) {
			logError("Exception in setDetailsinBelowfields ", e);
		} finally {
			logInfo("Outside setDetailsinBelowfields ", "  ");
		}
	}

	public void populateQDEModeOtherData(String sCID) {
		logInfo("populateQDEModeOtherData", "INSIDE");
		try {
			String sQuery = "SELECT IS_SALARY_TRANSFER, IS_MORTAGAGE,IS_INSURANCE, IS_TRB,IS_OTHERS, "
					+ "IS_PREVILEGE_TP, IS_TRAVEL, IS_SPORT,IS_SHOPPING,IS_ENTERTAINMENT,IS_EXCELLENCY_TP,PER_BUILDING, "
					+ "PER_VILLA,PER_LANDMARK, PER_CITY,PER_STATE,PER_OTHER,PER_COUNTRY,EXELLENCY_CENTER,PROMO_CODE,EMP_NO_YRS_BIZ,"
					+ "EMP_NATURE_OF_BUSINESS,INVEST_RETURN_AED,INHERITENCE_AED,REAL_INCOME,ASSET_SALE,OTHER_INCOME,IS_INVEST_AED,"
					+ "IS_INHERITENCE_AED,IS_REAL_INCOME,IS_ASSET_SALE, IS_OTHERS_INCOME,ACC_RELATIONSHIP_PURPOSE, DETAILS_REAL_ESTATE,"
					+ " DETAILS_INVESTMENT,DETAILS_CASH_EQUIVALENT,DETAILS_ESTIMETED_NETWORTH, MARKET_VALUE_ESTATE, "
					+ "MARKET_VALUE_INVESTMENT,MARKET_VALUE_CASH,MONTHLY_INC_ESTATE,MONTHLY_INC_INVESTMENT, MONTHLY_INC_CASH,"
					+ "BANK_NAME_1,BANK_NAME_2,BANK_NAME_3,BANK_COUNTRY_1,BANK_COUNTRY_2,BANK_COUNTRY_3,MONTHLY_DEPOSIT_CASH,"
					+ "MONTHLY_DEPOSIT_CHEQUE,MONTHLY_DEPOSIT_TRANSFER,MONTHLY_WITHDRAWL_CASH,MONTHLY_WITHDRAWL_CHEQUE,"
					+ "MONTHLY_WITHDRAWL_TRANSFER,FINANCIAL_ACT_COUNTRIES,INTERNATIONAL_ACT_NATURE,EMP_POSITION,PASS_TYPE,"
					+ "VISA_STATUS,EMPLOYEE_TYPE,BIRTH_COUNTRY,ACC_COVERED_IN_FORM FROM USR_0_CUST_WMS WHERE CUST_ID= '"
					+ sCID + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("populateQDEModeOtherData", "sQuery: " + sQuery);
			logInfo("populateQDEModeOtherData",
					"sOutput: " + sOutput.toString());
			logInfo("populateQDEModeOtherData",
					"sOutput size: " + String.valueOf(sOutput.size()));
			if (sOutput != null && sOutput.size() > 0) {
				String[] fields = { IDS_CB_SAL_TRANSFER, IDS_CB_MORTGAGES,
						IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS,
						IDS_PC_CB_TP, IDS_PC_CB_TRAVEL, IDS_PC_CB_SPORT,
						IDS_PC_CB_SHOPPING, IDS_PC_CB_ENTERTAINMENT,
						IDS_BNFT_CB_TP, PERM_CNTRY, RA_BUILDINGNAME,
						RA_VILLAFLATNO, RA_STREET, RA_CITY, PERM_STATE,
						RA_OTHERS, EXCELLENCY_CNTR, PRO_CODE, ED_LEN_OF_SERVCE,
						ED_NATURE_OF_BUSNS, ED_INVSTMNT_RETN_AED, ED_INHT_AED,
						ED_REAL_INC_AED, ED_SALE_OF_ASST, ED_OTHERS,
						ED_CB_INVSTMNT_RETN_AED, ED_CB_INHT_AED,
						ED_CB_REAL_INC_AED, ED_CB_SALE_OF_ASST, ED_CB_OTHERS,
						GI_PURPOSE_ACC_REL, "TEXT113", "TEXT106", "TEXT101",
						"TEXT96", "TEXT112", "TEXT107", "TEXT102", "TEXT111",
						"TEXT108", "TEXT103", BR_BANK_NAME_1, BR_BANK_NAME_2,
						BR_BANK_NAME_3, BR_CITY_CNTRY_1, BR_CITY_CNTRY_2,
						BR_CITY_CNTRY_3, FERS_EMD_CASH_ATM, FERS_EMD_CHQ_DRFT,
						FERS_EMD_TRNSFR_ONLN, FERS_EMW_CASH_ATM,
						FERS_EMW_CHQ_DRFT, FERS_EMW_TRNSFR_ONLN,
						FERS_GEO_CNTRY_FINANCL, FERS_NATRE_ACTVTY_FT,
						ED_POSITN_DESGNT, GI_ACC_NO_COVERED };//
				/*
				 * formObject.setValue(IDS_CB_SAL_TRANSFER,sOutput.get(0).get(0))
				 * ;
				 * formObject.setValue(IDS_CB_MORTGAGES,sOutput.get(0).get(1));
				 * formObject.setValue(IDS_CB_INSURANCE,sOutput.get(0).get(2));
				 * formObject.setValue(IDS_CB_TRB,sOutput.get(0).get(3));
				 * formObject.setValue(IDS_CB_OTHERS,sOutput.get(0).get(4));
				 * formObject.setValue(IDS_PC_CB_TP,sOutput.get(0).get(5));
				 * formObject.setValue(IDS_PC_CB_TRAVEL,sOutput.get(0).get(6));
				 * formObject.setValue(IDS_PC_CB_SPORT,sOutput.get(0).get(7));
				 * formObject
				 * .setValue(IDS_PC_CB_SHOPPING,sOutput.get(0).get(8));
				 * formObject
				 * .setValue(IDS_PC_CB_ENTERTAINMENT,sOutput.get(0).get(9));
				 * formObject.setValue(IDS_BNFT_CB_TP,sOutput.get(0).get(10));
				 * formObject.setValue(PERM_CNTRY,sOutput.get(0).get(16));
				 * formObject.setValue(PERM_STATE,sOutput.get(0).get(15));
				 * formObject.setValue(RA_BUILDINGNAME,sOutput.get(0).get(11));
				 * formObject.setValue(RA_VILLAFLATNO,sOutput.get(0).get(12));
				 * formObject.setValue(RA_STREET,sOutput.get(0).get(13));
				 * formObject.setValue(RA_CITY,sOutput.get(0).get(14));
				 * formObject.setValue(RA_OTHERS,sOutput.get(0).get(0));
				 * formObject.setValue(EXCELLENCY_CNTR,sOutput.get(0).get(17));
				 * formObject.setValue(PRO_CODE,sOutput.get(0).get(18));
				 * formObject
				 * .setValue(ED_NATURE_OF_BUSNS,sOutput.get(0).get(20));
				 * formObject.setValue(ED_LEN_OF_SERVCE,sOutput.get(0).get(19));
				 * formObject.setValue(ED_POSITN_DESGNT,sOutput.get(0).get(55));
				 * formObject
				 * .setValue(ED_INVSTMNT_RETN_AED,sOutput.get(0).get(21));
				 * formObject.setValue(ED_INHT_AED,sOutput.get(0).get(22));
				 * formObject.setValue(ED_REAL_INC_AED,sOutput.get(0).get(23));
				 * formObject.setValue(ED_SALE_OF_ASST,sOutput.get(0).get(24));
				 * formObject.setValue(ED_OTHERS,sOutput.get(0).get(25));
				 * formObject
				 * .setValue(ED_CB_INVSTMNT_RETN_AED,sOutput.get(0).get(26));
				 * formObject.setValue(ED_CB_INHT_AED,sOutput.get(0).get(27));
				 * formObject
				 * .setValue(ED_CB_REAL_INC_AED,sOutput.get(0).get(28));
				 * formObject
				 * .setValue(ED_CB_SALE_OF_ASST,sOutput.get(0).get(29));
				 * formObject.setValue(ED_CB_OTHERS,sOutput.get(0).get(30));
				 * formObject.setValue("TEXT113",sOutput.get(0).get(32));
				 * formObject.setValue("TEXT106",sOutput.get(0).get(33));
				 * formObject.setValue("TEXT101",sOutput.get(0).get(34));
				 * formObject.setValue("TEXT96",sOutput.get(0).get(35));
				 * formObject.setValue("TEXT112",sOutput.get(0).get(36));
				 * formObject.setValue("TEXT107",sOutput.get(0).get(37));
				 * formObject.setValue("TEXT102",sOutput.get(0).get(38));
				 * formObject.setValue("TEXT111",sOutput.get(0).get(39));
				 * formObject.setValue("TEXT108",sOutput.get(0).get(40));
				 * formObject.setValue("TEXT103",sOutput.get(0).get(41));
				 * formObject.setValue(BR_BANK_NAME_1,sOutput.get(0).get(42));
				 * formObject.setValue(BR_BANK_NAME_2,sOutput.get(0).get(42));
				 * formObject.setValue(BR_BANK_NAME_3,sOutput.get(0).get(43));
				 * formObject.setValue(BR_CITY_CNTRY_1,sOutput.get(0).get(44));
				 * formObject.setValue(BR_CITY_CNTRY_2,sOutput.get(0).get(45));
				 * formObject.setValue(BR_CITY_CNTRY_3,sOutput.get(0).get(46));
				 * formObject
				 * .setValue(FERS_EMD_CASH_ATM,sOutput.get(0).get(47));
				 * formObject
				 * .setValue(FERS_EMD_CHQ_DRFT,sOutput.get(0).get(48));
				 * formObject
				 * .setValue(FERS_EMD_TRNSFR_ONLN,sOutput.get(0).get(49));
				 * formObject
				 * .setValue(FERS_EMW_CASH_ATM,sOutput.get(0).get(50));
				 * formObject
				 * .setValue(FERS_EMW_CHQ_DRFT,sOutput.get(0).get(51));
				 * formObject
				 * .setValue(FERS_EMW_TRNSFR_ONLN,sOutput.get(0).get(52));
				 * formObject
				 * .setValue(FERS_GEO_CNTRY_FINANCL,sOutput.get(0).get(53));
				 * formObject
				 * .setValue(FERS_NATRE_ACTVTY_FT,sOutput.get(0).get(54));
				 * formObject
				 * .setValue(GI_PURPOSE_ACC_REL,sOutput.get(0).get(31));
				 * formObject
				 * .setValue(GI_ACC_NO_COVERED,sOutput.get(0).get(60));
				 */
				setValuesFromDB(sOutput, fields);
			}
		} catch (Exception e) {
			logError("Exception in populateQDEModeOtherData ", e);
		} finally {
			logInfo("Outside populateQDEModeOtherData ", "  ");
		}
	}

	public boolean validateCustomerName() {
		logInfo("Inside validateCustomerName ", "  ");
		try {
			String sQuery = "SELECT FINAL_FULL_NAME FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' ORDER BY CUST_SNO";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					if (sOutput.get(i).get(0).equalsIgnoreCase("")) {
						sendMessageValuesList("",
								"Please fill Customer full Name for customer number "
										+ (i + 1));
						return false;
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in  validateCustomerName ", e);
		} finally {
			logInfo("Outside validateCustomerName ", "  ");
		}
		return true;
	}

	public boolean validateDebitDetails() {
		logInfo("Inside validateDebitDetails ", "  ");
		try {
			int iRows = getGridCount(PRODUCT_QUEUE);
			double sTransferAmt = 0.0;
			double sAmount = 0.0;
			String sTransAmt = "";
			String sAmt = "";
			String sMode = "";
			String sDebitAccNo = "";
			for (int i = 0; i < iRows; i++) {
				sMode = formObject.getTableCellValue(PRODUCT_QUEUE, i, 8);
				if (sMode.equalsIgnoreCase("Transfer - Internal")) {
					sTransAmt = formObject.getTableCellValue(PRODUCT_QUEUE, i,
							10);
					sAmt = formObject.getTableCellValue(PRODUCT_QUEUE, i, 12);
					sDebitAccNo = formObject.getTableCellValue(PRODUCT_QUEUE,
							i, 9);
					if (sDebitAccNo == null
							|| sDebitAccNo.equalsIgnoreCase(null)
							|| sDebitAccNo.equalsIgnoreCase("")) {
						sendMessageValuesList("",
								"Please Select Debit Account Number");
						return false;
					} else {
						if (sTransAmt.equalsIgnoreCase("")) {
							logInfo("validateDebitDetails", "Transfer AMount 0");
							sendMessageValuesList("",
									"Please fill Transfer Amount");
							return false;
						}
						if (!sTransAmt.equalsIgnoreCase("")) {
							sTransferAmt = Double.parseDouble(sTransAmt);
						}
						if (!sAmt.equalsIgnoreCase("")) {
							sAmount = Double.parseDouble(sAmt);
						}
						if (sAmount == 0.0) {
							sendMessageValuesList("",
									"You can not transfer fund from this account as balance is 0");
							return false;
						}
						if (sTransferAmt <= 0) {
							sendMessageValuesList("",
									"Transfer Amount can not be less than or equal to 0");
							return false;
						}
						if (sTransferAmt != 0.0 && sAmount != 0.0) {
							if (sTransferAmt > sAmount) {
								sendMessageValuesList("",
										"Transfer Amount can not be greater than Amount available");
								return false;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logError("validateDebitDetails", e);
		} finally {
			logInfo("validateDebitDetails ", "Outside");
		}
		return true;
	}

	public void tempUsrZeroProductSelected() { // Temp_usr_0_product_selected
		logInfo("Inside tempUsrZeroProductSelected ", "  ");
		try {
			String sWsName = formObject.getValue(CURR_WS_NAME).toString();
			String sRiskTable = "USR_0_PROD_SEL_TEMP";
			String sRiskColumn = "SNO,PROD_CODE,WI_NAME,WS_NAME";
			String sRiskValue = "";
			int jjj = 9;
			String sQuery = "select PROD_CODE,CURRENCY,CID from usr_0_product_selected where wi_name='"
					+ sWorkitemId + "' " + "order by insertionorderid";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo(" sQuery ", sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", String.valueOf(sOutput.size()));
			String sCurrDB = "";
			String sCID = "";
			int iNoOfProd = 0;
			if (sOutput != null && sOutput.size() > 0) {
				iNoOfProd = sOutput.size();
			}
			if (iNoOfProd > 0) {
				String sQuery1 = "delete from USR_0_PROD_SEL_TEMP where WI_NAME='"
						+ sWorkitemId + "'";
				formObject.saveDataInDB(sQuery1);
				for (int i = 0; i < iNoOfProd; i++) {
					sCurrDB = sOutput.get(i).get(1);
					sCID = sOutput.get(i).get(2);
					sRiskValue = "";
					jjj = i + 1;
					sRiskValue = "'" + sCID + "','" + sCurrDB + "','"
							+ sWorkitemId + "','" + sWsName + "'";
					int sout = insertDataIntoDB(sRiskTable, sRiskColumn,
							sRiskValue);
					// String insertQuery =
					// "insert into '"+sRiskTable+"'"+" ("+"'"+sRiskColumn+"'"+") "+"' VALUES ('"+sRiskValue+"')";
					// int sout = formObject.saveDataInDB(insertQuery);
					logInfo("insertQuery ", " sout " + sout + "");
				}
			}
		} catch (Exception e) {
			logError("Exception in tempUsrZeroProductSelected ", e);
		} finally {
			logInfo("Outside tempUsrZeroProductSelected ", "  ");
		}
	}

	public void Delivery_Preferences_Tab() {
		logInfo("",
				"Entered Delivery_Preferences_Tab "
						+ formObject.getValue(INSTANT_DEL_YES).toString());
		if (formObject.getValue(INSTANT_DEL_YES).toString()
				.equalsIgnoreCase("True")) {
			enableControls(new String[] { NOM_REQ, BRNCH_OF_INSTANT_ISSUE,
					DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK, DEL_CITY,
					DEL_STATE, DEL_STATE_OTHER, DEL_CNTRY, DEL_FAX,
					DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG, DEL_PH, DEL_MOBILE });
			formObject.setStyle(FINAL_ELIGIBILITY, DISABLE, TRUE);
			if (formObject.getValue(DEL_STATE).toString()
					.equalsIgnoreCase("Others")) {
				formObject.setStyle(DEL_STATE_OTHER, DISABLE, FALSE);
			}
		} else {
			disableControls(new String[] { NOM_REQ, EXISTING_NOM_PRSN,
					DEL_NAME, DEL_PO_BOX, DEL_ADDRESS, DEL_LANDMARK, DEL_CITY,
					DEL_STATE, DEL_STATE_OTHER, DEL_CNTRY, DEL_FAX,
					DEL_ZIP_CODE, DEL_EMAIL, DEL_PREF_LANG, DEL_PH, DEL_MOBILE });
			formObject.setStyle(BRNCH_OF_INSTANT_ISSUE, DISABLE, FALSE);
		}
		if (!(formObject.getValue(DATA_ENTRY_MODE).toString()
				.equalsIgnoreCase("Quick Data Entry"))
				|| !(formObject.getValue(DATA_ENTRY_MODE).toString()
						.equalsIgnoreCase("Detail Data Entry"))) {
			formObject.setValue(DFC_STATIONERY_AVAIL, "");
			formObject.addItemInCombo(DFC_STATIONERY_AVAIL, "", "");
			formObject.setStyle(DFC_STATIONERY_AVAIL, DISABLE, TRUE);
			formObject.setStyle(FETCH_INFO, DISABLE, TRUE);
		}
	}

	public Boolean MandatoryiKYC_CPD() {
		logInfo("MandatoryiKYC_CPD", "INSIDE");
		if (formObject.getValue(PD_CUSTSEGMENT).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(PD_CUSTSEGMENT, CA016);
			return false;
		}
		if (formObject.getValue(ED_CUST_CRS_BRDR_PAYMENT).toString()
				.equalsIgnoreCase("Yes")) {
			if (formObject.getValue(ED_PURPSE_CRS_BRDR_PAYMENT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_PURPSE_CRS_BRDR_PAYMENT, CA0151);
				return false;
			}
			if (formObject.getValue(ED_ANTCPATD_CRS_BRDER_PYMT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_ANTCPATD_CRS_BRDER_PYMT, CA0152);
				return false;
			}
			if (formObject.getValue(ED_ANTCPATD_MNTHVAL_BRDER_PYMT).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_ANTCPATD_MNTHVAL_BRDER_PYMT, CA0153);
				return false;
			}
			if (formObject.getValue(ED_CNTRY_PYMT_RECV).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_CNTRY_PYMT_RECV, CA0154);
				return false;
			}
		}
		if (formObject.getValue(GI_IS_CUST_VIP).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(GI_IS_CUST_VIP, CA036);
			return false;
		}
		if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_UAE_RESIDENT, CA086);
			return false;
		} else if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
				.equalsIgnoreCase("No")) {
			if (formObject.getValue(RA_RSN_BNKNG_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_RSN_BNKNG_UAE, CA0149);
				return false;
			}
		}
		logInfo("MandatiryIKYC_CPD",
				"SignStyle::" + formObject.getValue(SIGN_STYLE1));
		if (formObject.getValue(SIGN_STYLE1).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(SIGN_STYLE1, CA021);
			return false;
		}
		if (formObject.getValue(RA_PRPSE_TAX_EVSN).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_PRPSE_TAX_EVSN, CA029);
			return false;
		}
		if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_PEP, CA027);
			return false;
		}/* else if (formObject.getValue(RA_IS_CUST_PEP).toString()
				.equalsIgnoreCase("Yes")) {
			if (formObject.getValue(RA_LIST_OF_CUST_PEP).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_LIST_OF_CUST_PEP, CA0148);
				return false;
			}
		}*/
		if (formObject.getValue(RA_IS_CUST_DEALNG_ARMAMNT).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_DEALNG_ARMAMNT, CA026);
			return false;
		}
		if (formObject.getValue(RA_IS_CUST_DEALNG_HAWALA).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(RA_IS_CUST_DEALNG_HAWALA, CA028);
			return false;
		}
		if (formObject.getValue(EMP_STATUS).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_STATUS, "Please select employment status");
			return false;
		}
		//Added by Shivanshu ATP-472
		if (formObject.getValue(ED_SAL_AED).toString().equalsIgnoreCase("0")) {
			sendMessageValuesList(ED_SAL_AED, "Salary AED "+CA0207);
			return false;
		}
		/*if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			if (formObject.getValue(RA_CB_GEN_TRDNG_CMPNY).toString()
					.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_PRECIOUS_STONE_DEALER)
							.toString().equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_BULLN_COMMDTY_BROKR)
							.toString().equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_REAL_STATE_BROKR).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_OTHERS).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(FINANCIAL_BROKERS).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(NOTARY_PUBLIC).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(SOCIAL_MEDIA_INFLUNCER).toString()
							.equalsIgnoreCase("false")
					&& formObject.getValue(RA_CB_USD_AUTO_DEALER).toString()
							.equalsIgnoreCase("false")) {
				sendMessageValuesList(RA_CB_GEN_TRDNG_CMPNY, CA0150);// business
																		// nature
																		// section
				return false;
			}
		}*/
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			if (formObject.getValue(ED_EMP_TYPE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_EMP_TYPE, CA024);
				return false;
			}
		}
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Self Employed")) {
			if (formObject.getValue(EMPNAME).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(EMPNAME, CA0162);
				return false;
			}
			if (formObject.getValue(ED_NATURE_OF_BUSNS).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_NATURE_OF_BUSNS, CA0163);
				return false;
			}
			if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade"))) {
			if (formObject.getValue(ED_PERC_OF_OWNRSHP).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_PERC_OF_OWNRSHP, CA0164);
				return false;
			}
			if (formObject.getValue(ED_NO_UAE_OVRS_BRNCH).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(ED_NO_UAE_OVRS_BRNCH, CA0165);
				return false;
			}
		   }
			//return true; Commented by Shivanshu for ATP-455
		}
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")
				|| formObject.getValue(EMP_STATUS).toString()
						.equalsIgnoreCase("Salaried")) {
			if (formObject.getValue(RA_IS_CUST_WRKNG_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_CUST_WRKNG_UAE, CA0146);
				return false;
			}
			if (formObject.getValue(RA_IS_CUST_WRKNG_NON_UAE).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(RA_IS_CUST_WRKNG_NON_UAE, CA0147);
				return false;
			}
			if (formObject.getValue(DEALS_IN_WMD).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(
						DEALS_IN_WMD,
						"Please select Is the customer owner/parties of entities involved in manufacturing or trading or dealing in Weapons of Mass Destruction (WMD) and Proliferation of goods and services used in manufacturing of WMD's?");
				return false;
			}
		    }if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade") || 
				  formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")||
				  formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Downgrade"))){
		   if (formObject.getValue(AO_INCOME_SRC).toString().equalsIgnoreCase("") || formObject.getValue(AO_INCOME_SRC).toString() == null) {
			sendMessageValuesList(AO_INCOME_SRC, CA0189);
			return false;
		    }
		    if (formObject.getValue(RA_CUST_SRC_WEALTH).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_CUST_SRC_WEALTH, CA0193);
					return false;
				}
			if (formObject.getValue(ACC_IN_ANTHR_BNK_UAE).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(ACC_IN_ANTHR_BNK_UAE, CA0194);
					return false;
			    }
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_CUST_PEP, CA0195);
					return false;
				}
		    if (formObject.getValue(RA_IS_UAE_RESIDENT).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(RA_IS_UAE_RESIDENT, CA0196);
					return false;
				}
			if (formObject.getValue(CHANNEL_RISK_AO).toString().equalsIgnoreCase("")) {
					sendMessageValuesList(CHANNEL_RISK_AO, CA0197);
					return false;
			   }
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
					&&(formObject.getValue(POA_NATIONALITY).toString().equalsIgnoreCase("")
								|| formObject.getValue(POA_NATIONALITY).toString() == null)) { //MOdify by Shivanshu ATP-455
					sendMessageValuesList(POA_NATIONALITY,CA0204);
				return false;
			}
			if (formObject.getValue(PRIMARY_SRC_CNTRY).toString().equalsIgnoreCase("") || formObject.getValue(PRIMARY_SRC_CNTRY).toString() == null) { //Jamshed
				sendMessageValuesList(PRIMARY_SRC_CNTRY,CA0201);
				return false;
		}
			//Shivanshu ATP-455
			if (formObject.getValue(RA_IS_CUST_PEP).toString().equalsIgnoreCase("Yes")
					&& (formObject.getValue(POA_RESIDENCY).toString().equalsIgnoreCase("")
							|| formObject.getValue(POA_RESIDENCY).toString() == null)) {
				sendMessageValuesList(POA_RESIDENCY,CA0203);
				return false;
		   }
		   }
		logInfo("MandatoryiKYC_CPD", "END");
		return true;
	}

	public boolean mandatoryDeliveryMode_InstantIssue_OnNext() {
		logInfo("mandatoryDeliveryMode_InstantIssue_OnNext", "INSIDE");
		if (getGridCount(DEL_DELIVERY_MODE) == 0) {
			JOptionPane.showMessageDialog(null,
					"Please Click on Delivery Preference tab.");
			return false;
		} else {
			if (formObject.getValue(DEL_DELIVERY_MODE).toString()
					.equalsIgnoreCase("")
					|| formObject.getValue(DEL_DELIVERY_MODE).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(DEL_DELIVERY_MODE,
						"Please Select Delivery Mode.");
				return false;
			}
			if (formObject.getValue(BRNCH_OF_INSTANT_ISSUE).toString()
					.equalsIgnoreCase("")
					|| formObject.getValue(BRNCH_OF_INSTANT_ISSUE).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(BRNCH_OF_INSTANT_ISSUE,
						"Please Select Branch of instant issue.");
				return false;
			}
		}
		return true;
	}

	public boolean isControlVisible(String controlName) {
		logInfo("isControlVisible", "INSIDE");
		boolean isVisible = false;
		try {
			IControl iControl = formObject.getIFormControl(controlName);
			EControlStyle eStyle = iControl.getM_objControlStyle();
			logInfo("isControlVisible", controlName
					+ "- eStyle.getM_strVisible(): " + eStyle.getM_strVisible());
			if (TRUE.equalsIgnoreCase(eStyle.getM_strVisible())) {
				isVisible = true;
			}
		} catch (Exception e) {
			logError("isControlVisible", e);
		}
		return isVisible;
	}

	public boolean isControlEnabled(String controlName) {
		logInfo("isControlEnabled", "INSIDE");
		boolean isEnable = false;
		try {
			IControl iControl = formObject.getIFormControl(controlName);
			EControlStyle eStyle = iControl.getM_objControlStyle();
			logInfo("isControlEnabled", controlName
					+ "- eStyle.getM_strEnable(): " + eStyle.getM_strEnable());
			if (TRUE.equalsIgnoreCase(eStyle.getM_strEnable())) {
				isEnable = true;
			}
		} catch (Exception e) {
			logError("isControlEnabled", e);
		}
		return isEnable;
	}

	public String setProductCurrencyCombo1(String sProdCode,
			String sAccHomeBranch) {
		String curr = "";
		try {
			logInfo("setProductCurrencyCombo1",
					"inside setProductCurrencyCombo1....");
			String sQuery = "";
			if (sActivityName.equalsIgnoreCase("CPD Maker")) {
				sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE from USR_0_PRODUCT_OFFERED_CPD B,USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c where a.product_code= b.product_code and UPPER(b.WI_NAME) = UPPER('"
						+ sWorkitemId
						+ "') and  c.HOME_BRANCH='"
						+ sAccHomeBranch
						+ "' and b.product_code='"
						+ sProdCode
						+ "' order by 1";
				logInfo("", "sQuery if ..." + sQuery);
			} else {
				sQuery = "SELECT DISTINCT b.CURRENCY_SHORT_NAME as CURRENCYCODE from USR_0_PRODUCT_OFFERED B,USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c where a.product_code= b.product_code and UPPER(b.WI_NAME) = UPPER('"
						+ sWorkitemId
						+ "') and c.HOME_BRANCH='"
						+ sAccHomeBranch
						+ "' and b.product_code='"
						+ sProdCode
						+ "' order by 1";
				logInfo("", "sQuery else ..." + sQuery);
			}
			/*
			 * List<List<String>> sOutput=formObject.getDataFromDB(sQuery);
			 * logInfo("setProductCurrencyCombo1","sOutput..."+sOutput); int
			 * iTotalRetrived = sOutput.size();
			 * logInfo("setProductCurrencyCombo1"
			 * ,"iTotalRetrived...."+iTotalRetrived);
			 */
			List<List<String>> currency_data = formObject.getDataFromDB(sQuery);
			formObject.setTableCellValue(PRODUCT_QUEUE, 0, 3, currency_data
					.get(0).get(0));
			// formObject.getNGDataFromDataSource(sQuery,
			// 1,PRODUCT_QUEUE.CURRENCY");
			curr = currency_data.get(0).get(0);
		} catch (Exception e) {
			logError("setProductCurrencyCombo1", e);
		}
		return curr;
	}

	public String fetchEtihadDetails(String sCustID, String sEtihadNo) {
		List<List<String>> sOutput_List = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
		String sOutput = getEtihadInputXML(sCustID, sEtihadNo, sOutput_List
				.get(0).get(0), "TP906079");
		logInfo("", "fetchEtihadDetails Input XML-----" + sOutput);
		sOutput = socket.connectToSocket(sOutput);
		logInfo("", "fetchEtihadDetails-----" + sOutput);
		return sOutput;
	}

	public String getEtihadInputXML(String sCustID, String sEtihad,
			String sSeqNo, String sUserName) {
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>Etihad_Guest_Information</Calltype>"
				+ "<Customer>" + "<CUST_ID></CUST_ID>" + "<etihadGuestNo>"
				+ sEtihad + "</etihadGuestNo>" + "<REF_NO>" + sSeqNo
				+ "</REF_NO>" + "<USER>" + sUserName + "</USER>" + "<WiName>"
				+ sWorkitemId + "</WiName>" + "</Customer>";
		return sInputXML;
	}

	public Boolean mandatoryCustScreenCPD() {
		logInfo("mandatoryCustScreenCPD", "Called mandatoryCustScreenCPD1 ");
		if (formObject.getValue(CPD_FINAL_ELIGIBILITY).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(BTN_CPD_TRSD_CHK,
					"Please Click TRSD check button for the Customer");
			return false;
		}
		return true;
	}

	public Boolean validateSIDate(String date, String controlName) {
		try {
			logInfo("validateSIDate", "Called validateSIDate ");
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String scurrentDate = simpledateformat.format(calendar.getTime());
			String sDate = formObject.getValue(date).toString();
			if (sDate.equalsIgnoreCase(""))
				return true;
			logInfo("validateSIDate", "date :" + sDate + "\n "
					+ "scurrentDate " + scurrentDate);
			if (!scurrentDate.equals("")) {
				String[] temp = scurrentDate.split("/");
				if (temp[1].length() == 3) {
					scurrentDate = temp[0] + "/" + getMonthNumber(temp[1])
							+ "/" + temp[2];
				} else {
					scurrentDate = temp[0] + "/" + temp[1] + "/" + temp[2];
				}
			}
			try {
				String[] temp = sDate.split("/");
				if (temp.length < 3) {
					sendMessageValuesList(date, "Invalid Date");
					return false;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			Date currentDate = simpledateformat.parse(scurrentDate);
			Date nDate = simpledateformat.parse(sDate);
			logInfo("validateSIDate", "currentDate :" + currentDate + "\n "
					+ "nDate " + nDate);
			if (nDate.compareTo(currentDate) < 0) {
				sendMessageValuesList(date, controlName + "" + CA0129);
				return false;
			} else if (nDate.compareTo(currentDate) == 0) {
				sendMessageValuesList(date, controlName
						+ "Date can not be same as system date");
				return false;
			} else if (Integer.parseInt(sDate.substring(
					sDate.lastIndexOf("/") + 1, sDate.length())) >= 2099) {
				sendMessageValuesList(date, controlName
						+ " Date can not be greater than 2099");
				return false;
			}
		} catch (Exception exp) {
			logInfo("validateSIDate",
					"Caught the exception " + exp.getMessage());
			exp.printStackTrace();
		}
		return true;
	}

	public String confirmOnSubmitInForLoop() {
		try {
			logInfo("confirmOnSubmitInForLoop", "INSIDE");
			int iRows = getGridCount(PRODUCT_QUEUE);
			List<List<String>> output = formObject
					.getDataFromDB("SELECT DISTINCT PRODUCT_CODE,PRODUCT_NAME,CURRENCY "
							+ "FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
							+ sWorkitemId + "'");
			int iTotalRetrived = output.size();
			if (iTotalRetrived != 0 && null != output.get(0)) {
				for (int i = 0; i < iTotalRetrived; i++) {
					for (int j = 1; j < iRows; j++) {
						if (formObject.getTableCellValue(PRODUCT_QUEUE, j, 1)
								.equalsIgnoreCase(output.get(i).get(0))
								&& formObject.getTableCellValue(PRODUCT_QUEUE,
										j, 2).equalsIgnoreCase(
										output.get(i).get(1))
								&& formObject.getTableCellValue(PRODUCT_QUEUE,
										j, 3).equalsIgnoreCase(
										output.get(i).get(2))) {
							sendMessageList.clear();
							return getReturnMessage(
									true,
									BTN_SUBMIT,
									"Product with following details already added,"
											+ " Do you still want to add \n Code:"
											+ output.get(i).get(0)
											+ " \n Description:"
											+ output.get(i).get(1)
											+ " \n Currency:"
											+ output.get(i).get(2)
											+ "$$$confirm$$$" + i);
						}
					}
				}
			}
		} catch (Exception e) {
			logError("confirmOnSubmitInForLoop", e);
		}
		logInfo("confirmOnSubmitInForLoop", "returning true");
		return "true";
	}

	public void searchProductList(String sTableName, String data) {
		logInfo("searchProductList", "INSIDE sTableName: " + sTableName);
		logInfo("searchProductList", "data: " + data);
		String chequebookControl = "";
		String trnsfrFromAccNoControl = "";
		if (ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			chequebookControl = "table94_cheque_book";
			trnsfrFromAccNoControl = "table94_trnsfr_from_acc_no";
		} else if (ACTIVITY_QDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			chequebookControl = "table130_cheque_book";
			trnsfrFromAccNoControl = "table130_trnsfr_from_acc_no";
		} else if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
			chequebookControl = "table103_cheque_book";
			trnsfrFromAccNoControl = "table103_trnsfr_from_acc_no";
		}
		String visaStatus = formObject.getValue("visaStatus_manual").toString();
		String resWithoutEida = formObject.getValue("drp_reseida").toString();
		logInfo("searchProductList", "visaStatus : " + visaStatus);
		logInfo("searchProductList", "resWithoutEida : " + resWithoutEida);
		try {
			String rtnArry[] = null;
			String rtnData[] = null;
			String sQuery = "";
			int iSelectedRow = -1;
			List<List<String>> sOutput;
			String sDebitAccNo = "";
			String sAllProduct = "";
			String[] resultArray = data.split("@@@", -1);
			logInfo("searchProductList",
					"resultArray: " + resultArray.toString());
			String sResult = resultArray[0];
			logInfo("searchProductList", "sResult: " + sResult);
			logInfo("searchProductList", "sResult size: " + resultArray.length);
			int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust - 1, 2);
			int iRows = getGridCount(PRODUCT_QUEUE);
			if (!resultArray[1].equalsIgnoreCase("")) {
				iSelectedRow = Integer.parseInt(resultArray[1]);
			}
			logInfo("searchProductList", "iSelectedRow: " + iSelectedRow);
			String sEmail = "SELECT FINAL_EMAIL FROM USR_0_CUST_TXN WHERE cust_sno='"
					+ getPrimaryCustomerSNO()
					+ "' AND WI_NAME = '"
					+ sWorkitemId + "'";
			logInfo("searchProductList", "sEmail query: " + sEmail);
			// Email Etihad Validation
			List<List<String>> sEmailOutput = formObject.getDataFromDB(sEmail);
			logInfo("searchProductList", "sEmailOutput: " + sEmailOutput);
			String email = "";
			if (sEmailOutput.size() > 0) {
				email = sEmailOutput.get(0).get(0);
			}
			if (!sResult.equalsIgnoreCase("")) {
				if (sResult.contains("#")) {
					rtnArry = sResult.split("#");
					if (email.equalsIgnoreCase("")) {
						boolean rtn = emailEtihadVal(rtnArry);
						if (!rtn) {
							return;
						}
					}
					String sAccClass = formObject.getValue(ACC_HOME_BRANCH)
							.toString();
					logInfo("searchProductList", "sAccClass: " + sAccClass);
					logInfo("searchProductList", "rtnArry[0]: " + rtnArry[0]);
					for (int i = 0; i < rtnArry.length; i++) {
						logInfo("searchProductList",
								"inside for loop for setting values in repeater");
						rtnData = rtnArry[i].split("~");
						sAllProduct = sAllProduct + "'" + rtnData[0] + "',";
						// objChkRepeater.setEnabled(iRows+i,PRODUCT_QUEUE.CURRENCY",true);
						// objChkRepeater.setEditable(iRows+i,
						// PRODUCT_QUEUE.CURRENCY", true);
						logInfo("searchProductList", " value of i =" + i + " "
								+ "... rtnData[2]..." + rtnData[2]);
						setProductCurrencyComboLoadDisable1(rtnData[0]);
						// objChkRepeater.setValue(iRows+i,PRODUCT_QUEUE.CURRENCY",rtnData[2]);
						String prodQueueColumns = "Product_Code,Product_Description,Cheque_Book,Account_Branch,"
								+ "WI_NAME,CID,Currency";
						String prodQueueValues = rtnData[0] + "##" + rtnData[1]
								+ "##No##" + rtnData[4] + "##" + sWorkitemId
								+ "##" + (iRows + i + 1) + "##" + rtnData[2];
						LoadListViewWithHardCodeValues(PRODUCT_QUEUE,
								prodQueueColumns, prodQueueValues);
						if (rtnData[3].equalsIgnoreCase("Yes")
								&& !"Under Processing"
										.equalsIgnoreCase(visaStatus)
								&& !"Yes".equalsIgnoreCase(resWithoutEida)) {
							logInfo("searchProductList", "enabling cheque book");
							formObject.setStyle(chequebookControl, DISABLE,
									FALSE);
						} else {
							logInfo("searchProductList",
									"disabling cheque book");
							formObject.setStyle(chequebookControl, DISABLE,
									TRUE);
						}
						String getquery = "SELECT visa_status, RES_EIDA FROM USR_0_CUST_TXN WHERE cust_sno='"
								+ getPrimaryCustomerSNO()
								+ "' AND WI_NAME = '"
								+ sWorkitemId + "'";
						logInfo("searchProductList", "getquery---" + getquery);
						List<List<String>> getqueryOutput = formObject
								.getDataFromDB(getquery);
						logInfo("searchProductList", "getqueryOutput---"
								+ getqueryOutput);
						if (getqueryOutput.size() > 0) {
							String Visa = getqueryOutput.get(0).get(0);
							String withoutEida = getqueryOutput.get(0).get(1);
							logInfo("searchProductList", "getquery: " + Visa);
							if (Visa.equalsIgnoreCase("Under Processing")
									|| "Yes".equalsIgnoreCase(withoutEida)) {
								formObject.setStyle(chequebookControl, DISABLE,
										TRUE);
							}
						}
						rtnData = null;
						sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
								+ sWorkitemId
								+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE "
								+ "WHERE CODE IN ('6','8')) AND CUSTOMER_ID='"
								+ sCustID + "'";
						sOutput = formObject.getDataFromDB(sQuery);
						logInfo("searchProductList", "sOutput: " + sOutput);
						if (sOutput.size() > 0) {
							for (int j = 0; j < sOutput.size(); j++) {
								formObject.addItemInCombo(
										trnsfrFromAccNoControl, sOutput.get(j)
												.get(0));
							}
							/*
							 * sDebitAccNo = sOutput.get(0).get(0);
							 * logInfo("searchProductList",
							 * "sDebitAccNo: "+sDebitAccNo);
							 * if(!sDebitAccNo.equalsIgnoreCase("")) { String
							 * sTemp[] = sDebitAccNo.split(","); for(int j=0;
							 * j<sTemp.length; j++) { formObject.addItemInCombo(
							 * "table94_trnsfr_from_acc_no", sTemp[i]); } }
							 */
						}
					}
				} else {
					rtnData = sResult.split("~");
					sAllProduct = sAllProduct + "'" + rtnData[0] + "',";
					if (email.equalsIgnoreCase("")) {
						sAllProduct = sAllProduct.substring(0,
								sAllProduct.length() - 1);
						String sQuery1 = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM "
								+ "USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE IN ("
								+ sAllProduct
								+ ") AND "
								+ "UPPER(SUB_PRODUCT_TYPE) ='ETIHAD'";
						logInfo("searchProductList", "sQuery---" + sQuery1);
						List<List<String>> sOutput1 = formObject
								.getDataFromDB(sQuery1);
						if (!sOutput1.get(0).get(0).equalsIgnoreCase("0")) {
							sendMessageValuesList("",
									"Primary Customer's Email Id Is Mandatory For Etihad Product.");
							return;
						}
					}
					String sAccClass = formObject.getValue(ACC_HOME_BRANCH)
							.toString();
					logInfo("searchProductList", "sAccClass ,,,,,......"
							+ sAccClass);
					logInfo("searchProductList", "rtnData[0],,,,,,......"
							+ rtnData[0]);
					// objChkRepeater.setEditable(iRows,PRODUCT_QUEUE.CHEQUE_BOOK",false);
					// objChkRepeater.setEnabled(iRows,PRODUCT_QUEUE.CHEQUE_BOOK",false);
					logInfo("searchProductList", "disabling cheque book");
					formObject.setStyle(chequebookControl, DISABLE, TRUE);
					// objChkRepeater.setEnabled(iRows,PRODUCT_QUEUE.CURRENCY",true);
					// objChkRepeater.setEditable(iRows,
					// PRODUCT_QUEUE.CURRENCY", true);
					logInfo("searchProductList", " value of i = none "
							+ "... rtnData[2]..." + rtnData[2]);
					setProductCurrencyComboLoadDisable1(rtnData[0]);
					// objChkRepeater.setValue(iRows,PRODUCT_QUEUE.CURRENCY",rtnData[2]);
					String prodQueueColumns = "Product_Code,Product_Description,Cheque_Book,Account_Branch,"
							+ "WI_NAME,CID,Currency";
					String prodQueueValues = rtnData[0] + "##" + rtnData[1]
							+ "##No##" + rtnData[4] + "##" + sWorkitemId + "##"
							+ (iRows + 1) + "##" + rtnData[2];
					LoadListViewWithHardCodeValues(PRODUCT_QUEUE,
							prodQueueColumns, prodQueueValues);
					sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
							+ sWorkitemId
							+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE "
							+ "WHERE CODE IN ('6','8')) AND CUSTOMER_ID='"
							+ sCustID + "'";
					sOutput = formObject.getDataFromDB(sQuery);
					logInfo("searchProductList", "sOutput---" + sOutput);
					if (sOutput.size() > 0) {
						for (int j = 0; j < sOutput.size(); j++) {
							formObject.addItemInCombo(trnsfrFromAccNoControl,
									sOutput.get(j).get(0));
						}
						/*
						 * sDebitAccNo = sOutput.get(0).get(0);
						 * logInfo("searchProductList",
						 * "sDebitAccNo: "+sDebitAccNo);
						 * if(!sDebitAccNo.equalsIgnoreCase("")) { String
						 * sTemp[] = sDebitAccNo.split(","); for(int j=0;
						 * j<sTemp.length; j++) {
						 * formObject.addItemInCombo("table94_trnsfr_from_acc_no"
						 * , sTemp[i]); } }
						 */
					}
					if (rtnData[3].equalsIgnoreCase("Yes")
							&& !"Under Processing".equalsIgnoreCase(visaStatus)
							&& !"Yes".equalsIgnoreCase(resWithoutEida)) {
						logInfo("searchProductList", "enabling cheque book");
						formObject.setStyle(chequebookControl, DISABLE, FALSE);
					} else {
						logInfo("searchProductList", "disabling cheque book");
						formObject.setStyle(chequebookControl, DISABLE, TRUE);
					}
					String getquery = "SELECT visa_status FROM USR_0_CUST_TXN WHERE cust_sno='"
							+ getPrimaryCustomerSNO()
							+ "' AND WI_NAME = '"
							+ sWorkitemId + "'";
					logInfo("searchProductList", "getquery---" + getquery);
					List<List<String>> getqueryOutput = formObject
							.getDataFromDB(getquery);
					if (getqueryOutput.size() > 0) {
						String Visa = getqueryOutput.get(0).get(0);
						logInfo("searchProductList", "getquery---" + Visa);
						if (Visa.equalsIgnoreCase("Under Processing")
								|| "Yes".equalsIgnoreCase(resWithoutEida)) {
							logInfo("searchProductList",
									"disabling cheque book");
							formObject.setStyle(chequebookControl, DISABLE,
									TRUE);
						}
					}
				}
			}
			EnableEtihadFrame();
			LoadDebitCardCombo();
			EnableFamilyReffered();
		} catch (Exception e) {
			logError("searchProductList", e);
		}
	}

	public boolean generateTemplate() {
		logInfo("generateTemplate", "INSIDE");
		String sReqType = formObject.getValue(REQUEST_TYPE).toString();
		String sProdCode = "";
		int iRows = getGridCount(PRODUCT_QUEUE);
		if (!(sReqType.equalsIgnoreCase("Category Change Only")|| sReqType.equalsIgnoreCase("Upgrade"))) {
			if (iRows < 1) {
				sendMessageValuesList("", "Please add atleast one product.");
				return false;
			}
			for (int i = 0; i < iRows; i++) {
				sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE, i, 1);
				if (sProdCode.equalsIgnoreCase("")) {
					sendMessageValuesList(PRODUCT_QUEUE,
							"Blank Row is not allowed.");
					return false;
				}
			}
		}
		logInfo("generateTemplate", "INSIDE2");
		// String response= wfsave_status();//jsp
		if (sReqType.equalsIgnoreCase("Category Change Only") || iRows > 0) {
			String param = sWorkitemId + "','" + sProcessName;
			List<String> paramlist = new ArrayList<>();
			paramlist.add(PARAM_TEXT + sWorkitemId);
			List<List<String>> procedureOutput = formObject
					.getDataFromStoredProcedure("SP_TemplateGeneration_Forms",
							paramlist);
			logInfo("generateTemplate", "Procedure output " + procedureOutput);

			try {
				String qryRepeater = "SELECT CUSTOMER_NAME AS CUST_NAME, TEMPLATE_NAME AS DOC_NAME, "
						+ "DECODE(GENERATION_STATUS, 'Y', 'Generated', 'F', 'Failed', 'WIP') AS STATUS, '' "
						+ "AS REMARKS, WORKITEM_NAME AS WI_NAME, DECODE(GENERATION_STATUS, 'Y', 'Y', 'N') "
						+ "AS IS_GENERATED, TMP_CATEGORY AS RETRY, '' AS custsno, '' AS ftp_status, "
						+ "ENTRY_DATE_TIME AS entrydatetime FROM NG_TEMPLATE_TRANSACTION "
						+ "WHERE WORKITEM_NAME = '"
						+ sWorkitemId
						+ "' AND TMP_CATEGORY = 'Other' "
						+ "ORDER BY CUSTOMER_NAME";
				logInfo("generateTemplate", "qryRepeater-----" + qryRepeater);
				List<List<String>> sOutRepeater = formObject
						.getDataFromDB(qryRepeater);
				logInfo("generateTemplate", " sOutRepeater     ===== "
						+ sOutRepeater);
				// String sRecordStr=
				// sOutRepeater.getTagValue(sOutRepeater,"Record");
				// NGRepeater objChkRepeaterDoc =
				// formObject.getNGRepeater("Frame58");
				String CUST_NAME = "";
				String DOC_NAME = "";
				String STATUS = "";
				String REMARKS = "";
				String WI_NAME = "";
				String IS_GENERATED = "";
				String RETRY = "";
				String CUSTSNO = "";
				String FTP_STATUS = "";
				String ENTRYDATETIME = "";
				int iRowsDoc = getGridCount("temp_gen_queue");
				formObject.clearTable("temp_gen_queue");
				int sCount = sOutRepeater.size();
				if (sOutRepeater.size() > 0 && null != sOutRepeater.get(0)) {
					if (iRowsDoc == 0) {
						logInfo("templateGeneration",
								"inside if of irowdoc == 0 :" + iRowsDoc);
						for (int i = iRowsDoc; i < sCount; i++) {
							CUST_NAME = sOutRepeater.get(i).get(0);
							DOC_NAME = sOutRepeater.get(i).get(1);
							STATUS = sOutRepeater.get(i).get(2);
							REMARKS = sOutRepeater.get(i).get(3);
							WI_NAME = sOutRepeater.get(i).get(4);
							IS_GENERATED = sOutRepeater.get(i).get(5);
							RETRY = sOutRepeater.get(i).get(6);
							CUSTSNO = sOutRepeater.get(i).get(7);
							FTP_STATUS = sOutRepeater.get(i).get(8);
							ENTRYDATETIME = sOutRepeater.get(i).get(9);
							String coloumnName = "Customer_Name,Document_Name,Status,Remarks,wi_name,Is_generated,retry,custsno,"
									+ "ftp_status,entrydatetime";
							String tableName = "temp_gen_queue";
							String values = CUST_NAME + "##" + DOC_NAME + "##"
									+ STATUS + "##" + REMARKS + "##" + WI_NAME
									+ "##" + IS_GENERATED + "##" + RETRY + "##"
									+ CUSTSNO + "##" + FTP_STATUS + "##"
									+ ENTRYDATETIME;
							LoadListViewWithHardCodeValues(tableName,
									coloumnName, values);
						}
					}
					if (iRowsDoc > 0) {
						logInfo("templateGeneration",
								"inside if of irowdoc not equal 0 :" + iRowsDoc);
						for (int i = iRowsDoc + 1; i < sCount; i++) {
							CUST_NAME = sOutRepeater.get(i).get(0);
							DOC_NAME = sOutRepeater.get(i).get(1);
							STATUS = sOutRepeater.get(i).get(2);
							REMARKS = sOutRepeater.get(i).get(3);
							WI_NAME = sOutRepeater.get(i).get(4);
							IS_GENERATED = sOutRepeater.get(i).get(5);
							RETRY = sOutRepeater.get(i).get(6);
							CUSTSNO = sOutRepeater.get(i).get(7);
							FTP_STATUS = sOutRepeater.get(i).get(8);
							ENTRYDATETIME = sOutRepeater.get(i).get(9);
							String coloumnName = "Customer_Name,Document_Name,Status,Remarks,wi_name,Is_generated,retry,custsno,"
									+ "ftp_status,entrydatetime";
							String tableName = "temp_gen_queue";
							String values = CUST_NAME + "##" + DOC_NAME + "##"
									+ STATUS + "##" + REMARKS + "##" + WI_NAME
									+ "##" + IS_GENERATED + "##" + RETRY + "##"
									+ CUSTSNO + "##" + FTP_STATUS + "##"
									+ ENTRYDATETIME;
							LoadListViewWithHardCodeValues(tableName,
									coloumnName, values);
						}
					}
				} else {
					sendMessageValuesList("",
							"No Doc Types For This Application");
					return false;
				}

				if (formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("New Account")) {
					// formObject.setNGSelectedTab("Tab5",8);
					// formObject.NGFocus("button_refresh");
				} else {
					// formObject.setNGSelectedTab("Tab5",9);
					// formObject.NGFocus("button_refresh");
				}
			} catch (Exception e) {
				logError("generateTemplate", e);
				if (formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("New Account")) {
					// formObject.setNGSelectedTab("Tab5",8);
					// sendMessageValuesList(controlId, Message);
				} else {
					// formObject.setNGSelectedTab("Tab5",9);
					// formObject.NGFocus("button_refresh");
				}
				return false;
			}
		}
		return true;
	}

	public void refreshDocRepeater() {
		logInfo("refreshDocRepeater", "into refreshdocrepeater ");
		try {
			String qryRepeater = "SELECT CUSTOMER_NAME AS CUST_NAME, TEMPLATE_NAME AS DOC_NAME, "
					+ "DECODE(GENERATION_STATUS, 'Y', 'Generated', 'F', 'Failed', 'WIP') AS STATUS, "
					+ "'' AS REMARKS, WORKITEM_NAME AS WI_NAME, DECODE(GENERATION_STATUS, 'Y', 'Y', 'N') "
					+ "AS IS_GENERATED, TMP_CATEGORY AS RETRY, '' AS custsno, '' AS ftp_status, ENTRY_DATE_TIME "
					+ "AS entrydatetime FROM NG_TEMPLATE_TRANSACTION WHERE WORKITEM_NAME = '"
					+ sWorkitemId
					+ "' "
					+ "AND TMP_CATEGORY = 'Other' ORDER BY CUSTOMER_NAME";
			logInfo("refreshDocRepeater", qryRepeater);
			List<List<String>> sOutRepeater = formObject
					.getDataFromDB(qryRepeater);
			logInfo("refreshDocRepeater", "list data" + sOutRepeater);
			String CUST_NAME = "";
			String DOC_NAME = "";
			String STATUS = "";
			String REMARKS = "";
			String WI_NAME = "";
			String IS_GENERATED = "";
			String RETRY = "";
			String CUSTSNO = "";
			String FTP_STATUS = "";
			String ENTRYDATETIME = "";
			int iRowsDoc = getGridCount("temp_gen_queue");
			logInfo("refreshDocRepeater", "getGridCount:" + iRowsDoc);
			formObject.clearTable("temp_gen_queue");
			int sCount = sOutRepeater.size();
			logInfo("refreshDocRepeater", "count of sOutRepeater:" + sCount);
			if (sOutRepeater.size() > 0 && null != sOutRepeater.get(0)) {
				if (iRowsDoc == 0) {
					logInfo("refreshDocRepeater", "inside if of irowdoc == 0 :"
							+ iRowsDoc);
					for (int i = iRowsDoc; i < sCount; i++) {
						CUST_NAME = sOutRepeater.get(i).get(0);
						DOC_NAME = sOutRepeater.get(i).get(1);
						STATUS = sOutRepeater.get(i).get(2);
						REMARKS = sOutRepeater.get(i).get(3);
						WI_NAME = sOutRepeater.get(i).get(4);
						IS_GENERATED = sOutRepeater.get(i).get(5);
						RETRY = sOutRepeater.get(i).get(6);
						CUSTSNO = sOutRepeater.get(i).get(7);
						FTP_STATUS = sOutRepeater.get(i).get(8);
						ENTRYDATETIME = sOutRepeater.get(i).get(9);
						String coloumnName = "Customer_Name,Document_Name,Status,Remarks,wi_name,Is_generated,retry,custsno,"
								+ "ftp_status,entrydatetime";
						String tableName = "temp_gen_queue";
						String values = CUST_NAME + "##" + DOC_NAME + "##"
								+ STATUS + "##" + REMARKS + "##" + WI_NAME
								+ "##" + IS_GENERATED + "##" + RETRY + "##"
								+ CUSTSNO + "##" + FTP_STATUS + "##"
								+ ENTRYDATETIME;
						LoadListViewWithHardCodeValues(tableName, coloumnName,
								values);
					}
				}
				if (iRowsDoc > 0) {
					logInfo("refreshDocRepeater",
							"inside if of irowdoc not equal 0 :" + iRowsDoc);
					for (int i = iRowsDoc + 1; i < sCount; i++) {
						CUST_NAME = sOutRepeater.get(i).get(0);
						DOC_NAME = sOutRepeater.get(i).get(1);
						STATUS = sOutRepeater.get(i).get(2);
						REMARKS = sOutRepeater.get(i).get(3);
						WI_NAME = sOutRepeater.get(i).get(4);
						IS_GENERATED = sOutRepeater.get(i).get(5);
						RETRY = sOutRepeater.get(i).get(6);
						CUSTSNO = sOutRepeater.get(i).get(7);
						FTP_STATUS = sOutRepeater.get(i).get(8);
						ENTRYDATETIME = sOutRepeater.get(i).get(9);
						String coloumnName = "Customer_Name,Document_Name,Status,Remarks,wi_name,Is_generated,retry,custsno,"
								+ "ftp_status,entrydatetime";
						String tableName = "temp_gen_queue";
						String values = CUST_NAME + "##" + DOC_NAME + "##"
								+ STATUS + "##" + REMARKS + "##" + WI_NAME
								+ "##" + IS_GENERATED + "##" + RETRY + "##"
								+ CUSTSNO + "##" + FTP_STATUS + "##"
								+ ENTRYDATETIME;
						LoadListViewWithHardCodeValues(tableName, coloumnName,
								values);
					}
				}
			}
			// refreshWorkitemWithDoc();
		} catch (Exception e) {
			logError("refreshDocRepeater", e);
		}
	}

	public void loadOfferedDebitCard(String sProdGrid, String sDebitCardGrid) {
		try {
			logInfo("LoadOfferedDebitCard.... ", "" + sProdGrid + "  "
					+ sDebitCardGrid);
			JSONArray jsonArray = new JSONArray();
			JSONObject obj = new JSONObject();
			JSONObject obj1 = new JSONObject();
			String sPrimaryCust = getPrimaryCustomerSNO();
			formObject.clearTable(sDebitCardGrid);
			String sProduct = "";
			int sCount = getGridCount(sProdGrid);
			// NGRepeater objChkRepeater =
			// formObject.getNGRepeater("REPEAT_FRAME");
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					Integer.parseInt(sPrimaryCust), 2).toString();
			log.info("sCustID.... " + sCustID);
			for (int row = 0; row < sCount; row++) {
				sProduct = sProduct + "'"
						+ formObject.getTableCellValue(sProdGrid, row, 0) + "'"
						+ ",";
			}
			if (!sProduct.equalsIgnoreCase("")) {
				sProduct = sProduct.substring(1, sProduct.length() - 2);
			}
			String sQuery = "SELECT FINAL_FULL_NAME,CUST_SEG,DECODE(STAFF_FLAG,'Yes','Y','N') AS STAFF_FLAG FROM USR_0_CUST_TXN WHERE CUST_SNO = '"
					+ sPrimaryCust + "' AND WI_NAME ='" + sWorkitemId + "'";
			logInfo("LoadOfferedDebitCard.... ", "sQuery" + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadOfferedDebitCard.... ", "sOutput" + sOutput);
			String sSegment = "";
			String sStaff = "";
			String sName = "";
			if (sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					sName = sOutput.get(i).get(0);
					sSegment = sOutput.get(i).get(1);
					sStaff = sOutput.get(i).get(2);
				}
			}
			sQuery = "SELECT DISTINCT TO_CHAR(CASE WHEN COD_PROD_TYPE='C' THEN 'CVNONS' ELSE 'ISM' END) AS COD_PROD_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM USR_0_PRODUCT_MASTER WHERE ATM_FLAG = 'Y' and PRODUCT_CODE IN ('"
					+ sProduct
					+ "')) INTERSECT SELECT DISTINCT TO_CHAR(CARDTYPE) AS COD_PROD_TYPE FROM USR_0_DEBITCARD_MASTER WHERE PROCESS_TYPE ='Onshore' AND CUST_CATEGORY ='"
					+ sSegment + "' AND STAFF_FLAG = '" + sStaff + "'";
			logInfo("LoadOfferedDebitCard.... ", "sQuery" + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadOfferedDebitCard.... ", "sOutput" + sOutput);
			if (sOutput != null && sOutput.size() > 0) {
				String sCodType = sOutput.get(0).get(0);
				if (!sCodType.equalsIgnoreCase("")) {
					StringBuilder showList = new StringBuilder();
					// String[] sCardType
					// =getTagValue(sOutput,"Record").split(";");
					if (formObject.getValue(ACC_CLASS).toString()
							.equalsIgnoreCase("Islamic")) {
						// showList.append("<ListItem><SubItem>"+sCustID+"</SubItem><SubItem>"+sName+"</SubItem><SubItem>ISM</SubItem></ListItem>");
						String colnames = "CUST_ID,CUST_NAME,CARD_TYPE";
						String values = sCustID + "##" + sName + "##" + "ISM";
						LoadListViewWithHardCodeValues(sDebitCardGrid,
								colnames, values);
					} else {
						// showList.append("<ListItem><SubItem>"+sCustID+"</SubItem><SubItem>"+sName+"</SubItem><SubItem>CVNONS</SubItem></ListItem><ListItem><SubItem>"+sCustID+"</SubItem><SubItem>"+sName+"</SubItem><SubItem>ETD</SubItem></ListItem>");
						obj.put("CUST_ID", sCustID);
						obj.put("CUST_NAME", sName);
						obj.put("CARD_TYPE", "CVNONS");
						obj1.put("CUST_ID", sCustID);
						obj1.put("CUST_NAME", sName);
						obj1.put("CARD_TYPE", "ETD");
						jsonArray.add(obj);
						jsonArray.add(obj1);
						logInfo("sDebitCardGrid",
								"jsonArray2:: " + jsonArray.toString());
						formObject.addDataToGrid(sDebitCardGrid, jsonArray);
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in LoadOfferedDebitCard", e);
		}
	}

	public void loadApplicationAssessmentData() {
		try {
			logInfo("loadApplicationAssessmentData", "RISK ASSESSMENT GRID CRO");
			List<List<String>> sOutput = null;
			int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			logInfo("loadApplicationAssessmentData", "iPrimaryCust: "
					+ iPrimaryCust);
			// int objChkRepeater = getGridCount(ACC_RELATION);
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust - 1, 2).toString();
			String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust - 1, 7).toString();
			logInfo("loadApplicationAssessmentData", "sAccRelation: "
					+ sAccRelation);
			String sQuery = "SELECT A.CID,B.CUST_NAME,A.ACC_RELATION,B.CURRENT_RISK_SYSTEM,B.CURRENT_RISK_BUSSINESS FROM ACC_RELATION_REPEATER A,USR_0_RISK_ASSESSMENT_DATA B WHERE A.WI_NAME=B.WI_NAME AND A.SNO=B.SNO AND A.WI_NAME = '"
					+ sWorkitemId + "' ORDER BY TO_NUMBER(A.SNO)";
			logInfo("loadApplicationAssessmentData", sQuery);
			List recordList = formObject.getDataFromDB(sQuery);
			loadListView(
					recordList,
					"CID,CUSTOMER_NAME,ACCOUNT_RELATIONSHIP,SYS_DEFINED_RISK,BANK_DEFINED_RISK",
					RISK_ASSESS_LVW);
			sQuery = "SELECT B.CUST_ID,B.CUST_FULL_NAME,B.final_eligibility,A.ACC_RELATION, B.final_eligibility FROM ACC_RELATION_REPEATER A,USR_0_CUST_TXN B WHERE A.WI_NAME ='"
					+ sWorkitemId
					+ "' and A.WI_NAME=B.WI_NAME AND A.SNO=B.CUST_SNO ORDER BY TO_NUMBER(A.SNO)";
			logInfo("loadApplicationAssessmentData", sQuery);
			// logInfo("loadApplicationAssessmentData",sQuery);
			List recordList1 = formObject.getDataFromDB(sQuery);
			loadListView(
					recordList1,
					"CUST_ID,CUST_FULL_NAME,TRSD_ASSESSMENT,ACC_RELATIONSHIP,ELIGIBILITY",
					ELIG_LVW_CRO);
			if (sAccRelation.equalsIgnoreCase("Existing")) {
				sQuery = "SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUSTOMER_ID='" + sCustID + "'";
				List recordList2 = formObject.getDataFromDB(sQuery);
				logInfo("loadApplicationAssessmentData", sQuery);
				loadListView(recordList2, "PRODUCT_CODE,PRODUCT_NAME,CURRENCY",
						PROD_CRO_LVW);
				sQuery = "SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE FROM USR_0_DEBITCARD_EXISTING WHERE WI_NAME = '"
						+ sWorkitemId + "' AND CUST_ID='" + sCustID + "'";
				List recordList3 = formObject.getDataFromDB(sQuery);
				logInfo("loadApplicationAssessmentData", sQuery);
				loadListView(
						recordList3,
						"CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE",
						FAC_EXST_LVW_CRO);
				// String sOutput =
				// executeQueryAPSelectWithColumnNames("SELECT PRODUCT_NAME,CURRENCY FROM USR_0_BANQUADETAILS WHERE WI_NAME ='"+sWorkitemId+"' AND CUSTOMER_ID='"+sCustID+"'");
				String query = "SELECT PRODUCT_NAME,CURRENCY FROM USR_0_BANQUADETAILS WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUSTOMER_ID='" + sCustID + "'";
				sOutput = formObject.getDataFromDB(query);
				logInfo("loadApplicationAssessmentData", "sOutput-----"
						+ sOutput);
				String[] sAllProducts;
				String[] sEachProducts;
				int iTotalRetrived = sOutput.size();
				// try{
				if (iTotalRetrived != 0) {
					for (int i = 0; i < iTotalRetrived; i++) {
						// sEachProducts = sAllProducts[i].split(",");
						// sOutput="<ListItems><ListItem><SubItem></SubItem><SubItem>"+sEachProducts[0]+"</SubItem><SubItem>"+sEachProducts[1]+"</SubItem></ListItem></ListItems>";
						String values = "" + "##" + sOutput.get(i).get(0)
								+ "##" + sOutput.get(i).get(1);
						LoadListViewWithHardCodeValues(PROD_CRO_LVW,
								"PRODUCT_CODE,PRODUCT_NAME,CURRENCY", values);
					}
				}
			}
			if (sActivityName.equalsIgnoreCase(ACTIVITY_APP_ASSESSMENT)
					&& sAccRelation.equalsIgnoreCase("Existing")) {
				if (getGridCount(FAC_EXST_LVW_CRO) == 0) {
					loadExistingDebitCard("USR_0_DEBITCARD_EXISTING",
							FAC_EXST_LVW_CRO, sCustID);
				}
			}
			logInfo("loadApplicationAssessmentData", "---Over without IF------");
		} catch (Exception e) {
			logError("loadApplicationAssessmentData", e);
		}
	}

	public HashMap<String, String> getDocumentGroup() {
		HashMap<String, String> hmap = new HashMap<String, String>();
		try {
			logInfo("LoadRequiredDocument", "getDocumentGroup1 Inside");
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT DOC_NAME,DOC_GROUP FROM USR_0_DOC_GROUP");
			logInfo("LoadRequiredDocument", "getDocumentGroup1 Inside"
					+ sOutput);
			// String ssepKey[] = getTagValue(sOutput,"Record").split(";");
			if (sOutput != null && sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					hmap.put(sOutput.get(i).get(0), sOutput.get(i).get(1));
				}
			}
		} catch (Exception e) {
			logError("Exception in getDocumentGroup", e);
		}
		return hmap;
	}

	public void loadRequiredDocument(String sGridName) {
		logInfo("LoadRequiredDocument", "Inside doc load");
		String data = "";
		String sQuery1 = "";
		JSONArray jsonArray = new JSONArray();
		List<List<String>> outQuery1;
		String xmlData = "";
		HashMap<String, String> sDocGroup = getDocumentGroup();
		formObject.clearTable(sGridName);
		logInfo("LoadRequiredDocument", "Still going getDocumentGroup"
				+ sDocGroup);
		try {
			sQuery1 = "SELECT CUST.CUST_ID,EXT.REQUEST_TYPE,CUST.FINAL_COUNTRY,CUST.SPECIAL_CATAGORY,"
					+ "CUST.FINAL_FULL_NAME ,CUST.FINAL_NATIONALITY, CUST.VISA_STATUS,CUST.IS_UAE_RESIDENT,"
					+ "(SELECT TYPE FROM USR_0_EMPLOYMENT_STATUS WHERE EMP_STATUS = CUST.EMP_STATUS) EMP_STATUS,"
					+ "CUST.EMPLOYEE_TYPE FROM USR_0_CUST_TXN  CUST,"
					+ sExtTable
					+ " EXT WHERE CUST.WI_NAME='"
					+ sWorkitemId
					+ "' and cust.wi_name=ext.wi_name ORDER BY TO_NUMBER(CUST_SNO)";
			logInfo("LoadRequiredDocument", "sQuery1 " + sQuery1);
			outQuery1 = formObject.getDataFromDB(sQuery1);
			logInfo("LoadRequiredDocument", "outQuery1: " + outQuery1);
			StringBuilder showList = new StringBuilder();
			int iNo = 1;
			String sCountryResidence = "";
			String EMP_STATUS = "";
			String acc_details = "";
			String sBankRelation = "";
			String GCC_COUNTRY = null;
			String SPECIAL_CATAGORY = null;
			String RES_STATUS = null;
			String NATIONALITY_TYPE = null;
			String STAFF_FLAG = null;
			String VISA_STATUS = null;
			String CUST_ID = null;
			String FULL_NAME = null;
			String sReqType = null;
			for (int cust_count = 0; cust_count < outQuery1.size(); cust_count++) {
				String sQuery2 = "SELECT ACC_RELATION,BANK_RELATION FROM ACC_RELATION_REPEATER WHERE WI_NAME='"
						+ sWorkitemId + "' and SNO='" + iNo + "'";
				List<List<String>> outQuery2 = formObject
						.getDataFromDB(sQuery2);
				logInfo("LoadRequiredDocument", "outQuery1 ACC_RELATION : "
						+ sQuery2);
				if (outQuery2.size() > 0) {
					for (int j = 0; j < outQuery2.size(); j++) {
						acc_details = outQuery2.get(j).get(0);
						sBankRelation = outQuery2.get(j).get(1);
					}
				}
				sCountryResidence = outQuery1.get(cust_count).get(2);
				EMP_STATUS = outQuery1.get(cust_count).get(8);
				VISA_STATUS = outQuery1.get(cust_count).get(6);
				CUST_ID = outQuery1.get(cust_count).get(0);
				FULL_NAME = outQuery1.get(cust_count).get(4);
				sReqType = outQuery1.get(cust_count).get(1);
				RES_STATUS = outQuery1.get(cust_count).get(7);
				if (sReqType.equalsIgnoreCase("Category Change Only")) {
					sReqType = "New Account with Category Change";
				}
				if ((sCountryResidence != null)
						&& (sCountryResidence.equalsIgnoreCase("SAUDI ARABIA")
								|| sCountryResidence
										.equalsIgnoreCase("Bahrain")
								|| sCountryResidence.equalsIgnoreCase("Oman")
								|| sCountryResidence.equalsIgnoreCase("Kuwait") || sCountryResidence
									.equalsIgnoreCase("Qatar"))) {
					GCC_COUNTRY = "Yes";
				} else {
					GCC_COUNTRY = "No";
				}
				if (outQuery1.get(cust_count).get(3) != null
						&& outQuery1.get(cust_count).get(3)
								.equalsIgnoreCase("Irena")) {
					SPECIAL_CATAGORY = "Yes";
				} else {
					SPECIAL_CATAGORY = "No";
				}
				if ((outQuery1.get(cust_count).get(5) != null)
						&& outQuery1.get(cust_count).get(5)
								.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
					NATIONALITY_TYPE = "UAE";
				} else {
					NATIONALITY_TYPE = "Non UAE";
				}
				if ((outQuery1.get(cust_count).get(9) != null)
						&& outQuery1.get(cust_count).get(9)
								.equalsIgnoreCase("ADCB")) {
					STAFF_FLAG = "Yes";
				} else {
					STAFF_FLAG = "No";
				}
				if (RES_STATUS.equalsIgnoreCase("Yes")) {
					sQuery1 = "select distinct VALID_ENTRY_PERMIT,BANK_STATEMENT_NONUAE,ADCB_LETTER,"
							+ "BANK_CERTIFICATE,ESTATEMENT,SAL_CERTIFICATE,ATT_SAL_CERTIFICATE,PAYSLIP,"
							+ "OFFER_LETTER,MINI_STMT,BANK_STATEMENT_UAE,EMP_CONTRACT,UPGRADE_PROOF,"
							+ "SAL_TRNSFR_LTR,UTILITY_BILL,TENANCY_CONTRACT,TRADE_LICENSE,MARR_CERTI,EMP_CERTI,"
							+ "FAMILY_BOOK,LABOUR_CARD,PASSPORT,VISA,SPL_LABR_CARD,EIDA_CARD,STATELESS_CARD,"
							+ "GOVT_ID,EMP_LTR_GOVT from usr_0_doc_req_rule where REQUEST_TYPE='"
							+ sReqType
							+ "' AND "
							+ "BANKING_RELATIONSHIP = '"
							+ sBankRelation
							+ "' AND GCC_COUNTRY='"
							+ GCC_COUNTRY
							+ "' AND "
							+ "RESIDENCY_STATUS='"
							+ RES_STATUS
							+ "' AND NATIONALITY_TYPE='"
							+ NATIONALITY_TYPE
							+ "' AND "
							+ "(VISA_STATUS='"
							+ VISA_STATUS
							+ "' or VISA_STATUS =' ') AND EMPLOYMENT_TYPE='"
							+ EMP_STATUS
							+ "' AND STAFF_FLAG='"
							+ STAFF_FLAG
							+ "' AND MDSA_ALREADY_STATUS='No' AND"
							+ " EMSA_ALREADY_STATUS='No' AND MONTHLY_SALARY_LESS_THAN=' '";
				} else {
					sQuery1 = "select distinct VALID_ENTRY_PERMIT,BANK_STATEMENT_NONUAE,ADCB_LETTER,"
							+ "BANK_CERTIFICATE,ESTATEMENT,SAL_CERTIFICATE,ATT_SAL_CERTIFICATE,PAYSLIP,"
							+ "OFFER_LETTER,MINI_STMT,BANK_STATEMENT_UAE,EMP_CONTRACT,UPGRADE_PROOF,"
							+ "SAL_TRNSFR_LTR,UTILITY_BILL,TENANCY_CONTRACT,TRADE_LICENSE,MARR_CERTI,EMP_CERTI,"
							+ "FAMILY_BOOK,LABOUR_CARD,PASSPORT,VISA,SPL_LABR_CARD,EIDA_CARD,STATELESS_CARD,"
							+ "GOVT_ID,EMP_LTR_GOVT from usr_0_doc_req_rule where REQUEST_TYPE='"
							+ sReqType
							+ "' AND "
							+ "BANKING_RELATIONSHIP = '"
							+ sBankRelation
							+ "' AND GCC_COUNTRY='"
							+ GCC_COUNTRY
							+ "' AND "
							+ "RESIDENCY_STATUS='"
							+ RES_STATUS
							+ "' AND NATIONALITY_TYPE='"
							+ NATIONALITY_TYPE
							+ "' AND "
							+ "(VISA_STATUS='"
							+ VISA_STATUS
							+ "' or VISA_STATUS =' ') AND SPECIAL_CATEGORY_TYPE='"
							+ SPECIAL_CATAGORY
							+ "' AND EMPLOYMENT_TYPE='"
							+ EMP_STATUS
							+ "' AND STAFF_FLAG='"
							+ STAFF_FLAG
							+ "' AND MDSA_ALREADY_STATUS='No' AND EMSA_ALREADY_STATUS='No' AND "
							+ "MONTHLY_SALARY_LESS_THAN=' '";
				}
				outQuery1 = formObject.getDataFromDB(sQuery1);
				logInfo("LoadRequiredDocument",
						"outQuery1 VALID_ENTRY_PERMIT : " + outQuery1);
				String validEntryPermit = "";
				String bankStatmntnonUae = "";
				String adcbLetter = "";
				String bankCerti = "";
				String estatement = "";
				String salCerti = "";
				String attSalCerti = "";
				String paySlip = "";
				String offerLetter = "";
				String mini_stmnt = "";
				String bankStmntUae = "";
				String empContract = "";
				String upgradeProof = "";
				String salTranLetter = "";
				String utilityBill = "";
				String tenancyContract = "";
				String tradeLicense = "";
				String marrCerti = "";
				String empCerti = "";
				String famBook = "";
				String labourCard = "";
				String splLabourCard = "";
				String eidaCard = "";
				String statelessCard = "";
				String govtID = "";
				String empGovLettr = "";
				String passport = "";
				String visa = "";
				if (outQuery1.size() > 0) {
					for (int a = 0; a < outQuery1.size(); a++) {
						validEntryPermit = outQuery1.get(a).get(0);
						bankStatmntnonUae = outQuery1.get(a).get(1);
						adcbLetter = outQuery1.get(a).get(2);
						bankCerti = outQuery1.get(a).get(3);
						estatement = outQuery1.get(a).get(4);
						salCerti = outQuery1.get(a).get(5);
						attSalCerti = outQuery1.get(a).get(6);
						paySlip = outQuery1.get(a).get(7);
						offerLetter = outQuery1.get(a).get(8);
						mini_stmnt = outQuery1.get(a).get(9);
						bankStmntUae = outQuery1.get(a).get(10);
						empContract = outQuery1.get(a).get(11);
						upgradeProof = outQuery1.get(a).get(12);
						salTranLetter = outQuery1.get(a).get(13);
						utilityBill = outQuery1.get(a).get(14);
						tenancyContract = outQuery1.get(a).get(15);
						tradeLicense = outQuery1.get(a).get(16);
						marrCerti = outQuery1.get(a).get(17);
						empCerti = outQuery1.get(a).get(18);
						famBook = outQuery1.get(a).get(19);
						labourCard = outQuery1.get(a).get(20);
						passport = outQuery1.get(a).get(21);
						visa = outQuery1.get(a).get(22);
						splLabourCard = outQuery1.get(a).get(23);
						eidaCard = outQuery1.get(a).get(24);
						statelessCard = outQuery1.get(a).get(25);
						govtID = outQuery1.get(a).get(26);
						empGovLettr = outQuery1.get(a).get(27);
					}
				}
				List<List<String>> sOutput = formObject
						.getDataFromDB("SELECT VALUE FROM USR_0_DEFAULTVALUE_FCR WHERE NAME ='EDMSSYSTEMAVAIL'");
				logInfo("LoadRequiredDocument", "sOutput : " + sOutput);
				String sEDMSAvail = sOutput.get(0).get(0);
				showList.append("<ListItems>");
				if (!acc_details.equalsIgnoreCase("Minor")) {
					if (!validEntryPermit.equalsIgnoreCase("No")
							&& !validEntryPermit.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"VALID_ENTRY_PERMIT", "PERMIT", CUST_ID,
								sDocGroup.get("VALID ENTRY PERMIT"),
								validEntryPermit, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!bankStatmntnonUae.equalsIgnoreCase("No")
							&& !bankStatmntnonUae.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"BANK_STATEMENT_NONUAE", "NONUAE", CUST_ID,
								sDocGroup.get("BANK_STATEMENT_NONUAE"),
								bankStatmntnonUae, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!adcbLetter.equalsIgnoreCase("No")
							&& !adcbLetter.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "ADCB_LETTER",
								"ADCB%LETTER", CUST_ID,
								sDocGroup.get("ADCB_LETTER"), adcbLetter,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!bankCerti.equalsIgnoreCase("No")
							&& !bankCerti.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"BANK_CERTIFICATE", "BANK%CERTIFICATE",
								CUST_ID, sDocGroup.get("BANK _CERTIFICATE"),
								bankCerti, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!estatement.equalsIgnoreCase("No")
							&& !estatement.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "ESTATEMENT",
								"ESTATEMENT", CUST_ID,
								sDocGroup.get("ESTATEMENT"), estatement,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!salCerti.equalsIgnoreCase("No")
							&& !salCerti.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"SAL_CERTIFICATE", "SAL%CERTIFICATE", CUST_ID,
								sDocGroup.get("SAL_CERTIFICATE"), salCerti,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!attSalCerti.equalsIgnoreCase("No")
							&& !attSalCerti.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"ATT_SAL_CERTIFICATE", "ATT%SAL%CERTIFICATE",
								CUST_ID, sDocGroup.get("ATT_SAL_CERTIFICATE"),
								attSalCerti, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!paySlip.equalsIgnoreCase("No")
							&& !paySlip.equalsIgnoreCase("")) {
						jsonArray
								.add(getDocumentList(FULL_NAME, "PAYSLIP",
										"PAYSLIP", CUST_ID,
										sDocGroup.get("PAYSLIP"), paySlip,
										acc_details, sEDMSAvail, sBankRelation));
					}
					if (!offerLetter.equalsIgnoreCase("No")
							&& !offerLetter.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"OFFER_LETTER", "OFFER%LETTER", CUST_ID,
								sDocGroup.get("OFFER_LETTER"), offerLetter,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!mini_stmnt.equalsIgnoreCase("No")
							&& !mini_stmnt.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "MINI_STMT",
								"MINI%STMT", CUST_ID,
								sDocGroup.get("MINI_STMT"), mini_stmnt,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!bankStmntUae.equalsIgnoreCase("No")
							&& !bankStmntUae.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"BANK_STATEMENT_UAE", "BANK%STATEMENT%UAE",
								CUST_ID, sDocGroup.get("BANK_STATEMENT_UAE"),
								bankStmntUae, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!empContract.equalsIgnoreCase("No")
							&& !empContract.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"EMP_CONTRACT", "EMP%CONTRACT", CUST_ID,
								sDocGroup.get("EMP_CONTRACT"), empContract,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!upgradeProof.equalsIgnoreCase("No")
							&& !upgradeProof.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"UPGRADE_PROOF", "UPGRADE%PROOF", CUST_ID,
								sDocGroup.get("UPGRADE_PROOF"), upgradeProof,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!salTranLetter.equalsIgnoreCase("No")
							&& !salTranLetter.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"SAL_TRNSFR_LTR", "SAL%TRNSFR%LTR", CUST_ID,
								sDocGroup.get("SAL_TRNSFR_LTR"), salTranLetter,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!utilityBill.equalsIgnoreCase("No")
							&& !utilityBill.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"UTILITY_BILL", "UTILITY%BILL", CUST_ID,
								sDocGroup.get("UTILITY_BILL"), utilityBill,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!tenancyContract.equalsIgnoreCase("No")
							&& !tenancyContract.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"TENANCY_CONTRACT", "TENANCY%CONTRACT",
								CUST_ID, sDocGroup.get("TENANCY_CONTRACT"),
								tenancyContract, acc_details, sEDMSAvail,
								sBankRelation));
					}
					if (!tradeLicense.equalsIgnoreCase("No")
							&& !tradeLicense.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"TRADE_LICENSE", "TRADE%LICENSE", CUST_ID,
								sDocGroup.get("TRADE_LICENSE"), tradeLicense,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!marrCerti.equalsIgnoreCase("No")
							&& !marrCerti.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "MARR_CERTI",
								"MARR%CERTI", CUST_ID,
								sDocGroup.get("MARR_CERTI"), marrCerti,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!empCerti.equalsIgnoreCase("No")
							&& !empCerti.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "EMP_CERTI",
								"EMP%CERTI", CUST_ID,
								sDocGroup.get("EMP_CERTI"), empCerti,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!famBook.equalsIgnoreCase("No")
							&& !famBook.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "FAMILY_BOOK",
								"FAMILY%BOOK", CUST_ID,
								sDocGroup.get("FAMILY_BOOK"), famBook,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!labourCard.equalsIgnoreCase("No")
							&& !labourCard.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "LABOUR_CARD",
								"LABOUR%CARD", CUST_ID,
								sDocGroup.get("LABOUR_CARD"), labourCard,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!splLabourCard.equalsIgnoreCase("No")
							&& !splLabourCard.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"SPL_LABR_CARD", "SPL%LABR%CARD", CUST_ID,
								sDocGroup.get("SPL_LABR_CARD"), splLabourCard,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!eidaCard.equalsIgnoreCase("No")
							&& !eidaCard.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME, "EIDA_CARD",
								"EIDA%CARD", CUST_ID,
								sDocGroup.get("EIDA_CARD"), eidaCard,
								acc_details, sEDMSAvail, sBankRelation));
					}

					if (!statelessCard.equalsIgnoreCase("No")
							&& !statelessCard.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"STATELESS_CARD", "STATELESS%CARD", CUST_ID,
								sDocGroup.get("STATELESS_CARD"), statelessCard,
								acc_details, sEDMSAvail, sBankRelation));
					}
					if (!govtID.equalsIgnoreCase("No")
							&& !govtID.equalsIgnoreCase("")) {
						jsonArray
								.add(getDocumentList(FULL_NAME, "GOVT_ID",
										"GOVT%ID", CUST_ID,
										sDocGroup.get("GOVT_ID"), govtID,
										acc_details, sEDMSAvail, sBankRelation));
					}
					if (!empGovLettr.equalsIgnoreCase("No")
							&& !empGovLettr.equalsIgnoreCase("")) {
						jsonArray.add(getDocumentList(FULL_NAME,
								"EMP_LTR_GOVT", "EMP%LTR%GOVT", CUST_ID,
								sDocGroup.get("EMP_LTR_GOVT"), empGovLettr,
								acc_details, sEDMSAvail, sBankRelation));
					}
				}
				if (!passport.equalsIgnoreCase("No")
						&& !passport.equalsIgnoreCase("")) {
					jsonArray.add(getDocumentList(FULL_NAME, "PASSPORT",
							"PASSPORT", CUST_ID, sDocGroup.get("PASSPORT"),
							passport, acc_details, sEDMSAvail, sBankRelation));
				}
				if (!visa.equalsIgnoreCase("No") && !visa.equalsIgnoreCase("")) {
					jsonArray.add(getDocumentList(FULL_NAME, "VISA", "VISA",
							CUST_ID, sDocGroup.get("VISA"), visa, acc_details,
							sEDMSAvail, sBankRelation));
				}
				// showList.append("</ListItems>");
				iNo = iNo + 1;
			}
			logInfo("LoadRequiredDocument",
					"jsonArray : " + jsonArray.toString());
			formObject.addDataToGrid(sGridName, jsonArray);
			SNO = 1;
		} catch (Exception e) {
			logError("Exception in LoadRequiredDocument", e);
		} finally {
			sDocGroup.clear();
		}
	}

	public void calculateAppRisk() {
		String sQuery = "SELECT CURRENT_RISK_BUSSINESS FROM USR_0_RISK_ASSESSMENT_DATA WHERE WI_NAME='"
				+ sWorkitemId + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("APP Assessment", "Risk========" + sQuery);
		logInfo("APP Assessment", "Risk Output========" + sOutput);
		int iTotalRetrived = sOutput.size();
		String riskArray = "";
		for (int i = 0; i < sOutput.size(); i++) {
			riskArray = sOutput.get(i).get(0) + "," + riskArray;
		}
		String[] sRiskArray;
		String sFinalRisk = "";
		if (iTotalRetrived > 0 && !sOutput.get(0).get(0).equalsIgnoreCase("")) {
			sRiskArray = riskArray.split(",");
			logInfo("CalculateAppRisk", "Risk 1========" + sRiskArray);
			for (int iLoop = 0; iLoop < iTotalRetrived; iLoop++) {
				if (sRiskArray[iLoop].equalsIgnoreCase("Unacceptable Risk")) {
					logInfo("APP AssessCalculateAppRiskment", "Risk 2========"
							+ sRiskArray[iLoop]);
					sFinalRisk = "Unacceptable Risk";
					break;
				} else if (sRiskArray[iLoop].equalsIgnoreCase("PEP")) {
					logInfo("APP CalculateAppRisk", "Risk 3========"
							+ sRiskArray[iLoop]);
					sFinalRisk = "PEP";
				} else if (sRiskArray[iLoop].equalsIgnoreCase("Increased Risk")) {
					logInfo("APP CalculateAppRisk", "Risk 4========"
							+ sRiskArray[iLoop]);
					if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")) {
						logInfo("APP CalculateAppRisk", "Risk 5========"
								+ sRiskArray[iLoop]);
						sFinalRisk = "Increased Risk";
					}
				} else if (sRiskArray[iLoop].equalsIgnoreCase("Neutral")) {
					logInfo("APP CalculateAppRisk", "Risk 6========"
							+ sRiskArray[iLoop]);
					if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")
							&& !sFinalRisk.equalsIgnoreCase("Increased Risk")) {
						logInfo("APP CalculateAppRisk", "Risk 7========"
								+ sRiskArray[iLoop]);
						sFinalRisk = "Neutral Risk";
					}
				} else if (sRiskArray[iLoop].equalsIgnoreCase("UAE-PEP")) {
					logInfo("APP CalculateAppRisk", "Risk 8========"
							+ sRiskArray[iLoop]);
					sFinalRisk = "UAE-PEP";
				} else if (sRiskArray[iLoop].equalsIgnoreCase("Non UAE-PEP")) {
					logInfo("APP CalculateAppRisk", "Risk 9========"
							+ sRiskArray[iLoop]);
					sFinalRisk = "Non UAE-PEP";
				} else {
					sFinalRisk = sRiskArray[iLoop]; // upgrade changes
				}
			}
		}
		logInfo("APP CalculateAppRisk", "Risk final========" + sFinalRisk);
		formObject.setValue(FINAL_RISK_VAL, sFinalRisk);
	}

	public int validateIntegrationCalls() {
		int iRows = getGridCount(ACC_RELATION);
		for (int i = 0; i < iRows; i++) {
			if (formObject.getTableCellValue(ACC_RELATION, i, 2)
					.equalsIgnoreCase("")) {
				sendMessageValuesList(
						"",
						"Customer ID is not created for all customers. Please close the workitem and open again");
				return 0;
			}
		}
		iRows = getGridCount(PRODUCT_QUEUE);
		for (int j = 0; j < iRows; j++) {
			if (formObject.getTableCellValue(PRODUCT_QUEUE, j, 4)
					.equalsIgnoreCase("")) {
				sendMessageValuesList(
						"",
						"Account is not created for all product codes. Please close the workitem and open again");
				return 0;
			}
		}
		return 1;
	}

	public void updateForAdvance_search(String sWorkitemId) {
		try {
			String sCustNo = getPrimaryCustomerSNO();
			String sQuery11 = "SELECT FINAL_FULL_NAME FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUST_SNO='" + sCustNo + "'";
			List<List<String>> output = formObject.getDataFromDB(sQuery11);
			String sCustName = output.get(0).get(0);
			String sValue = "'" + sCustName + "'";
			// String upQuery =
			// "UPDATE EXT_AO SET PRI_CUST_NAME ='"+sValue+"' WHERE WI_NAME = '"+sWorkitemId+
			// "'";//Commented for invalid column on 27042023(Performanceissue)
			// by Ameena
			String upQuery = "UPDATE EXT_AO SET PRI_CUST_NAME ='" + sCustName
					+ "' WHERE WI_NAME = '" + sWorkitemId + "'";
			formObject.saveDataInDB(upQuery);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logError("Exception in updateForAdvance_search", e);
		}
	}

	public void loadApplicationAssessmentDataCPD() {
		logInfo("LoadApplicationAssessmentDataCPD", "Inside");
		int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
		String sCustID = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust - 1, 2);
		String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust - 1, 7);
		logInfo("LoadApplicationAssessmentDataCPD", "sCustID: " + sCustID
				+ ", sAccRelation: " + sAccRelation);
		String sQuery = "SELECT A.CID,B.CUST_NAME,A.ACC_RELATION,B.CURRENT_RISK_SYSTEM,B.CURRENT_RISK_BUSSINESS FROM "
				+ "ACC_RELATION_REPEATER A,USR_0_RISK_ASSESSMENT_DATA_CPD B WHERE A.WI_NAME=B.WI_NAME AND A.SNO=B.SNO "
				+ "AND A.WI_NAME = '"
				+ sWorkitemId
				+ "' ORDER BY TO_NUMBER(A.SNO)";
		logInfo("LoadApplicationAssessment", "sQuery : " + sQuery);
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		logInfo("LoadApplicationAssessment", "recordList: " + recordList);
		loadListView(
				recordList,
				"CID,CUSTOMER_NAME,ACCOUNT_RELATIONSHIP,SYS_DEFINED_RISK,BANK_DEFINED_RISK",
				SEC_RISK_ASSESS_CPD_LVW);
		sQuery = "SELECT B.CUST_ID,B.CUST_FULL_NAME,B.final_eligibility_cpd,A.ACC_RELATION, B.final_eligibility_cpd "
				+ "FROM ACC_RELATION_REPEATER A,USR_0_CUST_TXN B WHERE A.WI_NAME ='"
				+ sWorkitemId
				+ "' and "
				+ "A.WI_NAME=B.WI_NAME AND A.SNO=B.CUST_SNO ORDER BY TO_NUMBER(A.SNO)";
		logInfo("LoadApplicationAssessmentDataCPD", "sQuery : " + sQuery);
		List<List<String>> recordList1 = formObject.getDataFromDB(sQuery);
		logInfo("LoadApplicationAssessment", "recordList1: " + recordList1);
		loadListView(
				recordList1,
				"CUST_ID,CUST_FULL_NAME,TRSD_ASSESSMENT,ACC_RELATIONSHIP,ELIGIBILITY",
				ELIG_LVW_CPD);
		if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				&& sAccRelation.equalsIgnoreCase("Existing")) {
			if (getGridCount(FAC_EXST_LVW_CPD) == 0) {
				loadExistingDebitCard("USR_0_DEBITCARD_EXISTING_CPD",
						FAC_EXST_LVW_CPD, sCustID);
			}
		}
		if (sAccRelation.equalsIgnoreCase("Existing")) {
			sQuery = "SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM USR_0_PRODUCT_EXISTING WHERE "
					+ "WI_NAME ='"
					+ sWorkitemId
					+ "'  AND CUSTOMER_ID='"
					+ sCustID + "'";
			logInfo("LoadApplicationAssessmentDataCPD", "sQuery : " + sQuery);
			List<List<String>> recorsList = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessment", "recordList1: " + recorsList);
			loadListView(recorsList, "Product_Code,Product_Name,Currency",
					PROD_SEC_EXIST_CPD_LVW);
			sQuery = "SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE "
					+ "FROM USR_0_DEBITCARD_EXISTING_CPD WHERE WI_NAME = '"
					+ sWorkitemId + "'  AND CUST_ID='" + sCustID + "'";
			logInfo("LoadApplicationAssessmentDataCPD", "sQuery : " + sQuery);
			List<List<String>> recorsList1 = formObject.getDataFromDB(sQuery);
			loadListView(
					recorsList1,
					"CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE",
					FAC_EXST_LVW_CPD);
			sQuery = "SELECT PRODUCT_NAME,CURRENCY FROM USR_0_BANQUADETAILS WHERE "
					+ "WI_NAME ='"
					+ sWorkitemId
					+ "' AND CUSTOMER_ID='"
					+ sCustID + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessment", "sOutput: " + sOutput);
			logInfo("LoadApplicationAssessmentDataCPD", "sOutput-----"
					+ sOutput);
			String[] sAllProducts;
			String[] sEachProducts;
			int iTotalRetrived = sOutput.size();
			try {
				if (iTotalRetrived != 0) {
					// sAllProducts = getTagValue(sOutput,"Record").split(";");
					for (int i = 0; i < iTotalRetrived; i++) {
						// sEachProducts = sAllProducts[i].split(",");
						// sOutput="<ListItems><ListItem><SubItem></SubItem><SubItem>"+sEachProducts[0]+"</SubItem><SubItem>"+sEachProducts[1]+"</SubItem></ListItem></ListItems>";
						// formObject.NGAddListItem(PROD_CRO_LVW,sOutput);
						String values = "" + "##" + sOutput.get(i).get(0)
								+ "##" + sOutput.get(i).get(1);
						LoadListViewWithHardCodeValues(PROD_CRO_LVW,
								"PRODUCT_CODE,PRODUCT_NAME,CURRENCY", values);
					}
				}
			} catch (Exception e) {
				logError("Exception in LoadApplicationAssessmentDataCPD", e);
			}
		}
	}

	public boolean generateInstLetter(String wi_name) {
		String count = "-1";
		logInfo("generateInstLetter", "Into generateInstLetter  :");
		String queryforwl = "select count(prod_code) as COUNT_wi from usr_0_product_selected "
				+ "where prod_code not in (select prod_code from"
				+ " USR_0_BLOCK_PROD_MAST) and wi_name  ='" + wi_name + "'";
		logInfo("generateInstLetter", "query for unblocked product count  :"
				+ queryforwl);
		List<List<String>> outputwl = formObject.getDataFromDB(queryforwl);
		logInfo("generateInstLetter", "output for unblocked product count  :"
				+ outputwl);
		if (outputwl != null && outputwl.size() > 0) {
			count = outputwl.get(0).get(0);
		}
		if (count.equalsIgnoreCase("0")) {
			logInfo("", "No product that is not blocked");
			String sColumnWL = "all_prod_blocked";
			String sValuesWL = "'Y'";
			String sWhereWL = "wi_name='" + wi_name + "'";

			int sOutputWL = updateDataInDB(sExtTable, sColumnWL, sValuesWL,
					sWhereWL);
			logInfo("",
					"sOutput templates wont be generated all products blocked"
							+ sOutputWL);
			return false;// fail
		} else {
			logInfo("", "AT accrelation CALLING FOR Instant welcome Letter  :");
			String sProcName2 = "SP_TEMPLATEGENERATION_INSWL";
			List<String> paramlist = new ArrayList<String>();
			paramlist.add("Text :" + sWorkitemId);
			logInfo("", "44444444444" + sWorkitemId);
			List sOutput1 = formObject.getDataFromStoredProcedure(sProcName2,
					paramlist);
			logInfo("", "CALLING FOR Instant welcome Letter :" + sOutput1);
			String sColumnWL1 = "all_prod_blocked";
			String sValuesWL1 = "'N'";
			String sWhereWL1 = "wi_name='" + wi_name + "'";

			int sOutputWL1 = updateDataInDB(sExtTable, sColumnWL1, sValuesWL1,
					sWhereWL1);
			logInfo("", "sOutput " + sOutputWL1);
			String tmpGenOutputXML = executeAPTemplate("Instant_Welcome_Letter");
			if (!tmpGenOutputXML.isEmpty()
					&& !getTagValues(tmpGenOutputXML, "Status").equals("0")) {
				String userDescription = getTagValues(tmpGenOutputXML,
						"Description");
				sendMessageValuesList("", userDescription);
				return true;
			}
			String query = "SELECT COUNT(A.NAME) AS COUNT FROM PDBDOCUMENT A, PDBDOCUMENTCONTENT B, PDBFOLDER C "
					+ "WHERE A.DOCUMENTINDEX=B.DOCUMENTINDEX AND B.PARENTFOLDERINDEX=C.FOLDERINDEX AND "
					+ "A.NAME IN ('Instant_Welcome_Letter') AND C.NAME='"
					+ wi_name + "'";
			logInfo("", "query : " + query);
			List<List<String>> outputXML = formObject.getDataFromDB(query);
			logInfo("", "outputXML : " + outputXML);
			if (outputXML != null && outputXML.size() > 0) {
				count = outputXML.get(0).get(0);
				logInfo("", "count : " + count);
			}
			if (!count.equals("1")) {
				sendMessageValuesList(
						"",
						"Some error occurred while generating Templates. Please try again later or contact app support team.");
				return true;
			}
			instantrequestsent = 1;
		}
		return true;

	}

	public String executeAPTemplate(String category) {
		String sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>"
				+ "<Calltype>TemplateGeneration</Calltype>" + "<Data>"
				+ "<ProcessName>AO</ProcessName>" + "<WorkitemName>"
				+ sWorkitemId + "</WorkitemName>" + "<Category>" + category
				+ "</Category>" + "</Data>" + "<EngineName>" + sEngineName
				+ "</EngineName>" + "<SessionId>" + sSessionId + "</SessionId>";
		logInfo("fetchEDMSDocs ExecuteWebservice_FCRValues-----sInputXML : ",
				sInputXML);
		String sOutput = socket.connectToSocket(sInputXML);
		logInfo("fetchEDMSDocs ExecuteWebservice_FCRValues-----sOutput : ",
				sOutput);
		return sOutput;
	}

	public boolean submitValidationForWorkItem(String data) {
		logInfo("submitValidationForWorkItem", "INSIDE");
		boolean validate = false; // its a global variable , remove it // doubt
		int sCurrTabIndex = 0; // its a global variable // no need of this var
								// because Tabclick func is created now,remove
								// it // doubt
		try {
			// createHistory();
			// createAllHistory();
			// updateProfitCentre();
			boolean result = false;
			result = MandatoryiKYC_CPD();
			if (!result) {
				return false;
			}
			if (validate == false
					&& !formObject.getValue(IDS_REF_BY_CUST).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList("",
						"Please Validate Reffered by customer ID.");
				return false;
			}
			if (!formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Return to Originator")) {
				String sQuery = "";
				List<List<String>> sOutput = null;
				if (formObject.getValue(CRO_DEC).toString()
						.equalsIgnoreCase("Send To Compliance")) {
					result = validateCustomerName();
					if (!result) {
						formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
						return false;
					}
				} else if (formObject.getValue(CRO_DEC).toString()
						.equalsIgnoreCase("Approve")) {
					if (formObject.getValue(IS_ETIHAD).toString()
							.equalsIgnoreCase("1")) {
						String updatequery = "update '"
								+ sExtTable
								+ "' set ETIHAD_UPDATE_REQ = 'Yes' where WI_NAME='"
								+ sWorkitemId + "'";
						int sout = formObject.saveDataInDB(updatequery);
						logInfo(" updatequery ", updatequery);
						logInfo(" sout ", sout + "");
					}
					String sQuery1 = "SELECT CASE WHEN (SELECT COUNT(*) FROM ACC_RELATION_REPEATER WHERE WI_NAME='"
							+ sWorkitemId
							+ "' "
							+ "AND SNO IS NOT NULL)=(SELECT COUNT(*) FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND CUST_SNO "
							+ "IS NOT NULL) THEN 'DONE' ELSE 'NOT DONE' END CUST_INFO,CASE WHEN (SELECT COUNT(*) FROM "
							+ "ACC_RELATION_REPEATER WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND SNO IS NOT NULL)=(SELECT COUNT(*) "
							+ "FROM USR_0_CUST_TXN WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND CUST_SNO IS NOT NULL AND FINAL_ELIGIBILITY_CPD"
							+ " IS NOT NULL) THEN 'DONE' ELSE 'NOT DONE' END FINAL_ELIGIBILITY,CASE WHEN (SELECT COUNT(*) FROM "
							+ "ACC_RELATION_REPEATER WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND SNO IS NOT NULL)=(SELECT COUNT(*) FROM "
							+ "USR_0_RISK_ASSESSMENT_DATA_CPD WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND SNO IS NOT NULL)"
							+ " THEN 'DONE' ELSE 'NOT DONE' END SCREENING FROM DUAL";
					List<List<String>> sOutput1 = formObject
							.getDataFromDB(sQuery1);
					String custInfo = "";
					String finalElig = "";
					String custScreen = "";
					if (sOutput1 != null && sOutput1.size() > 0) {
						custInfo = sOutput1.get(0).get(0);
						finalElig = sOutput1.get(0).get(1);
						custScreen = sOutput1.get(0).get(2);
					}
					try {
						sQuery1 = "SELECT COUNT(1) AS DEDUPE_DONE FROM USR_0_CUST_TXN WHERE WI_NAME ='"
								+ sWorkitemId
								+ "' AND CUST_SNO IS NOT NULL AND IS_DEDUPE_CLICK_CPD is null";
						sOutput1 = formObject.getDataFromDB(sQuery1);
						String dedupeDone = (sOutput1 != null && sOutput1
								.size() > 0) ? sOutput1.get(0).get(0)
								.toString() : "";
						if (Integer.parseInt(dedupeDone) > 0) {
							sendMessageValuesList(BTN_DEDUPE_SEARCH,
									"Please Do Dedupe Search For All The Customers.");
							return false;
						}
					} catch (Exception e) {
						logError("Exception in submitValidationForWorkItem ", e);
					}
					result = validateCustomerName();
					if (!result) {
						formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
						return false;
					}
					String sRiskCPD = formObject.getValue(FINAL_RISK_VAL_CPD)
							.toString();
					if (sRiskCPD.equalsIgnoreCase("Unacceptable Risk")) {
						sendMessageValuesList("",
								"You Can't Approve In Case Of Unacceptable Risk.");
						formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
						return false;
					}
					/*
					 * if(checkMandatoryDoc(data)!= true) {
					 * formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE); return
					 * false; }
					 */
				}
				int iSelectedRow = Integer.parseInt(formObject.getValue(
						SELECTED_ROW_INDEX).toString());
				int iRows = getGridCount(PRODUCT_QUEUE);
				boolean isEtihad = false;
				String sProdCode = "";
				if (!formObject.getValue(REQUEST_TYPE).toString()
						.equalsIgnoreCase("Category Change Only")) {
					for (int i = 0; i < iRows; i++) {
						sProdCode = formObject.getTableCellValue(PRODUCT_QUEUE,
								i, 1);
						sQuery = "SELECT SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE ='"
								+ sProdCode + "'";
						logInfo("submitValidationForWorkItem", "sQuery: "
								+ sQuery);
						sOutput = formObject.getDataFromDB(sQuery);
						logInfo("submitValidationForWorkItem", "sOutput: "
								+ sOutput);
						if (sOutput != null && sOutput.size() > 0) {
							if (!sOutput.get(0).get(0).equalsIgnoreCase("")) {
								if (sOutput.get(0).get(0)
										.equalsIgnoreCase("Etihad")) {
									isEtihad = true;
									break;
								}
							}
						}
					}
					logInfo("submitValidationForWorkItem", "isEtihad: "
							+ isEtihad);
					if (isEtihad) {
						if (formObject.getValue("EXISTING_ETIHAD_CUST")
								.toString().equalsIgnoreCase("")) {
							sendMessageValuesList("",
									"Please Select Etihad Status.");
							return false;
						} else if (formObject.getValue("EXISTING_ETIHAD_CUST")
								.toString().equalsIgnoreCase("Yes")) {
							if (formObject.getValue("ETIHAD_NO").toString()
									.equalsIgnoreCase("")) {
								sendMessageValuesList("",
										"Please fill Etihad Number.");
								return false;
							} else if (formObject.getValue("IS_ETIHAD")
									.toString().equalsIgnoreCase("0")) {
								sendMessageValuesList("",
										"Please validate Etihad Number.");
								return false;
							}
						}
					}
				}
				result = validateDebitDetails();
				if (!result) {
					formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
					return false;
				}
				try {
					iRows = getGridCount(QUEUE_DC); // Frame71 is queue_dc
					for (int iDC = 0; iDC < iRows; iDC++) {
						formObject.setTableCellValue(QUEUE_DC, iDC, 8,
								Integer.toString(iDC + 1)); // QUEUE_DC.CID == 4
															// confirm it doubt
					}
				} catch (Exception e) {
					logError("Exception in submitValidationForWorkItem ", e);
				}
			}
			if (formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Approve")) {
				if ((!formObject.getValue("REQUEST_TYPE").toString()
						.equalsIgnoreCase("Category Change Only"))
						&& (formObject.getTableCellValue(PRODUCT_QUEUE, 0, 3)
								.equalsIgnoreCase(""))) {
					sendMessageValuesList(PRODUCT_QUEUE,
							"Please select currency.");
					return false;
				}/*
				 * else { sendMessageValuesList(PRODUCT_QUEUE,
				 * "Please check if currency selected is correct"); }
				 */
			}
			// submitWorkItemForProductQueueRecursively(eventType,data);
			// createHistory();
			// createAllHistory();
			logInfo("submitValidationForWorkItem", "END");
		} catch (Exception e) {
			logError("submitValidationForWorkItem", e);
		}
		return true;
	}

	public boolean submitCPDMakerValidations(String data) {
		logInfo("submitCPDMakerValidations", "data: " + data);
		try {
			int reply = 0;
			if (formObject.getValue(CRO_DEC).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CRO_DEC, CA0124);
				// formObject.setEnable("COMMAND24",true);
				formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
				return false;
			}
			if (!formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Approve")) {
				String rejectionReason = formObject.getValue(CRO_REJ_REASON)
						.toString();
				String rejectionRemarks = formObject.getValue(CRO_REMARKS)
						.toString();
				if (rejectionReason.equalsIgnoreCase("")) {
					sendMessageValuesList(CRO_REJ_REASON,
							"Please Select Rejection Reason.");
					formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
					return false;
				}
				if (rejectionRemarks.equalsIgnoreCase("")) {
					sendMessageValuesList(CRO_REMARKS, "Please Fill Remarks.");
					formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
					return false;
				}
			}
			if (formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Return to Originator")
					|| formObject.getValue(CRO_DEC).toString()
							.equalsIgnoreCase("Return")
					|| formObject.getValue(CRO_DEC).toString()
							.equalsIgnoreCase("Reject")) {
				if (formObject.getValue(CRO_DEC).toString()
						.equalsIgnoreCase("Return to Originator")
						|| formObject.getValue(CRO_DEC).toString()
								.equalsIgnoreCase("Return")) {
					boolean result = false;
					result = validateDebitDetails();
					if (!result) {
						formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
						return false;
					}
					result = validateCustomerName();
					if (!result) {
						formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
						return false;
					}
				}
				return true;
			}
		} catch (Exception e) {
			logError("Exception in submitCPDMakerValidations ", e);
		} finally {
			logInfo("Outside submitCPDMakerValidations ", "  ");
		}
		return true;
	}

	public boolean submitWorkItem(String eventType, String data) {
		logInfo("submitWorkItem", "INSIDE");
		try {
			createHistory();
			createAllHistory();
			updateProfitCentre();
			try {
				String sQuery = "SELECT COUNT(A.WI_NAME) IS_MOB_CHANGE FROM USR_0_CUST_TXN A, ACC_RELATION_REPEATER B"
						+ " WHERE A.WI_NAME='"
						+ sWorkitemId
						+ "' AND A.WI_NAME=B.WI_NAME  AND A.CUST_SNO =B.SNO AND"
						+ " B.BANK_RELATION='Existing' AND A.final_mobile_no <> nvl(A.fcr_mobile_no,0) and"
						+ " a.final_mobile_no <> nvl(a.AFTER_CONT_CNTR_MOB_NO,0)";
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				String isMobChange = "0";
				logInfo(" sQuery ", sQuery);
				logInfo(" sOutput ", sOutput.toString());
				logInfo(" sOutput ", String.valueOf(sOutput.size()));
				if (sOutput != null && sOutput.size() > 0) {
					isMobChange = sOutput.get(0).get(0);
					if (Integer.parseInt(isMobChange) > 0) {
						sQuery = "SELECT COUNT(WI_NAME) IS_MOB_CHANGE FROM USR_0_CHANGE_TRACKER WHERE WI_NAME='"
								+ sWorkitemId
								+ "'"
								+ " AND CUST_SNO ='1' AND FIELD_NAME ='MOBILE' "
								+ "AND WORK_STEP in ('CPD Maker','QDE_Cust_Info','DDE_Cust_Info') AND STATUS='Pending'";
						sOutput = formObject.getDataFromDB(sQuery);
						if (sOutput != null && sOutput.size() > 0) {
							if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
								formObject.setValue("MOBILE_CHANGE_FLAG",
										"False");
							} else {
								formObject.setValue("MOBILE_CHANGE_FLAG",
										"True");
							}
						}
					} else {
						formObject.setValue("MOBILE_CHANGE_FLAG", "False");
					}
				}
			} catch (Exception e) {
				logError("Exception in submitWorkItem ", e);
			}
			if (formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Return to Originator")) {
				formObject.setValue("NO_OF_CUST_PROCESSED", "0");
			}
			String sUpdateEtihad = "";
			if (formObject.getValue("IS_ETIHAD").toString()
					.equalsIgnoreCase("1")) {
				sUpdateEtihad = "Yes";
			}
			String sCustNo = getPrimaryCustomerSNO();
			String sQuery2 = "select decode (bank_relation,'New','NTB', bank_relation) as pri_bank_relation from acc_relation_repeater"
					+ " where sno=1 and wi_name='" + sWorkitemId + "' ";
			String sQuery1 = "SELECT CUST_SEG,CUST_ID,CUST_FULL_NAME,FINAL_MOBILE_NO FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "'" + " AND CUST_SNO='" + sCustNo + "'";
			List<List<String>> sOutput1 = formObject.getDataFromDB(sQuery1);
			String sCustSeg = "";
			String sCustID = "";
			String sCustName = "";
			String sMobile = "";
			String decision = formObject.getValue(CRO_DEC).toString();
			logInfo(" sQuery1 ", sQuery1);
			logInfo(" sOutput1 ", sOutput1.toString());
			logInfo(" sOutput1 ", String.valueOf(sOutput1.size()));
			if (sOutput1 != null && sOutput1.size() > 0) {
				sCustSeg = sOutput1.get(0).get(0);
				sCustID = sOutput1.get(0).get(1);
				sCustName = sOutput1.get(0).get(2);
				sMobile = sOutput1.get(0).get(3);
			}
			sOutput1 = formObject.getDataFromDB(sQuery2);
			int sout = 0;
			String pri_bank_rel = (sOutput1 != null && sOutput1.size() > 0) ? sOutput1
					.get(0).get(0).toString()
					: "";
			Date d = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			String sDate = dateFormat.format(d);
			String updatequery = "";
			String sSet = "";
			if (formObject.getValue("IS_ETIHAD").toString()
					.equalsIgnoreCase("1")) {
				sSet = "CPD_MAKER_DEC = '" + decision
						+ "', PRI_CUST_SEGMENT = '" + sCustSeg
						+ "' ,CUST_ID ='" + sCustID + "' ,"
						+ "PRI_CUST_NAME = '" + sCustName
						+ "' ,PRI_CUST_MOB = '" + sMobile
						+ "',WI_COMPLETED_FROM = '" + sActivityName + "',"
						+ "ETIHAD_UPDATE_REQ ='" + sUpdateEtihad
						+ "', pri_bank_relation = '" + pri_bank_rel
						+ "',CPD_MAKER_SUBMIT_DATE= '" + sDate + "'";
				updatequery = "update '" + sExtTable + "' set '" + sSet
						+ "' where WI_NAME='" + sWorkitemId + "'";
				sout = formObject.saveDataInDB(updatequery);
			} else {
				sSet = "CPD_MAKER_DEC = '" + decision
						+ "', PRI_CUST_SEGMENT = '" + sCustSeg
						+ "' ,CUST_ID ='" + sCustID + "' ,"
						+ "PRI_CUST_NAME = '" + sCustName
						+ "' ,PRI_CUST_MOB = '" + sMobile
						+ "',WI_COMPLETED_FROM = '" + sActivityName + "',"
						+ "pri_bank_relation = '" + pri_bank_rel
						+ "',CPD_MAKER_SUBMIT_DATE= '" + sDate + "'";
				updatequery = "update '" + sExtTable + "' set '" + sSet
						+ "' where WI_NAME='" + sWorkitemId + "'";
				sout = formObject.saveDataInDB(updatequery);
			}
			logInfo(" updatequery ", updatequery);
			logInfo(" sout ", sout + "");
			String sProcedure = "SP_TemplateGenerationEmailDt";
			List<String> paramlist = new ArrayList<>();
			paramlist.add(PARAM_TEXT + sWorkitemId);
			// paramlist.add(PARAM_TEXT+sProcessName); //Commented for invalid
			// column on 27042023(Performanceissue) by Ameena
			formObject.getDataFromStoredProcedure(sProcedure, paramlist);
			tempUsrZeroProductSelected();
		} catch (Exception e) {
			logError("Exception in  submitWorkItem ", e);
		} finally {
			logInfo("Outside submitWorkItem ", "  ");
		}
		return true;
	}

	public void onSaveClick() {
		logInfo("onSaveClick", "INSIDE");
		saveKYCInfo();
		saveKYCInfoRetailQDE();
//		saveKycMultiDropDownData();
//		savePreAssessmentDetails();    //shahbaz
		saveComparisonData();
		saveCRSDetails();
		saveIndividualInfo();
		saveIndividualContactInfo();
		// saveDuplicateData();
		saveScreeningDataCPD();
		saveStandingInstrInfo();
		saveStandInstrInfo();
		String currVal = formObject.getValue(ACC_TITLE).toString();
		List<List<String>> output = formObject
				.getDataFromDB("select acc_title from " + sExtTable + " where "
						+ "wi_name='" + sWorkitemId + "'");
		String prevVal = output.get(0).get(0);
		logInfo("onSaveClick", "prevVal: " + prevVal);
		if (!prevVal.equalsIgnoreCase("") && !prevVal.equalsIgnoreCase(currVal)) {
			logInfo("onSaveClick", "inside if for acc_title modification");
			formObject.setValue("IS_ACC_TITLE_UPDATE", TRUE);
		}
	}

	public void loadBlackListDataCPD() { // LoadBlackListData_CPD
		logInfo("loadBlackListDataCPD", "Inside");
		try {
			String sValues = "";
			String resAPInsert = "";
			String sQuery = "";
			int iListViewRows = 0;
			List<List<String>> sOutput = null;
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			formObject.clearCombo(CPD_CHK_INT_BLK_LVW);
			formObject.clearCombo(CPD_HD2_LVW);
			String sName = getFinalDataComparison(CHECKBOX_FULLNAME_FCR,
					CHECKBOX_FULLNAME_EIDA, CHECKBOX_FULLNAME_MANUAL, FCR_NAME,
					EIDA_NAME, MANUAL_NAME).trim().toUpperCase();
			String sDOB = getFinalDataComparison(CHECKBOX_DOB_FCR,
					CHECKBOX_DOB_EIDA, CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB,
					MANUAL_DOB).trim().toUpperCase();
			String sCountry = getFinalDataComparison(CHECKBOX_NATIONALITY_FCR,
					CHECKBOX_NATIONALITY_EIDA, CHECKBOX_NATIONALITY_MANUAL,
					FCR_NATIONALITY, EIDA_NATIONALITY, MANUAL_NATIONALITY)
					.trim();
			sQuery = "SELECT COUNT(WI_NAME) as COUNT_WI FROM USR_0_BLACKLIST_DATA_CPD WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' "
					+ "AND SEARCHED_CUST_NAME='"
					+ sName
					+ "' AND SEARCHED_CUST_DOB='"
					+ sDOB
					+ "' AND SEARCHED_CUST_NATIONALITY='" + sCountry + "'";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo(" sQuery ", sQuery);
			logInfo(" sOutput ", sOutput.toString());
			logInfo(" sOutput ", sOutput.size() + "");
			if (sOutput != null && sOutput.size() > 0) {
				if (sOutput.get(0).get(0).equalsIgnoreCase("0")) {
					String outputXml = callBlacklist();
					outputXml = outputXml.replaceAll("null", "");
					String sMatchRecvd = getTagValues(outputXml, "matchCount"); // discussed
																				// on
																				// call
					String sColumn = "BLACKLIST_TYPE,CUST_ID,CUST_NAME,CUST_TYPE,DOB,"
							+ "EMP_NAME,GENDER,MOBILE_NO,MOTHER_NAME,NATIONALITY,NOTES"
							+ ",PASSPORT_NO,POBOX_NO,REG_DATE,VISA_NO,PHONE_NO,CUST_SNO,WI_NAME,"
							+ "SEARCHED_CUST_NAME,SEARCHED_CUST_DOB,"
							+ "SEARCHED_CUST_NATIONALITY";
					if (!sMatchRecvd.equalsIgnoreCase("")
							&& !sMatchRecvd.equalsIgnoreCase("0")) {
						int iTotalMatch = Integer.parseInt(sMatchRecvd);
						String[] sAllRecord = getTagValue(outputXml, "Records")
								.split(";");
						String[] sEachReacord;
						String sRecord = "";
						String sNationality = "";
						sQuery = "Delete from USR_0_BLACKLIST_DATA_CPD where  WI_NAME='"
								+ sWorkitemId
								+ "'"
								+ " and CUST_SNO='"
								+ (iSelectedRow + 1) + "'";
						formObject.saveDataInDB(sQuery);
						logInfo(" sOutput ", sOutput.toString());
						try {
							for (int i = 0; i < iTotalMatch; i++) {
								logInfo(" i ", i + "");
								sRecord = sAllRecord[i] + ",END";
								sRecord = sRecord.replaceAll("#col#", ";");
								sEachReacord = sRecord.split(",");
								if (!sEachReacord[9].equalsIgnoreCase("")) {
									sQuery = "SELECT COUNTRY FROM USR_0_COUNTRY_MAST WHERE COUNTRY_CODE='"
											+ sEachReacord[9] + "'";
									sOutput = formObject.getDataFromDB(sQuery);
									sNationality = sOutput.get(0).get(0);
								}
								sValues = "'"
										+ sEachReacord[0].replaceAll("'", "''")
										+ "','"
										+ sEachReacord[1]
										+ "',"
										+ "'"
										+ sEachReacord[2].replaceAll("'", "''")
										+ "','"
										+ sEachReacord[3]
										+ "',"
										+ "'"
										+ sEachReacord[4]
										+ "','"
										+ sEachReacord[5].replaceAll("'", "''")
										+ "',"
										+ "'"
										+ sEachReacord[6]
										+ "','"
										+ sEachReacord[7]
										+ "','"
										+ sEachReacord[8].replaceAll("'", "''")
										+ "',"
										+ "'"
										+ sNationality
										+ "','"
										+ sEachReacord[10]
												.replaceAll("'", "''") + "','"
										+ sEachReacord[11] + "'," + "'"
										+ sEachReacord[12] + "','"
										+ sEachReacord[14] + "','"
										+ sEachReacord[15] + "'," + "'"
										+ sEachReacord[16] + "','"
										+ (iSelectedRow + 1) + "','"
										+ sWorkitemId + "'," + "'" + sName
										+ "','" + sDOB + "','" + sCountry + "'";
								logInfo("loadBlackListDataCPD  sValues ",
										sValues);
								insertDataIntoDB("USR_0_BLACKLIST_DATA_CPD",
										sColumn, sValues);
							}
						} catch (Exception e) {
							logError("Exception in loadBlackListDataCPD  ", e);
						}
					} else if (!sMatchRecvd.equalsIgnoreCase("0")) {
						// JOptionPane.showMessageDialog(null,"Unable to fetch blacklist data");
					}
				}
			}
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',BLACKLIST_TYPE FROM "
					+ "USR_0_BLACKLIST_DATA_CPD WHERE WI_NAME='"
					+ sWorkitemId
					+ "' "
					+ "and CUST_SNO='"
					+ (iSelectedRow + 1)
					+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM"
					+ " USR_0_CHECK_TYPE WHERE TYPE='INT') "
					+ "ORDER BY CUST_NAME";
			List<List<String>> recordList = formObject.getDataFromDB(sQuery);
			logInfo("loadBlackListDataCPD", "sQuery: " + sQuery
					+ ",recordList: " + recordList);
			loadListView(recordList,
					"CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',"
							+ "BLACKLIST_TYPE", CPD_CHK_INT_BLK_LVW);
			sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM "
					+ "USR_0_BLACKLIST_DATA_CPD WHERE WI_NAME='"
					+ sWorkitemId
					+ "' "
					+ "and CUST_SNO='"
					+ (iSelectedRow + 1)
					+ "' AND BLACKLIST_TYPE IN (SELECT "
					+ "CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')"
					+ " ORDER BY CUST_NAME";
			logInfo("loadBlackListDataCPD", "sQuery: " + sQuery
					+ ",recordList: " + recordList);
			List<List<String>> recordList1 = formObject.getDataFromDB(sQuery);
			loadListView(recordList,
					"CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',BLACKLIST_TYPE",
					CPD_CHK_INT_BLK_LVW);
			logInfo("loadBlackListDataCPD", "sQuery: " + sQuery
					+ ",recordList: " + recordList);
			iListViewRows = getGridCount(CPD_CHK_INT_BLK_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_CHK_MATCH_FOUND,
						"Verified False Positive");
			} else {
				formObject.setValue(CPD_CHK_MATCH_FOUND, "");
			}
			iListViewRows = getGridCount(CPD_HD2_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_MTCH_FOUND, "Verified False Positive");
			} else {
				formObject.setValue(CPD_MTCH_FOUND, "");
			}
			iListViewRows = getGridCount(CPD_CNTRL_BNK_BAD_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CPD_MATCH_FOUND, "Verified False Positive");
			} else {
				formObject.setValue(CPD_MATCH_FOUND, "");
			}
		} catch (Exception e) {
			logError("Exception in loadBlackListDataCPD ", e);
		}
		logInfo("loadBlackListDataCPD ", "Outside");
	}

	public void deleteSelectedProduct() { // DeleteSelectedProduct
		String isClkBx = "";
		String sDeleteIndexes = "";
		logInfo("", "In Delete Product");
		int iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE,
				iSelectedRow, "ACC_NO").toString();
		if (!sAccNo.equalsIgnoreCase("")) {
			sendMessageValuesList(PRODUCT_QUEUE,
					"You can not delete this product as account has been created for this.");
			return;
		}
		// NGRepeater repDebitcard = formObject.getNGRepeater("FRAME71");
		int iRows = getGridCount(ACC_INFO_DC_LVW);
		// int iRows = repDebitcard.getRowCount();
		if (iRows > 1) {
			sendMessageValuesList(
					ACC_INFO_DC_LVW,
					"Please remove the rows from Debit Card frame as you are going to change product selection");
			return;
		}
		for (int i = 1; i < iRows; i++) {
			isClkBx = formObject.getTableCellValue(PRODUCT_QUEUE, i, "CHK_BOX")
					.toString();
			sAccNo = formObject.getTableCellValue(PRODUCT_QUEUE, i, "ACC_NO")
					.toString();
			if (sAccNo.equalsIgnoreCase("")) {
				logInfo("removeProducts", "isClkBx---" + isClkBx);
				if (isClkBx.equalsIgnoreCase("true")) {
					sDeleteIndexes = sDeleteIndexes + i + ",";
				}
			}
		}
		sDeleteIndexes = sDeleteIndexes.substring(0,
				sDeleteIndexes.length() - 1);
		String[] sTempDelete = sDeleteIndexes.split(",");
		for (int iLoop = 0; iLoop < sTempDelete.length; iLoop++) {
			logInfo("", "In loop");
			int[] arr = null;
			arr[0] = Integer.parseInt(sTempDelete[iLoop]);
			formObject.deleteRowsFromGrid(PRODUCT_QUEUE, arr);
			for (int innerLoop = iLoop + 1; innerLoop < sTempDelete.length; innerLoop++) {
				logInfo("", sTempDelete[innerLoop]);
				sTempDelete[innerLoop] = (Integer
						.parseInt(sTempDelete[innerLoop]) - 1) + "";
			}
		}
		EnableEtihadFrame();
		LoadDebitCardCombo();
	}

	public void gotFocusAccountInfoCPD() {
		logInfo("Inside gotFocusAccountInfoCPD ", "  ");
		try {
			int iRows = getGridCount(ACC_RELATION);
			String sLockDebitCard = "False";
			for (int iLoop = 1; iLoop < iRows; iLoop++) {
				if (formObject.getTableCellValue(ACC_RELATION, iLoop, 9)
						.toString().equalsIgnoreCase("JAF")) {
					sLockDebitCard = "True";
					break;
				}
				if (formObject.getTableCellValue(ACC_RELATION, iLoop, 9)
						.toString().equalsIgnoreCase("JAO")) {
					sLockDebitCard = "True";
					break;
				}
			}
			if (sLockDebitCard.equalsIgnoreCase("True")) {
				formObject.setStyle("frame54", DISABLE, TRUE);
			} else {
				formObject.setStyle("frame54", DISABLE, FALSE);
				LoadDebitCardCombo();
			}
		} catch (Exception e) {
			logError("Exception in gotFocusAccountInfoCPD ", e);
		} finally {
			logInfo("Outside gotFocusAccountInfoCPD ", "  ");
		}
	}

	public void loadCustDataOnRepeaterSelect(String sValue) { // LoadCustDataOnRepeaterSelect
		logInfo("loadCustDataOnRepeaterSelect", "INSIDE");
		try {
			formObject.setValue(SELECTED_ROW_INDEX, (Integer.parseInt(sValue))
					+ "");
			// objChkRepeater.setEditable(Integer.parseInt(sValue),
			// "AO_ACC_RELATION.SNO",false);
			gotFocusCustInfoDataCPDOnload(); // gotFocusCustInfoDataCPD
			gotFocusAccountInfoCPD();
			if (formObject.getValue(RELIGION).toString().equalsIgnoreCase("")) {
				formObject.setValue(RELIGION, "Others");
			}
			if (formObject.getValue(MARITAL_STATUS).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(MARITAL_STATUS, "Single");
			}
			if (!formObject.getValue(FCR_CNTRY).toString().trim()
					.equalsIgnoreCase("")
					&& formObject.getValue(FCR_CNTRY).toString().trim()
							.equalsIgnoreCase("UAE")) {
				if (formObject.getValue(RESIDENCY_STATUS).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(RESIDENCY_STATUS, "Yes");
					formObject.setStyle(RESIDENCY_STATUS, DISABLE, TRUE);
				}
				if (returnVisaStatus().equalsIgnoreCase("")) {
					setFinalDataComparison(
							formObject.getValue(CHECKBOX_VISA_STATUS_FCR)
									.toString(),
							formObject.getValue(CHECKBOX_VISA_STATUS_EIDA)
									.toString(),
							formObject.getValue(CHECKBOX_VISA_STATUS_MANUAL)
									.toString(), getDateValue(FCR_VISASTATUS),
							getDateValue(EIDA_VISASTATUS),
							getDateValue(MANUAL_VISASTATUS), "Not Required");
				}
				if (formObject.getValue(RA_IS_UAE_RESIDENT).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(RA_IS_UAE_RESIDENT, "Yes");
					formObject.setStyle(RA_IS_UAE_RESIDENT, DISABLE, TRUE);
				}
			}
			if (formObject.getValue(GI_IS_CUST_VIP).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(GI_IS_CUST_VIP, "No");
			}
			if (formObject.getValue(RA_IS_CUST_DEALNG_ARMAMNT).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(RA_IS_CUST_DEALNG_ARMAMNT, "No");// Combo37
			}
			if (formObject.getValue(RA_IS_CUST_DEALNG_HAWALA).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(RA_IS_CUST_DEALNG_HAWALA, "No");// Combo39
			}
			if (formObject.getValue(RA_PRPSE_TAX_EVSN).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(RA_PRPSE_TAX_EVSN, "No");// Combo38
			}
			if (formObject.getValue(RA_IS_CUST_PEP).toString()
					.equalsIgnoreCase("")) {
				formObject.setValue(RA_IS_CUST_PEP, "No");// Combo36
			}
			if (!formObject.getValue(FCR_NATIONALITY).toString()
					.equalsIgnoreCase("")
					&& formObject.getValue(FCR_NATIONALITY).toString()
							.equalsIgnoreCase("USA")) {
				if (formObject.getValue(FAT_US_PERSON).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(FAT_US_PERSON, "YES");
					formObject.setStyle(FAT_US_PERSON, DISABLE, TRUE);
				}
			}
			if (formObject.getValue(FAT_US_PERSON).toString()
					.equalsIgnoreCase("Yes")
					|| formObject.getValue(FAT_LIABLE_TO_PAY_TAX).toString()
							.equalsIgnoreCase("Yes")) {
				if (formObject.getValue(FAT_CUST_CLASSIFICATION).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(FAT_CUST_CLASSIFICATION, "Yes");
					formObject.setStyle(FAT_CUST_CLASSIFICATION, DISABLE, TRUE);
				}
			}
			if (formObject.getValue(SCAN_MODE).toString()
					.equalsIgnoreCase("New WMS ID")) {
				saveKYCInfo();
				saveKYCInfoRetailQDE();
//				saveKycMultiDropDownData();
//				savePreAssessmentDetails();    //shahbaz
				saveComparisonData();
				saveIndividualInfo();
				saveIndividualContactInfo();
			}
		} catch (Exception e) {
			logError("Exception in loadCustDataOnRepeaterSelect ", e);
		} finally {
			logInfo("Outside loadCustDataOnRepeaterSelect ", "  ");
		}
	}

	public boolean checkforDuplicateCountries(String controlId) {
		logInfo("checkforDuplicateCountries", "Inside controlId: " + controlId);
		try {
			String Country1 = formObject.getValue(PER_INC_TAX_CON_1).toString();
			String Country2 = formObject.getValue(PER_INC_TAX_CON_2).toString();
			String Country3 = formObject.getValue(PER_INC_TAX_CON_3).toString();
			if (controlId.equalsIgnoreCase(PER_INC_TAX_CON_1)) {
				if (!"".equals(Country1) && !"".equals(Country2)
						&& !"".equals(Country3)) {
					// if(!"".equals(Country1)){
					if (Country1.equalsIgnoreCase(Country2)
							|| Country2.equalsIgnoreCase(Country3)
							|| Country3.equalsIgnoreCase(Country1)) {
						// if(Country1.equalsIgnoreCase(Country2) ||
						// Country3.equalsIgnoreCase(Country1)){
						formObject.setValue(PER_INC_TAX_CON_1, "");
						sendMessageValuesList("",
								"Country already selected. Kindly select different country");
						return false;
					}
				} else {
					formObject.setStyle(PER_INC_TAX_CON_2, DISABLE, FALSE);
				}
			} else if (controlId.equalsIgnoreCase(PER_INC_TAX_CON_2)) {
				if (!"".equals(Country1) && !"".equals(Country2)) {
					// if(!"".equals(Country2)){
					if (Country1.equalsIgnoreCase(Country2)
							|| Country2.equalsIgnoreCase(Country3)
							|| Country3.equalsIgnoreCase(Country1)) {
						// if(Country1.equalsIgnoreCase(Country2) ||
						// Country2.equalsIgnoreCase(Country3)){
						formObject.setValue(PER_INC_TAX_CON_2, "");
						sendMessageValuesList("",
								"Country already selected. Kindly select different country");
						return false;
					} else {
						formObject.setStyle(PER_INC_TAX_CON_3, DISABLE, FALSE);
					}
				} else {
					formObject.setStyle(PER_INC_TAX_CON_3, DISABLE, FALSE);
				}
			} else if (controlId.equalsIgnoreCase(PER_INC_TAX_CON_3)) {
				if (!"".equals(Country1) && !"".equals(Country2)
						&& !"".equals(Country3)) {
					// if(!"".equals(Country3)){
					if (Country1.equalsIgnoreCase(Country2)
							|| Country2.equalsIgnoreCase(Country3)
							|| Country3.equalsIgnoreCase(Country1)) {
						// if(Country2.equalsIgnoreCase(Country3) ||
						// Country3.equalsIgnoreCase(Country1)){
						formObject.setValue(PER_INC_TAX_CON_3, "");
						sendMessageValuesList("",
								"Country already selected. Kindly select different country");
						return false;
					}
				}
			}
		} catch (Exception e) {
			logError("Exception in checkforDuplicateCountries ", e);
		}
		return true;
	}

	public void EnableDisableDueDiligence() {

		System.out.println("Inside Enable Disable Due Diligence");
		boolean isUAECountry = false;
		if (getGridCount(CRS_TAXCOUNTRYDETAILS) > 0) {
			for (int i = 0; i < getGridCount(CRS_TAXCOUNTRYDETAILS); i++) {
				String countryOfTaxResidency = formObject.getTableCellValue(
						CRS_TAXCOUNTRYDETAILS, i, 1);
				System.out.println("Value of selected Tax Residency country"
						+ countryOfTaxResidency);
				if (countryOfTaxResidency
						.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
					isUAECountry = true;
					break;
				}
			}
		}
		if (isUAECountry) {
			System.out.println("when Tax Country Is selected as UAE");
			String[] enablControls = { TAX_SCHEME_OBTAINED, RESI_UNDER_JUD,
					SUB_PERSONAL_TAX };
			enableControls(enablControls);
		} else {
			System.out.println("when Tax Country Is other than UAE");
			String[] disableControls = { TAX_SCHEME_OBTAINED, RESI_UNDER_JUD,
					SUB_PERSONAL_TAX, PER_INC_TAX_CON_1, PER_INC_TAX_CON_2,
					PER_INC_TAX_CON_3 };
			disableControls(disableControls);
			formObject.setValue(TAX_SCHEME_OBTAINED, "");
			formObject.setValue(RESI_UNDER_JUD, "");
			formObject.setValue(SUB_PERSONAL_TAX, "");
			formObject.setValue(PER_INC_TAX_CON_1, "");
			formObject.setValue(PER_INC_TAX_CON_2, "");
			formObject.setValue(PER_INC_TAX_CON_3, "");
		}
	}

	public boolean MandatoryEmploymentAddress() {
		logInfo("MandatoryEmploymentAddress",
				"Inside MandatoryEmploymentAddress----");
		if (!formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			return true;
		}// added on 25july2021
		if (formObject.getValue(EMP_PO_BOX).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_PO_BOX, "Please fill Employment PO Box");
			return false;
		} else if (formObject.getValue(EMP_COUNTRY).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_COUNTRY, "Please fill Employment Country");
			return false;
		} else if (formObject.getValue(EMP_STREET).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_STREET, "Please fill Employment Street");
			return false;
		} else if (formObject.getValue(EMP_CITY).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(EMP_CITY, "Please fill Employment City");
			return false;
		}
		return true;
	}

	public void executeApplicationAssessmentRisk() {
		StringBuffer inputXML = new StringBuffer();
		try {
			List<List<String>> list;
			String sOutput = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
			list = formObject.getDataFromDB(sOutput);
			logInfo("getBRMSEligibilityRequestXml",
					"setting getBRMSEligibilityRequestXml");
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>WBG_BRMS_RULES_RESPONSE</InnerCallType>")
					.append("\n")
					.append("<WIName>" + sWorkitemId + "</WIName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<SENDERID>WMSBPMENG</SENDERID>")
					.append("\n")
					.append("<REF_NO>" + list.get(0).get(0) + "</REF_NO>")
					.append("\n")
					.append("<ruleFlowGroup>CBG-RiskGroup</ruleFlowGroup>")
					.append("\n")
					.append("<requestChannelName>WMS-BPM</requestChannelName>")
					.append("\n")
					.append("<Eligibility> <PAYLOAD type=\"APP_RISK_ASSESSMENT\">"
							+ "<APP_RISK_ASSESSMENT><ruleInputData>"
							+ getApplicationRiskData()
							+ " </ruleInputData></APP_RISK_ASSESSMENT></PAYLOAD> </Eligibility>")
					.append("\n").append("</APWebService_Input>");
			logInfo("getBRMSEligibilityRequestXml",
					" getBRMSEligibilityRequestXml created ===> "
							+ inputXML.toString());
			String sOutputXml = socket.connectToSocket(inputXML.toString());
			logInfo("getBRMSEligibilityRequestXml", " sOutputXml created ===> "
					+ sOutputXml);
			XMLParser xp = new XMLParser(sOutputXml);
			String newRisk = xp.getValueOf("applicationRisk");
			logInfo("getBRMSEligibilityRequestXml", "newRisk :  " + newRisk);
			String risk = getCodeValueRisk(newRisk, 1);
			if ("5".equalsIgnoreCase(newRisk)) {
				risk = "Neutral";
			}
			logInfo("getBRMSEligibilityRequestXml", "risk :  " + risk);
			// String sQuery =
			// "UPDATE USR_0_RISK_DATA SET CUST_CUR_RISK_BANK = '"+risk+"' , CUST_CUR_RISK = '"+risk+"'   where wi_name  = '"+sWorkitemId+"'";
			String sQuery = "UPDATE USR_0_RISK_DATA SET CUST_CUR_RISK_BANK = '"
					+ risk + "'    where wi_name  = '" + sWorkitemId + "' AND CUST_SNO=(SELECT SELECTED_ROW_INDEX FROM EXT_AO WHERE "
							+ " WI_NAME = '"+sWorkitemId+"') + 1";

			logInfo("getBRMSEligibilityRequestXml", "sQuery :  " + sQuery);
			formObject.saveDataInDB(sQuery);

			String sQueryCPD = "UPDATE usr_0_risk_assessment_data SET  current_risk_bussiness = '"
					+ risk + "'   where wi_name  = '" + sWorkitemId + "' AND CUST_SNO=(SELECT SELECTED_ROW_INDEX FROM EXT_AO WHERE "
							+ " WI_NAME = '"+sWorkitemId+"') + 1";
			logInfo("getBRMSEligibilityRequestXml", "sQuery :  " + sQueryCPD);
			formObject.saveDataInDB(sQueryCPD);
			formObject.setValue("SANCT_RISK_CURRENT_RSK_BANK", risk);
			// formObject.setValue("SANCT_RISK_CURRENT_RSK_SYSTEM",risk);
			if ("CPD Maker".equalsIgnoreCase(sActivityName)) {
				// formObject.setValue("CPD__RISK_CURRENT_RSK_SYSTEM",risk);
				formObject.setValue("CPD_RISK_CURRENT_RSK_BANK", risk);
				// String sQueryCPD =
				// "UPDATE usr_0_risk_assessment_data SET current_risk_system = '"+risk+"' , current_risk_bussiness = '"+risk+"'   where wi_name  = '"+sWorkitemId+"'";
				String sQueryCPD1 = "UPDATE usr_0_risk_assessment_data_cpd SET  current_risk_bussiness = '"
						+ risk + "'   where wi_name  = '" + sWorkitemId + "'";
				logInfo("getBRMSEligibilityRequestXml", "sQuery :  "
						+ sQueryCPD1);
				formObject.saveDataInDB(sQueryCPD1);
			}
		} catch (Exception e) {
			logError("getBRMSEligibilityRequestXml", e);
		}
	}

	private String getApplicationRiskData() {
		StringBuffer inputXML = new StringBuffer();
		try {
			logInfo("getApplicationRiskData", "sActivityName: " + sActivityName);
			if (!"CPD Maker".equalsIgnoreCase(sActivityName)) {
				logInfo("getApplicationRiskData", "Inside");
				String sQuery = "SELECT ACC_RELATION,CUST_CUR_RISK_BANK FROM USR_0_RISK_DATA  A,"
						+ "ACC_RELATION_REPEATER B WHERE A.WI_NAME  = B.WI_NAME AND A.SNO = B.SNO AND "
						+ "A.WI_NAME = '"
						+ sWorkitemId
						+ "' AND (WS_NAME = 'DDE_Cust_Info' or WS_NAME = 'QDE_Cust_Info')";
				logInfo("getApplicationRiskData", "sQuery: " + sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				logInfo("getApplicationRiskData", "sOutput: " + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					for (int i = 0; i < sOutput.size(); i++) {
						inputXML.append("<relation><relationType>"
								+ sOutput.get(i).get(0) + "</relationType>"
								+ "<RiskValue>"
								+ getCodeValueRisk(sOutput.get(i).get(1), 0)
								+ "</RiskValue></relation>");
					}
				}
			} else {
				logInfo("getApplicationRiskData", "Inside cpd");
				/*
				 * String sQuery =
				 * "SELECT distinct ACC_RELATION,CUST_CUR_RISK_BANK FROM USR_0_RISK_DATA "
				 * +
				 * "A,ACC_RELATION_REPEATER B WHERE A.WI_NAME  = B.WI_NAME AND A.SNO = B.SNO AND A.WI_NAME = '"
				 * +sWorkitemId+"' " +
				 * "and ws_name  = 'CPD Maker' and CUST_CUR_RISK_BANK is not null and a.cust_cur_risk is not null;"
				 * ;
				 */
				String sQuery = "SELECT distinct ACC_RELATION,CURRENT_RISK_BUSSINESS FROM usr_0_risk_assessment_data_cpd "
						+ "A,ACC_RELATION_REPEATER B WHERE A.WI_NAME  = B.WI_NAME AND A.SNO = B.SNO AND A.WI_NAME = '"
						+ sWorkitemId
						+ "' "
						+ "and CURRENT_RISK_BUSSINESS is not null";
				logInfo("getApplicationRiskData", "sQuery: " + sQuery);
				List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
				logInfo("getApplicationRiskData", "sOutput: " + sOutput);
				if (sOutput != null && sOutput.size() > 0) {
					for (int i = 0; i < sOutput.size(); i++) {
						logInfo("getApplicationRiskData", "i: " + i);
						inputXML.append("<relation><relationType>"
								+ sOutput.get(i).get(0) + "</relationType>"
								+ "<RiskValue>"
								+ getCodeValueRisk(sOutput.get(i).get(1), 0)
								+ "</RiskValue></relation>");
					}
				}
			}
			logInfo("getApplicationRiskData",
					"inputXML: " + inputXML.toString());
		} catch (Exception e) {
			logError("getApplicationRiskData", e);
		}
		return inputXML.toString();
	}

	private String getApplicationRiskDataCPD() {
		StringBuffer inputXML = new StringBuffer();
		try {
		} catch (Exception e) {
			logError("getApplicationRiskData", e);
		}
		return inputXML.toString();
	}

	private String getCodeValueRisk(String risk, int process) {
		String sQuery = "";
		if (process == 0) {
			if (risk.equalsIgnoreCase("Neutral")) {
				risk = "Neutral Risk";
			}
			// sQuery =
			// "select risk_code from usr_0_risk_values where risk_value like ('%"+risk+"%')";
			sQuery = "select risk_code from usr_0_risk_values where risk_value = '"
					+ risk + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				return sOutput.get(0).get(0);
			}
		} else if (process == 1) {
			sQuery = "select risk_value from usr_0_risk_values where risk_code = '"
					+ risk + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				return sOutput.get(0).get(0);
			}
		}
		return "";
	}

	private String getCodeFromCountry(String country, int code) {
		if (code == 0) {
			String sQuery = "select cntry_code from usr_0_country_mast where country = '"
					+ country + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				return sOutput.get(0).get(0);
			}
		} else {
			String sQuery = "select  country  from usr_0_country_mast where cntry_code = '"
					+ country + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			if (sOutput != null && sOutput.size() > 0) {
				return sOutput.get(0).get(0);
			}
		}
		return "";
	}

	public void loadApplicationAssessmentDataCPD_History() {
		logInfo("LoadApplicationAssessmentDataCPD_History",
				"INSIDE LoadApplicationAssessmentDataCPD_History");
		int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
		String sCustID = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust, 2);
		logInfo("LoadApplicationAssessmentDataCPD_History", "sCustID" + sCustID);
		String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust, 7);
		logInfo("LoadApplicationAssessmentDataCPD_History", "sAccRelation"
				+ sAccRelation);
		String sQueryTnx = "";
		String sQueryUnionHist = "";
		String sQuery = "SELECT A.CID,B.CUST_NAME,A.ACC_RELATION,B.CURRENT_RISK_SYSTEM,B.CURRENT_RISK_BUSSINESS FROM ACC_RELATION_REPEATER A,USR_0_RISK_ASSESSMENT_DATA_CPD B WHERE A.WI_NAME=B.WI_NAME AND A.SNO=B.SNO AND A.WI_NAME = '"
				+ sWorkitemId + "' ORDER BY TO_NUMBER(A.SNO)";
		logInfo("LoadApplicationAssessmentDataCPD_History", "sQuery" + sQuery);
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		logInfo("LoadApplicationAssessmentDataCPD_History", "recordList"
				+ recordList);
		loadListView(
				recordList,
				"CID,CUSTOMER_NAME,ACCOUNT_RELATIONSHIP,SYS_DEFINED_RISK,BANK_DEFINED_RISK",
				SEC_RISK_ASSESS_CPD_LVW);
		sQuery = "SELECT B.CUST_ID,B.CUST_FULL_NAME,B.final_eligibility_cpd,A.ACC_RELATION, B.final_eligibility_cpd FROM ACC_RELATION_REPEATER A,USR_0_CUST_TXN B WHERE A.WI_NAME ='"
				+ sWorkitemId
				+ "' and A.WI_NAME=B.WI_NAME AND A.SNO=B.CUST_SNO ORDER BY TO_NUMBER(A.SNO)";
		logInfo("LoadApplicationAssessmentDataCPD_History", "sQuery" + sQuery);
		recordList = formObject.getDataFromDB(sQuery);
		logInfo("LoadApplicationAssessmentDataCPD_History", "recordList"
				+ recordList);
		loadListView(
				recordList,
				"CUST_ID,CUST_FULL_NAME,TRSD_ASSESSMENT,ACC_RELATIONSHIP,ELIGIBILITY",
				ELIG_LVW_CPD);
		if (sActivityName.equalsIgnoreCase("CPD Maker")
				&& sAccRelation.equalsIgnoreCase("Existing")) {
			if (getGridCount(FAC_EXST_LVW_CPD) == 0) {
				loadExistingDebitCard("USR_0_DEBITCARD_EXISTING_CPD",
						FAC_EXST_LVW_CPD, sCustID);
			}
		}
		if (sAccRelation.equalsIgnoreCase("Existing")) {
			sQueryTnx = "SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
					+ sWorkitemId + "'  AND CUSTOMER_ID='" + sCustID + "'";
			sQueryUnionHist = " union all SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM USR_0_PRODUCT_EXISTING_HIST WHERE WI_NAME ='"
					+ sWorkitemId + "'  AND CUSTOMER_ID='" + sCustID + "'";
			sQuery = sQueryTnx + sQueryUnionHist;
			logInfo("LoadApplicationAssessmentDataCPD_History", "sQuery"
					+ sQuery);
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessmentDataCPD_History", "recordList"
					+ recordList);
			loadListView(recordList, "Product Code,Product Name,Currency",
					PROD_SEC_EXIST_CPD_LVW);
			sQueryTnx = "SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE FROM USR_0_DEBITCARD_EXISTING_CPD WHERE WI_NAME = '"
					+ sWorkitemId + "'  AND CUST_ID='" + sCustID + "'";
			sQueryUnionHist = " union all SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE FROM USR_0_DEBITCARD_EXISTING_CPD_h WHERE WI_NAME = '"
					+ sWorkitemId + "'  AND CUST_ID='" + sCustID + "'";
			sQuery = sQueryTnx + sQueryUnionHist;
			logInfo("LoadApplicationAssessmentDataCPD_History", "sQuery"
					+ sQuery);
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessmentDataCPD_History", "recordList"
					+ recordList);
			loadListView(
					recordList,
					"CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE",
					"FAC_EXST_LVW_CPD");
			sQuery = "SELECT PRODUCT_NAME,CURRENCY FROM USR_0_BANQUADETAILS WHERE WI_NAME ='"
					+ sWorkitemId + "' AND CUSTOMER_ID='" + sCustID + "'";
			logInfo("LoadApplicationAssessmentDataCPD_History", "sQuery"
					+ sQuery);
			recordList = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessmentDataCPD_History", "recordList"
					+ recordList);
			String[] sAllProducts;
			String sEachProducts;
			// int iTotalRetrived =
			// Integer.parseInt(getTagValues(sOutput,"TotalRetrieved"));
			int iTotalRetrived = recordList.size();
			try {
				if (iTotalRetrived != 0) {
					// sAllProducts = getTagValue(sOutput,"Record").split(";");
					for (int i = 0; i < iTotalRetrived; i++) {
						// sEachProducts = sAllProducts[i].split(",");
						// sOutput="<ListItems><ListItem><SubItem></SubItem><SubItem>"+sEachProducts[0]+
						// "</SubItem><SubItem>"+sEachProducts[1]+"</SubItem></ListItem></ListItems>";
						loadListView(recordList, "PRODUCT_CODE,CURRENCY",
								PROD_CRO_LVW);
					}
				}
			} catch (Exception e) {
				logError("LoadApplicationAssessmentDataCPD_History", e);
			}
		}
	}

	public void populateScreeningDataCPD_History() {
		logInfo("PopulateScreeningDataCPD_History",
				"INSIDE PopulateScreeningDataCPD_History");
		int iSelectedRow = 0;
		String sCustNo = "";
		String sQueryTnx = "";
		String sQueryUnionHist = "";
		List<List<String>> sOutput;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX)
				.toString()) + 1;
		logInfo("PopulateScreeningDataCPD_History", "iSelectedRow"
				+ iSelectedRow);
		sCustNo = iSelectedRow + "";
		String sQuery = "SELECT SYSTEM_DEC_CPD,BANK_DEC_CPD,BLACKLIST_DEC_CPD,WORLD_CHECK_DEC_CPD,BAD_CHECK_DEC_CPD, "
				+ "FINAL_ELIGIBILITY_CPD,BLACKLIST_REMARKS_CPD,BAD_CHECK_REMARKS_CPD,WORLD_CHECK_REMARKS_CPD,SYSTEM_REMARKS_CPD "
				+ "FROM USR_0_CUST_TXN WHERE WI_NAME= '"
				+ sWorkitemId
				+ "' AND CUST_SNO= '" + sCustNo + "'";
		logInfo("PopulateScreeningDataCPD_History", "sQuery" + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulateScreeningDataCPD_History", "sOutput" + sOutput);
		formObject.setValue(SANC_SYS_DEC, sOutput.get(0).get(0));
		formObject.setValue(CPD_BANK_DECISION, sOutput.get(0).get(1));
		formObject.setValue(CPD_CHK_MATCH_FOUND, sOutput.get(0).get(2));
		formObject.setValue(CPD_MATCH_FOUND, sOutput.get(0).get(4));
		formObject.setValue(CPD_FINAL_ELIGIBILITY, sOutput.get(0).get(5));
		formObject.setValue(CPD_MTCH_FOUND, sOutput.get(0).get(3));
		formObject.setValue(CPD_CHK_REMARKS, sOutput.get(0).get(6));
		formObject.setValue(CPD_REMARKS, sOutput.get(0).get(7));
		formObject.setValue(CPD_WRLD_CHK_REMARKS, sOutput.get(0).get(8));
		formObject.setValue(CPD_RISK_ASSESS_MARKS, sOutput.get(0).get(9));
		if (sOutput.get(0).get(0).equalsIgnoreCase("")) {
			formObject.setValue(SANC_SYS_DEC, "");
		}
		if (sOutput.get(0).get(5).equalsIgnoreCase("")) {
			formObject.setValue(CPD_FINAL_ELIGIBILITY, "");
		}
		if (sOutput.get(0).get(1).equalsIgnoreCase("")) {
			formObject.setValue(CPD_BANK_DECISION, "");
		}
		if (sOutput.get(0).get(1).equalsIgnoreCase("")) {
			formObject.setValue(CPD_RISK_ASSESS_MARKS, "");
		}
		sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD WHERE WI_NAME='"
				+ sWorkitemId
				+ "' and CUST_SNO='"
				+ iSelectedRow
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
		sQueryUnionHist = " union all SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD_HIST WHERE WI_NAME='"
				+ sWorkitemId
				+ "' and CUST_SNO='"
				+ iSelectedRow
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT')";
		sQuery = sQueryTnx + sQueryUnionHist;
		logInfo("PopulateScreeningDataCPD_History", "sQuery" + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulateScreeningDataCPD_History", "sOutput" + sOutput);
		loadListView(sOutput,
				"Name,Nationality,DOB,Passport_No,Reason,Department",
				CPD_CHK_INT_BLK_LVW);
		sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD WHERE WI_NAME='"
				+ sWorkitemId
				+ "' and CUST_SNO='"
				+ iSelectedRow
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')";
		sQueryUnionHist = " union all SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_CPD_HIST WHERE WI_NAME='"
				+ sWorkitemId
				+ "' and CUST_SNO='"
				+ iSelectedRow
				+ "' AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT')";
		sQuery = sQueryTnx + sQueryUnionHist;
		logInfo("PopulateScreeningDataCPD_History", "sQuery" + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulateScreeningDataCPD_History", "sOutput" + sOutput);
		loadListView(sOutput,
				"Name,Nationality,DOB,Passport_No,Period_of_Expiry,Department",
				CPD_HD2_LVW);
		sQuery = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,EXPIRY_PERIOD,DEPARTMENT FROM USR_0_CENTRAL_BANK_DATA_CPD WHERE WI_NAME='"
				+ sWorkitemId + "' AND CUST_SNO = '" + sCustNo + "'";
		logInfo("PopulateScreeningDataCPD_History", "sQuery" + sQuery);
		sOutput = formObject.getDataFromDB(sQuery);
		logInfo("PopulateScreeningDataCPD_History", "sOutput" + sOutput);
		loadListView(sOutput,
				"Name,Nationality,DOB,Passport_No,Expiry_Period,Department",
				CPD_CNTRL_BNK_BAD_LVW);
		if (!sActivityName.equalsIgnoreCase("CPD Maker")) {
			sQuery = "SELECT CUST_ID,CUST_NAME,CURRENT_RISK_SYSTEM, CURRENT_RISK_BUSSINESS, PREVIOUS_RISK, FCR_RISK, APPROVAL_REQ,CPDRISK_CLASSIFICATION,cpdcust_assessment_date FROM USR_0_RISK_ASSESSMENT_DATA_CPD WHERE WI_NAME ='"
					+ sWorkitemId + "' AND SNO = '" + sCustNo + "'";
			logInfo("PopulateScreeningDataCPD_History", "sQuery" + sQuery);
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("PopulateScreeningDataCPD_History", "sOutput" + sOutput);
			formObject.setValue(CPD_RISK_CID, sOutput.get(0).get(0));
			formObject.setValue(CPD_RISK_NAME, sOutput.get(0).get(1));
			formObject.setValue(CPD__RISK_CURRENT_RSK_SYSTEM, sOutput.get(0)
					.get(2));
			formObject.setValue(CPD_RISK_CURRENT_RSK_BANK, sOutput.get(0)
					.get(3));
			formObject.setValue(CPD_RISK_PREVIOUS_RSK, sOutput.get(0).get(4));
			formObject.setValue(CPD_RISK_FCR_RSK, sOutput.get(0).get(5));
			formObject.setValue(CPD_RISK_RSK_CLSF, sOutput.get(0).get(7));
			formObject.setValue(CPD_RISK_INITIAL_ASSESS_DATE, sOutput.get(0)
					.get(8));
			formObject.setValue(CPD_RISK_COMPL_APP_REQ, sOutput.get(0).get(6));
			set_Values_From_Usr_0_Risk_Data();
		}
	}

	public void loadBlackListDataHistory() { // LoadBlackListData_History
		logInfo("loadBlackListDataHistory", "Inside");
		try {
			String sQuery = "";
			int iListViewRows = 0;
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString()) + 1;
			formObject.clearTable(CHECK_TYPE_LVW);
			formObject.clearTable(SANC_SCRN_HD2_LVW);
			formObject.clearTable(SANC_CNTRL_BNK_BAD_LVW);
			long start_Time3 = 0;
			String sQueryTnx = "";
			String sQueryUnionHist = "";
			sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA"
					+ " WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN"
					+ " (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT') ORDER BY CUST_NAME";
			sQueryUnionHist = " union all SELECT CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,'',"
					+ "BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA_HIST WHERE WI_NAME='"
					+ sWorkitemId
					+ "'"
					+ " and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN"
					+ " (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='INT') ORDER BY CUST_NAME";
			sQuery = sQueryTnx + sQueryUnionHist;
			List<List<String>> recordList1 = formObject.getDataFromDB(sQuery);
			logInfo("loadBlackListDataHistory", "sQuery: " + sQuery
					+ ",recordList1: " + recordList1);
			loadListView(recordList1,
					"CUST_NAME,NATIONALITY,DOB ,PASSPORT_NO,''BLACKLIST_TYPE",
					CHECK_TYPE_LVW);

			sQueryTnx = "SELECT CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM USR_0_BLACKLIST_DATA"
					+ " WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "' AND BLACKLIST_TYPE IN"
					+ " (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT') ORDER BY CUST_NAME";
			sQueryUnionHist = " union all SELECT CU ST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE FROM"
					+ " USR_0_BLACKLIST_DATA_HIST WHERE WI_NAME='"
					+ sWorkitemId
					+ "' and CUST_SNO='"
					+ iSelectedRow
					+ "'"
					+ " AND BLACKLIST_TYPE IN (SELECT CHECKTYPE FROM USR_0_CHECK_TYPE WHERE TYPE='EXT') ORDER BY CUST_NAME";
			sQuery = sQueryTnx + sQueryUnionHist;
			recordList1 = formObject.getDataFromDB(sQuery);
			logInfo("loadBlackListDataHistory", "sQuery: " + sQuery
					+ ",recordList1: " + recordList1);
			loadListView(recordList1,
					"CUST_NAME,NATIONALITY,DOB,PASSPORT_NO,'',BLACKLIST_TYPE",
					SANC_SCRN_HD2_LVW);

			long start_Time4 = System.currentTimeMillis();
			iListViewRows = getGridCount(CHECK_TYPE_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(CHK_MATCH_FOUND, "Verified False Positive");
			}
			iListViewRows = getGridCount(SANC_SCRN_HD2_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(SANC_SCRN_MATCH, "Verified False Positive");
			}
			iListViewRows = getGridCount(SANC_CNTRL_BNK_BAD_LVW);
			if (iListViewRows == 0) {
				formObject.setValue(SANC_SCRN_MATCH_FOUND,
						"Verified False Positive");
			}

		} catch (Exception e) {
			logError("Exception in loadBlackListDataHistory ", e);
		}
	}

	public void loadApplicationAssessmentData_History() { // loadApplicationAssessmentData_History
		logInfo("loadApplicationAssessmentData_History", "Inside");
		try {
			int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
			String sCustID = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust, 2);
			String sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iPrimaryCust, 7);
			String sQueryTnx = "";
			String sQueryUnionHist = "";
			String sQuery = "SELECT A.CID,B.CUST_NAME,A.ACC_RELATION,B.CURRENT_RISK_SYSTEM,"
					+ "B.CURRENT_RISK_BUSSINESS FROM ACC_RELATION_REPEATER A,USR_0_RISK_ASSESSMENT_DATA"
					+ " B WHERE A.WI_NAME=B.WI_NAME AND A.SNO=B.SNO AND A.WI_NAME = '"
					+ sWorkitemId + "'" + " ORDER BY TO_NUMBER(A.SNO)";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("LoadApplicationAssessmentData_History", "sQuery: "
					+ sQuery + ",sOutput: " + sOutput);
			loadListView(
					sOutput,
					"CID,CUST_NAME,ACC_RELATION,CURRENT_RISK_SYSTEM,CURRENT_RISK_BUSSINESS",
					RISK_ASSESS_LVW);

			sQuery = "SELECT B.CUST_ID,B.CUST_FULL_NAME,B.final_eligibility,A.ACC_RELATION, "
					+ "B.final_eligibility FROM ACC_RELATION_REPEATER A,USR_0_CUST_TXN B WHERE A.WI_NAME "
					+ "='"
					+ sWorkitemId
					+ "' and A.WI_NAME=B.WI_NAME AND A.SNO=B.CUST_SNO ORDER BY TO_NUMBER(A.SNO)";
			sOutput = formObject.getDataFromDB(sQuery);
			logInfo("loadApplicationAssessmentData_History", "sQuery: "
					+ sQuery + ",sOutput: " + sOutput);
			loadListView(
					sOutput,
					"CUST_ID,CUST_FULL_NAME,final_eligibility,ACC_RELATION,final_eligibility",
					ELIG_LVW_CRO);

			if (sActivityName.equalsIgnoreCase(ACTIVITY_APP_ASSESSMENT)
					&& sAccRelation.equalsIgnoreCase("Existing")) {
				if (getGridCount(FAC_EXST_LVW_CRO) == 0) {
					loadExistingDebitCard("USR_0_DEBITCARD_EXISTING",
							FAC_EXST_LVW_CRO, sCustID);
				}
			}
			if (sAccRelation.equalsIgnoreCase("Existing")) {
				sQueryTnx = "SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM USR_0_PRODUCT_EXISTING"
						+ " WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUSTOMER_ID='" + sCustID + "'";
				sQueryUnionHist = " union all SELECT PRODUCT_CODE,PRODUCT_NAME,CURRENCY FROM"
						+ " USR_0_PRODUCT_EXISTING_HIST WHERE WI_NAME ='"
						+ sWorkitemId + "' AND CUSTOMER_ID='" + sCustID + "'";
				sQuery = sQueryTnx + sQueryUnionHist;
				sOutput = formObject.getDataFromDB(sQuery);
				loadListView(sOutput, PROD_CRO_LVW,
						"PRODUCT_CODE,PRODUCT_NAME,CURRENCY");

				sQueryTnx = "SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,ISSUANCE_DATE,EXPIRY_DATE"
						+ " FROM USR_0_DEBITCARD_EXISTING WHERE WI_NAME = '"
						+ sWorkitemId + "' AND CUST_ID='" + sCustID + "'";
				sQueryUnionHist = " union all SELECT CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC"
						+ ",ISSUANCE_DATE,EXPIRY_DATE FROM USR_0_DEBITCARD_EXISTING_HIST WHERE WI_NAME = '"
						+ sWorkitemId + "'" + " AND CUST_ID='" + sCustID + "'";
				sQuery = sQueryTnx + sQueryUnionHist;
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("loadApplicationAssessmentData_History", "sQuery: "
						+ sQuery + ",sOutput: " + sOutput);
				loadListView(sOutput,
						"CUST_ID,EMBOSS_NAME,CARD_TYPE_DESC,STATUS_DESC,"
								+ "ISSUANCE_DATE,EXPIRY_DATE", FAC_EXST_LVW_CRO);
				sQuery = "SELECT PRODUCT_NAME,CURRENCY FROM USR_0_BANQUADETAILS"
						+ " WHERE WI_NAME ='"
						+ sWorkitemId
						+ "' AND CUSTOMER_ID='" + sCustID + "'";
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("loadApplicationAssessmentData_History", "sQuery: "
						+ sQuery + ",sOutput: " + sOutput);
				String sAllProducts = "";
				String sEachProducts = "";
				int iTotalRetrived = sOutput.size();
				try {
					if (iTotalRetrived != 0) {
						for (int i = 0; i < iTotalRetrived; i++) {
							formObject.addItemInTableCellCombo(PROD_CRO_LVW, i,
									1, sOutput.get(i).get(0));
							formObject.addItemInTableCellCombo(PROD_CRO_LVW, i,
									3, sOutput.get(i).get(1));
						}
					}
				} catch (Exception e) {
					logError(
							"Exception in loadApplicationAssessmentData_History ",
							e);
				}
			}
		} catch (Exception e) {
			logError("Exception in loadApplicationAssessmentData_History ", e);
		}
	}

	public Boolean MandatoryCRSDueDiligence() {
		logInfo("MandatoryCRSDueDiligence",
				"Inside MandatoryCRSDueDiligence----");
		if (formObject.getValue(TAX_SCHEME_OBTAINED).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(TAX_SCHEME_OBTAINED,
					"Please Fill CRS Due Diligence");
			return false;
		}
		if (formObject.getValue(RESI_UNDER_JUD).toString().equalsIgnoreCase("")) {
			sendMessageValuesList(RESI_UNDER_JUD,
					"Please Fill CRS Due Diligence");
			return false;
		}
		if (formObject.getValue(SUB_PERSONAL_TAX).toString()
				.equalsIgnoreCase("")) {
			sendMessageValuesList(SUB_PERSONAL_TAX,
					"Please Fill CRS Due Diligence");
			return false;
		}
		return true;
	}

	public boolean checkSalaryTransfer() {
		if (formObject.getValue(EMP_STATUS).toString()
				.equalsIgnoreCase("Employed")) {
			if (formObject.getValue(SALARY_TRANSFER).toString()
					.equalsIgnoreCase("")) {
				sendMessageValuesList(SALARY_TRANSFER,
						"Please select Salary Transfer");
				return true;
			}
		}
		return true;
	}

	public void checkCRS() {
		try {
			logInfo("checkCRS", "checkCRS");
			boolean countryUae = false;
			logInfo("checkCRS", "gridcount : "
					+ getGridCount(CRS_TAXCOUNTRYDETAILS));
			if (getGridCount(CRS_TAXCOUNTRYDETAILS) > 0) {
				for (int i = 0; i < getGridCount(CRS_TAXCOUNTRYDETAILS); i++) {
					logInfo("checkCRS", "i : " + i);
					String countryOfTaxResidency = formObject
							.getTableCellValue(CRS_TAXCOUNTRYDETAILS, i, 1);
					logInfo("checkCRS", "countryOfTaxResidency : "
							+ countryOfTaxResidency);
					logInfo("checkCRS",
							"Value of selected Tax Residency country"
									+ countryOfTaxResidency);
					if (countryOfTaxResidency
							.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
						countryUae = true;
						break;
					} else {
						countryUae = false;
					}
				}
			}
			logInfo("submit", "bollean val" + countryUae);

			if (countryUae) {
				logInfo("checkCRS", "enabling");
				formObject.setStyle(TAX_SCHEME_OBTAINED, DISABLE, FALSE);
				formObject.setStyle(RESI_UNDER_JUD, DISABLE, FALSE);
				formObject.setStyle(SUB_PERSONAL_TAX, DISABLE, FALSE);
			} else {
				logInfo("checkCRS", "disabling");
				formObject.clearCombo(TAX_SCHEME_OBTAINED);
				formObject.clearCombo(RESI_UNDER_JUD);
				formObject.clearCombo(SUB_PERSONAL_TAX);
				formObject.setValue(TAX_SCHEME_OBTAINED, "");
				formObject.setValue(RESI_UNDER_JUD, "");
				formObject.setValue(SUB_PERSONAL_TAX, "");
				formObject.setValue(PER_INC_TAX_CON_1, "");
				formObject.setValue(PER_INC_TAX_CON_2, "");
				formObject.setValue(PER_INC_TAX_CON_3, "");

				formObject.setStyle(TAX_SCHEME_OBTAINED, DISABLE, TRUE);
				formObject.setStyle(RESI_UNDER_JUD, DISABLE, TRUE);
				formObject.setStyle(SUB_PERSONAL_TAX, DISABLE, TRUE);
				formObject.setStyle(PER_INC_TAX_CON_1, DISABLE, TRUE);
				formObject.setStyle(PER_INC_TAX_CON_2, DISABLE, TRUE);
				formObject.setStyle(PER_INC_TAX_CON_3, DISABLE, TRUE);
			}
		} catch (Exception e) {
			logError("checkCRS", e);
		}

	}

	public void clearComparisonFields() {
		clearControls(new String[] { MANUAL_DOB, MANUAL_PASSPORTISSDATE,
				MANUAL_PASSPORTEXPDATE, MANUAL_VISAEXPDATE, MANUAL_VISAISSDATE,
				CHECKBOX_PREFIX_FCR, CHECKBOX_FULLNAME_FCR,
				CHECKBOX_SHORTNAME_FCR, CHECKBOX_DOB_FCR,
				CHECKBOX_PASSPORT_NO_FCR, CHECKBOX_PASS_ISS_DT_FCR,
				CHECKBOX_PASS_EXP_DT_FCR, CHECKBOX_VISA_NO_FCR,
				CHECKBOX_VISA_ISSUE_DATE_FCR, CHECKBOX_VISA_EXPIRY_DATE_FCR,
				CHECKBOX_NATIONALITY_FCR, CHECKBOX_MOTHERSNAME_FCR,
				CHECKBOX_EIDANO_FCR, CHECKBOX_CORR_POB_FCR, CHECKBOX_CITY_FCR,
				CHECKBOX_STATE_FCR, CHECKBOX_CNTRY_OF_CORR_FCR,
				CHECKBOX_COUNTRY_PER_RES_FCR, CHECKBOX_TELE_RES_FCR,
				CHECKBOX_TELE_MOB_FCR, CHECKBOX_EMAIL_FCR, CHECKBOX_DOB_FCR,
				CHECKBOX_GENDER_FCR, CHECKBOX_EMP_NAME_FCR,
				CHECKBOX_PREFIX_EIDA, CHECKBOX_FULLNAME_EIDA,
				CHECKBOX_SHORTNAME_EIDA, CHECKBOX_DOB_EIDA,
				CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASS_ISS_DT_EIDA,
				CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_VISA_NO_EIDA,
				CHECKBOX_VISA_ISSUE_DATE_EIDA, CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_NATIONALITY_EIDA, CHECKBOX_MOTHERSNAME_EIDA,
				CHECKBOX_EIDANO_EIDA, CHECKBOX_CORR_POB_EIDA,
				CHECKBOX_CITY_EIDA, CHECKBOX_STATE_EIDA,
				CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_COUNTRY_PER_RES_EIDA,
				CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_MOB_EIDA,
				CHECKBOX_EMAIL_EIDA, CHECKBOX_PROFESSION_EIDA,
				CHECKBOX_GENDER_EIDA, CHECKBOX_EMP_NAME_EIDA,
				CHECKBOX_PREFIX_MANUAL, CHECKBOX_FULLNAME_MANUAL,
				CHECKBOX_SHORTNAME_MANUAL, CHECKBOX_DOB_MANUAL,
				CHECKBOX_PASSPORT_NO_MANUAL, CHECKBOX_PASS_ISS_DT_MANUAL,
				CHECKBOX_PASS_EXP_DT_MANUAL, CHECKBOX_VISA_NO_MANUAL,
				CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, CHECKBOX_NATIONALITY_MANUAL,
				CHECKBOX_MOTHERSNAME_MANUAL, CHECKBOX_EIDANO_MANUAL,
				CHECKBOX_CORR_POB_MANUAL, CHECKBOX_CITY_MANUAL,
				CHECKBOX_STATE_MANUAL, CHECKBOX_CNTRY_OF_CORR_MANUAL,
				CHECKBOX_COUNTRY_PER_RES_MANUAL, CHECKBOX_TELE_RES_MANUAL,
				CHECKBOX_TELE_MOB_MANUAL, CHECKBOX_EMAIL_MANUAL,
				CHECKBOX_PROFESSION_MANUAL, CHECKBOX_GENDER_MANUAL, FCR_VISANO,
				FCR_NATIONALITY, FCR_MOTHERSNAME, FCR_EIDANO, FCR_ADDRESS,
				FCR_CITY, FCR_STATE, FCR_CNTRY, FCR_PER_CNTRY, FCR_PH,
				FCR_MOBILE, FCR_EMAIL, FCR_PROFESSION, FCR_GENDER,
				FCR_EMPLYR_NAME, EIDA_PREFIX, EIDA_NAME, EIDA_PASSPORTNO,
				PASSPORTEXPPLACE_EIDA, EIDA_VISANO, EIDA_NATIONALITY,
				EIDA_MOTHERNAME, EIDA_EIDANO, EIDA_ADDRESS, EIDA_CITY,
				EIDA_STATE, EIDA_CNTRY, EIDA_PER_CNTRY, EIDA_PH, EIDA_MOBILE,
				EIDA_EMAIL, EIDA_PROFESSION, EIDA_GENDER, EIDA_EMPLYR_NAME,
				MANUAL_NAME, MANUAL_PASSPORTNO, MANUAL_VISANO,
				MANUAL_MOTHERNAME, MANUAL_EIDANO, MANUAL_ADDRESS, MANUAL_CITY,
				MANUAL_PH, MANUAL_MOBILE, MANUAL_EMAIL, MANUAL_PROFESSION,
				MANUAL_EMPLYR_NAME, FCR_DOB, EIDA_DOB, EIDA_GENDER,
				MANUAL_NATIONALITY, MANUAL_STATE, MANUAL_CNTRY,
				MANUAL_PER_CNTRY, MANUAL_GENDER, FCR_RISK, MANUAL_PREFIX,
				MANUAL_RESIDENT, FCR_FIRSTNAME, FCR_LASTNAME, FCR_PASSTYPE,
				FCR_COUNTRYBIRTH, CITYBIRTH_FCR, EIDA_FIRSTNAME, EIDA_LASTNAME,
				EIDA_PSSTYPE, EIDA_COUNTRYBIRTH, CITYBIRTH_EIDA,
				MANUAL_FIRSTNAME, MANUAL_LASTNAME, MANUAL_COUNTRYBIRTH,
				CRS_CITYOFBIRTH, FCR_DOB, FCR_PASSPORTISSDATE,
				FCR_PASSPORTEXPDATE, FCR_VISAEXPDATE, FCR_VISAISSDATE,
				EIDA_DOB, EIDA_PASS_EXP_DATE, EIDA_PASS_ISSUE_DATE, EIDA_DOB,
				EIDA_VISAEXPDATE, EIDA_VISAISSDATE, MANUAL_SHORTNAME,
				FCR_SHORTNAME, EIDA_SHORTNAME });
	}

	public void clearPersonalData() {
		clearControls(new String[] { PD_MARITALSTATUSOTHER,
				PD_MOTHERMAIDENNAME, FCR_SHORTNAME, PD_CUSTRELTYPE,
				PD_NEWRELTYPE, PD_EIDANO, PD_FULLNAME, PD_OTHERS, CP_POBOXNO,
				CP_FLOOR, CP_STREET, CP_EMAIL, OTHER_CORR_CITY, CP_PHONENO,
				CP_TELEOFFICE, PA_BUILDINGNAME, PA_VILLAFLATNO, PA_STREET,
				OTHER_RESIDENTIAL_CITY, RA_BUILDINGNAME, RA_VILLAFLATNO,
				RA_STREET, HD_PASSPORT_NO, HD_VISA_NO, IDS_PROF_CENTER_CODE,
				IDS_REF_BY_CUST, REF_BY_STAFF, RA_SAMEAS, PA_SAMEAS,
				CORR_STATE, CORR_CNTRY, RES_STATE, PA_OTHERS, CP_CITY, PA_CITY,
				RA_CITY, RES_CNTRY, PERM_STATE, PERM_CNTRY, MARITAL_STATUS,
				RELIGION, PD_CUSTSEGMENT, CUST_PREFIX, CUST_NATIONALITY,
				CUST_GENDER, PD_DOB, PD_DATEOFATTAININGMAT, HD_PASS_TYPE,
				MANUAL_VISASTATUS, HD_PASS_ISS_DATE, HD_PASS_EXP_DATE,
				HD_VISA_ISSUE_DATE, HD_EXP_DATE, RM_CODE, RM_NAME, PROF_CODE,
				EXCELLENCY_CNTR, PRO_CODE, IDS_CB_SAL_TRANSFER,
				IDS_CB_MORTGAGES, IDS_CB_INSURANCE, IDS_CB_TRB, IDS_CB_OTHERS,
				IDS_CB_VVIP, IDS_PC_CB_TP, IDS_BNFT_CB_TP, IDS_PC_CB_TRAVEL,
				IDS_PC_CB_SPORT, IDS_PC_CB_SHOPPING, IDS_PC_CB_ENTERTAINMENT,
				CP_OTHERS, RA_OTHERS, PA_OTHERS, CPD_RISK_ASSESS_MARKS });
	}

	public void clearKYCData() {
		clearControls(new String[] { GI_ACC_NO_COVERED, ED_OTHER, ED_EMPNAME,
				ED_EMPLYID, ED_POSITN_DESGNT, ED_LEN_OF_SERVCE, ED_PHNE_NO,
				ED_MONTHLY_INCM, ED_ANNUAL_INC, ED_SAL_AED,
				ED_INVSTMNT_RETN_AED, ED_INHT_AED, ED_REAL_INC_AED,
				ED_SALE_OF_ASST, ED_OTHERS, ED_NATURE_OF_BUSNS,
				FERS_EMD_CASH_ATM, FERS_EMD_CHQ_DRFT, FERS_EMD_TRNSFR_ONLN,
				FERS_EMW_CASH_ATM, FERS_EMW_CHQ_DRFT, FERS_EMW_TRNSFR_ONLN,
				FERS_GEO_CNTRY_FINANCL, FERS_NATRE_ACTVTY_FT, BR_BANK_NAME_1,
				BR_BANK_NAME_2, BR_BANK_NAME_3, BR_CITY_CNTRY_1,
				BR_CITY_CNTRY_2, BR_CITY_CNTRY_3, BR_STAFF_WHO_NAME_STMP,
				BR_BUSN_GRP_HEAD, BR_LINE_MAN_NAME_STMP, BR_BUSN_UNIT_HEAD,
				RA_ADDTNL_CMNT, GI_PURPOSE_ACC_REL, PROFESION, GI_EXST_SINCE,
				GI_DATE_KYC_PREP, ED_DATE_OF_JOING, EMPNAME, ED_EMP_TYPE,
				ED_SET_FLG, EMP_PH_CODE, PD_ANY_CHNG_CUST_INFO, ED_CB_TML,
				ED_CB_NON_TML, ED_CB_SAL_AED, ED_CB_INVSTMNT_RETN_AED,
				ED_CB_INHT_AED, ED_CB_REAL_INC_AED, ED_CB_SALE_OF_ASST,
				ED_CB_OTHERS, SPECIAL_CAT, EMP_STATUS, "TEXT75" });
	}

	public void clearRiskData() {
		clearControls(new String[] { ED_NATURE_OF_BUSNS, ED_LEN_OF_SERVCE,
				SIGN_STYLE1, GI_ACC_NO_COVERED, ED_OTHER, ED_EMPNAME,
				ED_EMPLYID, ED_CB_TML, ED_CB_NON_TML, ED_POSITN_DESGNT,
				ED_PHNE_NO, ED_MONTHLY_INCM, ED_ANNUAL_INC, ED_CB_SAL_AED,
				ED_CB_INVSTMNT_RETN_AED, ED_CB_INHT_AED, ED_CB_REAL_INC_AED,
				ED_CB_SALE_OF_ASST, ED_CB_OTHERS, ED_SAL_AED,
				ED_INVSTMNT_RETN_AED, ED_INHT_AED, ED_REAL_INC_AED,
				ED_SALE_OF_ASST, ED_OTHERS, FERS_EMD_CASH_ATM,
				FERS_EMD_CHQ_DRFT, FERS_EMD_TRNSFR_ONLN, FERS_EMW_CASH_ATM,
				FERS_EMW_CHQ_DRFT, FERS_EMW_TRNSFR_ONLN,
				FERS_GEO_CNTRY_FINANCL, FERS_NATRE_ACTVTY_FT, BR_BANK_NAME_1,
				BR_BANK_NAME_2, BR_BANK_NAME_3, BR_CITY_CNTRY_1,
				BR_CITY_CNTRY_2, BR_CITY_CNTRY_3, BR_STAFF_WHO_NAME_STMP,
				BR_BUSN_GRP_HEAD, BR_LINE_MAN_NAME_STMP, BR_BUSN_UNIT_HEAD,
				RA_ADDTNL_CMNT, GI_EXST_SINCE, GI_DATE_KYC_PREP,
				ED_DATE_OF_JOING, GI_PURPOSE_ACC_REL, PROFESION, EMPNAME,
				ED_EMP_TYPE, ED_SET_FLG, EMP_PH_CODE, PD_ANY_CHNG_CUST_INFO,
				RA_CARRYNG_EID_CARD, CNTRY_OF_BIRTH, RA_PRPSE_TAX_EVSN,
				RA_IS_UAE_RESIDENT, RA_IS_CUST_DEALNG_ARMAMNT, RA_IS_CUST_PEP,
				RA_IS_CUST_DEALNG_HAWALA, FAT_US_PERSON, FAT_LIABLE_TO_PAY_TAX,
				FAT_SSN, FAT_CUST_CLASSIFICATION, CRS_RES_PERM_ADRS_US,
				GI_IS_CUST_VIP, HD_THREE, ED_CUST_CRS_BRDR_PAYMENT,
				RA_IS_CUST_WRKNG_UAE, RA_IS_CUST_WRKNG_NON_UAE, SPECIAL_CAT,
				EMP_STATUS, POACOMBO, INDICIACOMBO, US_INDICIA_MDM, COMBODOC,
				DATEPICKERCUST, FATCAOPTION, DATEPICKERW8,
				CHANGE_IN_FATCA_3WAY_INPUTS, FATCAMAIN, FATCAMINI });
	}

	public void setManualChecksBlank() {
		uncheckCheckBoxes(new String[] { CHECKBOX_PREFIX_MANUAL,
				CHECKBOX_SELECTALL_MANUAL, CHECKBOX_STATE_MANUAL,
				CHECKBOX_FULLNAME_MANUAL, CHECKBOX_CITY_MANUAL,
				CHECKBOX_CORR_POB_MANUAL, CHECKBOX_EIDANO_MANUAL,
				CHECKBOX_MOTHERSNAME_MANUAL, CHECKBOX_CNTRY_OF_CORR_MANUAL,
				CHECKBOX_COUNTRY_PER_RES_MANUAL, CHECKBOX_TELE_RES_MANUAL,
				CHECKBOX_TELE_MOB_MANUAL, CHECKBOX_EMAIL_MANUAL,
				CHECKBOX_DOB_MANUAL, CHECKBOX_PASSPORT_NO_MANUAL,
				CHECKBOX_PASS_ISS_DT_MANUAL, CHECKBOX_PASS_EXP_DT_MANUAL,
				CHECKBOX_NATIONALITY_MANUAL, CHECKBOX_VISA_NO_MANUAL,
				CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, CHECKBOX_PROFESSION_MANUAL,
				CHECKBOX_GENDER_MANUAL, CHECKBOX_COUNTRY_RES_MANUAL,
				CHECKBOX_FIRSTNAME_MANUAL, CHECKBOX_LASTNAME_MANUAL,
				CHECKBOX_PASSPORT_TYPE_MANUAL, CHECKBOX_COB_MANUAL, HD_SIX });
	}

	public boolean isPaperJourney() {
		String sQuery = "  select sourcing_channel, journey_type  from ext_ao WHERE wi_name = '"
				+ sWorkitemId + "'";
		logInfo("isPaperJourney", "sQuery : " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("isPaperJourney", "sOutput : " + sOutput);
		if (sOutput != null && sOutput.size() > 0) {
			if (sOutput.get(0).get(0).equalsIgnoreCase("LAPS")
					&& sOutput.get(0).get(1).equalsIgnoreCase("P")) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}

	public void updateCustSnoInProductGrid(int rowIndex) {
		int iCount = getGridCount(QUEUE_DC);
		int index = -1;
		int newIndex = -1;
		int result = -1;
		try {
			logInfo("updateCustSnoInProductGrid", "INSIDE");
			String sQuery = "update usr_0_product_selected set cid  = cid -1 where wi_name "
					+ " = '" + sWorkitemId + "' and cid >'" + rowIndex + "'";
			logInfo("updateCustSnoInProductGrid", "sQuery : " + sQuery);
			result = formObject.saveDataInDB(sQuery);
			logInfo("updateCustSnoInProductGrid", "result : " + result);
			int gridCount = getGridCount(PRODUCT_QUEUE);
			for (int i = 0; i < gridCount; i++) {
				formObject.setTableCellValue(PRODUCT_QUEUE, i, 14, i + 1 + "");
			}
			LoadDebitCardCombo();
			logInfo("updateCustSnoInProductGrid", "QUEUE_DC iCount : " + iCount);
			for (int i = 0; i < iCount; i++) {
				String oldProductValue = formObject.getTableCellValue(QUEUE_DC,
						i, 0);
				logInfo("updateCustSnoInProductGrid", "oldProductValue : "
						+ oldProductValue);
				String[] prodArr = oldProductValue.split("_");
				logInfo("updateCustSnoInProductGrid", "prodArr.length : "
						+ prodArr.length);
				if (prodArr.length > 0) {
					index = Integer.parseInt(prodArr[2]);
					logInfo("updateCustSnoInProductGrid", "index : " + index);
					logInfo("updateCustSnoInProductGrid", "rowIndex : "
							+ rowIndex);
					if (index > rowIndex) {
						newIndex = index - 1;
						logInfo("updateCustSnoInProductGrid", "newIndex : "
								+ newIndex);
						String newProductValue = prodArr[0] + "_" + prodArr[1]
								+ "_" + newIndex + "";
						logInfo("updateCustSnoInProductGrid",
								"newProductValue : " + newProductValue);
						formObject.setTableCellValue(QUEUE_DC, i, 0,
								newProductValue);
						String updateQuery = "UPDATE DEBIT_CARD_REP SET PROD_GROUP = '"
								+ newProductValue
								+ "' "
								+ "WHERE WI_NAME = '"
								+ sWorkitemId
								+ "' AND PROD_GROUP = '"
								+ oldProductValue + "'";
						logInfo("updateCustSnoInProductGrid", "updateQuery : "
								+ updateQuery);
						result = formObject.saveDataInDB(updateQuery);
						logInfo("updateCustSnoInProductGrid", "result : "
								+ result);
					}
				}
			}
		} catch (Exception e) {
			logError("updateCustSnoInProductGrid", e);
		}
	}

	public boolean addDebitCard() {
		logInfo("addDebitCard", "Inside addDebitCard");
		String sProductType = formObject.getValue(ACC_INFO_PG).toString();
		String Grptype = formObject.getValue(GROUP_TYPE).toString();
		String CardType = formObject.getValue(CARD_TYPE).toString();
		String EmbossName = formObject.getValue(EMBOSS_NAME).toString();
		String NewLink = formObject.getValue(NEW_LINK).toString();
		String existingCardNo = formObject.getValue(EXISTING_CARD_NO)
				.toString();
		if (sProductType.equalsIgnoreCase("")) {
			sendMessageValuesList(ACC_INFO_PG, "Please Select Product Type");
			return false;
		}
		if (Grptype.equalsIgnoreCase("")) {
			sendMessageValuesList(GROUP_TYPE, "Please Select Group Type");
			return false;
		}
		if (NewLink.equalsIgnoreCase("")) {
			sendMessageValuesList(NEW_LINK, "Please Select New/Link");
			return false;
		}
		if (NewLink.equalsIgnoreCase("New")) {
			if (CardType.equalsIgnoreCase("")) {
				sendMessageValuesList(CARD_TYPE, "Please Select Card Type");
				return false;
			}
			if (EmbossName.equalsIgnoreCase("")) {
				sendMessageValuesList(EMBOSS_NAME, "Please fill Emboss Name");
				return false;
			}
		} else {
			if (existingCardNo.equalsIgnoreCase("")) {
				sendMessageValuesList(EXISTING_CARD_NO,
						"Please Select Exisiting Card No");
				return false;
			}
		}
		int iRows = getGridCount(QUEUE_DC);
		if (NewLink.equalsIgnoreCase("Link")) {
			for (int i = 0; i < iRows; i++) {
				if (sProductType.equalsIgnoreCase(formObject.getTableCellValue(
						QUEUE_DC, i, 0))
						&& NewLink.equalsIgnoreCase(formObject
								.getTableCellValue(QUEUE_DC, i, 4))
						&& existingCardNo.equalsIgnoreCase(formObject
								.getTableCellValue(QUEUE_DC, i, 5))) {
					sendMessageValuesList("",
							"This mapping is already available");
					return false;
				}
			}
		}
		int sno = 1;
		if (NewLink.equalsIgnoreCase("New")) {
			for (int i = 0; i < iRows; i++) {
				if ("New".equalsIgnoreCase(formObject.getTableCellValue(
						QUEUE_DC, i, 4))) {
					sno = sno + 1;
				}
			}
		}
		String prodQueueColumns = "PRODUCT_GROUP,GROUP_TYPE,CARD_TYPE,EMBOSS_NAME,"
				+ "NEW_LINK,EXISTING_CARD_NO,CARD_NO";
		String prodQueueValues = sProductType + "##" + Grptype + "##"
				+ CardType + "##" + EmbossName + "##" + NewLink + "##"
				+ existingCardNo + "##" + "";
		LoadListViewWithHardCodeValues(QUEUE_DC, prodQueueColumns,
				prodQueueValues);
		if (NewLink.equalsIgnoreCase("New")) {
			formObject.setTableCellValue(QUEUE_DC, iRows, 6, "CARD_" + sno);
		}
		formObject.setValue(ACC_INFO_PG, "");
		formObject.setValue(GROUP_TYPE, "");
		formObject.setValue(CARD_TYPE, "");
		formObject.setValue(EMBOSS_NAME, "");
		formObject.setValue(NEW_LINK, "");
		formObject.setValue(EXISTING_CARD_NO, "");
		enableControls(new String[] { CARD_TYPE, NEW_LINK, EMBOSS_NAME,
				EXISTING_CARD_NO });
		return true;
	}

	public void setCorrCntry() {
		try {
			logInfo("setCorrCntry", "common Corr----");
			String sState = formObject.getValue(CORR_STATE).toString();
			String sCity = formObject.getValue(CP_CITY).toString();
			;
			logInfo("CORR_CNTRY", "sCity----" + sCity);
			if (formObject.getValue(CORR_CNTRY).toString()
					.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.clearCombo(CORR_STATE);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(CORR_STATE, states[i], states[i]);
				}
				formObject.setValue(CORR_STATE, sState);
				formObject.clearCombo(CP_CITY);
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(CP_CITY, states[i], states[i]);
				}
				formObject.setValue(CP_CITY, sState);
			} else {
				logInfo("CORR_CNTRY", "skddd----" + sCity);
				formObject.clearCombo(CORR_STATE);
				formObject.addItemInCombo(CORR_STATE, OTHERTHENUAESTATES,
						OTHERTHENUAESTATES);
				formObject.setValue(CORR_STATE, sState);
				formObject.clearCombo(CP_CITY);
				formObject.addItemInCombo(CP_CITY, "OTHERS");
				formObject.setValue(CP_CITY, sCity);
			}

		} catch (Exception e) {
			logError("setCorrCntry", e);
		}
	}

	public void setResCntry() {
		try {
			logInfo("setResCntry", "common res----");
			String sState = formObject.getValue(RES_STATE).toString();
			// String sCity = formObject.getValue(PA_CITY).toString();
			String sCity = formObject.getValue(RA_CITY).toString();
			logInfo("RES_CNTRY", "sCity RES1----" + sCity);
			if (formObject.getValue(RES_CNTRY).toString()
					.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.clearCombo(RES_STATE);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(RES_STATE, states[i], states[i]);
				}
				formObject.setValue(RES_STATE, sState);
				// formObject.clearCombo(PA_CITY);
				formObject.clearCombo(RA_CITY);
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(RA_CITY, states[i], states[i]);
				}
				// formObject.setValue(PA_CITY,sCity);
				formObject.setValue(RA_CITY, sCity);
				enableControls(new String[] { RES_MAKANI });
			} else {
				formObject.clearCombo(RES_STATE);
				formObject.addItemInCombo(RES_STATE, OTHERTHENUAESTATES,
						OTHERTHENUAESTATES);
				formObject.setValue(RES_STATE, sState);
				formObject.clearCombo(RA_CITY);
				logInfo("RES_CNTRY", "Lict COunt---" + getListCount(RA_CITY));
				formObject.addItemInCombo(RA_CITY, "OTHERS");
				formObject.setValue(RA_CITY, sCity);
				disableControls(new String[] { RES_MAKANI });
			}

		} catch (Exception e) {
			logError("setCorrCntry", e);
		}
	}

	public void setPermCntry() {
		try {
			logInfo("setPermCntry", "common Perm----");
			String sState = formObject.getValue(PERM_STATE).toString();
			String sCity = formObject.getValue(PA_CITY).toString();
			logInfo("PERM_CNTRY", "sCitykdd Perm----" + sCity);
			if (formObject.getValue(PERM_CNTRY).toString()
					.equalsIgnoreCase("UNITED ARAB EMIRATES")) {
				formObject.clearCombo(PERM_STATE);
				String[] states = UAESTATES.split(",");
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(PERM_STATE, states[i], states[i]);
				}
				formObject.setValue(PERM_STATE, sState);
				formObject.clearCombo(PA_CITY);
				for (int i = 0; i < states.length; i++) {
					formObject.addItemInCombo(PA_CITY, states[i], states[i]);
				}
				formObject.setValue(PA_CITY, sCity);
				enableControls(new String[] { PERM_MAKANI });
			} else {
				logInfo("CORR_CNTRY", "skddd----" + sCity);
				formObject.clearCombo(PERM_STATE);
				formObject.addItemInCombo(PERM_STATE, OTHERTHENUAESTATES,
						OTHERTHENUAESTATES);
				formObject.setValue(PERM_STATE, sState);
				formObject.clearCombo(PA_CITY);
				formObject.addItemInCombo(PA_CITY, "OTHERS");
				formObject.setValue(PA_CITY, sCity);
				disableControls(new String[] { PERM_MAKANI });
			}

		} catch (Exception e) {
			logError("setCorrCntry", e);
		}
	}

	public String afterAppRiskCheck(String data) {
		logInfo("afterAppRiskCheck", "INSIDE");
		saveScreeningDataCPD();
		String param = sWorkitemId + "','" + sProcessName;
		List<String> paramlist = new ArrayList<>();
		paramlist.add(PARAM_TEXT + sWorkitemId);
		paramlist.add(PARAM_TEXT + sProcessName);
		formObject.getDataFromStoredProcedure("SP_TRSD_EMAIL_NGF", paramlist);
		formObject.setStyle(BTN_SUBMIT, DISABLE, TRUE);
		if (submitCPDMakerValidations(data)) {
			if (!(formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Return to Originator")
					|| formObject.getValue(CRO_DEC).toString()
							.equalsIgnoreCase("Return") || formObject
					.getValue(CRO_DEC).toString().equalsIgnoreCase("Reject"))) {
				if (submitValidationForWorkItem(data)) {
					String msg2 = confirmOnSubmitInForLoop();
					if (msg2.equalsIgnoreCase("true")) {
						sendMessageList.clear();
						return getReturnMessage(true, BTN_SUBMIT, CA008);
					} else
						return msg2;
				}
			} else {
				sendMessageList.clear();
				return getReturnMessage(true, BTN_SUBMIT, CA008);
			}
		} else {
			if (!sendMessageList.isEmpty()) {
				return getReturnMessage(false, BTN_SUBMIT,
						sendMessageList.get(0).toString() + "###"
								+ sendMessageList.get(1).toString());
			}
		}
		logInfo("afterAppRiskCheck", "returning false");
		return getReturnMessage(false, BTN_SUBMIT);
	}

	public void setDisableCalculateAppRiskButton(String sWorkitemId) {
		logInfo("setDisableCalculateAppRiskButton", "Inside");
		int gridCount = -1;
		boolean cpdlastCustomer = false;
		boolean accoutnSowPoa = false;
		try {
			List<List<String>> sOutput = null;
			String sMode = "";
			String sQuery = "";
			String accOwnType = "";
			accOwnType = formObject.getValue(ACC_OWN_TYPE).toString();
			gridCount = getGridCount(ACC_RELATION);
			if (gridCount > 1) {
				for (int i = 0; i < gridCount; i++) {
					String val1 = formObject.getTableCellValue(ACC_RELATION, i,
							9);
					logInfo("setDisableCalculateAppRiskButton", "val1: " + val1);
					if ("POA".equalsIgnoreCase(val1)) {
						accoutnSowPoa = true;
						break;
					}
				}
			}
			logInfo("setDisableCalculateAppRiskButton", "accoutnSowPoa: "
					+ accoutnSowPoa);

			if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
				logInfo("setDisableCalculateAppRiskButton", "gridCount: "
						+ gridCount);
				String sQueryCPD = " select count(1) from usr_0_risk_assessment_data_cpd where wi_name = '"
						+ sWorkitemId + "'";
				logInfo("setDisableCalculateAppRiskButton", "sQueryCPD: "
						+ sQueryCPD);
				List<List<String>> sOutputCPD = formObject
						.getDataFromDB(sQueryCPD);
				String selectedIndex = formObject.getValue(SELECTED_ROW_INDEX)
						.toString();
				logInfo("setDisableCalculateAppRiskButton",
						"selectedIndex: "
								+ (gridCount - Integer.parseInt(sOutputCPD.get(
										0).get(0))));
				if (gridCount - Integer.parseInt(sOutputCPD.get(0).get(0)) == 0) {
					cpdlastCustomer = true;
					logInfo("setDisableCalculateAppRiskButton",
							"cpdlastCustomer: " + cpdlastCustomer);
				}
			} else {
				sMode = formObject.getValue(DATA_ENTRY_MODE).toString();
				sQuery = "select to_number(CUST_PROCESSED) -  to_number(no_of_cust_searched) as diff"
						+ " from ext_ao where wi_name = '" + sWorkitemId + "'";
				logInfo("setDisableCalculateAppRiskButton", "sQuery: " + sQuery
						+ ",accOwnType: " + accOwnType + ",sMode: " + sMode);
				sOutput = formObject.getDataFromDB(sQuery);
				logInfo("setDisableCalculateAppRiskButton", "sOutput: "
						+ sOutput);
			}
			if ((sOutput != null && sOutput.size() > 0) || cpdlastCustomer) {
				if ((sMode.equalsIgnoreCase("Detail Data Entry")
						&& "1".equalsIgnoreCase(sOutput.get(0).get(0)) && !accOwnType
							.equalsIgnoreCase("Single"))
						|| (sMode.equalsIgnoreCase("Quick Data Entry")
								&& "1".equalsIgnoreCase(sOutput.get(0).get(0)) && !accOwnType
									.equalsIgnoreCase("Single"))
						|| (cpdlastCustomer && !accOwnType
								.equalsIgnoreCase("Single"))
						|| (sMode.equalsIgnoreCase("Detail Data Entry")
								&& "1".equalsIgnoreCase(sOutput.get(0).get(0)) && accoutnSowPoa)
						|| (sMode.equalsIgnoreCase("Quick Data Entry")
								&& "1".equalsIgnoreCase(sOutput.get(0).get(0)) && accoutnSowPoa)
						|| (cpdlastCustomer && accoutnSowPoa)) {
					formObject.setStyle(BTN_APP_LEVEL_RISK, DISABLE, FALSE);
					appLevelMandatoryCheck = true;
					logInfo("appLevelMandatoryCheck",
							"appLevelMandatoryCheck : "
									+ appLevelMandatoryCheck);
				} else {
					formObject.setStyle(BTN_APP_LEVEL_RISK, DISABLE, TRUE);
					appLevelMandatoryCheck = false;
					logInfo("appLevelMandatoryCheck",
							"appLevelMandatoryCheck : "
									+ appLevelMandatoryCheck);
				}
			}
		} catch (Exception e) {
			logError("Exception in setDisableCalculateAppRiskButton ", e);
		}
	}

	public void makeEnableRekeyFields() {
		logInfo("makeEnableRekeyFields", "INSIDE makeEnableRekeyFields");
		try {
			if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO_CHECK)
					|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)) {
				System.out.println("INSIDE IF");
				String FrameNames[] = { SEC_PERSONAL_DET, SEC_CONTACT_DET_CP,
						SEC_CONTACT_DET_PA, SEC_INT_DETAIL, SEC_PERSONAL_DET,
						FRAME_CLIENTQUESTIONS, SEC_CONTACT_DET_RA,
						SEC_CONTACT_DET_PA, SEC_CONTACT_DET_CP, SEC_INT_DETAIL,
						SEC_GEN_INFO, SEC_EMPLYMNT_DETAILS,
						SEC_FUND_EXP_RELTNSHP, SEC_ASSESS_OTH_INFO,
						SEC_BNK_REL_UAE_OVRS, SEC_SIGN_OFF };
				disableControls(FrameNames);
			} else {
				logInfo("makeEnableRekeyFields", "INSIDE sAcitivityName"
						+ sActivityName);
				String FrameNames[] = { SEC_PERSONAL_DET,
						FRAME_CLIENTQUESTIONS, FrameFATCA, SEC_CRS_DETAILS,
						CRS_CHECKBOX };
				disableControls(FrameNames);
			}
			String controlDisable[] = { FCR_PREFIX, FCR_FIRSTNAME,
					FCR_LASTNAME, FCR_NAME, FCR_SHORTNAME, FCR_MOTHERSNAME,
					FCR_EIDANO, FCR_ADDRESS, FCR_CNTRY, FCR_STATE, FCR_CITY,
					FCR_RESIDENT, FCR_PER_CNTRY, FCR_PH, FCR_MOBILE, FCR_EMAIL,
					FCR_DOB, FCR_PASSPORTNO, FCR_PASSPORTISSDATE,
					FCR_PASSPORTEXPDATE, FCR_PASSTYPE, FCR_NATIONALITY,
					FCR_COUNTRYBIRTH, CITYBIRTH_FCR, FCR_VISANO,
					FCR_VISAISSDATE, FCR_VISAEXPDATE, FCR_PROFESSION,
					FCR_GENDER, FCR_EMPLYR_NAME, EIDA_PREFIX, EIDA_FIRSTNAME,
					EIDA_LASTNAME, EIDA_NAME, EIDA_SHORTNAME, EIDA_MOTHERNAME,
					EIDA_EIDANO, EIDA_ADDRESS, EIDA_CNTRY, EIDA_STATE,
					EIDA_CITY, EIDA_RESIDENT, EIDA_PER_CNTRY, EIDA_PH,
					EIDA_MOBILE, EIDA_EMAIL, EIDA_DOB, EIDA_PASSPORTNO,
					EIDA_PASSPORTISSDATE, EIDA_PASSPORTEXPDATE, EIDA_PSSTYPE,
					EIDA_NATIONALITY, EIDA_COUNTRYBIRTH, CITYBIRTH_EIDA,
					EIDA_VISANO, EIDA_VISAISSDATE, EIDA_VISAEXPDATE,
					EIDA_PROFESSION, EIDA_GENDER, EIDA_EMPLYR_NAME,
					MANUAL_PREFIX, MANUAL_FIRSTNAME, MANUAL_LASTNAME,
					MANUAL_NAME, MANUAL_SHORTNAME, MANUAL_MOTHERNAME,
					MANUAL_EIDANO, MANUAL_ADDRESS, MANUAL_CNTRY, MANUAL_STATE,
					MANUAL_CITY, MANUAL_RESIDENT, MANUAL_PER_CNTRY, MANUAL_PH,
					MANUAL_MOBILE, MANUAL_EMAIL, MANUAL_DOB, MANUAL_PASSPORTNO,
					MANUAL_PASSPORTISSDATE, MANUAL_PASSPORTEXPDATE,
					MANUAL_PASSTYPE, MANUAL_NATIONALITY, MANUAL_COUNTRYBIRTH,
					MANUAL_VISANO, MANUAL_VISAISSDATE, MANUAL_VISAEXPDATE,
					MANUAL_PROFESSION, MANUAL_GENDER, MANUAL_EMPLYR_NAME,
					FCR_VISASTATUS };
			disableControls(controlDisable);
			String checkBoxDisable[] = { CHECKBOX_PREFIX_FCR,
					CHECKBOX_FULLNAME_FCR, CHECKBOX_SHORTNAME_FCR,
					CHECKBOX_DOB_FCR, CHECKBOX_PASSPORT_NO_FCR,
					CHECKBOX_PASS_ISS_DT_FCR, CHECKBOX_PASS_EXP_DT_FCR,
					CHECKBOX_VISA_NO_FCR, CHECKBOX_VISA_ISSUE_DATE_FCR,
					CHECKBOX_VISA_EXPIRY_DATE_FCR, CHECKBOX_NATIONALITY_FCR,
					CHECKBOX_MOTHERSNAME_FCR, CHECKBOX_EIDANO_FCR,
					CHECKBOX_CORR_POB_FCR, CHECKBOX_CITY_FCR,
					CHECKBOX_STATE_FCR, CHECKBOX_COUNTRY_PER_RES_FCR,
					CHECKBOX_TELE_RES_FCR, CHECKBOX_TELE_MOB_FCR,
					CHECKBOX_EMAIL_FCR, CHECKBOX_PROFESSION_FCR,
					CHECKBOX_CNTRY_OF_CORR_FCR, CHECKBOX_GENDER_FCR,
					CHECKBOX_EMP_NAME_FCR, CHECKBOX_COUNTRY_RES_FCR,
					CHECKBOX_PREFIX_EIDA, CHECKBOX_FULLNAME_EIDA,
					CHECKBOX_SHORTNAME_EIDA, CHECKBOX_DOB_EIDA,
					CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASS_ISS_DT_EIDA,
					CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_VISA_NO_EIDA,
					CHECKBOX_VISA_ISSUE_DATE_EIDA,
					CHECKBOX_VISA_EXPIRY_DATE_EIDA, CHECKBOX_NATIONALITY_EIDA,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_EIDANO_EIDA,
					CHECKBOX_CORR_POB_EIDA, CHECKBOX_CITY_EIDA,
					CHECKBOX_STATE_EIDA, CHECKBOX_CNTRY_OF_CORR_EIDA,
					CHECKBOX_COUNTRY_PER_RES_EIDA, CHECKBOX_TELE_RES_EIDA,
					CHECKBOX_TELE_MOB_EIDA, CHECKBOX_EMAIL_EIDA,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_GENDER_EIDA,
					CHECKBOX_EMP_NAME_EIDA, CHECKBOX_COUNTRY_RES_EIDA,
					CHECKBOX_PREFIX_MANUAL, CHECKBOX_FULLNAME_MANUAL,
					CHECKBOX_SHORTNAME_MANUAL, CHECKBOX_PASSPORT_NO_MANUAL,
					CHECKBOX_PASS_ISS_DT_MANUAL, CHECKBOX_PASS_EXP_DT_MANUAL,
					CHECKBOX_VISA_NO_MANUAL, CHECKBOX_VISA_ISSUE_DATE_MANUAL,
					CHECKBOX_VISA_EXPIRY_DATE_MANUAL,
					CHECKBOX_NATIONALITY_MANUAL, CHECKBOX_MOTHERSNAME_MANUAL,
					CHECKBOX_CORR_POB_MANUAL, CHECKBOX_CITY_MANUAL,
					CHECKBOX_STATE_MANUAL, CHECKBOX_CNTRY_OF_CORR_MANUAL,
					CHECKBOX_COUNTRY_PER_RES_MANUAL, CHECKBOX_TELE_RES_MANUAL,
					CHECKBOX_PROFESSION_MANUAL, CHECKBOX_GENDER_MANUAL,
					CHECKBOX_EMP_NAME_MANUAL, CHECKBOX_COUNTRY_RES_MANUAL,
					CHECKBOX_COUNTRY_RES_MANUAL, CHECKBOX_CORR_POB_FCR,
					CHECKBOX_SELECTALL_EIDA, CHECKBOX_SELECTALL_MANUAL,
					CHECKBOX_FIRSTNAME_FCR, CHECKBOX_FIRSTNAME_EIDA,
					CHECKBOX_LASTNAME_FCR, CHECKBOX_LASTNAME_EIDA,
					CHECKBOX_LASTNAME_MANUAL, CHECKBOX_SELECTALL_FCR,
					CHECKBOX_CORR_POB_EIDA, CHECKBOX_CORR_POB_MANUAL,
					CHECKBOX_PASSPORT_TYPE_FCR, CHECKBOX_PASSPORT_TYPE_EIDA,
					CHECKBOX_PASSPORT_TYPE_MANUAL, CHECKBOX_COB_FCR,
					CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, BTN_DEDUPE_SEARCH,
					CHECKBOX_VISA_STATUS_MANUAL, CHECKBOX_VISA_STATUS_FCR,
					CHECKBOX_VISA_STATUS_EIDA, CHECKBOX_FIRSTNAME_MANUAL };
			disableControls(checkBoxDisable);
			populateReKey();
		} catch (Exception e) {
			logError("makeEnableRekeyFields", e);
		}
	}

	public String changeFieldsBackColor(String custSerialNo) {
		String fieldList = "";
		try {
			logInfo("changeFieldsBackColor", "INSIDE");
			// formObject.setStyle(MANUAL_PREFIX+"_label",
			// "fontcolor","green");//test
			String sQuery = "SELECT label_ID FROM USR_0_FIELD_MAPPING WHERE DBCOLUMN IN (SELECT FIELD_Name "
					+ "FROM USR_0_MAKER_CHANGE_TRACKER WHERE WI_NAME='"
					+ sWorkitemId
					+ "' AND OLD_VALUE<>New_Value AND "
					+ "cust_sno='" + custSerialNo + "')";
			logInfo("changeFieldsBackColor", "sQuery: " + sQuery);
			List<List<String>> output = formObject.getDataFromDB(sQuery);
			logInfo("changeFieldsBackColor", "output: " + output);
			for (int i = 0; i < output.size(); i++) {
				fieldList = fieldList + output.get(i).get(0) + "#";
			}
			fieldList = fieldList.substring(0, fieldList.length() - 1);
		} catch (Exception e) {
			logError("changeFieldsBackColor", e);
		}
		logInfo("changeFieldsBackColor", "returning fieldList: " + fieldList);
		return fieldList;
	}

	public boolean mandatoryCustInfoFields() {
		logInfo("mandatoryCustInfoFields", "INSIDE");
		String sAccRelation = "";
		String sBankRelation = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 9);
			sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
		} catch (Exception e) {
			logError("mandatoryCustInfoFields", e);
			;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_PREFIX_FCR,
				CHECKBOX_PREFIX_EIDA, CHECKBOX_PREFIX_MANUAL, FCR_PREFIX,
				EIDA_PREFIX, MANUAL_PREFIX, CA037, "Mandatory", "Prefix")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_FULLNAME_FCR,
				CHECKBOX_FULLNAME_EIDA, CHECKBOX_FULLNAME_MANUAL, FCR_NAME,
				EIDA_NAME, MANUAL_NAME, CA011, "Mandatory", "Full Name")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_SHORTNAME_FCR,
				CHECKBOX_SHORTNAME_EIDA, CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME, EIDA_SHORTNAME, MANUAL_SHORTNAME, CA0184,
				"Mandatory", "Short Name")) {
			return false;
		}
		if (!ValidateName(CHECKBOX_FULLNAME_FCR, CHECKBOX_FULLNAME_EIDA,
				CHECKBOX_FULLNAME_MANUAL, FCR_NAME, EIDA_NAME, MANUAL_NAME,
				CA0134, CA0138)) {
			return false;
		}
		//Added by Shivanshu ATP-472
		if(!ValidateName(CHECKBOX_FIRSTNAME_FCR,CHECKBOX_FIRSTNAME_EIDA,CHECKBOX_FIRSTNAME_MANUAL,
				FCR_FIRSTNAME,EIDA_FIRSTNAME,MANUAL_FIRSTNAME,"First Name "+CA0205,"First Name "+CA0206)) {
			return false;
		}
		if(!ValidateName(CHECKBOX_LASTNAME_FCR,CHECKBOX_LASTNAME_EIDA,CHECKBOX_LASTNAME_MANUAL,
				FCR_LASTNAME,EIDA_LASTNAME,MANUAL_LASTNAME,"Last Name "+CA0205,"Last Name "+CA0206)) {
			return false;
		}
		if(!ValidateName(CHECKBOX_SHORTNAME_FCR,CHECKBOX_SHORTNAME_EIDA,CHECKBOX_SHORTNAME_MANUAL,
				FCR_SHORTNAME,EIDA_SHORTNAME,MANUAL_SHORTNAME,"Short Name "+CA0205,"Short Name "+CA0206)) {
			return false;
		}
		//END ATP-472
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (!ValidateComparisonData(CHECKBOX_MOTHERSNAME_FCR,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_MOTHERSNAME_MANUAL,
					FCR_MOTHERSNAME, EIDA_MOTHERNAME, MANUAL_MOTHERNAME,
					CA0123, "Mandatory", "Mother Name")) {
				return false;
			}
		} else {
			if (!ValidateComparisonData(CHECKBOX_MOTHERSNAME_FCR,
					CHECKBOX_MOTHERSNAME_EIDA, CHECKBOX_MOTHERSNAME_MANUAL,
					FCR_MOTHERSNAME, EIDA_MOTHERNAME, MANUAL_MOTHERNAME,
					CA0123, "Optional", "Mother Name")) {
				return false;
			}
		}
		if (!ValidateName(CHECKBOX_MOTHERSNAME_FCR, CHECKBOX_MOTHERSNAME_EIDA,
				CHECKBOX_MOTHERSNAME_MANUAL, FCR_MOTHERSNAME, EIDA_MOTHERNAME,
				MANUAL_MOTHERNAME, CA0139, CA0140)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR, CHECKBOX_EIDANO_EIDA,
				CHECKBOX_EIDANO_MANUAL, FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO,
				CA0167, "Optional", "EIDA number")) {
			return false;
		}
		if (!validateEidaNo(CHECKBOX_EIDANO_FCR, CHECKBOX_EIDANO_EIDA,
				CHECKBOX_EIDANO_MANUAL, FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO,
				CA0171)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_CORR_POB_FCR,
				CHECKBOX_CORR_POB_EIDA, CHECKBOX_CORR_POB_MANUAL, FCR_ADDRESS,
				EIDA_ADDRESS, MANUAL_ADDRESS, CA048, "Mandatory", "PO Box")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_CNTRY_OF_CORR_FCR,
				CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
				FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY, CA020, "Mandatory",
				"Country of Correspondence Address")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKFCR, CHECKEIDA, CHECKMANUAL,
				FCR_RESIDENT, EIDA_RESIDENT, MANUAL_RESIDENT, CA0155,
				"Mandatory", "Residential Address Country")) {
			return false;
		}
		if (!ValidateComparisonDataComboForDot(CHECKBOX_COB_FCR,
				CHECKBOX_COB_EIDA, CHECKBOX_COB_MANUAL, FCR_COUNTRYBIRTH,
				EIDA_COUNTRYBIRTH, MANUAL_COUNTRYBIRTH, CA0178, "Mandatory",
				"Country of Birth")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_COUNTRY_PER_RES_FCR,
				CHECKBOX_COUNTRY_PER_RES_EIDA, CHECKBOX_COUNTRY_PER_RES_MANUAL,
				FCR_PER_CNTRY, EIDA_PER_CNTRY, MANUAL_PER_CNTRY, CA074,
				"Mandatory", "Country of Permanant Residence")) {
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_BULK_EOD_CHECKER)
				|| sActivityName
						.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO_CHECK)
				|| sActivityName
						.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO_CHECK)) {
			if (!ValidateComparisonDataComboForDot(CHECKBOX_CNTRY_OF_CORR_FCR,
					CHECKBOX_CNTRY_OF_CORR_EIDA, CHECKBOX_CNTRY_OF_CORR_MANUAL,
					FCR_CNTRY, EIDA_CNTRY, MANUAL_CNTRY, CA0181, "Mandatory",
					"Country of Correspondence address")) {
				return false;
			}
			if (!ValidateComparisonDataComboForDot(
					CHECKBOX_COUNTRY_PER_RES_FCR,
					CHECKBOX_COUNTRY_PER_RES_EIDA,
					CHECKBOX_COUNTRY_PER_RES_MANUAL, FCR_PER_CNTRY,
					EIDA_PER_CNTRY, MANUAL_PER_CNTRY, CA0182, "Mandatory",
					"Country of Permanent address")) {
				return false;
			}
			if (!ValidateComparisonDataComboForDot(CHECKFCR, CHECKEIDA,
					CHECKMANUAL, FCR_RESIDENT, EIDA_RESIDENT, MANUAL_RESIDENT,
					CA0183, "Mandatory", "Country of Residence address")) {
				return false;
			}
		}
		if (!ValidateComparisonData(CHECKBOX_TELE_RES_FCR,
				CHECKBOX_TELE_RES_EIDA, CHECKBOX_TELE_RES_MANUAL, FCR_PH,
				EIDA_PH, MANUAL_PH, CA057, "Optional", "Phone number")) {
			return false;
		}
		if (flag_phone_start.equalsIgnoreCase("true")) {
			if (!ValidateMobileNoStart(CHECKBOX_TELE_RES_MANUAL, MANUAL_PH,
					"Mandatory", CA0161, "Residence Phone Number")) {
				return false;
			}
		}
		if (!ValidatePhoneNo(CHECKBOX_TELE_RES_FCR, CHECKBOX_TELE_RES_EIDA,
				CHECKBOX_TELE_RES_MANUAL, FCR_PH, EIDA_PH, MANUAL_PH, CA0127)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_TELE_MOB_FCR,
				CHECKBOX_TELE_MOB_EIDA, CHECKBOX_TELE_MOB_MANUAL, FCR_MOBILE,
				EIDA_MOBILE, MANUAL_MOBILE, CA059, "Mandatory", "Mobile number")) {
			return false;
		}
		if (flag_phone_start.equalsIgnoreCase("true")) {
			if (!ValidateMobileNoStart(CHECKBOX_TELE_MOB_MANUAL, MANUAL_MOBILE,
					"Optional", CA0161, "Mobile Number ")) {
				return false;
			}
		}
		if (!validateMobileNo(CHECKBOX_TELE_MOB_FCR, CHECKBOX_TELE_MOB_EIDA,
				CHECKBOX_TELE_MOB_MANUAL, FCR_MOBILE, EIDA_MOBILE,
				MANUAL_MOBILE, CA0126)) {
			return false;
		}
		if (sBankRelation.equalsIgnoreCase("New")) {
			if (!ValidateComparisonData(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL, CA054, "Optional", "Email ID")) {
				return false;
			}
		} else {
			if (!ValidateComparisonData(CHECKBOX_EMAIL_FCR,
					CHECKBOX_EMAIL_EIDA, CHECKBOX_EMAIL_MANUAL, FCR_EMAIL,
					EIDA_EMAIL, MANUAL_EMAIL, CA054, "Optional", "Email ID")) {
				return false;
			}
		}
		if (!ValidateComparisonData(CHECKBOX_DOB_FCR, CHECKBOX_DOB_EIDA,
				CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB, MANUAL_DOB, CA012,
				"Mandatory", "Date of Birth")) {
			return false;
		}
		if (!validateDOB(CHECKBOX_DOB_FCR, CHECKBOX_DOB_EIDA,
				CHECKBOX_DOB_MANUAL, FCR_DOB, EIDA_DOB, MANUAL_DOB)) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASSPORT_NO_FCR,
				CHECKBOX_PASSPORT_NO_EIDA, CHECKBOX_PASSPORT_NO_MANUAL,
				FCR_PASSPORTNO, EIDA_PASSPORTNO, MANUAL_PASSPORTNO, CA0120,
				"Mandatory", "Passport number")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASS_ISS_DT_FCR,
				CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_ISS_DT_MANUAL,
				FCR_PASSPORTISSDATE, EIDA_PASSPORTISSDATE,
				MANUAL_PASSPORTISSDATE, CA0121, "Mandatory",
				"Passport Issue Date")) {
			return false;
		}
		if (!validateFutureDates(CHECKBOX_PASS_ISS_DT_FCR,
				CHECKBOX_PASS_ISS_DT_EIDA, CHECKBOX_PASS_ISS_DT_MANUAL,
				FCR_PASSPORTISSDATE, EIDA_PASSPORTISSDATE,
				MANUAL_PASSPORTISSDATE, "Passport Issue")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_PASS_EXP_DT_FCR,
				CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_PASS_EXP_DT_MANUAL,
				FCR_PASSPORTEXPDATE, EIDA_PASSPORTEXPDATE,
				MANUAL_PASSPORTEXPDATE, CA0122, "Mandatory",
				"Passport Expiry Date")) {
			return false;
		}
		if (!validatePastDates(CHECKBOX_PASS_EXP_DT_FCR,
				CHECKBOX_PASS_EXP_DT_EIDA, CHECKBOX_PASS_EXP_DT_MANUAL,
				FCR_PASSPORTEXPDATE, EIDA_PASSPORTEXPDATE,
				MANUAL_PASSPORTEXPDATE, "Passport Expiry")) {
			return false;
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_NATIONALITY_FCR,
				CHECKBOX_NATIONALITY_EIDA, CHECKBOX_NATIONALITY_MANUAL,
				FCR_NATIONALITY, EIDA_NATIONALITY, MANUAL_NATIONALITY, CA013,
				"Mandatory", "Nationality")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_NO_FCR,
				CHECKBOX_VISA_NO_EIDA, CHECKBOX_VISA_NO_MANUAL, FCR_VISANO,
				EIDA_VISANO, MANUAL_VISANO, CA0135, "Optional", "Visa No")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_ISSUE_DATE_FCR,
				CHECKBOX_VISA_ISSUE_DATE_EIDA, CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				FCR_VISAISSDATE, EIDA_VISAISSDATE, MANUAL_VISAISSDATE, CA0136,
				"Optional", "Visa Issue Date")) {
			return false;
		}
		if (!validateFutureDates(CHECKBOX_VISA_ISSUE_DATE_FCR,
				CHECKBOX_VISA_ISSUE_DATE_EIDA, CHECKBOX_VISA_ISSUE_DATE_MANUAL,
				FCR_VISAISSDATE, EIDA_VISAISSDATE, MANUAL_VISAISSDATE,
				"Visa Issue")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_VISA_EXPIRY_DATE_FCR,
				CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAEXPDATE,
				EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE, CA0137, "Optional",
				"Visa Expiry Date")) {
			return false;
		}
		if (!validatePastDates(CHECKBOX_VISA_EXPIRY_DATE_FCR,
				CHECKBOX_VISA_EXPIRY_DATE_EIDA,
				CHECKBOX_VISA_EXPIRY_DATE_MANUAL, FCR_VISAEXPDATE,
				EIDA_VISAEXPDATE, MANUAL_VISAEXPDATE, "Visa Expiry")) {
			return false;
		}
		if (!sAccRelation.equalsIgnoreCase("Minor")) {
			if (!ValidateComparisonDataCombo(CHECKBOX_PROFESSION_FCR,
					CHECKBOX_PROFESSION_EIDA, CHECKBOX_PROFESSION_MANUAL,
					FCR_PROFESSION, EIDA_PROFESSION, MANUAL_PROFESSION, CA075,
					"Mandatory", "Profession")) {
				return false;
			}
		}
		if (!ValidateComparisonDataCombo(CHECKBOX_GENDER_FCR,
				CHECKBOX_GENDER_EIDA, CHECKBOX_GENDER_MANUAL, FCR_GENDER,
				EIDA_GENDER, MANUAL_GENDER, CA041, "Mandatory", "Gender")) {
			return false;
		}
		if (!ValidateComparisonData(CHECKBOX_EMP_NAME_FCR,
				CHECKBOX_EMP_NAME_EIDA, CHECKBOX_EMP_NAME_MANUAL,
				FCR_EMPLYR_NAME, EIDA_EMPLYR_NAME, MANUAL_EMPLYR_NAME, CA0145,
				"Optional", "Employer Name")) {
			return false;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
			if (formObject.getValue(DRP_RESEIDA).toString()
					.equalsIgnoreCase("no")
					&& formObject.getValue(VISA_STATUS).toString()
							.equalsIgnoreCase("Residency Visa")) {
				if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR,
						CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
						FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, CA0167,
						"Mandatory", "EIDA number")) {
					return false;
				}
			}
		}
		/*
		 * if(!validateMobileNo(CHECKBOX_TELE_MOB_FCR,CHECKBOX_TELE_MOB_EIDA,
		 * CHECKBOX_TELE_MOB_MANUAL
		 * ,FCR_MOBILE,EIDA_MOBILE,MANUAL_MOBILE,CA0126)) {
		 * if(!mobileConfirmFlag) { return false; } }
		 */
		return true;
	}

	public boolean mandatoryPersonalDetailsFields() {
		logInfo("mandatoryPersonalDetailsFields", "INSIDE");
		String sAccRelation = "";
		String sBankRelation = "";
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());
			sAccRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 9);
			sBankRelation = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 7);
		} catch (Exception e) {
			logError("mandatoryPersonalDetailsFields", e);
			;
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (formObject.getValue(RES_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(RES_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(RES_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(RES_CNTRY, CA0185);
				return false;
			}
			if (formObject.getValue(PERM_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(PERM_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(PERM_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(PERM_CNTRY, CA0186);
				return false;
			}
			if (formObject.getValue(CORR_CNTRY).toString().equalsIgnoreCase("")
					|| formObject.getValue(CORR_CNTRY).toString()
							.equalsIgnoreCase("")
					|| formObject.getValue(CORR_CNTRY).toString()
							.equalsIgnoreCase(".")) {
				sendMessageValuesList(CORR_CNTRY, CA0187);
				return false;
			}
			String sVisaType = returnVisaStatus();
			if (sVisaType.equalsIgnoreCase("Residency Visa")
					&& formObject.getValue(DRP_RESEIDA).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(DRP_RESEIDA,
						"Please select Value of Resident without EIDA");
				return false;
			}
			if (formObject.getValue(DRP_RESEIDA).toString()
					.equalsIgnoreCase("no")
					&& sVisaType.equalsIgnoreCase("Residency Visa")) {
				if (!ValidateComparisonData(CHECKBOX_EIDANO_FCR,
						CHECKBOX_EIDANO_EIDA, CHECKBOX_EIDANO_MANUAL,
						FCR_EIDANO, EIDA_EIDANO, MANUAL_EIDANO, CA0167,
						"Mandatory", "EIDA number")) {
					return false;
				}
			}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (formObject.getValue(CP_CITY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(CP_CITY, CA051);
				return false;
			}
			logInfo("MandatoryContactInfo",
					"RA_CITY::" + formObject.getValue(RA_CITY).toString());
			if(!(formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade"))) {
			if (formObject.getValue(RA_CITY).toString().equalsIgnoreCase("")) {
				sendMessageValuesList(RA_CITY, CA066);
				return false;
			}
		}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			if (!validateOfficeNo(CP_TELEOFFICE, CR0003)) {
				return false;
			}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_CUST_INFO)
				|| sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			String employertype = formObject.getValue(ED_EMP_TYPE).toString();
			String employeeid = formObject.getValue(ED_EMPLYID).toString();
			if (employertype.equalsIgnoreCase("ADCB") && employeeid != null) {
				if (!(employeeid.matches("[0-9]+"))) {
					sendMessageValuesList(ED_EMPLYID, CA0179);
					return false;
				}
				if (!(employeeid.length() >= 4)) {
					sendMessageValuesList(ED_EMPLYID, CA0180);
					return false;
				}
			}
		}
		if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
			if (formObject.getValue(VISA_STATUS).toString()
					.equalsIgnoreCase("Residency Visa")
					&& formObject.getValue(DRP_RESEIDA).toString()
							.equalsIgnoreCase("")) {
				sendMessageValuesList(DRP_RESEIDA,
						"Please select Value of Resident without EIDA");
				return false;
			}
		}
		return true;
	}

	public boolean validateDebitCard(String sProductCode, int iSelectedRow) {
		logInfo("validateDebitCard", "INSIDE");
		int iRowsDebitCard = getGridCount(QUEUE_DC);
		if (sProductCode.equalsIgnoreCase("")
				|| sProductCode.equalsIgnoreCase(formObject.getTableCellValue(
						PRODUCT_QUEUE, iSelectedRow, 1))) {
			return true;
		} else if (iRowsDebitCard > 0) {
			sendMessageValuesList(QUEUE_DC,
					"Please remove the rows from Debit Card frame"
							+ " as you are going to change product selection");
			formObject.setTableCellValue(PRODUCT_QUEUE, iSelectedRow, 1,
					sProductCode);
			return false;
		}
		return true;
	}

	public void refreshWorkitemWithDoc() {
		String ngoAddDocOutput = "";
		String sQuery = "";
		String docIndex = "";
		try {
			log.info("refreshWorkitemWithDoc starts refreshed");
			String sQueryName = "select name from pdbdocument where documentindex in  (select documentindex from pdbdocumentcontent where parentfolderindex = "
					+ " (select itemindex from ext_ao where wi_name ='"
					+ sWorkitemId + "') )";
			log.info("refreshWorkitemWithDoc starts refreshed : " + sQueryName);
			List<List<String>> sOutputName = formObject
					.getDataFromDB(sQueryName);
			log.info("refreshWorkitemWithDoc starts refreshed : " + sOutputName);
			if (sOutputName != null && sOutputName.size() > 0) {
				for (int i = 0; i < sOutputName.size(); i++) {
					sQuery = "select parentfolderindex, documentorderno, documentindex, versionnumber, owner, imageindex, documentsize,"
							+ "commnt from (select b.parentfolderindex as parentfolderindex, documentorderno as documentorderno, "
							+ "b.documentindex as documentindex, a.versionnumber as versionnumber, a.owner as owner,"
							+ "a.imageindex||'#'||a.volumeid as imageindex, a.documentsize as documentsize, a.commnt as commnt "
							+ "from pdbdocument a, pdbdocumentcontent b, pdbfolder c where a.name='"
							+ sOutputName.get(i).get(0)
							+ "'  and b.parentfolderindex=c.folderindex  "
							+ "and c.name='"
							+ sWorkitemId
							+ "' and a.documentindex=b.documentindex  order by documentorderno desc) where rownum=1";
					log.info("document data query : " + sQuery);
					@SuppressWarnings("rawtypes")
					List debugList = formObject
							.getDataFromDB("select parentfolderindex,documentorderno,documentindex,versionnumber,owner, imageindex,documentsize,"
									+ "commnt from (select b.parentfolderindex as parentfolderindex, documentorderno as documentorderno,"
									+ "b.documentindex as documentindex,a.versionnumber as versionnumber, a.owner as owner,"
									+ "a.imageindex||'#'||a.volumeid as imageindex,a.documentsize as documentsize,a.commnt as commnt "
									+ "from pdbdocument a,pdbdocumentcontent b,pdbfolder c where a.name='"
									+ sOutputName.get(i).get(0)
									+ "'  and "
									+ "b.parentfolderindex=c.folderindex  and c.name='"
									+ sWorkitemId
									+ "' and a.documentindex=b.documentindex  "
									+ "order by documentorderno desc) where rownum=1");
					log.info("debug list: " + debugList);

					@SuppressWarnings("unchecked")
					List<List<String>> sOutputlistDoc = formObject
							.getDataFromDB("select parentfolderindex,documentorderno,documentindex,versionnumber,owner, imageindex,documentsize,"
									+ "commnt from (select b.parentfolderindex as parentfolderindex, documentorderno as documentorderno,"
									+ "b.documentindex as documentindex,a.versionnumber as versionnumber, a.owner as owner,"
									+ "a.imageindex||'#'||a.volumeid as imageindex,a.documentsize as documentsize,a.commnt as commnt "
									+ "from pdbdocument a,pdbdocumentcontent b,pdbfolder c where a.name='"
									+ sOutputName.get(i).get(0)
									+ "'  and "
									+ "b.parentfolderindex=c.folderindex  and c.name='"
									+ sWorkitemId
									+ "' and a.documentindex=b.documentindex  "
									+ "order by documentorderno desc) where rownum=1");
					log.info("size : " + sOutputlistDoc.size());
					log.info("list : " + sOutputlistDoc);
					if (!sOutputlistDoc.isEmpty()) {
						docIndex = sOutputlistDoc.get(0).get(2);
						ngoAddDocOutput = ngoAddDocOutput
								+ "<?xml version=\"1.0\"?><NGOAddDocument_Output><Option>NGOAddDocument</Option>"
								+ "<Status>0</Status><Document><LoginUserRights>1111111111</LoginUserRights>"
								+ "<ParentFolderIndex>"
								+ sOutputlistDoc.get(0).get(0)
								+ "</ParentFolderIndex><DocOrderNo>"
								+ sOutputlistDoc.get(0).get(1)
								+ "</DocOrderNo>"
								+ "<DocumentIndex>"
								+ sOutputlistDoc.get(0).get(2)
								+ "</DocumentIndex><DocumentVersionNo>"
								+ sOutputlistDoc.get(0).get(3)
								+ "</DocumentVersionNo>"
								+ "<DocumentName>"
								+ sOutputName.get(i).get(0)
								+ "</DocumentName><OwnerIndex>"
								+ sOutputlistDoc.get(0).get(4)
								+ "</OwnerIndex><CreationDateTime>2015-06-26 11:11:38</CreationDateTime>"
								+ "<RevisedDateTime>2015-06-26 11:11:38</RevisedDateTime><AccessDateTime>2015-06-26 11:11:38</AccessDateTime>"
								+ "<VersionFlag>N</VersionFlag><AccessType>I</AccessType><DocumentType>N</DocumentType><CreatedByApp>0</CreatedByApp>"
								+ "<ISIndex>"
								+ sOutputlistDoc.get(0).get(5)
								+ "</ISIndex><NoOfPages>0</NoOfPages><DocumentSize>"
								+ sOutputlistDoc.get(0).get(6)
								+ "</DocumentSize>"
								+ "<FTSDocumentIndex>0</FTSDocumentIndex><ODMADocumentIndex>not defined</ODMADocumentIndex><EnableLog>N</EnableLog>"
								+ "<DocumentLock>N</DocumentLock><Comment>"
								+ sOutputlistDoc.get(0).get(7)
								+ "</Comment><Author>ashish3</Author><FTSFlag>PP</FTSFlag>"
								+ "<DocStatus>A</DocStatus><ExpiryDateTime>2115-06-26 11:11:38</ExpiryDateTime><FinalizedFlag>N</FinalizedFlag>"
								+ "<FinalizedDateTime>2115-06-26 11:11:38</FinalizedDateTime><CheckoutStatus>N</CheckoutStatus>"
								+ "<ACLMoreFlag>N</ACLMoreFlag><PullPrintFlag>N</PullPrintFlag><MainGroupIndex>0</MainGroupIndex>"
								+ "<ThumbNailFlag>N</ThumbNailFlag><ISSecureFlag>N</ISSecureFlag><Owner>ashish3</Owner>"
								+ "<CreatedByAppName>pdf</CreatedByAppName></Document></NGOAddDocument_Output>$$$$";
						log.info("ngo add document output : " + ngoAddDocOutput);
					}
				}
			}

			log.info("refreshWorkitemWithDoc ends");
		} catch (Exception e) {
			log.error("exception in refreshWorkitemWithDoc: ", e);
		}
		sendMessageValuesList("ngoAddOutput", ngoAddDocOutput.toString());
	}

	public boolean addProductInGrid() {
		try {
			logInfo("addProductInGrid", "INSIDE");
			int iRows = getGridCount(PRODUCT_QUEUE);
			int iSelectedRow = iRows + 1;
			String prod = "";
			String productTableName = "USR_0_PRODUCT_OFFERED";
			String fieldTrnsfrFrmAccNo = "";
			String fieldModeOfFunding = "";
			String fieldAmtTrnsfrd = "";
			String fieldDebitCurr = "";
			String fieldAccNo = "";
			if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
				prod = formObject.getValue("table94_prod_code").toString();
				fieldTrnsfrFrmAccNo = "table94_trnsfr_from_acc_no";
				fieldModeOfFunding = "table94_mode_of_funding";
				fieldAmtTrnsfrd = "table94_amt_trnsfered";
				fieldDebitCurr = "table94_trnsfr_from_currency";
				fieldAccNo = "table94_trnsfr_from_acc_no";
			} else if (sActivityName
					.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
				prod = formObject.getValue("table130_prod_code").toString();
				fieldTrnsfrFrmAccNo = "table130_trnsfr_from_acc_no";
				fieldModeOfFunding = "table130_mode_of_funding";
				fieldAmtTrnsfrd = "table130_amt_trnsfered";
				fieldDebitCurr = "table130_trnsfr_from_currency";
				fieldAccNo = "table130_trnsfr_from_acc_no";
			} else if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				prod = formObject.getValue("table103_prod_code").toString();
				productTableName = "USR_0_PRODUCT_OFFERED_CPD";
				fieldTrnsfrFrmAccNo = "table103_trnsfr_from_acc_no";
				fieldModeOfFunding = "table103_mode_of_funding";
				fieldAmtTrnsfrd = "table103_amt_trnsfered";
				fieldDebitCurr = "table103_trnsfr_from_currency";
				fieldAccNo = "table103_trnsfr_from_acc_no";
			}
			prod = prod.trim();
			logInfo("addProductInGrid", "prod: " + prod);
			if (prod.isEmpty()) {
				sendMessageValuesList("", "Product code cannot be blank.");
				return false;
			}
			if (!prod.equalsIgnoreCase("")) {
				int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
				String sCustID = formObject.getTableCellValue(ACC_RELATION,
						iPrimaryCust - 1, 2);
				boolean bvalid = validateDebitCard(prod, iSelectedRow);
				if (bvalid) {
					String sAccClass = formObject.getValue(ACC_HOME_BRANCH)
							.toString();
					// prod=objChkRepeater.getValue(iSelectedRow,
					// "AO_PRODUCT_QUEUE.PROD_CODE");
					// if(controlName.equalsIgnoreCase("PROD_CODE")) {}
					String sCurrCode = setProductCurrencyCombo1(prod, sAccClass);
					logInfo("addProductInGrid", "sCurrCode: " + sCurrCode);
					if (sActivityName
							.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
						formObject
								.addItemInCombo("table94_currency", sCurrCode);
						formObject.setValue("table94_currency", sCurrCode);
						formObject.setStyle("table94_currency", DISABLE, FALSE);
					} else if (sActivityName
							.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
						formObject.addItemInCombo("table130_currency",
								sCurrCode);
						formObject.setValue("table130_currency", sCurrCode);
						formObject
								.setStyle("table130_currency", DISABLE, FALSE);
					} else if (sActivityName
							.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
						formObject.addItemInCombo("table103_currency",
								sCurrCode);
						formObject.setValue("table103_currency", sCurrCode);
						formObject
								.setStyle("table103_currency", DISABLE, FALSE);
					}
					// String sCurrCode =
					// formObject.getTableCellValue(PRODUCT_QUEUE, iSelectedRow,
					// 3); //CURRENCY
					String sQuery = "select b.CURRENCY_SHORT_NAME as CURRENCY_SHORT_NAME,b.product_desc as PRODUCT_DESC, "
							+ "DECODE(a.CHEQUE_BOOK_FAC,'Y','Yes','No') CHEQUE_BOOK from "
							+ productTableName
							+ " B ,"
							+ "USR_0_PRODUCT_MASTER a where b.product_code='"
							+ prod
							+ "' AND b.WI_NAME ='"
							+ sWorkitemId
							+ "'  "
							+ "and a.product_code=b.product_code";
					logInfo("addProductInGrid", "sQuery: " + sQuery);
					List<List<String>> sOutput = formObject
							.getDataFromDB(sQuery);
					logInfo("addProductInGrid", "sOutput: " + sOutput);
					String sEmail = "SELECT final_email FROM USR_0_CUST_TXN WHERE cust_sno='"
							+ getPrimaryCustomerSNO()
							+ "' AND WI_NAME = '"
							+ sWorkitemId + "'";
					logInfo("addProductInGrid", "sEmail query: " + sEmail);
					List<List<String>> sEmailOutput = formObject
							.getDataFromDB(sEmail);
					String email = "";
					if (sEmailOutput.size() > 0) {
						email = sEmailOutput.get(0).get(0);
					}
					if (email.equalsIgnoreCase("")) {
						String sQuery1 = "SELECT COUNT(SUB_PRODUCT_TYPE) as SUB_PRODUCT_TYPE FROM "
								+ "USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE = '"
								+ prod
								+ "' AND UPPER(SUB_PRODUCT_TYPE) "
								+ "='ETIHAD'";
						logInfo("addProductInGrid", "sQuery1: " + sQuery1);
						List<List<String>> sOutput1 = formObject
								.getDataFromDB(sQuery1);
						logInfo("addProductInGrid", "sOutput1: " + sOutput1);
						if (!sOutput1.get(0).get(0).equalsIgnoreCase("0")) {
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
								sendMessageValuesList("table94_prod_code",
										"Primary Customer's Email Id Is Mandatory For Etihad Product.");
								formObject.setValue("table94_prod_code", "");
								formObject.clearCombo("table94_currency");
								formObject.setValue("table94_currency", "");
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
								sendMessageValuesList("table130_prod_code",
										"Primary Customer's Email Id Is Mandatory For Etihad Product.");
								formObject.setValue("table130_prod_code", "");
								formObject.clearCombo("table130_currency");
								formObject.setValue("table130_currency", "");
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
								sendMessageValuesList("table103_prod_code",
										"Primary Customer's Email Id Is Mandatory For Etihad Product.");
								formObject.setValue("table103_prod_code", "");
								formObject.clearCombo("table103_currency");
								formObject.setValue("table103_currency", "");
							}
							return false;
						}
					}
					int iNoOfProduct = sOutput.size();
					if (iNoOfProduct == 0) {
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
							sendMessageValuesList("table94_prod_code",
									"This product is not allowed for this customer");
							formObject.setValue("table94_prod_code", "");
						} else if (sActivityName
								.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
							sendMessageValuesList("table130_prod_code",
									"This product is not allowed for this customer");
							formObject.setValue("table130_prod_code", "");
						} else if (sActivityName
								.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
							sendMessageValuesList("table103_prod_code",
									"This product is not allowed for this customer");
							formObject.setValue("table103_prod_code", "");
						}
						return false;
					} else {
						String sChequebook = sOutput.get(0).get(2);
						logInfo("addProductInGrid", "sChequebook: "
								+ sChequebook);
						if (sChequebook.equalsIgnoreCase("Yes")
								|| sChequebook.equalsIgnoreCase("Y")) {
							logInfo("addProductInGrid",
									"inside sChequebook.. is Yes");
							sChequebook = "Yes";
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
								formObject.setValue("table94_cheque_book",
										sChequebook);
								formObject.setStyle("table94_cheque_book",
										DISABLE, FALSE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
								formObject.setValue("table130_cheque_book",
										sChequebook);
								formObject.setStyle("table130_cheque_book",
										DISABLE, FALSE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
								formObject.setValue("table103_cheque_book",
										sChequebook);
								formObject.setStyle("table103_cheque_book",
										DISABLE, FALSE);
							}
						} else {
							logInfo("addProductInGrid",
									"inside sChequebook.. is No");
							sChequebook = "No";
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
								formObject.setValue("table94_cheque_book",
										sChequebook);
								formObject.setStyle("table94_cheque_book",
										DISABLE, TRUE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
								formObject.setValue("table130_cheque_book",
										sChequebook);
								formObject.setStyle("table130_cheque_book",
										DISABLE, TRUE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
								formObject.setValue("table103_cheque_book",
										sChequebook);
								formObject.setStyle("table103_cheque_book",
										DISABLE, TRUE);
							}
						}
						String getQuery = "SELECT visa_status, RES_EIDA FROM USR_0_CUST_TXN WHERE cust_sno='"
								+ getPrimaryCustomerSNO()
								+ "' AND WI_NAME = '"
								+ sWorkitemId + "'";
						logInfo("addProductInGrid", "getQuery: " + getQuery);
						List<List<String>> getQueryOutput = formObject
								.getDataFromDB(getQuery);
						logInfo("addProductInGrid", "getQueryOutput: "
								+ getQueryOutput);
						String visa = getQueryOutput.get(0).get(0);
						String withoutEida = getQueryOutput.get(0).get(1);
						logInfo("addProductInGrid", "Visa: " + visa);
						if (visa.equalsIgnoreCase("Under Processing")
								|| withoutEida.equalsIgnoreCase("Yes")) {
							logInfo("addProductInGrid",
									"Under Processing: "
											+ formObject.getTableCellValue(
													PRODUCT_QUEUE,
													iSelectedRow, 6));
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
								formObject
										.setValue("table94_cheque_book", "No");
								formObject.setStyle("table94_cheque_book",
										DISABLE, TRUE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
								formObject.setValue("table130_cheque_book",
										"No");
								formObject.setStyle("table130_cheque_book",
										DISABLE, TRUE);
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
								formObject.setValue("table103_cheque_book",
										"No");
								formObject.setStyle("table103_cheque_book",
										DISABLE, TRUE);
							}
						}
						// String sProductDesc[] =
						// getTagValues(sOutput,"PRODUCT_DESC").split(",");
						// System.out.println("sProductDesc[]...04102017....."+sProductDesc[0]);
						// objChkRepeater.setValue(iSelectedRow,
						// "AO_PRODUCT_QUEUE.PROD_DESC", sProductDesc[0]);
						// objChkRepeater.setValue(iSelectedRow,
						// "AO_PRODUCT_QUEUE.WI_NAME", sWorkitemID);
						// objChkRepeater.setValue(iSelectedRow,"AO_PRODUCT_QUEUE.CID",(iRows-1)+"");
						logInfo("addProductInGrid", "set prod desc: "
								+ sOutput.get(0).get(1));
						logInfo("addProductInGrid", "set winame: "
								+ sWorkitemId);
						logInfo("addProductInGrid", "set cid: " + iRows + 1);
						if (sActivityName
								.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
							formObject.setValue("table94_prod_desc", sOutput
									.get(0).get(1));
							formObject
									.setValue("table94_wiNumber", sWorkitemId);
							formObject.setValue("table94_cid", iRows + 1 + "");
						} else if (sActivityName
								.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
							formObject.setValue("table130_prod_desc", sOutput
									.get(0).get(1));
							formObject.setValue("table130_wiNumber",
									sWorkitemId);
							formObject.setValue("table130_cid", iRows + 1 + "");
						} else if (sActivityName
								.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
							formObject.setValue("table103_prod_desc", sOutput
									.get(0).get(1));
							formObject.setValue("table103_wiNumber",
									sWorkitemId);
							formObject.setValue("table103_cid", iRows + 1 + "");
						}
						sQuery = "select (case when a.COD_PROD_TYPE='C' then TO_CHAR(c.CODE) else DECODE(TO_CHAR"
								+ "(c.EQV_ISLAMIC_BR_CODE),NULL,TO_CHAR(c.CODE),TO_CHAR(c.EQV_ISLAMIC_BR_CODE)) end) CODE "
								+ "from "
								+ productTableName
								+ " B,USR_0_PRODUCT_MASTER A,USR_0_HOME_BRANCH c where "
								+ "a.product_code= b.product_code and UPPER(b.WI_NAME) = UPPER('"
								+ sWorkitemId
								+ "') and  "
								+ "c.HOME_BRANCH='"
								+ sAccClass
								+ "' and b.product_code='"
								+ prod
								+ "' and rownum=1";
						logInfo("addProductInGrid", "sQuery: " + sQuery);
						sOutput = formObject.getDataFromDB(sQuery);
						logInfo("addProductInGrid", "sOutput: " + sOutput);
						if (sOutput.size() > 0) {
							if (sActivityName
									.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
								formObject.setValue("table94_acc_brnch",
										sOutput.get(0).get(0));
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
								formObject.setValue("table130_acc_brnch",
										sOutput.get(0).get(0));
							} else if (sActivityName
									.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
								formObject.setValue("table103_acc_brnch",
										sOutput.get(0).get(0));
							}
						}
						// objChkRepeater.setValue(iSelectedRow,
						// "AO_PRODUCT_QUEUE.ACC_BRNCH",
						// getTagValues(sOutput,"CODE"));
						sQuery = "SELECT SUB_PRODUCT_TYPE FROM USR_0_PRODUCT_TYPE_MASTER WHERE PRODUCT_CODE ='"
								+ prod + "'";
						logInfo("addProductInGrid", "sQuery: " + sQuery);
						sOutput = formObject.getDataFromDB(sQuery);
						logInfo("addProductInGrid", "sOutput: " + sOutput);
						if (sOutput.size() > 0
								&& sOutput.get(0).get(0)
										.equalsIgnoreCase("Etihad")) {
							Frame37_CPD_ENable();
						}
					}
					sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
							+ sWorkitemId
							+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE "
							+ "IN ('6','8')) AND CUSTOMER_ID='" + sCustID + "'";
					logInfo("addProductInGrid", "sQuery: " + sQuery);
					sOutput = formObject.getDataFromDB(sQuery);
					logInfo("addProductInGrid", "sOutput: " + sOutput);
					// String sDebitAccNo = sOutput.get(0).get(0);
					// logInfo("manageFundTransfer","sDebitAccNo: "+sDebitAccNo);
					if (sOutput.size() > 0) {
						for (int i = 0; i < sOutput.size(); i++) {
							formObject.addItemInCombo(fieldTrnsfrFrmAccNo,
									sOutput.get(i).get(0));
						}
					}
					String amt = formObject.getValue(fieldAmtTrnsfrd)
							.toString();
					String debitCurr = formObject.getValue(fieldDebitCurr)
							.toString();
					String debitAccNo = formObject.getValue(fieldAccNo)
							.toString();
					logInfo("addProductInGrid", "amt: " + amt + ", debitCurr: "
							+ debitCurr + ", debitAccNo: " + debitAccNo);
					if (formObject.getValue(fieldModeOfFunding).toString()
							.equalsIgnoreCase("Transfer - Internal")) {
						logInfo("addProductInGrid", "Transfer - Internal");
						if (debitAccNo.isEmpty()) {
							sendMessageValuesList(fieldAccNo,
									"Please select debit account number.");
							return false;
						} else if (amt.trim().isEmpty()) {
							sendMessageValuesList(fieldAmtTrnsfrd,
									"Please enter the amount to be transferred.");
							return false;
						} else if (debitCurr.trim().isEmpty()) {
							sendMessageValuesList("",
									"Debit currency cannot be blank");
							return false;
						}
					}
				}
			}
			LoadDebitCardCombo();
			EnableFamilyReffered();
		} catch (Exception e) {
			logError("addProductInGrid", e);
		}
		return true;
	}

	public boolean submitValidation(String data) {
		logInfo("submitValidation", "Inside data: " + data);
		try {
			if (isControlVisible(DOC_APPROVAL_OBTAINED)
					&& isControlVisible(COURT_ORD_TRADE_LIC)) {
				if (formObject.getValue(DOC_APPROVAL_OBTAINED).toString()
						.equalsIgnoreCase("false")
						&& formObject.getValue(COURT_ORD_TRADE_LIC).toString()
								.equalsIgnoreCase("false")) {
					sendMessageValuesList("",
							"Please select the appropriate checkbox to complete the validation");
					return false;
				}
			}
			if (formObject.getValue(P_ECB_CHQ_VALIDATION).toString()
					.equalsIgnoreCase("false")
					&& formObject.getValue(P_ECB_REASON).equals("")) {
				sendMessageValuesList(P_ECB_REASON,
						"Please enter reason for skipping the ECB check");
				return false;
			} else if (!validateEligibilityField()) {
				sendMessageValuesList(BTN_ECB_REFRSH,
						"Please click Refresh button to check eligibility status for cheque book.");
				return false;
			}
			/*
			 * if(formObject.getValue(CRO_DEC).toString().equalsIgnoreCase("Approve"
			 * )) { if(!checkMandatoryDoc(data)) { return false; } }
			 */
			String value = formObject.getValue(NIG_MAKER).toString();
			if (value.equalsIgnoreCase("yes")) {
				sendMessageValuesList("", "Selected passport holder Residents"
						+ " does not meet conditions,"
						+ "\nHence not allowed to open Account. "
						+ "Do you still want to proceed with account opening?");
				return true;
			}
		} catch (Exception e) {
			logError("submitValidation", e);
		}
		return true;
	}

	public boolean submitValidationNIG(String controlName, String data) {
		logInfo("submitValidationNIG", "Inside controlName: " + controlName
				+ ",data: " + data);
		try {
			String value = formObject.getValue(NIG_MAKER).toString();
			if (value.equalsIgnoreCase("yes")) {
				if (data.equalsIgnoreCase("interSubmit")) {
					formObject.setValue("NIG_CHECKER", "YES");
					String updatequery = "update USR_0_CUST_TXN set NIGEXCEPTIONCHECKKER='YES' "
							+ "Where WI_NAME='" + sWorkitemId + "'";
					logInfo("submitValidationNIG", "updatequery: "
							+ updatequery);
					formObject.saveDataInDB(updatequery);
					// submitQDECheckerValidations(controlName,data);
				}
			} else {
				formObject.setStyle(BTN_SUBMIT, DISABLE, FALSE);
				return false;
			}
		} catch (Exception e) {
			logError("submitValidationNIG", e);
		}
		return true;
	}

	public void editButtonVisible() {/*
									 * logInfo("editButtonVisible","Inside");
									 * boolean flag = false; try{ String sQuery
									 * =
									 * "select curr_ws_name , prev_ws_name , scan_mode from "
									 * +
									 * sExtTable+" Where wi_name='"+sWorkitemId+
									 * "'" +
									 * "  and (back_route_flag = 'false' or back_route_flag IS NULL)"
									 * ;
									 * logInfo("editButtonVisible","sQuery: "+sQuery
									 * ); List<List<String>> sOutput =
									 * formObject.getDataFromDB(sQuery);
									 * logInfo(
									 * "editButtonVisible","sOutput: "+sOutput);
									 * if(sOutput != null && sOutput.size() > 0)
									 * {
									 * if((sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CPD_MAKER) &&
									 * sOutput.get(0).get(
									 * 2).equalsIgnoreCase("Existing WMS ID"))
									 * ||
									 * (sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CPD_MAKER) &&
									 * sOutput.get(0).get(
									 * 2).equalsIgnoreCase("Existing WMS ID")))
									 * { formObject.setStyle(EDIT,VISIBLE,
									 * TRUE); formObject.setStyle(EDIT,DISABLE,
									 * FALSE);
									 * logInfo("editButtonVisible","EDIT Visible"
									 * ); } else {
									 * formObject.setStyle(EDIT,VISIBLE, FALSE);
									 * logInfo
									 * ("editButtonVisible","EDIT InVisible"); }
									 * }
									 * 
									 * if(sOutput != null && sOutput.size() > 0)
									 * { boolean ws1 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CPD_MAKER) &&
									 * sOutput.get(0).get(
									 * 2).equalsIgnoreCase("Existing WMS ID")) ?
									 * true: false; boolean ws2 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(
									 * 0).get(1).equalsIgnoreCase(ACTIVITY_CPD_MAKER
									 * ) &&
									 * sOutput.get(0).get(2).equalsIgnoreCase
									 * ("Existing WMS ID")) ? true: false;
									 * boolean ws3 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_DDE_CUST_INFO) &&
									 * sOutput.get(0).
									 * get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws4 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_QDE_CUST_INFO) &&
									 * sOutput.get(0).
									 * get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws5 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_DDE_ACCOUNT_INFO_CHECK) &&
									 * sOutput.get(0).get(2).equalsIgnoreCase(
									 * "Existing WMS ID")) ? true: false;
									 * boolean ws6 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO_CHECK) &&
									 * sOutput.get(0).get(2).equalsIgnoreCase(
									 * "Existing WMS ID")) ? true: false;
									 * boolean ws7 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase
									 * (ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CONTACT_CENTER) &&
									 * sOutput.get(0)
									 * .get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws8 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CONTACT_CENTER) &&
									 * sOutput.get(0)
									 * .get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws9 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_BULK_EOD_CHECKER) &&
									 * sOutput.get(
									 * 0).get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws10 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_BULK_EOD_CHECKER) &&
									 * sOutput.get(
									 * 0).get(2).equalsIgnoreCase("Existing WMS ID"
									 * )) ? true: false; boolean ws11 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_DDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CPD_CHECKER) &&
									 * sOutput.get(0).get
									 * (2).equalsIgnoreCase("Existing WMS ID"))
									 * ? true: false; boolean ws12 =
									 * (sOutput.get(0).get(0).equalsIgnoreCase(
									 * ACTIVITY_QDE_ACCOUNT_INFO) &&
									 * sOutput.get(0).get(1).equalsIgnoreCase(
									 * ACTIVITY_CPD_CHECKER) &&
									 * sOutput.get(0).get
									 * (2).equalsIgnoreCase("Existing WMS ID"))
									 * ? true: false; if(ws1 || ws2 || ws3 ||
									 * ws4 || ws5 || ws6 || ws7 || ws8 || ws9 ||
									 * ws10 || ws11 || ws12) {
									 * formObject.setStyle(EDIT,VISIBLE, TRUE);
									 * formObject.setStyle(EDIT,DISABLE, FALSE);
									 * logInfo
									 * ("editButtonVisible","EDIT Visible"); }
									 * else { formObject.setStyle(EDIT,VISIBLE,
									 * FALSE);
									 * logInfo("editButtonVisible","EDIT InVisible"
									 * ); } } } catch(Exception e) {
									 * logError("Exception in editButtonVisible"
									 * ,e); }
									 * logInfo("editButtonVisible","Outside");
									 */
	}

	public void setEIDAInPersonalAndKYCTab() {
		logInfo("setEIDAInPersonalAndKYCTab", "INSIDE");
		if (formObject.getValue(CHECKBOX_EIDANO_FCR).toString()
				.equalsIgnoreCase(FALSE)
				&& formObject.getValue(CHECKBOX_EIDANO_EIDA).toString()
						.equalsIgnoreCase(FALSE)
				&& formObject.getValue(CHECKBOX_EIDANO_MANUAL).toString()
						.equalsIgnoreCase(FALSE)) {
			if (!sActivityName.equalsIgnoreCase(ACTIVITY_QDE_CUST_INFO)) {
				formObject.setValue(PD_EIDANO, "");
			}
			formObject.setValue(DRP_RESEIDA, "Yes");
			enableControls(new String[] { DRP_RESEIDA });
		} else {
			formObject.setValue(DRP_RESEIDA, "No");
			formObject.setStyle(DRP_RESEIDA, DISABLE, TRUE);
		}
	}

	public void LoadInstantDelivery() {
		String sQuery = "select INSTANT_DEL_NO,INSTANT_DEL_YES FROM EXT_AO WHERE WI_NAME  = '"
				+ sWorkitemId + "'";
		logInfo("LoadInstantDelivery", sQuery);
		List<List<String>> Squery = formObject.getDataFromDB(sQuery);
		if (Squery != null && Squery.size() > 0) {
			if ("true".equalsIgnoreCase(Squery.get(0).get(0))) {
				logInfo("LoadInstantDelivery", "NO..");
				formObject.setValue(RD_INST_DEL, "No");
			} else if ("true".equalsIgnoreCase(Squery.get(0).get(1))) {
				logInfo("LoadInstantDelivery", "YES..");
				formObject.setValue(RD_INST_DEL, "Yes");
			} else {
				logInfo("LoadInstantDelivery", "NOthing..");
				formObject.setValue(RD_INST_DEL, "");
			}
		}
	}

	public void enableDisableChequebookField() {
		logInfo("enableDisableCheckbook", "INSIDE");
		String productTableName = "USR_0_PRODUCT_OFFERED";
		String prod = "";
		String chqBkFieldName = "";
		if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
			prod = formObject.getValue("table94_prod_code").toString();
			chqBkFieldName = "table94_cheque_book";
		} else if (sActivityName.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
			prod = formObject.getValue("table130_prod_code").toString();
			chqBkFieldName = "table130_cheque_book";
		} else if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
			prod = formObject.getValue("table103_prod_code").toString();
			productTableName = "USR_0_PRODUCT_OFFERED_CPD";
			chqBkFieldName = "table103_cheque_book";
		}
		logInfo("enableDisableCheckbook", "product code: " + prod
				+ ", chqBkFieldName: " + chqBkFieldName);
		String sQuery = "select b.CURRENCY_SHORT_NAME as CURRENCY_SHORT_NAME,b.product_desc as PRODUCT_DESC, "
				+ "DECODE(a.CHEQUE_BOOK_FAC,'Y','Yes','No') CHEQUE_BOOK from "
				+ productTableName
				+ " B ,"
				+ "USR_0_PRODUCT_MASTER a where b.product_code='"
				+ prod
				+ "' AND b.WI_NAME ='"
				+ sWorkitemId
				+ "'  "
				+ "and a.product_code=b.product_code";
		logInfo("enableDisableCheckbook", "sQuery: " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("enableDisableCheckbook", "sOutput: " + sOutput);
		String sChequebook = "";
		if (sOutput.size() > 0) {
			sChequebook = sOutput.get(0).get(2);
			logInfo("enableDisableCheckbook", "sChequebook: " + sChequebook);
			if (sChequebook.equalsIgnoreCase("Yes")
					|| sChequebook.equalsIgnoreCase("Y")) {
				logInfo("enableDisableCheckbook", "inside sChequebook.. is Yes");
				formObject.setStyle(chqBkFieldName, DISABLE, FALSE);
			} else {
				logInfo("enableDisableCheckbook", "inside sChequebook.. is No");
				formObject.setStyle(chqBkFieldName, DISABLE, TRUE);
			}
		}
		if (sChequebook == null || sChequebook.isEmpty()) {
			logInfo("enableDisableCheckbook", "inside sChequebook.. is No");
			formObject.setStyle(chqBkFieldName, DISABLE, TRUE);
		}
		String getQuery = "SELECT visa_status, RES_EIDA FROM USR_0_CUST_TXN WHERE cust_sno='"
				+ getPrimaryCustomerSNO()
				+ "' AND WI_NAME = '"
				+ sWorkitemId
				+ "'";
		logInfo("enableDisableCheckbook", "getQuery: " + getQuery);
		List<List<String>> getQueryOutput = formObject.getDataFromDB(getQuery);
		logInfo("enableDisableCheckbook", "getQueryOutput: " + getQueryOutput);
		if (getQueryOutput.size() > 0) {
			String visa = getQueryOutput.get(0).get(0);
			String resEida = getQueryOutput.get(0).get(1);
			logInfo("enableDisableCheckbook", "getquery: " + visa);
			if (visa.equalsIgnoreCase("Under Processing")
					|| "Yes".equalsIgnoreCase(resEida)) {
				formObject.setStyle(chqBkFieldName, DISABLE, TRUE);
			}
		}
	}

	public void manageFundTransfer() {
		logInfo("manageFundTransfer", "INSIDE");
		String fieldModeOfFund = "";
		String fieldAmtTrnsfr = "";
		String fieldChqBkNo = "";
		String fieldTrnsfrFrmAccNo = "";
		String fieldTrnsfrFrmCurr = "";
		String fieldAccBal = "";
		int iPrimaryCust = Integer.parseInt(getPrimaryCustomerSNO());
		String sCustID = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust - 1, 2);
		String sRelation = formObject.getTableCellValue(ACC_RELATION,
				iPrimaryCust - 1, 9);
		logInfo("manageFundTransfer", "sCustID: " + sCustID + ", sRelation: "
				+ sRelation);
		int iRows = getGridCount(PRODUCT_QUEUE);
		logInfo("manageFundTransfer", "iRows: " + iRows);
		if (ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table94_mode_of_funding";
			fieldAmtTrnsfr = "table94_amt_trnsfered";
			fieldChqBkNo = "table94_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table94_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table94_trnsfr_from_currency";
			fieldAccBal = "table94_from_acc_bal";
		} else if (ACTIVITY_QDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table130_mode_of_funding";
			fieldAmtTrnsfr = "table130_amt_trnsfered";
			fieldChqBkNo = "table130_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table130_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table130_trnsfr_from_currency";
			fieldAccBal = "table130_from_acc_bal";
		} else if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table103_mode_of_funding";
			fieldAmtTrnsfr = "table103_amt_trnsfered";
			fieldChqBkNo = "table103_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table103_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table103_trnsfr_from_currency";
			fieldAccBal = "table103_from_acc_bal";
		}
		String sMode = formObject.getValue(fieldModeOfFund).toString();
		logInfo("manageFundTransfer", "sMode: " + sMode);
		if (sMode.equalsIgnoreCase("Transfer - Internal")) {
			if (sRelation.equalsIgnoreCase("JAF")) {
				sendMessageValuesList("",
						"Fund Transfer is not allowed for JAF customer.");
				formObject.setValue(fieldModeOfFund, "");
				return;
			}
			enableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr });
			disableControls(new String[] { fieldChqBkNo });
			formObject.setValue(fieldChqBkNo, "");
			formObject.clearCombo(fieldTrnsfrFrmAccNo);
			String sQuery = "SELECT ACC_NO FROM USR_0_PRODUCT_EXISTING WHERE WI_NAME ='"
					+ sWorkitemId
					+ "' AND ACC_STATUS IN (SELECT DESCRIPTION FROM USR_0_ACCOUNT_STATUS_CODE WHERE CODE "
					+ "IN ('6','8')) AND CUSTOMER_ID='" + sCustID + "'";
			logInfo("manageFundTransfer", "sQuery: " + sQuery);
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			logInfo("manageFundTransfer", "sOutput: " + sOutput);
			// String sDebitAccNo = sOutput.get(0).get(0);
			// logInfo("manageFundTransfer","sDebitAccNo: "+sDebitAccNo);
			if (sOutput.size() > 0) {
				for (int i = 0; i < sOutput.size(); i++) {
					formObject.addItemInCombo(fieldTrnsfrFrmAccNo,
							sOutput.get(i).get(0));
				}
			}
		} else if (sMode.equalsIgnoreCase("Cheque")) {
			disableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr });
			enableControls(new String[] { fieldChqBkNo });
			clearControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr,
					fieldTrnsfrFrmCurr, fieldAccBal });
		} else {
			disableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr,
					fieldChqBkNo });
			clearControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr,
					fieldTrnsfrFrmCurr, fieldAccBal, fieldChqBkNo });
			if (sRelation.equalsIgnoreCase("JAF")
					&& sMode.equalsIgnoreCase("Transfer-External")) {
				sendMessageValuesList("",
						"Fund Transfer is not allowed for JAF customer.");
				formObject.setValue(fieldModeOfFund, "");
			}
		}
		// if(iRows>0) {}
	}

	public void enableDisableProductFields() {
		logInfo("enableDisableProductFields", "INSIDE");
		String fieldModeOfFund = "";
		String fieldAmtTrnsfr = "";
		String fieldChqBkNo = "";
		String fieldTrnsfrFrmAccNo = "";
		String fieldTrnsfrFrmCurr = "";
		String fieldAccBal = "";
		if (ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table94_mode_of_funding";
			fieldAmtTrnsfr = "table94_amt_trnsfered";
			fieldChqBkNo = "table94_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table94_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table94_trnsfr_from_currency";
			fieldAccBal = "table94_from_acc_bal";
		} else if (ACTIVITY_QDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table130_mode_of_funding";
			fieldAmtTrnsfr = "table130_amt_trnsfered";
			fieldChqBkNo = "table130_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table130_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table130_trnsfr_from_currency";
			fieldAccBal = "table130_from_acc_bal";
		} else if (ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
			fieldModeOfFund = "table103_mode_of_funding";
			fieldAmtTrnsfr = "table103_amt_trnsfered";
			fieldChqBkNo = "table103_cheque_book_no";
			fieldTrnsfrFrmAccNo = "table103_trnsfr_from_acc_no";
			fieldTrnsfrFrmCurr = "table103_trnsfr_from_currency";
			fieldAccBal = "table103_from_acc_bal";
		}
		String sMode = formObject.getValue(fieldModeOfFund).toString();
		logInfo("manageFundTransfer", "sMode: " + sMode);
		if (sMode.equalsIgnoreCase("Transfer - Internal")) {
			enableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr });
			disableControls(new String[] { fieldChqBkNo });
		} else if (sMode.equalsIgnoreCase("Cheque")) {
			disableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr });
			enableControls(new String[] { fieldChqBkNo });
		} else {
			disableControls(new String[] { fieldTrnsfrFrmAccNo, fieldAmtTrnsfr,
					fieldChqBkNo });
		}
	}

	public boolean checkFundTransferFields() {
		try {
			logInfo("checkFundTransferFields", "INSIDE");
			String fieldAmtTrnsfrd = "";
			String fieldDebitCurr = "";
			String fieldModeOfFunding = "";
			String fieldAccNo = "";
			if (sActivityName.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO)) {
				fieldModeOfFunding = "table94_mode_of_funding";
				fieldAmtTrnsfrd = "table94_amt_trnsfered";
				fieldDebitCurr = "table94_trnsfr_from_currency";
				fieldAccNo = "table94_trnsfr_from_acc_no";
			} else if (sActivityName
					.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO)) {
				fieldModeOfFunding = "table130_mode_of_funding";
				fieldAmtTrnsfrd = "table130_amt_trnsfered";
				fieldDebitCurr = "table130_trnsfr_from_currency";
				fieldAccNo = "table130_trnsfr_from_acc_no";
			} else if (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER)) {
				fieldModeOfFunding = "table103_mode_of_funding";
				fieldAmtTrnsfrd = "table103_amt_trnsfered";
				fieldDebitCurr = "table103_trnsfr_from_currency";
				fieldAccNo = "table103_trnsfr_from_acc_no";
			}
			String amt = formObject.getValue(fieldAmtTrnsfrd).toString();
			String debitCurr = formObject.getValue(fieldDebitCurr).toString();
			String debitAccNo = formObject.getValue(fieldAccNo).toString();
			logInfo("checkFundTransferFields", "amt: " + amt + ", debitCurr: "
					+ debitCurr + ", debitAccNo: " + debitAccNo);
			if (formObject.getValue(fieldModeOfFunding).toString()
					.equalsIgnoreCase("Transfer - Internal")) {
				logInfo("checkFundTransferFields", "Transfer - Internal");
				if (debitAccNo.isEmpty()) {
					sendMessageValuesList(fieldAccNo,
							"Please select debit account number.");
					return false;
				} else if (amt.trim().isEmpty()) {
					sendMessageValuesList(fieldAmtTrnsfrd,
							"Please enter the amount to be transferred.");
					return false;
				} else if (debitCurr.trim().isEmpty()) {
					sendMessageValuesList("", "Debit currency cannot be blank");
					return false;
				}
			}
		} catch (Exception e) {
			logError("checkFundTransferFields", e);
		}
		return true;
	}

	public void verifyChequeBook() {
		String visaStatus = getFinalData(
				formObject.getValue(CHECKBOX_VISA_STATUS_FCR).toString(),
				formObject.getValue(CHECKBOX_VISA_STATUS_EIDA).toString(),
				formObject.getValue(CHECKBOX_VISA_STATUS_MANUAL).toString(),
				formObject.getValue(FCR_VISASTATUS).toString(), formObject
						.getValue(EIDA_VISASTATUS).toString(), formObject
						.getValue(MANUAL_VISASTATUS).toString());
		if ((visaStatus.equalsIgnoreCase("Under Processing") || formObject
				.getValue(DRP_RESEIDA).toString().equalsIgnoreCase("Yes"))
				&& getGridCount(PRODUCT_QUEUE) > 0) {
			for (int i = 0; i < getGridCount(PRODUCT_QUEUE); i++) {
				if (formObject.getTableCellValue(PRODUCT_QUEUE, i, 6)
						.equalsIgnoreCase("Yes")) {
					formObject.setTableCellValue(PRODUCT_QUEUE, i, 6, "No");
				}
			}
		}
	}

	/*
	 * public void loadDecisionHistory() {
	 * logInfo("DECISION_HISTORY","INSIDE DECISION_HISTORY: ");
	 * formObject.clearTable("DECISION_HISTORY");
	 * logInfo("DECISION_HISTORY","DECISION_HISTORY: "
	 * +getGridCount("DECISION_HISTORY")); String sQuery1=
	 * "SELECT CREATE_DAT,USERID,USERNAME,GROUP_NAME,WS_DECISION,REJ_REASON,CHANNEL,WS_NAME,"
	 * +
	 * "WS_COMMENTS FROM (SELECT TO_CHAR(CREATE_DAT,'DD/MM/YYYY HH:MI:SS AM') CREATE_DAT, USERID, "
	 * +
	 * "USERNAME, GROUP_NAME, WS_DECISION,REJ_REASON, CHANNEL,WS_NAME,WS_COMMENTS,"
	 * +
	 * "TO_CHAR(CREATE_DAT,'YYYYMMDDHH24:MI:SS') A FROM USR_0_AO_DEC_HIST WHERE WI_NAME = '"
	 * +sWorkitemId+"') ORDER BY A"; logInfo("DECISIONTAB",sQuery1);
	 * List<List<String>> recordList = formObject.getDataFromDB(sQuery1);
	 * loadListView(recordList,
	 * "CREATE_DAT,USERID,USERNAME,GROUP_NAME,WS_DECISION,REJ_REASON,CHANNEL,WS_NAME,"
	 * + "WS_COMMENTS","DECISION_HISTORY");
	 * 
	 * }
	 */

	public String familyBankingCalls() {
		logInfo("familyBankingCalls", "Inside");
		String inputXml = "";
		String outputXml = "";
		String sReturnCode = "-1";
		String sErrorDesc = "";
		try {
			// fetchFamilyDtls
			String sCust_ID = "";
			sCust_ID = formObject.getValue(CID_HOF).toString();
			inputXml = getFamilyDetailsInputXML(sCust_ID);
			logInfo("familyBankingCalls", "fetchFamilyDetails inputXml: "
					+ inputXml);
			outputXml = socket.connectToSocket(inputXml);
			logInfo("familyBankingCalls", "fetchFamilyDetails outputXml:"
					+ outputXml);
			sReturnCode = getTagValues(outputXml, "returnCode");
			// for CID
			String sCustidUd = formObject.getTableCellValue(ACC_RELATION, 0, 2);
			logInfo("familyBankingCalls", "fetchFamilyDetails sCustidUd:"
					+ sCustidUd);
			String inputXmlUd = getFamilyDetailsInputXML(sCustidUd);
			logInfo("familyBankingCalls", "fetchFamilyDetails inputXml: "
					+ inputXmlUd);
			String outputXmlUd = socket.connectToSocket(inputXmlUd);
			logInfo("familyBankingCalls", "fetchFamilyDetails outputXml:"
					+ outputXmlUd);
			String sReturnCodeUd = getTagValues(outputXmlUd, "returnCode");
			String sUpdate;
			// for checking CID with HOf cid
			if (!sReturnCodeUd.equalsIgnoreCase("0")) {
				if (sReturnCode.equalsIgnoreCase("0")) {
					// populate family id (CID_FAMILY_GROUP)
					String sFamilyGroupid = getTagValues(outputXml,
							"familyGroupId");
					logInfo("familyBankingCalls", "sFamilyGroupid: "
							+ sFamilyGroupid);
					formObject.setValue(CID_FAMILY_GROUP, sFamilyGroupid);
					// getcustomerDtls
					inputXml = getCustomerInfoInputXML();
					logInfo("familyBankingCalls",
							"getCustomerInfoInputXML inputXml: " + inputXml);
					outputXml = socket.connectToSocket(inputXml);
					logInfo("familyBankingCalls",
							"getCustomerInfoInputXML outputXml: " + outputXml);
					sReturnCode = getTagValues(outputXml, "returnCode");
					sErrorDesc = getTagValues(outputXml, "errorDescription");
					if (!sErrorDesc.equalsIgnoreCase("Failure")
							|| !sReturnCode.equalsIgnoreCase("1")) {
						// populate RM_HOF
						String sRM_HOF = getTagValues(outputXml, "RMName");
						String sRM_Code = getTagValues(outputXml, "RMCode");

						String sFull_Name = getTagValues(outputXml, "FullName"); // Cust
																					// fullname
						String sQuery = "SELECT CUST_SEGMENT FROM USR_0_CUST_SEGMENT WHERE UNIQUE_ID = "
								+ "(SELECT CUST_CATEGORY_CODE FROM USR_0_CUST_CAT WHERE UPPER(CUST_CATEGORY_DESC) "
								+ "= UPPER('"
								+ getTagValue(outputXml, "CustCategory")
								+ "'))";
						logInfo("familyBankingCalls", sQuery);
						List<List<String>> sCatOutput = formObject
								.getDataFromDB(sQuery);
						logInfo("familyBankingCalls", "==" + sCatOutput);
						String sPD_CUSTSEGMENT = "";
						String sCust_Segment = "";
						/*
						 * String sQuery1 =
						 * "SELECT CUST_SEG FROM usr_0_cust_txn WHERE WI_NAME "
						 * + "= '"+sWorkitemId+"'"; List<List<String>>
						 * recordList = formObject.getDataFromDB(sQuery1);
						 * logInfo("",sQuery1); if(recordList!=null &&
						 * recordList.size()>0){ sPD_CUSTSEGMENT =
						 * recordList.get(0).get(0); }
						 */
						if (sCatOutput != null && sCatOutput.size() > 0) {
							sCust_Segment = sCatOutput.get(0).get(0); // customer
																		// Category
							logInfo("familyBankingCalls", sCust_Segment);
							formObject.setValue(HOF_CUSTOMER_SEGMENT,
									sCust_Segment);// populating segment for hof
						}
						sPD_CUSTSEGMENT = formObject.getValue(NEW_CUST_SEGMENT)
								.toString();
						logInfo("familyBankingCalls", sCust_Segment);
						logInfo("familyBankingCalls", sPD_CUSTSEGMENT);
						if (sCust_Segment.equalsIgnoreCase(sPD_CUSTSEGMENT)) {

							logInfo("familyBankingCalls", "sRM_HOF: " + sRM_HOF
									+ ", sRM_Code: " + sRM_Code);
							formObject.setValue(HOF_RM_CODE, sRM_Code);
							formObject.setValue(RM_HOF, sRM_HOF); // populating
																	// RM Name
							formObject.setValue(FB_FULL_CUST_NAME, sFull_Name); // populating
																				// Full
																				// Name
							// fetchRM Support Structure
							inputXml = getRMSupportStructureInputXML(sRM_Code);
							logInfo("familyBankingCalls",
									"getRMSupportStructureInputXML inputXml: "
											+ inputXml);
							outputXml = socket.connectToSocket(inputXml);
							logInfo("familyBankingCalls",
									"getRMSupportStructureInputXML outputXml: "
											+ outputXml);
							// outputXml=
							// "<?xml version=\"1.0\" encoding=\"utf-8\"?><Output><FetchRMSupportStructureResMsg><header><usecaseID>1234</usecaseID><serviceName>InqFamilyGroupDtls</serviceName><versionNo>1.0</versionNo><serviceAction>null</serviceAction><correlationID>88782893</correlationID><sysRefNumber>991088</sysRefNumber><senderID>RCRM</senderID><consumer>APIZONE</consumer><reqTimeStamp>28/07/2021 18:15:13</reqTimeStamp><errorDetail>InqFamilyGroupDtls-0-Success</errorDetail><returnCode>0</returnCode></header><fetchRMSupportStructureRes><primaryRMStaffId>C103873</primaryRMStaffId><primaryRMCode>true</primaryRMCode><primaryRMName>C103873</primaryRMName><primaryRMEmail></primaryRMEmail><primaryRMMobileNo></primaryRMMobileNo><RMSupportDetails><staffRoleName>TESTRole</staffRoleName><staffId>C103873</staffId><staffName>Riyas</staffName><email>sfdsdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>TEST2</staffRoleName><staffId>C103873111</staffId><staffName>Riyas</staffName><email>sfdsdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>TESTRole</staffRoleName><staffId>C103873</staffId><staffName>Riyas</staffName><email>sfdsdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>TEST2</staffRoleName><staffId>C103873111</staffId><staffName>Riyas</staffName><email>sfdsdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>TESTRole</staffRoleName><staffId>C103873</staffId><staffName>Riyas</staffName><email>sfdsdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>Regional Manager</staffRoleName><staffId>VENK22543</staffId><staffName>VENK22543</staffName><email>test@</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>Wealth Counsellor</staffRoleName><staffId>C196235</staffId><staffName>carol</staffName><email>sdfs</email><mobileNumber>12121</mobileNumber><RMCode></RMCode></RMSupportDetails><RMSupportDetails><staffRoleName>Asset Specialist</staffRoleName><staffId>CNA1234</staffId><staffName>Navaid</staffName><email>sdf</email><mobileNumber>1212</mobileNumber><RMCode></RMCode></RMSupportDetails><status></status><reason></reason></fetchRMSupportStructureRes></fetchRMSupportStructureResMsg></Output>";
							sReturnCode = getTagValues(outputXml, "returnCode");
							if (sReturnCode.equalsIgnoreCase("0")) {
								populateRMGrid(outputXml);
							} else {
								sendMessageValuesList("", "OK to proceed");
							}
							sUpdate = "Y";
							populateFamilyDetailsTable(sCustidUd);
						} else {
							sendMessageValuesList("",
									"Head of Family segment and new segment are not the same");
							sUpdate = "N";
						}
					} else {
						sendMessageValuesList("",
								"Unable to fetch Customer Details");
						sUpdate = "N";
					}
				} else {
					sendMessageValuesList("", "Invalid Head of Family CID");
					sUpdate = "N";
				}
			} else {
				sendMessageValuesList("",
						"Customer to be upgraded is already part of a Family Banking group");
				sUpdate = "N";
			}
			String sQueryUpdate = "UPDATE EXT_AO SET IS_FAMILY_BANKING = '"
					+ sUpdate + "' where WI_NAME = '" + sWorkitemId + "'";
			formObject.saveDataInDB(sQueryUpdate);
		} catch (Exception ex) {
			logError("familyBankingCalls", ex);
		}
		return outputXml;
	}

	public String getFamilyDetailsInputXML(String sCust_ID) {
		logInfo("getFamilyDetailsInputXML", "Inside");
		String sInputXML = "";
		try {
			String familyGroupId = "";
			String senderID = "WMS";
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
			String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			sInputXML = "<?xml version=\"1.0\"?><APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>WS-2.0</Calltype>"
					+ "<InnerCallType>FamilyGroupDetails</InnerCallType>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<operationName>fetchFamilyGroupDtls_Oper</operationName>"
					+ "<SENDERID>"
					+ senderID
					+ "</SENDERID>"
					+ "<REF_NO>"
					+ sSeqNo
					+ "</REF_NO>"
					+ "<familyGroupId>"
					+ familyGroupId
					+ "</familyGroupId>"
					+ "<customerId>"
					+ sCust_ID
					+ "</customerId>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<winame>"
					+ sWorkitemId
					+ "</winame>"
					+ "</APWebService_Input>";
			logInfo("getFamilyDetailsInputXML", "sInputXML: " + sInputXML);
		} catch (Exception ex) {
			logError("getFamilyDetailsInputXML", ex);
		}
		return sInputXML;
	}

	public String getCustomerInfoInputXML() {
		logInfo("getCustomerInfoInputXML", "Inside");
		String sInputXML = "";
		try {
			String sCust_ID = "";
			String senderID = "WMS";
			sCust_ID = formObject.getValue(CID_HOF).toString();
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
			String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			sInputXML = "<APWebService_Input>" + "<Option>WebService</Option>"
					+ "<Calltype>Customer_Information</Calltype>" + "<CUST_ID>"
					+ sCust_ID + "</CUST_ID>" + "<SENDERID>" + senderID
					+ "</SENDERID>" + "<REF_NO>" + sSeqNo + "</REF_NO>"
					+ "<SessionId>" + sSessionId + "</SessionId>"
					+ "<EngineName>" + sEngineName + "</EngineName>"
					+ "<winame>" + sWorkitemId + "</winame>"
					+ "</APWebService_Input>";
		} catch (Exception ex) {
			logError("getCustomerInfoInputXML", ex);
		}
		logInfo("getCustomerInfoInputXML", "sInputXML: " + sInputXML);
		return sInputXML;

	}

	public String getRMSupportStructureInputXML(String sRM_Code) {
		logInfo("getRMSupportStructureDetailsInputXML", "Inside");
		String sInputXML = "";
		try {
			String senderID = "WMS";
			String sRMStaffId = "";
			// String sRMCode = "";
			// sRMCode = formObject.getValue(RM_HOF).toString();
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
			String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			sInputXML = "<?xml version=\"1.0\"?><APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>WS-2.0</Calltype>"
					+ "<InnerCallType>FamilyGroupDetails</InnerCallType>"
					+ "<SessionId>"
					+ sSessionId
					+ "</SessionId>"
					+ "<operationName>fetchRMSupportStructure_Oper</operationName>"
					+ "<SENDERID>"
					+ senderID
					+ "</SENDERID>"
					+ "<REF_NO>"
					+ sSeqNo
					+ "</REF_NO>"
					+ "<RMStaffId>"
					+ sRMStaffId
					+ "</RMStaffId>"
					+ "<RMCode>"
					+ sRM_Code
					+ "</RMCode>"
					+ "<EngineName>"
					+ sEngineName
					+ "</EngineName>"
					+ "<winame>"
					+ sWorkitemId
					+ "</winame>"
					+ "</APWebService_Input>";
		} catch (Exception ex) {
			logError("getRMSupportStructureDetailsInputXML", ex);
		}
		logInfo("getRMSupportStructureDetailsInputXML", "sInputXML : "
				+ sInputXML);
		return sInputXML;
	}

	public void populateRMGrid(String outputXml) {
		logInfo("populateRMGrid", "Inside");
		String sInputXML = "";
		try {
			XMLParser xp = new XMLParser();
			xp.setInputXML(outputXml);
			int start = xp.getStartIndex("fetchRMSupportStructureRes", 0, 0);
			int deadEnd = xp
					.getEndIndex("fetchRMSupportStructureRes", start, 0);
			int noOfFields = xp.getNoOfFields("RMSupportDetails", start,
					deadEnd);
			logInfo("populateRMGrid", "no. of RMSupportDetails: " + noOfFields);
			int end = 0;
			JSONArray jsonArray = new JSONArray();
			for (int i = 0; i < noOfFields; i++) {
				start = xp.getStartIndex("RMSupportDetails", end, 0);
				end = xp.getEndIndex("RMSupportDetails", start, 0);
				logInfo("executeServerEvent",
						"FOR RMSupportDetails: "
								+ xp.getValueOf("RMSupportDetails", start, end));
				if (null != xp.getValueOf("staffRoleName", start, end)
						&& !xp.getValueOf("staffRoleName", start, end)
								.isEmpty()) {
					JSONObject jsonObject = new JSONObject();
					jsonObject.put("STAFF_ROLE_NAME",
							xp.getValueOf("staffRoleName", start, end));
					jsonObject.put("STAFF_ID",
							xp.getValueOf("staffId", start, end));
					jsonObject.put("STAFF_NAME",
							xp.getValueOf("staffName", start, end));
					jsonObject.put("MOBILE_NUMBER",
							xp.getValueOf("mobileNumber", start, end));
					jsonObject.put("EMAIL", xp.getValueOf("email", start, end));
					jsonObject.put("RMCODE",
							xp.getValueOf("RMCode", start, end));
					logInfo("executeServerEvent", "jsonObject: " + jsonObject);
					jsonArray.add(jsonObject);
				}
			}
			logInfo("populateRMGrid", "jsonarray: " + jsonArray);
			formObject.clearTable(RM_STRUCTURE);
			formObject.addDataToGrid(RM_STRUCTURE, jsonArray);
		} catch (Exception ex) {
			logError("populateRMGrid", ex);
		}
	}

	public void fbValidation() {
		String sPD_CUSTSEGMENT = "";
		/*
		 * String sQuery = "SELECT CUST_SEG FROM usr_0_cust_txn WHERE WI_NAME "
		 * + "= '"+sWorkitemId+"'"; List<List<String>> recordList =
		 * formObject.getDataFromDB(sQuery); logInfo("",sQuery);
		 * if(recordList!=null && recordList.size()>0){ sPD_CUSTSEGMENT =
		 * recordList.get(0).get(0); }
		 */

		sPD_CUSTSEGMENT = formObject.getValue(NEW_CUST_SEGMENT).toString();
		logInfo("fbValidation",
				"REQUEST_TYPE: " + formObject.getValue(REQUEST_TYPE).toString()
						+ "   ACC_OWN_TYPE: "
						+ formObject.getValue(ACC_OWN_TYPE).toString()
						+ "   PD_CUSTSEGMENT: " + sPD_CUSTSEGMENT);
		if (!formObject.getValue(REQUEST_TYPE).toString()
				.equalsIgnoreCase("New Account")
				&& formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Single")
				&& ("EMIRATI EXCELLENCY".equalsIgnoreCase(sPD_CUSTSEGMENT)
						|| "EXCELLENCY".equalsIgnoreCase(sPD_CUSTSEGMENT) || "Private Clients"
							.equalsIgnoreCase(sPD_CUSTSEGMENT))
				&& (ACTIVITY_QDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName) || ACTIVITY_DDE_ACCOUNT_INFO
						.equalsIgnoreCase(sActivityName))) { // ACTIVITY_CPD_MAKER
																// removed
			logInfo("fbValidation",
					"REQUEST_TYPE: "
							+ formObject.getValue(REQUEST_TYPE).toString()
							+ "   ACC_OWN_TYPE: "
							+ formObject.getValue(ACC_OWN_TYPE).toString()
							+ "   PD_CUSTSEGMENT: " + sPD_CUSTSEGMENT
							+ "    Family Banking Sec Enabled");
			// formObject.setStyle(SEC_FB, DISABLE, FALSE);
			formObject.setStyle(CID_HOF, DISABLE, FALSE);
			formObject.setStyle(HOF_RELATIONSHIP, DISABLE, FALSE);
			formObject.setStyle(BTN_FG_VALIDATE, DISABLE, FALSE);
		} else {
			logInfo("fbValidation",
					"REQUEST_TYPE: "
							+ formObject.getValue(REQUEST_TYPE).toString()
							+ "   ACC_OWN_TYPE: "
							+ formObject.getValue(ACC_OWN_TYPE).toString()
							+ "   PD_CUSTSEGMENT: " + sPD_CUSTSEGMENT
							+ "    Family Banking Sec Disabled");
			formObject.setStyle(SEC_FB, DISABLE, TRUE);
		}
	}

	public String checkFamilyStatus() {
		logInfo("checkFamilyStatus", "Inside");
		String familyStatus = "";
		try {
			String sQuery = "SELECT IS_FAMILY_BANKING FROM EXT_AO WHERE WI_NAME "
					+ "= '" + sWorkitemId + "'";
			logInfo("getCustSegment", "sQuery: " + sQuery);
			List<List<String>> recordList = formObject.getDataFromDB(sQuery);
			if (recordList != null && recordList.size() > 0) {
				familyStatus = recordList.get(0).get(0);
			}
		} catch (Exception ex) {
			logError("checkFamilyStatus", ex);
		}
		return familyStatus;
	}

	// Added by Ayush
	public String getFetchFamilyRequestXml(String cidfamily) {
		logInfo("getFetchFamilyRequestXml", "Inside");

		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		// String mobileNo = "";
		// code for xml parsing from webservice
		// String webservicemobilequery =
		// "select RESPONSE from integration_log where winame='"+sWorkitemId
		// +"' and request_type='Customer_Information' and rownum = 1 order by requestdatetime desc";
		// logInfo("getFetchFamilyRequestXml","webservicemobilequery: "+webservicemobilequery);
		//
		// List<List<String>> mobileNoWebServiceString =
		// formObject.getDataFromDB(webservicemobilequery);
		// logInfo("getFetchFamilyRequestXml","mobileNoWebServiceString: "+mobileNoWebServiceString);
		// String mobileNoWebServiceXML=mobileNoWebServiceString.get(0).get(0);
		// logInfo("getFetchFamilyRequestXml","mobileNoWebServiceXML: "+mobileNoWebServiceXML);
		// XMLParser xmlDataParser = new XMLParser(mobileNoWebServiceXML);
		// mobileNo = xmlDataParser.getValueOf("ns1:mobileNo");
		// logInfo("getFetchFamilyRequestXml-Ayush","Mobile No.: "+mobileNo);
		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + cidfamily + "'";
		logInfo("getFetchFamilyRequestXml-Ayush", "custnamequery: "
				+ custnamequery);
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforciddel = CustomerWebServiceString.get(0).get(0);
		logInfo("getFetchFamilyRequestXml-Ayush", "Customernameforciddel: "
				+ Customernameforciddel);
		// code forxml parsing from webservice

		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + cidfamily + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>C</transactionType>").append("\n")
				.append("<sendAsChannel>S</sendAsChannel>").append("\n")
				.append("<TEMPLATE_ID>3137</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforciddel + "</MSG>")
				.append("\n").append("<Mobile>" + mobileNo + "</Mobile>")
				.append("\n").append("</APWebService_Input>");
		return inputXML.toString();
	}

	// Added by Ayush
	public String getFetchFamilyRequestXml(String cidfamily, String mobileNumber) {
		logInfo("getFetchFamilyRequestXml", "Inside");

		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		// String mobileNo = "";
		// code for xml parsing from webservice
		// String webservicemobilequery =
		// "select RESPONSE from integration_log where winame='"+sWorkitemId
		// +"' and request_type='Customer_Information' and rownum = 1 order by requestdatetime desc";
		// logInfo("getFetchFamilyRequestXml","webservicemobilequery: "+webservicemobilequery);
		//
		// List<List<String>> mobileNoWebServiceString =
		// formObject.getDataFromDB(webservicemobilequery);
		// logInfo("getFetchFamilyRequestXml","mobileNoWebServiceString: "+mobileNoWebServiceString);
		// String mobileNoWebServiceXML=mobileNoWebServiceString.get(0).get(0);
		// logInfo("getFetchFamilyRequestXml","mobileNoWebServiceXML: "+mobileNoWebServiceXML);
		// XMLParser xmlDataParser = new XMLParser(mobileNoWebServiceXML);
		// mobileNo = xmlDataParser.getValueOf("ns1:mobileNo");
		// logInfo("getFetchFamilyRequestXml-Ayush","Mobile No.: "+mobileNo);
		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + cidfamily + "'";
		logInfo("getFetchFamilyRequestXml-Ayush", "custnamequery: "
				+ custnamequery);
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforciddel = CustomerWebServiceString.get(0).get(0);
		logInfo("getFetchFamilyRequestXml-Ayush", "Customernameforciddel: "
				+ Customernameforciddel);
		// code forxml parsing from webservice

		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + cidfamily + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>C</transactionType>").append("\n")
				.append("<sendAsChannel>S</sendAsChannel>").append("\n")
				.append("<TEMPLATE_ID>3137</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforciddel + "</MSG>")
				.append("\n").append("<Mobile>" + mobileNumber + "</Mobile>")
				.append("\n").append("</APWebService_Input>");
		return inputXML.toString();
	}

	// Added by Ayush

	public String getFetchFamilyRequestXmlforAllDelete(String cid,
			String mobileNumber) {
		logInfo("getFetchFamilyRequestXml", "Inside");

		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		// String mobileNo = "";
		//
		// String webservicemobilequery =
		// "select RESPONSE from integration_log where winame='"+sWorkitemId
		// +"' and request_type='Customer_Information' and rownum = 1 order by requestdatetime desc";
		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + cid + "'";
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforcid = CustomerWebServiceString.get(0).get(0);

		// List<List<String>> mobileNoWebServiceString =
		// formObject.getDataFromDB(webservicemobilequery);
		// String mobileNoWebServiceXML=mobileNoWebServiceString.get(0).get(0);
		// XMLParser xmlDataParser = new XMLParser(mobileNoWebServiceXML);
		// mobileNo = xmlDataParser.getValueOf("ns1:mobileNo");
		//
		// logInfo("Ayush","Mobile No.: "+mobileNo);
		//
		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + cid + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>C</transactionType>").append("\n")
				.append("<sendAsChannel>S</sendAsChannel>").append("\n")
				.append("<TEMPLATE_ID>3138</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforcid + "</MSG>").append("\n")
				.append("<Mobile>" + mobileNumber + "</Mobile>").append("\n")
				.append("</APWebService_Input>");
		return inputXML.toString();
	}

	public String getFetchFamilyRequestXmlforAllDeletetoHOF(String headcid,
			String mobileNumber) {
		logInfo("getFetchFamilyRequestXmlforAllDeletetoHOF - Ayush",
				"getFetchFamilyRequestXmlforAllDeletetoHOF");
		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();

		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + headcid + "'";
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforcid = CustomerWebServiceString.get(0).get(0);

		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + headcid + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>C</transactionType>").append("\n")
				.append( // changed to c from ac
				"<sendAsChannel>S</sendAsChannel>").append("\n").append( // //changed
																			// to
																			// s
																			// from
																			// b
						"<TEMPLATE_ID>3138</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforcid + "</MSG>").append("\n")
				.append("<Mobile>" + mobileNumber + "</Mobile>").append("\n")
				.append("</APWebService_Input>");
		return inputXML.toString();
	}

	public String getFetchFamilyRequestXmlforAllDeletetoHOF(String headcid,
			String deletedcid, String mobileNumber) {
		logInfo("getFetchFamilyRequestXml - Ayush",
				"getFetchFamilyRequestXmlforAllDeletetoHOF");

		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		// String mobileNo = "";
		//
		// String webservicemobilequery =
		// "select RESPONSE from integration_log where winame='"+sWorkitemId
		// +"' and request_type='Customer_Information' and rownum = 1 order by requestdatetime desc";
		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + deletedcid + "'";
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforcid = CustomerWebServiceString.get(0).get(0);

		// List<List<String>> mobileNoWebServiceString =
		// formObject.getDataFromDB(webservicemobilequery);
		// String mobileNoWebServiceXML=mobileNoWebServiceString.get(0).get(0);
		// XMLParser xmlDataParser = new XMLParser(mobileNoWebServiceXML);
		// mobileNo = xmlDataParser.getValueOf("ns1:mobileNo");
		//
		// logInfo("getFetchFamilyRequestXml-Ayush","Mobile No.: "+mobileNo);
		//
		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + headcid + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>AC</transactionType>").append("\n")
				.append("<sendAsChannel>B</sendAsChannel>").append("\n")
				.append("<TEMPLATE_ID>3138</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforcid + "</MSG>").append("\n")
				.append("<Mobile>" + mobileNumber + "</Mobile>").append("\n")
				.append("</APWebService_Input>");
		return inputXML.toString();
	}

	public String getFetchFamilyRequestXmlDeletetoHOF(String headcid,
			String deletedcid, String mobileNumber) {
		logInfo("getFetchFamilyRequestXmlDeletetoHOF - Ayush",
				"Inside getFetchFamilyRequestXmlDeletetoHOF");

		String sCust_ID = formObject.getValue(CID_HOF).toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		String mobileNo = "";

		// String webservicemobilequery =
		// "select RESPONSE from integration_log where winame='"+sWorkitemId
		// +"' and request_type='Customer_Information' and rownum = 1 order by requestdatetime desc";
		// logInfo("getFetchFamilyRequestXml - Ayush","webservicemobilequery:"+webservicemobilequery);
		String custnamequery = "SELECT MEMBER_NAME from usr_0_family_member_details where wi_name='"
				+ sWorkitemId + "' and cid = '" + deletedcid + "'";
		logInfo("getFetchFamilyRequestXmlDeletetoHOF - Ayush", "custnamequery:"
				+ custnamequery);
		List<List<String>> CustomerWebServiceString = formObject
				.getDataFromDB(custnamequery);
		String Customernameforcid = CustomerWebServiceString.get(0).get(0);
		logInfo("getFetchFamilyRequestXmlDeletetoHOF - Ayush",
				"Customernameforcid:" + Customernameforcid);

		// List<List<String>> mobileNoWebServiceString =
		// formObject.getDataFromDB(webservicemobilequery);
		// String mobileNoWebServiceXML=mobileNoWebServiceString.get(0).get(0);
		// XMLParser xmlDataParser = new XMLParser(mobileNoWebServiceXML);
		// mobileNo = xmlDataParser.getValueOf("ns1:mobileNo");
		//
		// logInfo("getFetchFamilyRequestXmlDeletetoHOF-Ayush","Mobile No.: "+mobileNo);

		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<EngineName>wmsupguat</EngineName>").append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<Calltype>CBG</Calltype>").append("\n")
				.append("<CBGCallType>SEND_SMS_EMAIL</CBGCallType>")
				.append("\n").append("<senderID>WMSBPMENG</senderID>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<username>TIBCO</username>").append("\n")
				.append("<credentials>TIBCO</credentials>").append("\n")
				.append("<CUST_ID>" + headcid + "</CUST_ID>").append("\n")
				.append("<FlexiFiller1></FlexiFiller1>").append("\n")
				.append("<FlexiFiller2></FlexiFiller2>").append("\n")
				.append("<FlexiFiller3></FlexiFiller3>").append("\n")
				.append("<FlexiFiller4></FlexiFiller4>").append("\n")
				.append("<FlexiFiller5></FlexiFiller5>").append("\n")
				.append("<LanguagePref>0</LanguagePref>").append("\n")
				.append("<transactionType>C</transactionType>").append("\n")
				.append("<sendAsChannel>S</sendAsChannel>").append("\n")
				.append("<TEMPLATE_ID>3137</TEMPLATE_ID>").append("\n")
				.append("<MSG>" + Customernameforcid + "</MSG>").append("\n")
				.append("<Mobile>" + mobileNumber + "</Mobile>").append("\n")
				.append("</APWebService_Input>");
		return inputXML.toString();
	}

	/*
	 * public String getRefNo() throws Exception{ String seqQuery =
	 * "SELECT SEQ_WEBSERVICE.nextval as REFNO from DUAL"; String outputXml =
	 * GenerateXml.APSelectWithColumnNames(cabinetName,seqQuery,sessionId);
	 * log.info("[getRefNo]" + "The InputXml for SEQ Workitem Call = " +
	 * outputXml); String seqQueryOutputXML = ExecuteXML.executeXML(outputXml);
	 * log.info("[getRefNo]" + "The OutputXml for SEQ Workitem Call = " +
	 * seqQueryOutputXML); XMLParser xp1 = new XMLParser(seqQueryOutputXML); int
	 * mainCodeSeq = Integer.parseInt(xp1.getValueOf("MainCode"));
	 * if(mainCodeSeq == 0){ refNo = xp1.getValueOf("REFNO"); // all ref stxn }
	 * return refNo; }
	 */
	// Function Added by Ayush - using Data from DB for inputXML.
	// public String createSMSInputXML(String sendChannel, String languagePref,
	// String email,String mobileNo) throws Exception {
	// public String createSMSInputXML() throws Exception{
	// StringBuilder inputXML = new StringBuilder();
	//
	// List<List<String>> sOutput =
	// formObject.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
	// String sSeqNo = (sOutput!=null && sOutput.size()>0) ?
	// sOutput.get(0).get(0).toString() : "";
	//
	// //String fetchedRecord2 = fetchFromRejectionFamily(); -commented as was
	// toldvalues are now hardcoded by client.
	// //XMLParser xp1 = new XMLParser(fetchedRecord2);
	// //String today = getTodayDate();
	// //String sms_templateId = xp1.getValueOf("SMS_ID");
	// //String sms_msg = xp1.getValueOf("SMS_MSG");
	// //String accType = xp1.getValueOf("ACC_CLASS");
	// //String refNo = getRefNo();--Disabled for error
	// //sms_msg = sms_msg.replaceAll("PRODUCT",
	// prodDesc).replaceAll("REFERENCE", WI_NAME).replaceAll("DATE", today);
	// --Disabled for error
	// //String custid = "<CustomerId>#CustomerId#</CustomerId>";
	//
	// //String transactionType = "AC";
	// //String senderID = "WMSBPMENG";
	// //int flexiFiller1 = 0 ;
	// //String flexiFiller3 = "Unable to process your request";
	// //sWorkitemId =
	// formObject.getObjGeneralData().getM_strProcessInstanceId();
	// //log.info("[fetchFromRejectionFamily]" + " xp1 : " + xp1);
	// //log.info("[fetchFromRejectionFamily]" + " sms_id: " + sms_templateId);
	// //log.info("[fetchFromRejectionFamily]" + " sms_msg : " + sms_msg );
	// //log.info("[PropertyFile]" + " cps_fromID: " + rejectionFromID );
	// //log.info("[argumentPassing]" + "	mobile : " + mobileNo);
	// //log.info("[getRefNo]" + " Reference No : " + refNo);
	// //log.info("[fetchFromRejectionFamily]" + " Acc Class : " + accType);
	//
	// try {
	// log.info("[createSMSAndEmailInputXML]" + "SendSMS refNo ===> "+refNo);
	// inputXML.append("<?xml version=\"1.0\"?>").append("<APWebService_Input>").append(
	// "<Option>WebService</Option>").append(
	// "<EngineName>" + engineName + "</EngineName>").append(
	// "<SessionId>" + sessionId + "</SessionId>").append(
	// "<Calltype>WS-2.0</Calltype>").append(
	// "<WINAME>" + sWorkitemId + "</WINAME>").append(
	// "<InnerCallType>AddSendSMSEmail</InnerCallType>").append(
	// "<username>TIBCO</head:username>").append(
	// "<credentials>TIBCO</credentials>").append(
	// "<versionNo>1.0<versionNo>").append(
	// "<serviceAction>Addition<serviceAction>").append(
	// "<sysRefNumber>"+sSeqNo+"<sysRefNumber>")
	//
	// .append("<customerID>10571705</customerID>")
	// .append("<languagePref></languagePref>")
	// .append("<acctNumber></acctNumber>")
	// .append("<transactionType>C</transactionType>")
	// .append("<sendAsChannel>S</sendAsChannel>")
	// .append("<smsTemplateID>3137</smsTemplateID>")
	// .append("<smsTextValues>Test_cust_name_1</smsTextValues>")
	// .append("<mobileNumber>0528155659</mobileNumber>")
	// .append("<emailTemplateID></emailTemplateID>")
	// .append("<emailTextValues></emailTextValues>")
	// .append("<emailAddress></emailAddress>")
	// .append("<flexiFiller1></flexiFiller1>")
	// .append("<flexiFiller2></flexiFiller2>")
	// .append("<flexiFiller3></flexiFiller3>")
	// .append("<flexiFiller4></flexiFiller4>")
	// .append("<flexiFiller5></flexiFiller5>")
	// .append("</APWebService_Input>");
	// log.info("[createSMSInputXML]" +
	// "SendSMSEmail inputXML ===> "+inputXML.toString());
	// } catch (Exception e) {
	// log.info("[createSMSInputXML]" + "Exception ::" + e);
	//
	// }
	// //insertDataIntoDB("USR_0_INTEGRATION_CALLS",sColumn,sValues);
	// return inputXML.toString();
	// }
	// Added by Ayush - will be called at button with Submit Button ID:
	// BTN_SUBMIT at Checker Step
	// public void callforSMS() throws Exception{
	// //String emailInputXML = createSMSInputXML("B","0",email,mobile);
	// log.info(" Inside callforSMS");
	// String emailInputXML = createSMSInputXML();
	// int returnCode ;
	// String errorDesc = "";
	// String smsProgress = "";
	// String fname = "";
	// String webserviceOutput = socket.connectToSocket(emailInputXML);
	// XMLParser xmlDataParser = new XMLParser(webserviceOutput);
	// returnCode = Integer.parseInt(xmlDataParser.getValueOf("returnCode"));
	// errorDesc = xmlDataParser.getValueOf("errorDescription");
	// log.info("[callforSMS]" +"The OutputXml for WEBSERVICE Workitem Call = "
	// + webserviceOutput);
	// log.info("[callforSMS]" +" Return Code Email = " + returnCode);
	// log.info("[callforSMS]" +" Error Description = " + errorDesc);
	// smsProgress = "SMS Alert Sent Successfully to "+fname;
	// if(returnCode == 0) {
	// //insertInAudit(smsProgress);
	// //emailInputXML = createSMSInputXML("S","1",email,mobile);
	// emailInputXML = createSMSInputXML();
	// webserviceOutput = socket.connectToSocket(emailInputXML);
	// xmlDataParser = new XMLParser(webserviceOutput);
	// returnCode = Integer.parseInt(xmlDataParser.getValueOf("returnCode"));
	// errorDesc = xmlDataParser.getValueOf("errorDescription");
	// log.info("[callforSMS]" +"The OutputXml for WEBSERVICE Workitem Call = "
	// + webserviceOutput);
	// log.info("[callforSMS]" +" Return Code SMS = " + returnCode);
	// smsProgress = " SMS Alert Sent Successfully to "+fname;
	// if (returnCode == 0) {
	// //insertInAudit(smsProgress);
	// }else{
	// smsProgress = "SMS Alert Failed";
	// //insertInAudit(smsProgress);
	// }
	// }
	// }
	/*
	 * //Function Added by Ayush - DB Data Generation public String
	 * fetchFromRejectionFamily(){ //Added by Ayush String sQuery= "";
	 * List<List<String>> outputXML;
	 * 
	 * 
	 * try { // sQuery = "" // +
	 * " from table_name  where PROCESS_NAME = '"+reqProcessName
	 * +"' and ACC_CLASS = '"+accType+"' and REJECTION_REASON = '"+Reason+"'";
	 * 
	 * log.info("[fetchFromRejectionFamily]" + " cabinetName : " + cabinetName);
	 * 
	 * //outputXML =
	 * ExecuteXML.executeXML(GenerateXml.APSelectWithColumnNames(cabinetName
	 * ,sQuery,sessionId)); outputXML=formObject.getDataFromDB(sQuery);
	 * 
	 * 
	 * log.info("[fetchFromRejectionFamily]" + " sQuery : " + sQuery);
	 * log.info("[fetchFromRejectionFamily]" + " outputXML : " + outputXML); }
	 * catch (Exception localException5) {
	 * log.error("[fetchFromRejectionFamily]" + " Exception : "
	 * +localException5); } return "outputXML"; }
	 */
	// Added by Ayush
	public String getMaintainFamilyforAllDeleteRequestXml() {
		logInfo("getMaintainFamilyforAllDeleteRequestXml", "Inside");
		String sCust_ID = formObject.getValue(CID_HOF).toString();
		String sfamilyGroupId = formObject.getValue(CID_FAMILY_GROUP)
				.toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";

		String sQueryDeletedforAllCID = "SELECT CID FROM usr_0_family_member_details WHERE wi_name='"
				+ sWorkitemId + "' and CUST_STATUS = 'D'";
		List<List<String>> sQueryListDeletedforAllCID = formObject
				.getDataFromDB(sQueryDeletedforAllCID);
		String eachmemmbercustomerID = sQueryListDeletedforAllCID.get(0).get(0);
		log.info("[getMaintainFamilyforAllDeleteRequestXml]"
				+ " sQueryListDeletedforAllCID : " + sQueryListDeletedforAllCID);

		String sQueryRelationshipDeletedforAllCID = "SELECT RELATIONSHIP FROM usr_0_family_member_details WHERE wi_name='"
				+ sWorkitemId + "' and CUST_STATUS = 'D'";
		List<List<String>> sQueryListRelationshipDeletedforAllCID = formObject
				.getDataFromDB(sQueryRelationshipDeletedforAllCID);
		String eachmemberrelationship = sQueryListDeletedforAllCID.get(0)
				.get(0);
		log.info("[getMaintainFamilyforAllDeleteRequestXml]"
				+ " sQueryListRelationshipDeletedforAllCID : "
				+ sQueryListRelationshipDeletedforAllCID);

		StringBuffer loopfamilyXML = new StringBuffer();
		loopfamilyXML.append("<FamilyDetails>");
		for (int k = 0; k < sQueryListDeletedforAllCID.size(); k++) {
			loopfamilyXML.append("<familyMember>");
			loopfamilyXML.append("<customerId>"
					+ sQueryListDeletedforAllCID.get(k).get(0)
					+ "</customerId>");
			loopfamilyXML.append("<relationship>"
					+ sQueryListRelationshipDeletedforAllCID.get(k).get(0)
					+ "</relationship>");
			loopfamilyXML.append("</familyMember>");
		}
		loopfamilyXML.append("</FamilyDetails>");

		log.info("[getMaintainFamilyforAllDeleteRequestXml]"
				+ " loopfamilyXML : " + loopfamilyXML);

		String opFlag = "D";
		String sInputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>" + "<Calltype>WS-2.0</Calltype>"
				+ "<InnerCallType>AddFamilyGroup</InnerCallType>"
				+ "<EngineName>"
				+ sEngineName
				+ "</EngineName>"
				+ "<SessionId>"
				+ sSessionId
				+ "</SessionId>"
				+ "<operationName>maintainFamilyGroupDtls_Oper</operationName>"
				+ "<REF_NO>"
				+ sSeqNo
				+ "</REF_NO>"
				+ "<familyGroupId>"
				+ sfamilyGroupId
				+ "</familyGroupId>"
				+ "<operationType>"
				+ opFlag
				+ "</operationType>"
				+ "<headcustomerId>"
				+ sCust_ID
				+ "</headcustomerId>"
				+ "<SENDERID>WMS</SENDERID>"
				+
				// "<FamilyDetails>#FAMILYDETAILS#</FamilyDetails>"+
				"<winame>"
				+ sWorkitemId
				+ "</winame>"
				+ loopfamilyXML
				+ "</APWebService_Input>";

		return sInputXml;
	}

	public String getMaintainFamilyRequestXml() {
		logInfo("getMaintainFamilyRequestXml", "Inside");
		String sCust_ID = formObject.getValue(CID_HOF).toString();
		String sfamilyGroupId = formObject.getValue(CID_FAMILY_GROUP)
				.toString();
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		if (ACTIVITY_FB_CHECKER.equalsIgnoreCase(sActivityName)) {
			int count = getGridCount(LVW_FAMILY_MEMBERS);
			for (int i = 0; i < count; i++) {
				if (formObject.getTableCellValue(LVW_FAMILY_MEMBERS, i, 6)
						.equalsIgnoreCase("HEAD OF FAMILY")
						&& !formObject.getTableCellValue(LVW_FAMILY_MEMBERS, i,
								7).equalsIgnoreCase("HEAD OF FAMILY")) {
					sCust_ID = formObject.getTableCellValue(LVW_FAMILY_MEMBERS,
							i, 2);
					break;
				}
			}
		}
		String opFlag = "U";
		if (formObject.getValue(IS_FAMILY_EXIST).toString()
				.equalsIgnoreCase("Y")) {
			opFlag = "C";
		}
		String sInputXml = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
				+ "<Option>WebService</Option>" + "<Calltype>WS-2.0</Calltype>"
				+ "<InnerCallType>AddFamilyGroup</InnerCallType>"
				+ "<EngineName>"
				+ sEngineName
				+ "</EngineName>"
				+ "<SessionId>"
				+ sSessionId
				+ "</SessionId>"
				+ "<operationName>maintainFamilyGroupDtls_Oper</operationName>"
				+ "<REF_NO>"
				+ sSeqNo
				+ "</REF_NO>"
				+ "<familyGroupId>"
				+ sfamilyGroupId
				+ "</familyGroupId>"
				+ "<operationType>"
				+ opFlag
				+ "</operationType>"
				+ "<headcustomerId>"
				+ sCust_ID
				+ "</headcustomerId>"
				+ "<SENDERID>WMS</SENDERID>"
				+ "<FamilyDetails>#FAMILYDETAILS#</FamilyDetails>"
				+ "<winame>"
				+ sWorkitemId + "</winame>" + "</APWebService_Input>";
		logInfo("getMaintainFamilyRequestXml", "sInputXml: " + sInputXml);
		return sInputXml;
	}

	public void populateFamilyDetailsTable(String sCustidUd) {
		String sHOF_Relationship = formObject.getValue(HOF_RELATIONSHIP)
				.toString();
		// String sQuery=
		// "DELETE FROM USR_0_FAMILY_DETAILS WHERE WI_NAME ='"+sWorkitemId+"' AND IS_EXISTING = 'N'";
		String sQuery = "DELETE FROM USR_0_FAMILY_MEMBER_DETAILS WHERE WI_NAME ='"
				+ sWorkitemId + "' AND NEW_EXISTING = 'New'";
		logInfo("populateFamilyDetailsTable", "sQuery---" + sQuery);
		formObject.saveDataInDB(sQuery);
		sQuery = "INSERT INTO USR_0_FAMILY_MEMBER_DETAILS (WI_NAME,CID,RELATIONSHIP,NEW_EXISTING) values('"
				+ sWorkitemId
				+ "','"
				+ sCustidUd
				+ "','"
				+ sHOF_Relationship
				+ "','New') ";
		// sQuery=
		// "INSERT INTO USR_0_FAMILY_DETAILS (WI_NAME,FAMILY_CID,FAMILY_RELATION,IS_EXISTING) values('"
		// +sWorkitemId+"','"+sCustidUd+"','"+sHOF_Relationship+"','N') ";
		logInfo("populateFamilyDetailsTable", "sQuery---" + sQuery);
		formObject.saveDataInDB(sQuery);
	}

	public boolean validateFBFetch() {
		logInfo("validateFBFetch",
				"INSIDE, segment: "
						+ formObject.getValue(NEW_CUST_SEGMENT).toString()
						+ ", relationship: "
						+ formObject.getValue(HOF_RELATIONSHIP).toString());
		if (("EMIRATI EXCELLENCY".equalsIgnoreCase(formObject.getValue(
				NEW_CUST_SEGMENT).toString())
				|| "EXCELLENCY".equalsIgnoreCase(formObject.getValue(
						NEW_CUST_SEGMENT).toString()) || "Private Clients"
					.equalsIgnoreCase(formObject.getValue(NEW_CUST_SEGMENT)
							.toString()))) {
			// CID_HOF
			if (formObject.getValue(CID_HOF).toString().isEmpty()) {
				// sendMessageValuesList(CID_HOF,
				// "Please fill Head of Family CID"); Commented by Sanal
				// 07/11/2021
				return false;
			}
			// HOF_RELATIONSHIP
			if (!(formObject.getValue(CID_HOF).toString().isEmpty())
					&& formObject.getValue(HOF_RELATIONSHIP).toString()
							.isEmpty()) {
				sendMessageValuesList(HOF_RELATIONSHIP,
						"Please fill Relationship to Head of Family");
				return false;
			}
		} else {
			return false;
		}
		return true;
	}

	public boolean isValidateFBDone() {
		logInfo("isValidateFBDone", "Inside");
		// String sQuery =
		// "select count(1) from usr_0_family_details where wi_name ='"+sWorkitemId+"' and is_existing = 'N'";
		String sQuery = "select count(1) from USR_0_FAMILY_MEMBER_DETAILS where wi_name ='"
				+ sWorkitemId + "' and NEW_EXISTING = 'New'";
		logInfo("isValidateFBDone", "sQuery: " + sQuery);
		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
		logInfo("isValidateFBDone", "recordList: " + recordList);
		if (recordList != null && recordList.size() > 0) {
			if (recordList.get(0).get(0).toString().equalsIgnoreCase("0")) {
				sendMessageValuesList(BTN_FG_VALIDATE,
						"Please Validate for Family Banking");
				return false;
			} else {
				return true;
			}
		} else {
			sendMessageValuesList(BTN_FG_VALIDATE,
					"Please Validate for Family Banking");
			return false;
		}
	}

	public void clearFBData() {
		logInfo("clearFBData", "INSIDE");
		if (!(!formObject.getValue(REQUEST_TYPE).toString()
				.equalsIgnoreCase("New Account")
				&& formObject.getValue(ACC_OWN_TYPE).toString()
						.equalsIgnoreCase("Single")
				&& ("EMIRATI EXCELLENCY".equalsIgnoreCase(formObject.getValue(
						NEW_CUST_SEGMENT).toString())
						|| "EXCELLENCY".equalsIgnoreCase(formObject.getValue(
								NEW_CUST_SEGMENT).toString()) || "Private Clients"
							.equalsIgnoreCase(formObject.getValue(
									NEW_CUST_SEGMENT).toString())) && (ACTIVITY_QDE_ACCOUNT_INFO
				.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName) || ACTIVITY_CPD_MAKER
					.equalsIgnoreCase(sActivityName)))) {
			String sQuery = "UPDATE EXT_AO SET is_family_banking = null where wi_name = '"
					+ sWorkitemId + "'";
			logInfo("clearFBData", "sQuery: " + sQuery);
			formObject.saveDataInDB(sQuery);
			formObject.setValue(CID_HOF, "");
			formObject.setValue(CID_FAMILY_GROUP, "");
			formObject.setValue(RM_HOF, "");
			formObject.setValue(FB_FULL_CUST_NAME, "");
			formObject.setValue(HOF_RELATIONSHIP, "");
			formObject.clearTable(RM_STRUCTURE);
		}
	}

	public boolean submitFBValidation() {
		if (formObject.getValue(CRO_DEC).toString().isEmpty()) {
			sendMessageValuesList(CRO_DEC, "Please Select Decision");
			return false;
		} else if (!formObject.getValue(CRO_DEC).toString()
				.equalsIgnoreCase("Approve")
				&& (formObject.getValue(CRO_REJ_REASON).toString().isEmpty())) {
			sendMessageValuesList(CRO_REJ_REASON, "Please Select Reject Reason");
			return false;
		} else if (!formObject.getValue(CRO_DEC).toString()
				.equalsIgnoreCase("Approve")
				&& formObject.getValue(CRO_REMARKS).toString().isEmpty()) {
			sendMessageValuesList(CRO_REMARKS, "Please Enter Remarks");
			return false;
		} else {
			return true;
		}
	}

	// Dummy method for preventive check on cpd check submit. - Gautam
	// 05/01/22022
	public void checkIntegrationCall(IFormReference formObject) {
		try {
			logInfo("checkIntegrationCall", " inside method");
			String sQuery = "SELECT COUNT(WI_NAME) AS COUNT_WI FROM USR_0_INTEGRATION_CALLS WHERE "
					+ "WI_NAME='"
					+ sWorkitemId
					+ "' and STATUS = 'Pending' and MANDATE_STATUS = 'Mandatory'";
			logInfo("checkIntegrationCall", " Squery " + sQuery);
			List<List<String>> output2 = formObject.getDataFromDB(sQuery);
			int iCount = Integer.parseInt(output2.get(0).get(0));
			logInfo("checkIntegrationCall", " iCount " + iCount);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logInfo("checkIntegrationCall", " Exception  " + e.getMessage());
		}
	}

	public void setRestrictedFlag() {
		logInfo("setRestrictedFlag", "setRestrictedFlag inside :");
		String query = "SELECT staff_flag FROM USR_0_CUST_TXN where wi_name ='"
				+ sWorkitemId + "'";
		String val = "";
		String flag = null;
		String sUpdateFlag;
		logInfo("setRestrictedFlag", "query  :" + query);
		List<List<String>> resultSet = formObject.getDataFromDB(query);
		logInfo("setRestrictedFlag", "\n\n resultSet Info query " + resultSet);
		if (resultSet != null && resultSet.size() > 0) {
			for (int i = 0; i < resultSet.size(); i++) {
				val = resultSet.get(i).get(0);
				if (val.equalsIgnoreCase("Yes")) {
					logInfo("setRestrictedFlag", "val  :" + val);
					flag = "Y";
					break;
				} else {
					logInfo("setRestrictedFlag", "No flag  :");
					flag = "N";
				}
			}
			sUpdateFlag = "update EXT_AO set IS_RESTRICTED_ACCESS='" + flag
					+ "' Where WI_NAME='" + sWorkitemId + "'";
			formObject.saveDataInDB(sUpdateFlag);
		}
	}

	public boolean isRestrictDisplay() {
		logInfo("isRestrictDisplay", "isRestrictDisplay inside :");
		String query = "select IS_RESTRICTED_ACCESS from ext_ao where wi_name = '"
				+ sWorkitemId + "'";
		logInfo("isRestrictDisplay", "query  IS_RESTRICTED_ACCESS:" + query);
		List<List<String>> resultSet = formObject.getDataFromDB(query);
		logInfo("isRestrictDisplay", "query  IS_RESTRICTED_ACCESS:" + resultSet);

		String isStaff = "N";
		if (resultSet != null && resultSet.size() > 0) {
			isStaff = resultSet.get(0).get(0);
		}
		logInfo("isRestrictDisplay", "query  isStaff:" + isStaff);
		if (isStaff.equals("Y")) {
			query = "select count(1) as count from pdbgroupmember where groupindex = (select groupindex from pdbgroup where groupname "
					+ "= 'CPD_STAFF') and userindex = (select userindex from pdbuser where upper(username) = upper('"
					+ sUserName + "'))";
			logInfo("isRestrictDisplay", "query  :" + query);
			resultSet = formObject.getDataFromDB(query);
			if (resultSet != null && resultSet.size() > 0) {
				if (Integer.parseInt(resultSet.get(0).get(0)) > 0) {
					logInfo("isRestrictDisplay",
							"isRestrictDisplay inside false");
					return false;
				} else {
					logInfo("isRestrictDisplay",
							"isRestrictDisplay inside true");
					return true;
				}
			}
		}

		logInfo("isRestrictDisplay", "isRestrictDisplay true");
		return false;
	}

	public void updateFBRMName(int iCallOrder) {
		try {
			String sQuery = "Select HOF_RM_CODE from ext_ao where wi_name = '"
					+ sWorkitemId + "'";
			logInfo("updateFBRMName", "query1: " + sQuery);
			List<List<String>> resultSet = formObject.getDataFromDB(sQuery);
			String hofRmCode = "";
			if (resultSet != null && resultSet.size() > 0) {
				hofRmCode = resultSet.get(0).get(0);
				logInfo("updateFBRMName", "hofRmCode  :" + hofRmCode);
			}
			sQuery = "select CID, member_name from usr_0_family_member_details where wi_name = '"
					+ sWorkitemId + "' and cust_status = 'A' order by sno";
			logInfo("updateFBRMName", "query2: " + sQuery);

			String sInputXML = "";
			String sTable = "USR_0_INTEGRATION_CALLS";
			String sColumn = "WI_NAME,CUST_NO,USER_NAME,CALL_NAME,CALL_ORDER,RETRY_COUNT,INPUT_XML,STATUS,"
					+ "MANDATE_STATUS,REQUEST_DATETIME,SLNO,SOURCE";
			logInfo("updateFBRMName", "query: " + sQuery);
			resultSet = formObject.getDataFromDB(sQuery);
			if (resultSet != null && resultSet.size() > 0) {
				for (List<String> ls : resultSet) {
					if (ls != null && ls.size() > 0) {
						logInfo("updateFBRMName", "cid,rmcode: " + ls.get(0)
								+ " : " + hofRmCode);
						sInputXML = getModifyCustomerforRMUpdate(ls.get(0),
								hofRmCode);
						logInfo("updateFBRMName", "sInputXML:  " + sInputXML);
						if (!sInputXML.equalsIgnoreCase("")) {
							String sValues = "'" + sWorkitemId + "','" + (1)
									+ "','" + sUserName + "','UpdateRM_"
									+ ls.get(1) + "','" + iCallOrder + "','0',"
									+ "'" + sInputXML
									+ "','Pending','Mandatory',to_date('"
									+ getReqDate()
									+ "','dd/MM/yyyy HH24:mi:ss')," + "'" + (1)
									+ "','" + sActivityName + "'";
							int sout = insertDataIntoDB(
									"USR_0_INTEGRATION_CALLS", sColumn, sValues);
							if (String.valueOf(sout).equalsIgnoreCase("1")) {
								iCallOrder = iCallOrder + 1;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logError("updateFBRMName", e);
		}
	}

	public String getModifyCustomerforRMUpdate(String cid, String hofRM) {
		String sInputXML = "";
		if (cid != null && !cid.isEmpty() && hofRM != null && !hofRM.isEmpty()) {
			try {
				cid = String.valueOf(Integer.parseInt(cid));
			} catch (Exception e) {
				logError("getModifyCustomerforRMUpdate ", e);
			}
			sInputXML = "<?xml version=\"1.0\"?>" + "<APWebService_Input>"
					+ "<Option>WebService</Option>"
					+ "<Calltype>Modify_Customer</Calltype>"
					+ "<codMntOption>M</codMntOption>" + "<customerId>" + cid
					+ "</customerId>";

			sInputXML = sInputXML + "<misCodes><misCode>"
					+ "<misCodeType>Comp</misCodeType>"
					+ "<misCodeNumber>2</misCodeNumber>" + "<misCodeText>"
					+ hofRM + "</misCodeText>" + "</misCode></misCodes>";

			sInputXML = sInputXML + "<EngineName>" + sEngineName
					+ "</EngineName>" + "<SessionId>" + sSessionId
					+ "</SessionId>" + "<REF_NO>#REF_NO#</REF_NO>" + "<WiName>"
					+ sWorkitemId + "</WiName>" + "</APWebService_Input>";
			logInfo("getModifyCustomerforRMUpdate sInputXML: ", sInputXML);
		}

		return sInputXML;

	}

	// method to check product offered grid on submit -- Gautam 22-05-2022
	public boolean checkProductOffered(IFormReference formObject) {
		if (ACTIVITY_QDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_DDE_ACCOUNT_INFO.equalsIgnoreCase(sActivityName)
				|| ACTIVITY_CPD_MAKER.equalsIgnoreCase(sActivityName)) {
			if (!(formObject.getValue(REQUEST_TYPE).toString()
					.equalsIgnoreCase("Category Change Only")
					 || formObject.getValue(REQUEST_TYPE).toString()
							.equalsIgnoreCase("Downgrade")
					||formObject.getValue(CRO_DEC).toString()
							.equalsIgnoreCase("Permanent Reject - Discard"))) {
				if (formObject.getValue(ACC_TITLE).toString()
						.equalsIgnoreCase("")) {
					sendMessageValuesList(ACC_TITLE,
							"Please fill Account Title.");
					return false;
				}
				int iRows = getGridCount(PRODUCT_QUEUE);
				boolean isEtihad = false;
				String sProdCode = "";
				String sChequebook = "";
				if(!formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Upgrade")){
				if (iRows < 1) {
					sendMessageValuesList(PRODUCT_QUEUE,
							"Please add atleast one product.");
					return false;
				}
			}
		}
		}
		return true;
	}

	// Added by Ayush for AO release
	public String createCBGInputXML(String mode, String wiName,
			String sessionId, String stageId, String extraValues,
			String sourcingChannel, String applicationVersion) {
		StringBuilder inputXML = new StringBuilder();
		try {
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT CBG_REFNO.NEXTVAL SYSREFNO FROM DUAL");

			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<SessionId>" + sessionId + "</SessionId>")
					.append("\n")
					.append("<Calltype>CBG</Calltype>")
					.append("\n")
					.append("<CBGCallType>SINGLE_HOOK</CBGCallType>")
					.append("\n")
					.append("<REF_NO>" + sOutput.get(0).get(0) + "</REF_NO>")
					.append("<senderID>CBG</senderID>")
					.append("<RequestDateTime>" + new Date().toString()
							+ "</RequestDateTime>")
					.append("<MODE>" + mode + "</MODE>")
					.append("<WI_NAME>" + wiName + "</WI_NAME>")
					.append("<stage>" + stageId + "</stage>")
					.append("<applicationAttributes>")
					.append("<attributeDetails>")
					.append("<attributes>")
					.append(extraValues)
					.append("</attributes>")
					.append("</attributeDetails>")
					.append("</applicationAttributes>")
					.append("<applicationName>" + sourcingChannel
							+ "</applicationName>")
					.append("<SourcingChannel>" + sourcingChannel
							+ "</SourcingChannel>")
					.append("<applicationVersion>" + applicationVersion
							+ "</applicationVersion>")
					.append("<SourcingCenter>CBG</SourcingCenter>")
					.append("<Language>Eng</Language>")
					.append("<LeadNumber>CBG</LeadNumber>")
					.append("<DeviceID>CBG</DeviceID>").append("<IP>CBG</IP>")
					.append("</APWebService_Input>");
			logInfo("createCBGInputXML sInputXML: ", inputXML.toString());
		} catch (Exception e) {
			logInfo("createCBGInputXML error: ", e.toString());
		}
		return inputXML.toString();
	}

	// should be commented by Ayush for AO Release
	public boolean callEidaValidation() {
		boolean eidaValid = true;
		try {

			logInfo("callEidaValidation", "callEidaValidation: inside ");
			String query = "SELECT EIDA FROM ACC_RELATION_REPEATER WHERE WI_NAME = N'"
					+ sWorkitemId + "'";
			logInfo("callEidaValidation", "callEidaValidation: " + query);
			List<List<String>> recordList = formObject.getDataFromDB(query);
			logInfo("callEidaValidation", "callEidaValidation: " + recordList);
			if (recordList.size() != 0 && recordList != null) {
				logInfo("callEidaValidation", "callEidaValidation: inside ize ");
				for (int i = 0; i < recordList.size(); i++) {

					logInfo("callEidaValidation",
							"callEidaValidation: inside for " + i);
					String EIDANumber = recordList.get(i).get(0).toString();
					logInfo("callEidaValidation",
							"callEidaValidation: EIDANumber " + EIDANumber);
					if (!(EIDANumber.equalsIgnoreCase("") || EIDANumber
							.equalsIgnoreCase(null))) {
						// //EidaLaps
						// String inputXML = createEidaLapsInputXML(EIDANumber);
						// String outputXML = socket.connectToSocket(inputXML) ;
						// XMLParser xp = new XMLParser(outputXML);
						// int returnCode =
						// Integer.parseInt(xp.getValueOf("returnCode"));
						// if(returnCode == 0){
						// eidaValid = true;
						// //InqCustApplicationDtl-111111-No Record Found
						// //InqCustApplicationDtl-0-Success
						// } else {
						// eidaValid = false;
						// break;
						// }
						//
						// //EidaDedupe
						// inputXML = getEidaDetails(EIDANumber);
						// outputXML = socket.connectToSocket(inputXML) ;
						// xp = new XMLParser(outputXML);
						// returnCode =
						// Integer.parseInt(xp.getValueOf("returnCode"));
						// // if(returnCode == 0){
						// // eidaValid = true;
						// // } else {
						// // eidaValid = false;
						// // break;
						// }
					}
				}
			}
		} catch (Exception e) {
			logInfo("callEidaValidation error: ", e.toString());
		}
		return eidaValid;
	}

	// commented by Ayush for AO Release
	public String getEidaDetails(String EidaNum) {
		logInfo("getEidaDetails", "getEidaDetails: EIDANumber " + EidaNum);
		List<List<String>> sOutput = formObject
				.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
		String sSeqNo = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		StringBuffer inputXML = new StringBuffer();
		inputXML.append("<?xml version=\"1.0\"?>").append("\n")
				.append("<APWebService_Input>").append("\n")
				.append("<Option>WebService</Option>").append("\n")
				.append("<Calltype>WS-2.0</Calltype>").append("\n")
				.append("<InnerCallType>CustEIDAInfo</InnerCallType>")
				.append("\n").append("<ServiceName>CustomerInfo</ServiceName>")
				.append("\n").append("<REF_NO>" + sSeqNo + "</REF_NO>")
				.append("\n").append("<OLDREF_NO>" + sSeqNo + "</OLDREF_NO>")
				.append("\n").append("<SENDERID>" + senderId + "</SENDERID>")
				.append("\n").append("<WINAME>" + sWorkitemId + "</WINAME>")
				.append("\n").append("<EIDANum>" + EidaNum + "</EIDANum>")
				.append("\n")
				.append("<EngineName>" + engineName + "</EngineName>")
				.append("\n")
				.append("<SessionId>" + sSessionId + "</SessionId>")
				.append("\n").append("</APWebService_Input>");
		logInfo("getEidaDetails", "getEidaDetails: inputXML " + inputXML);
		return inputXML.toString();
	}

	// commented by Ayush for AO Release
	public String createEidaLapsInputXML(String EIDANumber) throws Exception {
		StringBuilder inputXML = new StringBuilder();
		try {
			logInfo("getEidaDetails", "createEidaLapsInputXML: EIDANumber "
					+ EIDANumber);
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
			String refNo = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";

			inputXML.append("<?xml version=\"1.0\"?>").append("\n")
					.append("<APWebService_Input>").append("\n")
					.append("<Option>WebService</Option>").append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<WINAME>" + sWorkitemId + "</WINAME>")
					.append("\n").append("<Calltype>CBG</Calltype>")
					.append("\n")
					.append("<CBGCallType>EIDA_LAPS</CBGCallType>")
					.append("\n").append("<REF_NO>" + refNo + "</REF_NO>")
					.append("\n")
					.append("<OLDREF_NO>" + refNo + "</OLDREF_NO>")
					.append("\n").append("<senderID>WMS</senderID>")
					.append("\n")
					.append("<EIDANumber>" + EIDANumber + "</EIDANumber>")
					.append("\n");
			inputXML.append("</APWebService_Input>");
			logInfo("createEidaLapsInputXML sInputXML: ", inputXML.toString());
		} catch (Exception e) {
			logInfo("createEidaLapsInputXML error: ", e.toString());
		}
		return inputXML.toString();
	}

	// commented by Ayush for AO Release
	public String createAddUpdateLeadInputXML(String leadRefNo,
			String productCode, String custEmail, String custMobile,
			String assignTo, String eidaNum, String remarks) throws Exception {
		StringBuilder inputXML = new StringBuilder();
		try {
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL");
			String refNo = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString() : "";
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<Calltype>CBG</Calltype>")
					.append("\n")
					.append("<CBGCallType>AddLead</CBGCallType>")
					.append("\n")
					.append("<REF_NO>" + refNo + "</REF_NO>")
					.append("\n")
					.append("<senderID>WMS</senderID>")
					.append("\n")
					.append("<serviceAction>Addition</serviceAction>")
					.append("\n")
					.append("<RequestDateTime>" + new Date().toString()
							+ "</RequestDateTime>")
					.append("<entityName>LeadDetail</entityName>").append("\n")
					.append("<winame>" + sWorkitemId + "</winame>")
					.append("\n");

			if (!"".equals(leadRefNo)) {
				inputXML.append("<attributeNameValPair>")
						.append("\n")
						.append("<attributeName>LEADREFNUM</attributeName>")
						.append("\n")
						.append("<attributeValue>" + leadRefNo
								+ "</attributeValue>").append("\n")
						.append("</attributeNameValPair>").append("\n");
			}

			inputXML.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>PRODUCTCODE</attributeName>")
					.append("\n")
					.append("<attributeValue>" + productCode
							+ "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>EMAILKEYCONTACTP</attributeName>")
					.append("\n")
					.append("<attributeValue>" + custEmail
							+ "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>MOBKEYCONTACTP</attributeName>")
					.append("\n")
					.append("<attributeValue>" + custMobile
							+ "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>SOURCECHANNEL</attributeName>")
					.append("\n")
					.append("<attributeValue>MYCHOICE</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>WMSREFNO</attributeName>")
					.append("\n")
					.append("<attributeValue>" + sWorkitemId
							+ "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>ASSIGNTO</attributeName>")
					.append("\n")
					.append("<attributeValue>" + assignTo + "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>LEADEIDA</attributeName>")
					.append("\n")
					.append("<attributeValue>" + eidaNum + "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>REMARKS</attributeName>")
					.append("\n")
					.append("<attributeValue>" + remarks + "</attributeValue>")
					.append("\n")
					.append("</attributeNameValPair>")
					.append("\n")

					.append("<attributeNameValPair>")
					.append("\n")
					.append("<attributeName>DSACODE</attributeName>")
					.append("\n")
					.append("<attributeValue>" + sUserName
							+ "</attributeValue>").append("\n")
					.append("</attributeNameValPair>").append("\n")

					.append("</APWebService_Input>");
			logInfo("createAddUpdateLeadInputXML sInputXML: ",
					inputXML.toString());
		} catch (Exception e) {
			logInfo("createAddUpdateLeadInputXML error: ", e.toString());
		}
		return inputXML.toString();
	}

	// added by Sanjay Kumar removingZeros
	public String removalLeadingZeros(String str) {
		String strPattern = "^0+(?!$)";
		str = str.replaceAll(strPattern, "");
		return str;
	}

	// should be commented by Ayush for AO Release
	public void insertUAEPassBPMInfo() throws Exception {
		try {
			String dsaPromoCode = "";
			String sQry = "select introducedby from wfinstrumenttable  WHERE processinstanceid = N'"
					+ sWorkitemId + "'";
			logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: " + sQry);
			List<List<String>> extData = formObject.getDataFromDB(sQry);
			logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: " + extData);
			if (extData.size() != 0 && extData != null) {

				logInfo("insertUAEPassBPMInfo",
						"insertUAEPassBPMInfo: inside extData " + "");
				dsaPromoCode = extData.get(0).get(0);
				logInfo("insertUAEPassBPMInfo",
						"insertUAEPassBPMInfo: inside extData value "
								+ dsaPromoCode);
			}
			String query = "SELECT EMAIL,MOBILE,EIDA,'Digital Current Savings Account' "
					+ "AS PRODUCTCODE,LEAD_REF_NO,NAME,CID,ACC_RELATION FROM ACC_RELATION_REPEATER WHERE WI_NAME = N'"
					+ sWorkitemId
					+ "' AND UPPER(ACC_RELATION) != UPPER('MINOR') AND (DECEASED IS NULL OR DECEASED = 'false')";  //CQR-00000020290 19-JUN-2024 --JAMSHED START
			logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: " + query);
			List<List<String>> recordList = formObject.getDataFromDB(query);
			logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: "
					+ recordList);
			if (recordList.size() != 0 && recordList != null) {
				logInfo("insertUAEPassBPMInfo",
						"insertUAEPassBPMInfo: inside ize ");
				for (int i = 0; i < recordList.size(); i++) {
					logInfo("insertUAEPassBPMInfo",
							"insertUAEPassBPMInfo: inside for " + i);
					String custEmail = recordList.get(i).get(0);
					String custMobile = recordList.get(i).get(1);
					String eidaNum = recordList.get(i).get(2);
					String productCode = recordList.get(i).get(3);
					String remarks = "Application Assign to Customer";
					String assignTo = "AssignToCustomer";
					String leadRefNo = setLeadRef(sWorkitemId);
					String name = recordList.get(i).get(5);
					String CID = recordList.get(i).get(6);

					String accRelation = recordList.get(i).get(7);

					String sQuery = "select COUNT(1) as COUNT from bpm_cop_lead_details where eidanumber ='"
							+ eidaNum + "' and wi_name ='" + sWorkitemId + "'";
					logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: "
							+ sQuery);
					List<List<String>> recordedList = formObject
							.getDataFromDB(sQuery);
					logInfo("implementUaePassLogic", "recordedList "
							+ recordedList);
					if (Integer.parseInt(recordedList.get(0).get(0)) == 0) {
						logInfo("insertUAEPassBPMInfo",
								"insertUAEPassBPMInfo: inside "
										+ Integer.parseInt(recordedList.get(0)
												.get(0)));
						String tableName = "bpm_cop_lead_details";
						String WIName = sWorkitemId;
						String refNo = WIName.split("-")[1];
						refNo=removalLeadingZeros(refNo);
						Date date = new Date();
						Calendar calendar = Calendar.getInstance();
						SimpleDateFormat formatter = new SimpleDateFormat(
								"ddMMyyyyHHmmss");
						String uniqueDate = formatter.format(date);
						String uaepassState = refNo.concat(custMobile).concat(
								uniqueDate);
						String status ="AssignToCustomer";
						logInfo("insertUAEPassBPMInfo", "uniqueDate: "
								+ uniqueDate + "uaepassState" + uaepassState);
						logInfo("insertUAEPassBPMInfo", "WIName: " + WIName
								+ "refNo" + refNo);
//						if (!UAEPassGCCNationlity()) {
//							 status ="Belongs To GCC";
//						}
						String columnName = "CUSTOMERCOMMUNICATION, CUSTOMERFULLNAME, CUSTOMERID, DSA_CODE, EIDANUMBER, INITIATEDTIME, LEAD_REF_NO, MODIFIED_DT,"
								+ "PENDINGWITH, PROCESS, PRODUCT,SRNUMBER,SRSUBTYPE,SRTYPE, STATUS,TYPE, WI_NAME, APPLICATION_REF_NO, CUSTOMER_MOBILE_NO, UAE_PASS_STATE";
						String strValues = "'Y', '"
								+ name
								+ "', '"
								+ CID
								+ "', '"
								+ dsaPromoCode
								+ "', '"
								+ eidaNum
								+ "', sysdate,'"
								+ leadRefNo
								+ "' , '', '', 'AO', 'Current Savings Account','','','', '"+status+"','L','"
								+ sWorkitemId + "','" + refNo + "', '"
								+ custMobile + "', '" + uaepassState + "'";
						logInfo("insertUAEPassBPMInfo", "columnName: "
								+ columnName);
						logInfo("insertUAEPassBPMInfo", "strValues: "
								+ strValues);
						String sQuery1 = "insert into " + tableName + " ("
								+ columnName + ") values (" + strValues + ")";
						logInfo("insertUAEPassBPMInfo", "sQuery1: " + sQuery1);
						formObject.saveDataInDB(sQuery1);
						log.info("sQuery---" + sQuery1);
						
//						Gurwinder 26072023  (For expiry WI if UAEPASS authentication not done)
						String Query2 = "Insert into BPM_EVENTGEN_TXN_DATA (INSERTIONDATETIME,PROCESS_NAME,SOURCING_CHANNEL,REQUESTMODE,WI_NAME,EXPIRY_DATE,STATUS_FLAG,PROCESSEDBYNAME,TRIAL_COUNT) "
								+ " values (sysdate,'AO','AO','C','"+sWorkitemId+"',(sysdate + 2),'N','EventGenBot',0)";
						formObject.saveDataInDB(Query2);
						log.info("sQuery---" + Query2); 
//						Gurwinder 26072023	
						if (true) {
						if (!formObject.getValue("IS_INITIATED_UAE_PASS")
								.toString().equalsIgnoreCase("Y")) {
							if (!accRelation.equalsIgnoreCase("Minor")) {
								sendSMSEmailUaePassInfo(custMobile, custEmail,
										name);
							}
						}

						// Gurwinder 23052023 UAEPASS CHANGES
						String valList1 = "'"
								+ sWorkitemId
								+ "','CBGAdmin','New alert triggered',sysdate,'New UAE Pass alert triggered to customer'";
						String sQuery2 = "Insert into usr_0_ao_dec_hist (WI_NAME,USERNAME,WS_DECISION,CREATE_DAT,WS_COMMENTS) "
								+ "values (" + valList1 + ")";
						formObject.saveDataInDB(sQuery2);
						log.info("sQuery---" + sQuery2);
//						sendMessageValuesList("","New UAE Pass alert triggered to customer");

						// String columnName1 =
						// "CUSTOMERID, ACCTNUMBER, TRANSACTIONTYPE, SMSTEMPLATEID, SMSTEXTVALUES, MOBILENUMBER, EMAILTEMPLATEID, EMAILTEXTVALUES,"
						// +
						// "EMAILADDRESS, FLEXIFILLER1, FLEXIFILLER2, STATUS, WI_NAME, ENTRY_DATE_TIME, SENDASCHANNEL, PREFFEREDLANGUAGE";
						// String strValues1 =
						// "'"+CID+"','','AC',3060,'', '"+custMobile+"',3060, '"+
						// name +"|Retail Banking Group','"+ custEmail
						// +"','','','P','"+sWorkitemId+"',sysdate, 'B','EN'";
						// String sQuery3 =
						// "INSERT INTO USR_0_CBG_NOTIFY ("+columnName1+") VALUES ("+strValues1+")";
						// formObject.saveDataInDB(sQuery3);
						// log.info("sQuery---"+sQuery3);

						String valList2 = "'"
								+ sWorkitemId
								+ "','CBGAdmin','SMS & Email triggered',sysdate,'SMS & Email is triggered for UAEPASS'";
						String sQuery4 = "Insert into usr_0_ao_dec_hist (WI_NAME,USERNAME,WS_DECISION,CREATE_DAT,WS_COMMENTS) "
								+ "values (" + valList2 + ")";
						formObject.saveDataInDB(sQuery4);
						log.info("sQuery---" + sQuery4);

						// Gurwinder 23052023 UAEPASS CHANGES
					}
				}
			}
			}

		} catch (Exception e) {
			logInfo("insertUAEPassBPMInfo", "insertUAEPassBPMInfo: error for "
					+ e);
		}
	}

	// should be commented by Ayush for AO Release
	public String setLeadRef(String wiName) {
		StringBuffer output = new StringBuffer();
		try {

			logInfo("setLeadRef", "wiName " + wiName);

			for (int i = 0; i < wiName.length(); i++) {
				char c = wiName.charAt(i);
				if (Character.isDigit(c)) {
					output.append(c);
				}
			}
			logInfo("setLeadRef", "wiName " + output.toString());

		} catch (Exception e) {
			logInfo("setLeadRef", "setLeadRef: error for " + e);
		}
		return output.toString();

	}

	// should be commented by Ayush for AO release
	public void callLeadUpdateCall() throws Exception {
		try {
			String query = "SELECT EMAIL,MOBILE,EIDA,ACC_RELATION,'Digital Current Savings Account' "
					+ "AS PRODUCTCODE,LEAD_REF_NO,NAME,CID FROM ACC_RELATION_REPEATER WHERE WI_NAME = N'"
					+ sWorkitemId + "'";
			logInfo("createInputXML", "createInputXML: " + query);
			List<List<String>> recordList = formObject.getDataFromDB(query);
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: " + recordList);
			if (recordList.size() != 0 && recordList != null) {
				logInfo("callLeadUpdateCall", "callLeadUpdateCall: inside ize ");
				for (int i = 0; i < recordList.size(); i++) {
					logInfo("callLeadUpdateCall",
							"callLeadUpdateCall: inside for " + i);
					String custEmail = recordList.get(i).get(0);
					String custMobile = recordList.get(i).get(1);
					String eidaNum = recordList.get(i).get(2);
					String accRelation = recordList.get(i).get(3);

					String productCode = recordList.get(i).get(4);
					String remarks = "Application Assign to Customer";
					String assignTo = "AssignToCustomer";
					String leadRefNo = recordList.get(i).get(5);
					String name = recordList.get(i).get(6);
					String cid = recordList.get(i).get(7);

					// String inputXML =
					// createAddUpdateLeadInputXML(leadRefNo,productCode,custEmail,custMobile,
					// assignTo,eidaNum,remarks);
					// String outputXML = socket.connectToSocket(inputXML) ;

					// logInfo("callEidaLaps","callEidaLaps: "+outputXML);
					//
					// XMLParser xp = new XMLParser(outputXML);
					// int returnCode =
					// Integer.parseInt(xp.getValueOf("returnCode"));
					// if(returnCode == 0){
					// String leadRefNum = xp.getValueOf("LeadRefNum");
					// String sQuery=
					// "UPDATE ACC_RELATION_REPEATER SET LEAD_REF_NO = '"+leadRefNum+"' "
					// +
					// "WHERE WI_NAME ='"+sWorkitemId+"' AND EIDA = '"+eidaNum+"'";
					// log.info("sQuery---"+sQuery);
					// formObject.saveDataInDB(sQuery);
					// sendSMSEmailUaePassInfo(custMobile,custEmail);
					// }
					logInfo("callLeadUpdateCall", "IS_INITIATED_UAE_PASS	"
							+ formObject.getValue("IS_INITIATED_UAE_PASS")
									.toString());

					if (!formObject.getValue("IS_INITIATED_UAE_PASS")
							.toString().equalsIgnoreCase("Y")) {
						if (!accRelation.equalsIgnoreCase("Minor")) {
							sendSMSEmailUaePassInfo(custMobile, custEmail, name);
						}
					}
				}
			}

		} catch (Exception e) {
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: error for " + e);
		}
	}

	//
	// should be commented by Ayush for AO release
	public void sendSMSEmailUaePassInfo(String mobNo, String emailAddr,
			String name) {
		try {
			String sQuery = "SELECT DEFAULT_KEY, DEFAULT_VALUE FROM USR_0_CBG_DEF_VAL_MASTER WHERE DEFAULT_KEY IN ('COP_LOGIN_UAEPASS_NOTIFY_TMP_ID','UAE_PASS_URL','FROM_EMAIL_ID') ORDER BY 1";
			logInfo("sendSMSEmailUaePassInfo", "SEARCH_DETAILS_LVW sQuery: "
					+ sQuery);
			List<List<String>> list = formObject.getDataFromDB(sQuery);
			logInfo("sendSMSEmailUaePassInfo", "SEARCH_DETAILS_LVW list: "
					+ list.toString());// Added on 02102022
			String SMSTmpId = "";
			String strValues = "";
			String SMSTxtValues = "";
			String flxFilter2 = "";

			if (list != null && !list.isEmpty()) {
				for (int i = 0; i < list.size(); i++) {
					if (i == 0) {
						SMSTmpId = list.get(i).get(1);
					} else if (i == 1) {
						flxFilter2 = list.get(i).get(1);
					} else if (i == 2) {
						SMSTxtValues = name + "|Retail Banking Group";
					}

				}
			}
			// Below Code added by Rishabh on 110623 as SMS text is going blank
			// for 3060
			sQuery = "SELECT INITCAP(CUSTOMERFULLNAME)|| '|' ||DSA_CODE|| '|' ||APPLICATION_REF_NO as  SMS_TEXT FROM BPM_COP_LEAD_DETAILS"
					+ " where WI_NAME=N'" + sWorkitemId + "'";
			logInfo("sendSMSEmailUaePassInfo", "SEARCH_DETAILS_LVW sQuery: "
					+ sQuery);
			List<List<String>> list1 = formObject.getDataFromDB(sQuery);
			logInfo("sendSMSEmailUaePassInfo", "SEARCH_DETAILS_LVW list1: "
					+ list1.toString());
			if (list1.size() > 0) {
				SMSTxtValues = list1.get(0).get(0);
			}
			// 110623 changes Ends;
			logInfo("sendSMSEmailUaePassInfo", "SMSTmpId: " + SMSTmpId
					+ "::flxFilter2::" + flxFilter2 + "::SMSTxtValues::"
					+ SMSTxtValues);// Added on 02102022

			String tableName = "USR_0_CBG_NOTIFY";
			/*
			 * String columnName =
			 * "CUSTOMERID, ACCTNUMBER, TRANSACTIONTYPE, SMSTEMPLATEID, SMSTEXTVALUES, MOBILENUMBER, EMAILTEMPLATEID, EMAILTEXTVALUES,"
			 * +
			 * "EMAILADDRESS, FLEXIFILLER1, FLEXIFILLER2, STATUS, WI_NAME, ENTRY_DATE_TIME, SENDASCHANNEL, PREFFEREDLANGUAGE"
			 * ; strValues = "'', '', 'AC', "+ SMSTmpId +", '', '"+ mobNo +"', "
			 * + SMSTmpId +", '"+ SMSTxtValues +"' , '"+ emailAddr
			 * +"', '', '', 'P', '"+ sWorkitemId +"', sysdate, 'B','EN'"; String
			 * sQuery1 =
			 * "insert into "+tableName+" ("+columnName+") values ("+strValues
			 * +")";
			 */
			String columnName = "CUSTOMERID, ACCTNUMBER, TRANSACTIONTYPE, SMSTEMPLATEID, SMSTEXTVALUES, MOBILENUMBER, EMAILTEMPLATEID, EMAILTEXTVALUES,"
					+ "EMAILADDRESS, FLEXIFILLER1, FLEXIFILLER2, STATUS, WI_NAME, ENTRY_DATE_TIME, SENDASCHANNEL, PREFFEREDLANGUAGE";
			strValues = "'', '', 'AC', '" + SMSTmpId + "', '" + SMSTxtValues
					+ "', '" + mobNo + "', '" + SMSTmpId + "', '"
					+ SMSTxtValues + "' , '" + emailAddr + "', '', '', 'P', '"
					+ sWorkitemId + "', sysdate, 'B','EN'";
			String sQuery1 = "insert into " + tableName + " (" + columnName
					+ ") values (" + strValues + ")";
			logInfo("sendSMSEmailUaePassInfo", "Inser sQuery1: " + sQuery1);// Added
																			// on
																			// 02102022
			formObject.saveDataInDB(sQuery1);
		} catch (Exception e) {
			logInfo("sendSMSEmailUaePassInfo",
					"sendSMSEmailUaePassInfo: error for " + e);
			logError("sendSMSEmailUaePassInfo", e);
		}
	} // Gurwinder 23052023 UAEPASS CHNAGES

//	public void populateUAEPassInfoStatus(String wiName) { 
//		skipUAEPassChk(); // Gurwinder 08062023 Uaepass Issue Joint case
//		String sQuery = "SELECT NAME,EIDA,"
//				+ " DECODE(IS_UAE_PASS_AUTH_DONE,'P','Authentication Pending','N','Authentication Not Performed','Y','Authentication Complete','D','Authorization - Deleted By Customer','R','Authorization - Rejected By Customer', 'E', 'Authentication Expired') FROM "
//				+ "ACC_RELATION_REPEATER WHERE WI_NAME = '" + wiName + "'";
//		logInfo("LOADUAEpaSSINFO", "sQuery: " + sQuery);
//		List<List<String>> recordList = formObject.getDataFromDB(sQuery);
//		loadListView(recordList, "NAME,EIDA,STATUS", "UAE_PASS_INFO_GRID");
//		updateAccRelAuthData(wiName);
//	}
//	public void populateAuthRefLink(String wiName) {
//
//		String query = "SELECT COUNT(1) as COUNT FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
//				+ wiName + "'";
//		String query1 = "SELECT substr(DOB,0,10) FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
//				+ wiName + "'";
//
//		logInfo("populateAuthRefLink", "populateAuthRefLink: query for "
//				+ query);
//
//		List<List<String>> recordedList = formObject.getDataFromDB(query);
//		logInfo("populateAuthRefLink", "recordedList " + recordedList);
//		List<List<String>> recordedList1 = formObject.getDataFromDB(query1);
//		logInfo("populateAuthRefLink", "recordedList1 " + recordedList1);
//
//		int iRows = Integer.parseInt(recordedList.get(0).get(0));
//		logInfo("populateAuthRefLink", "iRows : " + iRows);
//		String eida_no = "";
//		for (int i = 0; i < iRows; i++) {
//			logInfo("populateAuthRefLink", "i = : " + i);
//			eida_no = formObject.getTableCellValue(ACC_RELATION, i, 4);
//			logInfo("populateAuthRefLink", "eida_no = : " + eida_no);
//			String sQuery1 = "SELECT ACKNOWLEDGEMENT_REFNO,DATE_TIME FROM bpm_uaepass_info WHERE "
//					+ "WI_NAME = '"
//					+ wiName
//					+ "' AND EMIRATES_ID = '"
//					+ eida_no + "'";
//			logInfo("populateAuthRefLink", "sQuery1 = : " + sQuery1);
//			String dob = recordedList1.get(i).get(0).toString();
//			logInfo("populateAuthRefLink", "dob	" + dob);
//
//			List<List<String>> recordList = formObject.getDataFromDB(sQuery1);
//			logInfo("populateAuthRefLink", "recordList = : " + recordList);
//
//			if (recordList != null && recordList.size() > 0) {
//				String authDate = recordList.get(0).get(1);
//				String refNo = recordList.get(0).get(0);
//				formObject.setTableCellValue("UAE_PASS_INFO_GRID", i, 1,
//						authDate);
//				formObject.setTableCellValue("UAE_PASS_INFO_GRID", i, 3, refNo);
//
//			}
//		}
//	}
	

	 public void populateUAEPassInfoStatus(String wiName){
	 String sQuery= "SELECT NAME,EIDA,UAE_PASS_AUTH_DATE,"
	 +
	 "DECODE(IS_UAE_PASS_AUTH_DONE,'P','Authentication Pending','N','Authentication Not Performed','Y','Authentication Complete','D','Authorization - Deleted By Customer','R','Authorization - Rejected By Customer', 'E', 'Authentication Expired'),LEAD_REF_NO FROM "
	 + "ACC_RELATION_REPEATER WHERE WI_NAME = '"+wiName+"'";
	 logInfo("LOADUAEpaSSINFO","sQuery: "+sQuery);
	 List<List<String>> recordList = formObject.getDataFromDB(sQuery);
	 loadListView(recordList,"NAME,EIDA,AUTHENTICATION_DATE,STATUS,REF_NO"
	 ,"UAE_PASS_INFO_GRID");
	 updateAccRelAuthData(wiName);
	 }
	public void updateAccRelGridFromUaePassInfo(String wiName) {

		int iRows = getGridCount(ACC_RELATION);
		logInfo("LOADUAEpaSSINFO", "iRows : " + iRows);
		String eida_no = "";
		for (int i = 0; i < iRows; i++) {
			logInfo("LOADUAEpaSSINFO", "i = : " + i);
			eida_no = formObject.getTableCellValue(ACC_RELATION, i, 4);
			logInfo("LOADUAEpaSSINFO", "eida_no = : " + eida_no);
			String sQuery1 = "SELECT mobile_number,email_id, full_name_english,nationality_english FROM bpm_uaepass_info WHERE "
					+ "WI_NAME = '"
					+ wiName
					+ "' AND EMIRATES_ID = '"
					+ eida_no + "'";
			String sQuery2 = "SELECT DATE_OF_BIRTH FROM BPM_UAEPASS_DOCUMENT_DETAILS WHERE WI_NAME = '"
					+ wiName
					+ "' "
					+ "AND EMIRATES_ID = '"
					+ eida_no
					+ "' AND DOCUMENT_TYPE = 'EmiratesId' "
					+ " AND DATE_OF_BIRTH IS NOT NULL";
			logInfo("LOADUAEpaSSINFO", "sQuery1 = : " + sQuery1);
			logInfo("LOADUAEpaSSINFO", "sQuery2 = : " + sQuery2);

			List<List<String>> recordList = formObject.getDataFromDB(sQuery1);
			logInfo("LOADUAEpaSSINFO", "recordList = : " + recordList);

			List<List<String>> recordList2 = formObject.getDataFromDB(sQuery2);
			logInfo("LOADUAEpaSSINFO", "recordList2 = : " + recordList2);

			if (recordList != null && recordList.size() > 0) {
				String mobileNo = recordList.get(0).get(0);
				String email = recordList.get(0).get(1);
				String name = recordList.get(0).get(2);
				String nationality = recordList.get(0).get(3);
				formObject.setTableCellValue(ACC_RELATION, i, 3, mobileNo);
				formObject.setTableCellValue(ACC_RELATION, i, 10, email);
				formObject.setTableCellValue(ACC_RELATION, i, 1, name);
				// formObject.setTableCellValue(ACC_RELATION, i, 7,nationality);
			}

			if (recordList2 != null && recordList2.size() > 0) {
				String dob = recordList2.get(0).get(0);
				logInfo("LOADUAEpaSSINFO", "recordList2 = dob: " + dob);
				formObject.setTableCellValue(ACC_RELATION, i, 5, dob);
			}
		}
	}

	// should be commented by Ayush for AO Release
	public void updateAccRelAuthData(String wiName) {

		String query = "SELECT COUNT(1) as COUNT FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
				+ wiName + "'";
		String query1 = "SELECT substr(DOB,0,10) FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
				+ wiName + "'";

		logInfo("updateAccRelAuthData", "updateAccRelAuthData: query for "
				+ query);

		List<List<String>> recordedList = formObject.getDataFromDB(query);
		logInfo("implementUaePassLogic", "recordedList " + recordedList);
		List<List<String>> recordedList1 = formObject.getDataFromDB(query1);
		logInfo("implementUaePassLogic", "recordedList1 " + recordedList1);

		int iRows = Integer.parseInt(recordedList.get(0).get(0));
		logInfo("updateAccRelAuthData", "iRows : " + iRows);
		String eida_no = "";
		String skipUaePass="";
		for (int i = 0; i < iRows; i++) {
			logInfo("updateAccRelAuthData", "i = : " + i);
			eida_no = formObject.getTableCellValue(ACC_RELATION, i, 4);
			logInfo("updateAccRelAuthData", "eida_no = : " + eida_no);
			//CQR-00000013096 26-MAY-2024 --JAMSHED START
			skipUaePass=formObject.getTableCellValue(ACC_RELATION, i, 13);
			logInfo("updateAccRelAuthData", "skipUaePass = : " + skipUaePass);
			if(!skipUaePass.equalsIgnoreCase("true")) {
			String sQuery1 = "SELECT ACKNOWLEDGEMENT_REFNO,DATE_TIME FROM bpm_uaepass_info WHERE "
					+ "WI_NAME = '"
					+ wiName
					+ "' AND EMIRATES_ID = '"
					+ eida_no + "'";
			logInfo("updateAccRelAuthData", "sQuery1 = : " + sQuery1);
			String dob = recordedList1.get(i).get(0).toString();
			logInfo("updateAccRelAuthData", "dob	" + dob);

			List<List<String>> recordList = formObject.getDataFromDB(sQuery1);
			logInfo("updateAccRelAuthData", "recordList = : " + recordList);

			if (recordList != null && recordList.size() > 0) {
				String authDate = recordList.get(0).get(1);
				String refNo = recordList.get(0).get(0);
				formObject.setTableCellValue("UAE_PASS_INFO_GRID", i, 1,
						authDate);
				// formObject.setTableCellValue(ACC_RELATION, i,5, dob);
				formObject.setTableCellValue("UAE_PASS_INFO_GRID", i, 3, refNo);

			}
		}
			//CQR-00000013096 24-MAY-2024 --JAMSHED END
		}
	}

	// should be commented by Ayush for AO Release
	public void implementUaePassLogic(String linkwi) {
		try {
			formObject.saveDataInDB("UPDATE EXT_AO SET DSA_PROMO_CODE = '"
					+ sUserName + "' WHERE WI_NAME ='" + sWorkitemId + "'");

			List<String> paramlist = new ArrayList<String>();
			paramlist.add("Text :" + sWorkitemId);

			String extQuery = "SELECT IS_UAE_PASS_AUTH_DONE FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId + "'";
			List<List<String>> rs = formObject.getDataFromDB(extQuery);
			logInfo("implementUaePassLogic", "rs " + rs);
			if (!(rs.get(0).get(0).equalsIgnoreCase("Y"))) {
				logInfo("implementUaePassLogic", "rs value" + rs.get(0).get(0));
				formObject.getDataFromStoredProcedure("BPM_COP_AO_BRMS_RULE",
						paramlist);
			}
			String query = "SELECT COUNT(1) as COUNT FROM ACC_RELATION_REPEATER WHERE WI_NAME ='"
					+ sWorkitemId
					+ "'"
					+ " AND UAE_PASS_AUTH_FLAG = 'Y' AND (IS_UAE_PASS_AUTH_DONE = 'P' AND "
					+ "IS_UAE_PASS_AUTH_DONE IS NOT NULL)";
			logInfo("implementUaePassLogic",
					"implementUaePassLogic: query for " + query);

			List<List<String>> recordedList = formObject.getDataFromDB(query);
			logInfo("implementUaePassLogic", "recordedList " + recordedList);
			logInfo("implementUaePassLogic", "recordedList.get(0).get(0): "
					+ recordedList.get(0).get(0));
			logInfo("implementUaePassLogic", "recordedList.get(0).get(0) val: "
					+ Integer.parseInt(recordedList.get(0).get(0)));
			if (Integer.parseInt(recordedList.get(0).get(0)) > 0) {
				formObject.clearCombo("CRO_DEC");
				formObject.addItemInCombo("CRO_DEC", "Send To UaePass Pending");
				formObject.addItemInCombo("CRO_DEC", "Reject");
				if (sActivityName.equalsIgnoreCase("Account_Relation") ){
					formObject.setValue("CRO_DEC", "Send To UaePass Pending");
					formObject.setStyle("CRO_DEC", "disable", "true");
				}else{
					formObject.setStyle("CRO_DEC", "disable", "false");
				}
				
//				formObject.setValue("CRO_DEC", "Send To UaePass Pending");
//				formObject.setStyle("CRO_DEC", "disable", "true");
				callLeadUpdateCall();

				if (linkwi.equals("")) {
					insertUAEPassBPMInfo();
				}

			} else {
				formObject.setStyle("CRO_DEC", "disable", "false");
			}
		} catch (Exception e) {
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: error for " + e);
		}
	}

	// added on 03/10/2022 by sudansu
	public void setUaePassDecisionCombo() {
		try {
			logInfo("Inside setUaePassDecisionCombo", "");
			String isUAEPassAuthFlag = "";
			String isUAEPassAuthDone = "";
			List<List<String>> ls = formObject
					.getDataFromDB("SELECT UAE_PASS_AUTH_FLAG , "
							+ "IS_UAE_PASS_AUTH_DONE FROM EXT_AO WHERE WI_NAME = '"
							+ sWorkitemId + "'");
			logInfo("setUaePassDecisionCombo", "ls " + ls.toString());
			if (ls != null && ls.size() > 0) {
				isUAEPassAuthFlag = ls.get(0).get(0);
				isUAEPassAuthDone = ls.get(0).get(1);
				formObject.setValue("UAE_PASS_AUTH_FLAG", isUAEPassAuthFlag);
				formObject.setValue("IS_UAE_PASS_AUTH_DONE", isUAEPassAuthDone);
			}
			logInfo("setUaePassDecisionCombo", "isUAEPassAuthFlag "
					+ isUAEPassAuthFlag + "::isUAEPassAuthDone::"
					+ isUAEPassAuthDone);
			if ("Y".equalsIgnoreCase(isUAEPassAuthFlag)) {
				if ("P".equalsIgnoreCase(isUAEPassAuthDone)) {
					formObject.clearCombo("CRO_DEC");
					formObject.addItemInCombo("CRO_DEC",
							"Send To UaePass Pending");
					formObject.setValue("CRO_DEC", "Send To UaePass Pending");
					formObject.setStyle("CRO_DEC", "disable", "true");
				} else if ("Y".equalsIgnoreCase(isUAEPassAuthDone)) {
					formObject.clearCombo("CRO_DEC");
					formObject.addItemInCombo("CRO_DEC", "Approve");
					formObject.addItemInCombo("CRO_DEC", "Reject");
					formObject.setStyle("FETCH_UAE_PASS_INFO", "disable",
							"true");
					formObject.setStyle("CRO_DEC", "disable", "false");
				} else {
					formObject.setStyle("FETCH_UAE_PASS_INFO", "disable",
							"true");
					formObject.setStyle("CRO_DEC", "disable", "false");
				}
			}
		} catch (Exception e) {
			logInfo("setUaePassDecisionCombo", "setUaePassDecisionCombo : " + e);
		}
	}

	// should be commented for AO Release by Ayush
	public String uaePassWILinkForCPD() {
		String wiName = "";

		try {
			String extQuery = ""; // Gurwinder 22052023 UAEPASS Change
			boolean flag = false;
			logInfo("uaePassWILinkForCPD", "uaePassWILinkForCPD ");
			List<List<String>> rs;
			int iRows = getGridCount(ACC_RELATION);
			for (int i = 0; i < iRows; i++) {
				String sEida = formObject.getTableCellValue(ACC_RELATION, i, 4);
				logInfo("uaePassWILinkForCPD", "EIDA Number " + sEida);
				if (sEida != null && !sEida.isEmpty()) {
//					extQuery = "select wi_name from (select wi_name from BPM_COP_LEAD_DETAILS where EIDANUMBER= '"
//							+ sEida
//							+ "' "
//							+ " and INITIATEDTIME >= (sysdate - interval '2' day ) and srsubtype is not null order by INITIATEDTIME desc) WHERE  ROWNUM =1";
					extQuery = " select Wi_name from ( select A.wi_name from BPM_COP_LEAD_DETAILS A,EXT_AO B where A.wi_name = B.wi_name and "
							+ " A.EIDANUMBER='"+ sEida +"'"
							+ " and A.INITIATEDTIME >= (sysdate - interval '2' day ) and A.srsubtype is not null and "
							+ " b.is_uae_pass_auth_done not in ('D','R','E')  order by A.INITIATEDTIME desc ) WHERE  ROWNUM =1";
					logInfo("uaePassWILinkForCPD", "extQuery	" + extQuery);
					rs = formObject.getDataFromDB(extQuery);
					logInfo("implementUaePassLogic", "rs " + rs);
					if (rs.size() > 0) {
						wiName = rs.get(0).get(0).toString();
						sendMessageValuesList("", "UAE Pass details are linked");
						String decQuery ="select ws_comments from USR_0_AO_DEC_HIST where"
								+ " wi_name = '"+sWorkitemId+"' and WS_DECISION ='UAE Pass Linking'";						
						logInfo("implementUaePassLogic", "decQuery : " + decQuery);
						List<List<String>> ls1 = formObject.getDataFromDB(decQuery);
						logInfo("uaePassWILinkForCPD","ls1 ::" + ls1); 						
						if (ls1.size() != 0 && ls1 != null) {
							String ws_com  = ls1.get(0).get(0).toString();
							logInfo("uaePassWILinkForCPD","ws_com ::" + ws_com); 
							if (!ws_com.equalsIgnoreCase("Linking Done With "+ wiName.toString())){
								String insertDec = "INSERT INTO USR_0_AO_DEC_HIST (WI_NAME, CREATE_DAT, USERNAME, WS_DECISION, WS_COMMENTS) "
										+ "VALUES('"
										+ sWorkitemId
										+ "',SYSDATE,'SYSTEM','UAE Pass Linking','Linking Done With "
										+ wiName + "')";
								formObject.saveDataInDB(insertDec);
								logInfo("uaePassWILinkForCPD",
										"insertDec Query:::	" + insertDec);
								flag = true;
								
							}else{
								logInfo("implementUaePassLogic", "Nothing to be done ");
							}
							
						}else {
							if (flag == false && (!(wiName.equalsIgnoreCase("")))) {
								String insertDec = "INSERT INTO USR_0_AO_DEC_HIST (WI_NAME, CREATE_DAT, USERNAME, WS_DECISION, WS_COMMENTS) "
										+ "VALUES('"
										+ sWorkitemId
										+ "',SYSDATE,'SYSTEM','UAE Pass Linking','Linking Done With "
										+ wiName + "')";
								formObject.saveDataInDB(insertDec);
								logInfo("uaePassWILinkForCPD",
										"insertDec Query:::	" + insertDec);
								flag = true;
							}
						}
						String updateLinkWI = "update BPM_COP_LEAD_DETAILS set LINKED_WI ='"
								+ sWorkitemId
								+ "' Where WI_NAME='"
								+ wiName
								+ "'";
						formObject.saveDataInDB(updateLinkWI);
						logInfo("uaePassWILinkForCPD",
								"updateLinkWI Query:::::	" + updateLinkWI);
					}
					return wiName;					
				} else {
					wiName = "";
					logInfo("uaePassWILinkForCPD", "wiName is set Blank");

				}
			}
			logInfo("uaePassWILinkForCPD", "wiName	" + wiName);

			// extQuery="SELECT WI_NAME FROM (SELECT WI_NAME FROM BPM_COP_LEAD_DETAILS WHERE LINKED_WI ='"+sWorkitemId+"' ORDER BY INITIATEDTIME DESC) "
			// + "WHERE  ROWNUM =1 ";
			// if(rs.size() > 0){
			// wiName = rs.get(0).get(0).toString();
			// return wiName;
			// } else {

			// for(int i=0 ; i< iRows ; i++){
			// String sEida= formObject.getTableCellValue(ACC_RELATION,i,4);
			// String sEmail= formObject.getTableCellValue(ACC_RELATION,i,10);
			// logInfo("uaePassWILinkForCPD","sEida "+sEida);
			// logInfo("uaePassWILinkForCPD","sEmail	"+sEmail);
			// if(sEida!=null && sEmail != null && !sEmail.isEmpty() &&
			// !sEida.isEmpty())
			// wiName = getWINameForUAEPassEIDAEMAIL(sEida , sEmail);
			// logInfo("uaePassWILinkForCPD","wiName	"+wiName);
			// if(flag == false && (!(wiName.equalsIgnoreCase("")))){ //Ameena
			// 14042023
			// String insertDec =
			// "INSERT INTO USR_0_AO_DEC_HIST (WI_NAME, CREATE_DAT, USERNAME, WS_DECISION, WS_COMMENTS) "
			// +
			// "VALUES('"+sWorkitemId+"',SYSDATE,'SYSTEM','UAE Pass Linking','Linking Done With "+wiName+"')";
			// formObject.saveDataInDB(insertDec);
			// logInfo("uaePassWILinkForCPD","insertDec Query:::	"+insertDec);
			// flag = true;
			// String updateLinkWI
			// ="update BPM_COP_LEAD_DETAILS set LINKED_WI ='"+sWorkitemId+"' Where WI_NAME='"+
			// wiName +"'";
			// formObject.saveDataInDB(updateLinkWI);
			// logInfo("uaePassWILinkForCPD","updateLinkWI Query:::::	"+updateLinkWI);
			// sendMessageValuesList("", "UAE Pass details are linked");
			// }
			//
			// }
			// }

		} catch (Exception e) {
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: error for " + e);
		}
		return wiName;
	}

	public void updateAccRelationForLinkWi(String wiName) {
		List<List<String>> result;
		String eida = "";
		try {
			logInfo("updateAccRelationForLinkWi",
					"updateAccRelationForLinkWi Inside");

			int iRows = getGridCount(ACC_RELATION);
			String sQuery = "SELECT NAME,MOBILE,EIDA,UAE_PASS_AUTH_DATE,IS_UAE_PASS_AUTH_DONE,UAE_PASS_AUTH_FLAG,LEAD_REF_NO,UAEPASS_DOC_AVL FROM ACC_RELATION_REPEATER "
					+ "WHERE WI_NAME = '" + wiName + "'";
			logInfo("updateAccRelationForLinkWi", "sQuery " + sQuery);

			result = formObject.getDataFromDB(sQuery);
			logInfo("updateAccRelationForLinkWi", "result " + result);
			for (int i = 0; i < iRows; i++) {
				String name = result.get(i).get(0).toString();
				String mobile = result.get(i).get(1).toString();
				eida = result.get(i).get(2).toString();
				String authDate = result.get(i).get(3).toString();
				String authDone = result.get(i).get(4).toString();
				String authFlag = result.get(i).get(5).toString();
				String leadRef = result.get(i).get(6).toString();
				String docAvl = result.get(i).get(7).toString();

				String sColumnn1 = "UAE_PASS_AUTH_DATE,IS_UAE_PASS_AUTH_DONE,UAE_PASS_AUTH_FLAG,LEAD_REF_NO,UAEPASS_DOC_AVL";
				String sValuess1 = "'" + authDate + "','" + authDone + "','"
						+ authFlag + "','" + leadRef + "','" + docAvl + "'";
				String sWhere = "WI_NAME='" + sWorkitemId + "'";
				// int sOutput =
				// updateDataInDB("ACC_RELATION_REPEATER",sColumnn1,sValuess1,sWhere);
				// logInfo("","Update query output ACC_RELATION_REPEATER sout-----"+sOutput);
				String updatequery = "update ACC_RELATION_REPEATER set IS_UAE_PASS_AUTH_DONE ='"
						+ authDone
						+ "',"
						+ "UAE_PASS_AUTH_FLAG = '"
						+ authFlag
						+ "',UAEPASS_DOC_AVL = '"
						+ docAvl
						+ "' Where WI_NAME='"
						+ sWorkitemId
						+ "' AND EIDA = '"
						+ eida + "'";
				logInfo("updateAccRelationForLinkWi", "updatequery:"
						+ updatequery);
				formObject.saveDataInDB(updatequery);

			}
			String query = "SELECT IS_UAE_PASS_AUTH_DONE,UAE_PASS_AUTH_FLAG FROM EXT_AO WHERE WI_NAME = N'"
					+ wiName + "'";
			logInfo("createInputXML", "createInputXML: " + query);
			List<List<String>> recordList = formObject.getDataFromDB(query);
			logInfo("updateAccRelationForLinkWi",
					"updateAccRelationForLinkWi: " + recordList);
			if (recordList.size() != 0 && recordList != null) {
				logInfo("updateAccRelationForLinkWi",
						"updateAccRelationForLinkWi: inside ize ");
				String isUaePassDone = recordList.get(0).get(0);
				String isUaePassReq = recordList.get(0).get(1);
				String sColumn = "IS_UAE_PASS_AUTH_DONE,UAE_PASS_AUTH_FLAG ";
				String sValues = "'" + isUaePassDone + "','" + isUaePassReq
						+ "'";
				String Where = " WI_NAME='" + sWorkitemId + "'";
				// int output = updateDataInDB("EXT_AO",sColumn,sValues,Where);
				// logInfo("","Update query output sout EXT_AO-----"+output);
				String updatequery = "update EXT_AO set IS_UAE_PASS_AUTH_DONE = '"
						+ isUaePassDone
						+ "',UAE_PASS_AUTH_FLAG ='"
						+ isUaePassReq
						+ "' Where WI_NAME='"
						+ sWorkitemId
						+ "'";
				logInfo("updateAccRelationForLinkWi", "External updatequery:"
						+ updatequery);
				formObject.saveDataInDB(updatequery);
			}

			String sQueryEida = "SELECT EIDA FROM ACC_RELATION_REPEATER WHERE WI_NAME = '"
					+ wiName + "'";
			logInfo("updateAccRelationForLinkWi", "sQuery " + sQueryEida);

			List<List<String>> sResult = formObject.getDataFromDB(sQueryEida);
			logInfo("updateAccRelationForLinkWi", "sResult " + sResult);
			for (int i = 0; i < iRows; i++) {
				String sEida = sResult.get(i).get(0).toString();

				String sQuery1 = "SELECT ACKNOWLEDGEMENT_REFNO,DATE_TIME FROM bpm_uaepass_info WHERE "
						+ "WI_NAME = '"
						+ wiName
						+ "' AND EMIRATES_ID = '"
						+ sEida
						+ "' AND ACKNOWLEDGEMENT_REFNO IS NOT NULL AND ROWNUM = 1 ";
				logInfo("updateAccRelationForLinkWi", "sQuery1 = : " + sQuery1);
				List<List<String>> recordedList = formObject
						.getDataFromDB(sQuery1);
				if (recordedList != null && recordedList.size() > 0) {
					String sAuthDate = recordedList.get(0).get(1);
					String refNo = recordedList.get(0).get(0);
					logInfo("updateAccRelationForLinkWi", "sAuthDate = : "
							+ sAuthDate);
					logInfo("updateAccRelationForLinkWi", "refNo = : " + refNo);
					String updateQuery = "update ACC_RELATION_REPEATER set UAE_PASS_AUTH_DATE ='"
							+ sAuthDate
							+ "',"
							+ "LEAD_REF_NO = '"
							+ refNo
							+ "' Where WI_NAME='"
							+ sWorkitemId
							+ "' AND EIDA = '" + sEida + "'";
					logInfo("updateAccRelationForLinkWi", "updatequery:"
							+ updateQuery);
					formObject.saveDataInDB(updateQuery);
				}
			}
		} catch (Exception e) {
			logInfo("updateAccRelationForLinkWi",
					"updateAccRelationForLinkWi: error for " + e);

		}

	}

	public String getWINameForUAEPassEIDAEMAIL(String eida, String emailId) {
		String wiName = "";
		try {
			List<List<String>> rs;
			String query = "SELECT WI_NAME FROM (SELECT WI_NAME FROM acc_relation_repeater "
					+ "WHERE eida ='"
					+ eida
					+ "' and WI_NAME <> '"
					+ sWorkitemId
					+ "' "
					+ "ORDER BY itemindex DESC) WHERE  ROWNUM =1 "; // Removed
																	// Email
																	// condition
																	// as per
																	// req:
																	// Ameena
																	// 14042023
			logInfo("getWINameForUAEPassEIDAEMAIL", "query	" + query);
			rs = formObject.getDataFromDB(query);
			logInfo("getWINameForUAEPassEIDAEMAIL", "rs " + rs);
			if (rs.size() > 0) {
				wiName = rs.get(0).get(0).toString();
				return wiName;
			}
		} catch (Exception ex) {
			logInfo("getWINameForUAEPassEIDAEMAIL",
					"getWINameForUAEPassEIDAEMAIL: error for " + ex);
		}
		return wiName;
	}

	public String getUaePassWILinkForCPD() {
		String wiName = "";
		try {
			String extQuery = "";
			logInfo("uaePassWILinkForCPD", "uaePassWILinkForCPD ");
			List<List<String>> rs;

			extQuery = "SELECT WI_NAME FROM (SELECT WI_NAME FROM BPM_COP_LEAD_DETAILS WHERE LINKED_WI ='"
					+ sWorkitemId
					+ "' AND WI_NAME LIKE 'AO-%' )"
					+ "WHERE ROWNUM = 1";
			logInfo("uaePassWILinkForCPD", "extQuery	" + extQuery);
			rs = formObject.getDataFromDB(extQuery);
			logInfo("implementUaePassLogic", "rs " + rs);
			if (rs.size() > 0) {
				wiName = rs.get(0).get(0).toString();
			}
		} catch (Exception e) {
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: error for " + e);
		}
		return wiName;
	}

	// commented by Ayush for AO Release
	public String validateAccRelGridForUaePass() {

		int iRows = getGridCount(ACC_RELATION);
		for (int i = 0; i < iRows; i++) {
			String sEida = formObject.getTableCellValue(ACC_RELATION, iRows, 4);
			String sEmail = formObject.getTableCellValue(ACC_RELATION, iRows,
					10);
			String sMobNo = formObject
					.getTableCellValue(ACC_RELATION, iRows, 3);
			String accType = formObject.getTableCellValue(ACC_RELATION, iRows,
					9);
			logInfo("validateAccRelGridForUaePass", "sEida " + sEida);
			logInfo("validateAccRelGridForUaePass", "sEmail " + sEmail);
			logInfo("validateAccRelGridForUaePass", "sMobNo " + sMobNo);
			logInfo("validateAccRelGridForUaePass", "accType " + accType);

			if (!accType.equalsIgnoreCase("Minor")) {
				if (sEmail.equalsIgnoreCase("")) {
					sendMessageValuesList("ACC_RELATION",
							"Please Fill Email for " + (i + 1) + " Entry.");
					return getReturnMessage(false, "", sendMessageList.get(0)
							.toString() + "###" + sendMessageList.get(1));

				}
				if (sMobNo.equalsIgnoreCase("")) {
					sendMessageValuesList("ACC_RELATION",
							"Please Fill Mobile No for " + (i + 1) + " Entry.");
					return getReturnMessage(false, "", sendMessageList.get(0)
							.toString() + "###" + sendMessageList.get(1));

				}
				if (sEida.equalsIgnoreCase("")) {
					sendMessageValuesList("ACC_RELATION",
							"Please Fill EIDA No for " + (i + 1) + " Entry.");
					return getReturnMessage(false, "", sendMessageList.get(0)
							.toString() + "###" + sendMessageList.get(1));

				}
				if (sEida.length() != 15) {
					sendMessageValuesList("ACC_RELATION",
							"Invalid Eida No for " + (i + 1) + " Entry.");
					return getReturnMessage(false, "", sendMessageList.get(0)
							.toString() + "###" + sendMessageList.get(1));

				}
			}
		}

		return "true";
	}

	// added by reyaz 16092022
	public void validateCrsClassification() {
		logInfo("validateCrsClassification",
				"Inside validateCrsClassification ");
		try {
			if (formObject.getValue("CRS_CERTIFICATION_OBTAINED") == "No"
					|| formObject.getValue("CRS_Classification") == "UPDATED-UNDOCUMENTED"
					|| formObject.getValue("CRS_Classification") == "UNDOCUMENTED"
					|| formObject.getValue("CRS_Classification") == "") {
				sendMessageValuesList("",
						"CRS Classification should be Updated Documented");
			}

		} catch (Exception e) {
			logError("validateCrsClassification", e);
		}

	}

	// should be commented by Ayush for AO Release
	public void updateUaePassStatus(String wiName) {
		logInfo("validateCrsClassification",
				"Inside validateCrsClassification ");
		logInfo("validateCrsClassification",
				"Inside validateCrsClassification linkedUAEPassWI: "
						+ linkedUAEPassWI + "::wiName::" + wiName);
		try {
			String query = "SELECT IS_UAE_PASS_AUTH_DONE,UAE_PASS_AUTH_FLAG FROM EXT_AO WHERE WI_NAME = N'"
					+ wiName + "'";
			logInfo("createInputXML", "createInputXML: " + query);
			List<List<String>> recordList = formObject.getDataFromDB(query);
			logInfo("callLeadUpdateCall", "callLeadUpdateCall: " + recordList);
			if (recordList.size() != 0 && recordList != null) {
				logInfo("callLeadUpdateCall", "callLeadUpdateCall: inside ize ");
				String isUaePassDone = recordList.get(0).get(0);
				String isUaePassReq = recordList.get(0).get(1);
				formObject.setValue("IS_UAE_PASS_AUTH_DONE", isUaePassReq);
				formObject.setValue("UAE_PASS_AUTH_FLAG", isUaePassDone);
			}

		} catch (Exception e) {
			logError("validateCrsClassification", e);
		}

	}

	// should be commented by Ayush for AO Release
	public void populateCustInfoFromUaePass() {
		logInfo("populateCustInfoFromUaePass",
				"Inside populateCustInfoFromUaePass ");
		logInfo("populateCustInfoFromUaePass",
				"Inside populateCustInfoFromUaePass linkedUAEPassWI: "
						+ linkedUAEPassWI);
		try {
			int iSelectedRow = Integer.parseInt(formObject.getValue(
					SELECTED_ROW_INDEX).toString());

			String sFinalDOB = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 5);
			String sFinalName = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 1);
			String sFinalEIDANo = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 4);
			String sFinalEmail = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 10);
			String sFinalMobile = formObject.getTableCellValue(ACC_RELATION,
					iSelectedRow, 3);
			String sFinalNationality = formObject.getTableCellValue(
					ACC_RELATION, iSelectedRow, 6);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalDOB);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalName);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalEIDANo);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalEmail);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalMobile);
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass " + sFinalNationality);

			formObject.setValue(CHECKBOX_SELECTALL_MANUAL, TRUE);
			if (!sFinalEIDANo.equalsIgnoreCase("")) {
				formObject.setValue(CHECKBOX_EIDANO_MANUAL, TRUE);
			}
			formObject.setValue(CHECKBOX_EMAIL_MANUAL, TRUE);
			formObject.setValue(MANUAL_DOB, sFinalDOB);
			formObject.setValue(MANUAL_NAME, sFinalName);// "NAME"
			formObject.setValue(MANUAL_EIDANO, sFinalEIDANo);
			formObject.setValue(MANUAL_EMAIL, sFinalEmail);
			formObject.setValue(MANUAL_MOBILE, sFinalMobile);
			formObject.setValue(MANUAL_NATIONALITY, sFinalNationality);// "NATIONALITY"
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass "
							+ formObject.getValue(MANUAL_DOB));
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass "
							+ formObject.getValue(MANUAL_NAME));
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass "
							+ formObject.getValue(MANUAL_EIDANO));
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass "
							+ formObject.getValue(MANUAL_EMAIL));
			logInfo("populateCustInfoFromUaePass",
					"Inside populateCustInfoFromUaePass "
							+ formObject.getValue(MANUAL_MOBILE));

		} catch (Exception e) {
			logError("validateCrsClassification", e);
		}

	}

	// Conenct to Single Hook To Add document In Linked WI
	// should be commented by Ayush for AO Release
	public void addDocToLinkedWI(IFormReference formObj, String parentLinkedWI)
			throws Exception {
		String sInput = "";
		String sOutput = "";
		String mode = "X";
		String stageId = "134";
		sInput = createInputXMLForEvent(mode, parentLinkedWI, stageId);
		log.info("addDocToLinkedWI sInput=" + sInput);
		sOutput = socket.connectToSocket(sInput);
		log.info("addDocToLinkedWI output=" + sOutput);
		// return sOutput;
	}

	// should be commented by Ayush for AO Release
	public String createInputXMLForEvent(String mode, String wiName,
			String stageId) {

		log.info("createInputXMLForEvent");
		StringBuilder inputXML = new StringBuilder();
		try {
			inputXML.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<EngineName>" + sEngineName + "</EngineName>")
					.append("\n")
					.append("<SessionId>" + sSessionId + "</SessionId>")
					.append("\n")
					.append("<Calltype>CBG</Calltype>")
					.append("\n")
					.append("<CBGCallType>SINGLE_HOOK</CBGCallType>")
					.append("\n")
					.append("<REF_NO>" + generateSysRefNumber() + "</REF_NO>")
					.append("<senderID>CBG</senderID>")
					.append("<RequestDateTime>" + new Date().toString()
							+ "</RequestDateTime>")
					.append("<MODE>" + mode + "</MODE>")
					.append("<WI_NAME>" + wiName + "</WI_NAME>")
					.append("<stage>" + stageId + "</stage>")
					.append("<applicationAttributes>")
					.append("<attributeDetails>")
					.append("<attributes>")
					.append("<attributeKey>ACKNOWLEDGEMENT_REFNO</attributeKey>")
					.append("<attributeValue></attributeValue>")
					.append("</attributes>").append("</attributeDetails>")
					.append("</applicationAttributes>")
					.append("<applicationName>CBG</applicationName>")
					.append("<SourcingChannel>ADCBCOP</SourcingChannel>")
					.append("<SourcingCenter>CBG</SourcingCenter>")
					.append("<Language>Eng</Language>")
					.append("<LeadNumber>CBG</LeadNumber>")
					.append("<DeviceID>CBG</DeviceID>").append("<IP>CBG</IP>")
					.append("</APWebService_Input>");
			System.out.println("createInputXMLForEvent: \n" + inputXML);

			// CBGLogMe.logMe(CBGLogMe.LOG_LEVEL_INFO,
			// "SINGLE_HOOK inputXML ===> " + inputXML.toString());
		} catch (Exception e) {
			// CBGLogMe.logMe(CBGLogMe.LOG_LEVEL_ERROR,e);
			System.out.println("createInputXMLForEvent: \n" + e);

			e.printStackTrace();
		}
		return inputXML.toString();

	}

	// commented by Ayush for AO Release
	public String generateSysRefNumber() {
		String sysNum = "";
		try {
			List<List<String>> sOutput = formObject
					.getDataFromDB("SELECT CBG_REFNO.NEXTVAL SYSREFNO FROM DUAL");
			sysNum = sOutput.get(0).get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sysNum;
	}

	public void insertEmpCompanyName() {
		String Query = "";
		String manualEmpName = "";
		String emp_name = "";
		String workstepName = "";
		String sColumn = "FIELD_NAME,OLD_VAL,NEWVAL,WI_NAME,CUST_SNO,STATUS,WORK_STEP,DT";
		String sValue = "";
		String cSNO = "";
		try {
			if (sActivityName.equalsIgnoreCase("CPD Checker")) {
				logInfo("insertEmpCompanyName", "Inside " + sActivityName);

				for (int i = 0; i < getGridCount(ACC_RELATION); i++) {
					Query = "SELECT IS_MANUAL_EMPNAME,EMP_NAME,CUST_SNO "
							+ "FROM USR_0_CUST_TXN WHERE WI_NAME ='"
							+ sWorkitemId + "' AND CUST_SNO = '" + (i + 1)
							+ "'";
					logInfo("insertEmpCompanyName", "Inside " + Query);
					List<List<String>> sOutput = formObject
							.getDataFromDB(Query);
					logInfo("insertEmpCompanyName", "Inside " + sOutput);
					manualEmpName = sOutput.get(0).get(0);
					emp_name = sOutput.get(0).get(1);
					cSNO = sOutput.get(0).get(2);
					logInfo("insertEmpCompanyName", "manualEmpName "
							+ manualEmpName);
					logInfo("insertEmpCompanyName", "emp_name " + emp_name);
					if (sActivityName.equalsIgnoreCase("CPD Checker")) {
						workstepName = "CPD Maker";
					}
					if (("TRUE".equalsIgnoreCase(manualEmpName))
							&& ("OTHERS".equalsIgnoreCase(emp_name))) {
						logInfo("insertEmpCompanyName", "Inside Eida"
								+ sActivityName);
						List<List<String>> queryOutput = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'EMP_NAME' AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertEmpCompanyName", "queryOutput"
								+ queryOutput);
						int sCount = (queryOutput != null && queryOutput.size() > 0) ? Integer
								.parseInt(queryOutput.get(0).get(0).toString())
								: 0;
						logInfo("insertEmpCompanyName", "sCount: " + sCount);
						if (sCount == 0) {
							sValue = "'EMP_NAME',null,'" + emp_name + "','"
									+ sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertEmpCompanyName", "Insert values: "
									+ sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertEmpCompanyName sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void insertIntoTrackChangeModify() {
		String manualEida = "";
		String eidaEida = "";
		String fcrEida = "";
		String isManualEida = "";
		String manualMobile = "";
		String eidaMobile = "";
		String fcrMobile = "";
		String isManualMobile = "";
		String manualEmail = "";
		String eidaEmail = "";
		String fcrEmail = "";
		String isManualEmail = "";
		String manualPassport = "";
		String EidaPassport = "";
		String fcrPassport = "";
		String isManualPassport = "";
		String manualVisaNo = "";
		String EidaVisaNo = "";
		String fcrVisaNo = "";
		String isManualVisaNo = "";
		String sColumn = "FIELD_NAME,OLD_VAL,NEWVAL,WI_NAME,CUST_SNO,STATUS,WORK_STEP,DT";
		String sValue = "";
		String cSNO = "";
		String Query = "";
		String workstepName = "";
		try {
			if (sActivityName.equalsIgnoreCase("DDE_Acc_INFO_CHK")
					|| sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")
					|| sActivityName.equalsIgnoreCase("CPD Checker")) {
				logInfo("insertIntoTrackChangeModify", "Inside "
						+ sActivityName);

				for (int i = 0; i < getGridCount(ACC_RELATION); i++) {
					Query = "SELECT MANUAL_EIDA_NO,EIDA_EIDA_NO,FCR_EIDA_NO,"
							+ "UPPER(IS_MANUAL_EIDA),FINAL_EIDA_NO,CUST_SNO,MANUAL_MOBILE_NO,eida_mobile_no,FCR_MOBILE_NO,UPPER(IS_MANUAL_MOBILE),"
							+ "MANUAL_EMAIL,eida_email,FCR_EMAIL,UPPER(IS_MANUAL_EMAIL),FINAL_MOBILE_NO,FINAL_EMAIL,MANUAL_PASS_NO,EIDA_PASS_NO,"
							+ "FCR_PASS_NO,FINAL_PASS_NO,IS_MANUAL_PASSPORTNO,MANUAL_VISA_NO,EIDA_VISA_NO,FCR_VISA_NO,FINAL_VISA_NO,IS_MANUAL_VISANO "
							+ "FROM USR_0_CUST_TXN WHERE WI_NAME ='"
							+ sWorkitemId + "' AND CUST_SNO = '" + (i + 1)
							+ "'";
					logInfo("insertIntoTrackChangeModify", "Inside " + Query);
					List<List<String>> sOutput = formObject
							.getDataFromDB(Query);
					logInfo("insertIntoTrackChangeModify", "Inside " + sOutput);
					manualEida = sOutput.get(0).get(0);
					eidaEida = sOutput.get(0).get(1);
					fcrEida = sOutput.get(0).get(2);
					isManualEida = sOutput.get(0).get(3);
					cSNO = sOutput.get(0).get(5);
					manualMobile = sOutput.get(0).get(6);
					eidaMobile = sOutput.get(0).get(7);
					fcrMobile = sOutput.get(0).get(8);
					isManualMobile = sOutput.get(0).get(9);
					manualEmail = sOutput.get(0).get(10);
					eidaEmail = sOutput.get(0).get(11);
					fcrEmail = sOutput.get(0).get(12);
					isManualEmail = sOutput.get(0).get(13);
					manualPassport = sOutput.get(0).get(16);
					EidaPassport = sOutput.get(0).get(17);
					fcrPassport = sOutput.get(0).get(18);
					isManualPassport = sOutput.get(0).get(20);
					manualVisaNo = sOutput.get(0).get(21);
					EidaVisaNo = sOutput.get(0).get(22);
					fcrVisaNo = sOutput.get(0).get(23);
					isManualVisaNo = sOutput.get(0).get(25);

					if (sActivityName.equalsIgnoreCase("DDE_Acc_INFO_CHK")) {
						workstepName = "DDE_Cust_Info";
					}
					if (sActivityName.equalsIgnoreCase("QDE_Acc_INFO_CHK")) {
						workstepName = "QDE_Cust_Info";
					}
					if (sActivityName.equalsIgnoreCase("CPD Checker")) {
						workstepName = "CPD Maker";
					}
					if (("TRUE".equalsIgnoreCase(isManualEida))
							&& (!(eidaEida.equalsIgnoreCase(manualEida) || fcrEida
									.equalsIgnoreCase(manualEida)))) {
						logInfo("insertIntoTrackChangeModify", "Inside Eida"
								+ sActivityName);
						List<List<String>> queryOutput = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'EIDA_NO' AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertIntoTrackChangeModify", "queryOutput"
								+ queryOutput);
						int sCount = (queryOutput != null && queryOutput.size() > 0) ? Integer
								.parseInt(queryOutput.get(0).get(0).toString())
								: 0;
						logInfo("insertIntoTrackChangeModify", "sCount: "
								+ sCount);
						if (sCount == 0) {
							sValue = "'EIDA_NO',null,'" + sOutput.get(0).get(4)
									+ "','" + sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertIntoTrackChangeModify",
									"Insert values: " + sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertIntoTrackChangeModify sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}
					}
					if (("TRUE".equalsIgnoreCase(isManualMobile))
							&& (!(eidaMobile.equalsIgnoreCase(manualMobile) || fcrMobile
									.equalsIgnoreCase(manualMobile)))) {
						logInfo("insertIntoTrackChangeModify", "Inside Mobile"
								+ sActivityName);
						List<List<String>> queryOutput1 = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'MOBILE'  AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertIntoTrackChangeModify", "queryOutput1"
								+ queryOutput1);
						int sCount = (queryOutput1 != null && queryOutput1
								.size() > 0) ? Integer.parseInt(queryOutput1
								.get(0).get(0).toString()) : 0;
						logInfo("insertIntoTrackChangeModify", "sCount: "
								+ sCount);
						if (sCount == 0) {
							sValue = "'MOBILE',null,'" + sOutput.get(0).get(14)
									+ "','" + sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertIntoTrackChangeModify",
									"Insert values: " + sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertIntoTrackChangeModify sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}else if(sCount > 0) { //UNCOMMENT BY AMEENA
							String mobileQry ="SELECT OLD_VAL,NEWVAL FROM USR_0_CHANGE_TRACKER where "
									+ "WI_NAME ='"+sWorkitemId+"' AND FIELD_NAME='MOBILE' AND WORK_STEP = '"+workstepName+"' AND CUST_SNO = '"+(i+1)+"'";
							logInfo("insertIntoTrackChangeModify","mobileQry"+mobileQry);
							List<List<String>> sOutput1 =formObject.getDataFromDB(mobileQry);
							logInfo("insertIntoTrackChangeModify","Inside sOutput1"+sOutput1);
							String oldVal = sOutput1.get(0).get(0);
							String newVal = sOutput1.get(0).get(1);
							if(oldVal.equalsIgnoreCase("") && newVal.equalsIgnoreCase("")){
								String updateQry ="UPDATE USR_0_CHANGE_TRACKER set NEWVAL='"+manualMobile+"'  WHERE WI_NAME ='"+sWorkitemId+"' AND "
										+ "FIELD_NAME = 'MOBILE'  AND WORK_STEP = '"+workstepName+"' AND CUST_SNO = '"+(i+1)+"'";
								logInfo("insertIntoTrackChangeModify","updateQry"+updateQry);
								formObject.saveDataInDB(updateQry);
							}
						}
					}
					if (("TRUE".equalsIgnoreCase(isManualEmail))
							&& (!(eidaEmail.equalsIgnoreCase(manualEmail) || fcrEmail
									.equalsIgnoreCase(manualEmail)))) {
						logInfo("insertIntoTrackChangeModify", "Inside EMAIL"
								+ sActivityName);
						List<List<String>> queryOutput2 = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'EMAIL' AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertIntoTrackChangeModify", "queryOutput"
								+ queryOutput2);
						int sCount = (queryOutput2 != null && queryOutput2
								.size() > 0) ? Integer.parseInt(queryOutput2
								.get(0).get(0).toString()) : 0;
						logInfo("insertIntoTrackChangeModify", "sCount: "
								+ sCount);
						if (sCount == 0) {
							sValue = "'EMAIL',null,'" + sOutput.get(0).get(15)
									+ "','" + sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertIntoTrackChangeModify",
									"Insert values: " + sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertIntoTrackChangeModify sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}
					}
					if (("TRUE".equalsIgnoreCase(isManualPassport))
							&& (!(EidaPassport.equalsIgnoreCase(manualPassport) || fcrPassport
									.equalsIgnoreCase(manualPassport)))) {
						logInfo("insertIntoTrackChangeModify",
								"Inside Passport" + sActivityName);
						List<List<String>> queryOutput2 = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'PASSPORT_NO' AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertIntoTrackChangeModify", "queryOutput"
								+ queryOutput2);
						int sCount = (queryOutput2 != null && queryOutput2
								.size() > 0) ? Integer.parseInt(queryOutput2
								.get(0).get(0).toString()) : 0;
						logInfo("insertIntoTrackChangeModify", "sCount: "
								+ sCount);
						if (sCount == 0) {
							sValue = "'PASSPORT_NO',null,'"
									+ sOutput.get(0).get(19) + "','"
									+ sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertIntoTrackChangeModify",
									"Insert values: " + sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertIntoTrackChangeModify sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}
					}
					if (("TRUE".equalsIgnoreCase(isManualVisaNo))
							&& (!(EidaVisaNo.equalsIgnoreCase(manualVisaNo) || fcrVisaNo
									.equalsIgnoreCase(manualVisaNo)))) {
						logInfo("insertIntoTrackChangeModify", "Inside VisaNo"
								+ sActivityName);
						List<List<String>> queryOutput2 = formObject
								.getDataFromDB("SELECT COUNT(1) AS COUNT FROM USR_0_CHANGE_TRACKER WHERE WI_NAME ='"
										+ sWorkitemId
										+ "' AND "
										+ "FIELD_NAME = 'VISA_NO' AND WORK_STEP = '"
										+ workstepName + "'");
						logInfo("insertIntoTrackChangeModify", "queryOutput"
								+ queryOutput2);
						int sCount = (queryOutput2 != null && queryOutput2
								.size() > 0) ? Integer.parseInt(queryOutput2
								.get(0).get(0).toString()) : 0;
						logInfo("insertIntoTrackChangeModify", "sCount: "
								+ sCount);
						if (sCount == 0) {
							sValue = "'VISA_NO',null,'"
									+ sOutput.get(0).get(24) + "','"
									+ sWorkitemId + "','" + cSNO
									+ "','Pending','" + workstepName
									+ "',sysdate";
							logInfo("insertIntoTrackChangeModify",
									"Insert values: " + sValue);
							String sQuery = "insert into usr_0_change_tracker("
									+ sColumn + ") values (" + sValue + ")";
							log.info("insertIntoTrackChangeModify sQuery ::: "
									+ sQuery);
							formObject.saveDataInDB(sQuery);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void setCRSDates() {
		try {
			logInfo("setCRSDates", "Inside setCRSDates");
			String crsCertiDate = "";
			String crsClassifiDate = "";
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat simpledateformat = new SimpleDateFormat(DATEFORMAT);
			String sCurrentDate = simpledateformat.format(calendar.getTime());
			logInfo("setCRSDates", "Inside setCRSDates" + sActivityName);
			if ((sActivityName.equalsIgnoreCase(ACTIVITY_QDE_ACCOUNT_INFO))
					|| (sActivityName
							.equalsIgnoreCase(ACTIVITY_DDE_ACCOUNT_INFO))
					|| (sActivityName.equalsIgnoreCase(ACTIVITY_CPD_MAKER))) {
				logInfo("setCRSDates", "CRS_DATECLASSIFICATION: "
						+ formObject.getValue(CRS_DATECLASSIFICATION)
								.toString());
				logInfo("setCRSDates", "CRS_DATECERTIFICATION: "
						+ formObject.getValue(CRS_DATECERTIFICATION).toString());
				if (formObject.getValue(CRS_DATECLASSIFICATION).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(CRS_DATECLASSIFICATION, sCurrentDate);
				}
				if (formObject.getValue(CRS_DATECERTIFICATION).toString()
						.equalsIgnoreCase("")) {
					formObject.setValue(CRS_DATECERTIFICATION, sCurrentDate);
				}
			}
		} catch (Exception e) {
			logError("setCRSDates", e);
		}
	}

	public void insertEventgenUAE() { // Gurwinder 24052023 UAEPASS Changes
		try {
			logInfo("insertEventgenUAE", "Inside insertEventgenUAE");
			if (formObject.getValue(CRO_DEC).toString()
					.equalsIgnoreCase("Send To UaePass Pending")) {
				String query = "insert into BPM_EVENTGEN_TXN_DATA(insertiondatetime, wi_name, expiry_date, status_flag,PROCESS_NAME, "
						+ "SOURCING_CHANNEL, REQUESTMODE)"
						+ " values(SYSDATE,'"
						+ sWorkitemId
						+ "',sysdate + interval '15' minute,'N','AO','UAEPASS','M')";
				logInfo("Saving in BPM_EVENTGEN_TXN_DATA table records query : ",
						query);
				int output = formObject.saveDataInDB(query);
				logInfo("response : ", "" + output);
			}
		} catch (Exception e) {
			logError("insertEventgenUAE", e);
		}

	}

	public boolean UAEPassGCCNationlity() // Gurwinder 24052023 UAEPASS Changes
	{	
		boolean uaePassReq = true;
		logInfo("Inside UAEPassGCCNationlity ", "" + sWorkitemId);
		String Nationality = "";
		ArrayList<String> gccnatiion = new ArrayList<String>(Arrays.asList(
				"UNITED ARAB EMIRATES", "SAUDI ARABIA", "QATAR", "BAHRAIN",
				"KUWAIT", "OMAN"));
		int gridCount = getGridCount(ACC_RELATION);
		logInfo("gridCount : ", "" + gridCount);
		for (int i = 0; i <= gridCount; i++) {
			Nationality = formObject.getTableCellValue(ACC_RELATION, i, 6);
			logInfo("Nationality : ", "" + Nationality);
			if (gccnatiion.contains(Nationality)) {
				formObject.setTableCellValue(ACC_RELATION, i, 13, "true");
				formObject.setValue("SKIPUAEPASS_REASON", "GCC National");
				formObject.setValue("CRO_DEC", "Approve");
				formObject.setStyle("CRO_DEC", "disable", "false");
				String sUpdate = "update acc_relation_repeater set DECEASED='true',UAE_PASS_AUTH_FLAG='N',"
						+ " IS_UAE_PASS_AUTH_DONE='N' Where WI_NAME='"
						+ sWorkitemId + "'";
				logInfo("Updating the flags for GCC National : ", "" + sUpdate);
				formObject.saveDataInDB(sUpdate);
				logInfo("response : ", "" + sUpdate);
				sUpdate = "UPDATE EXT_AO SET UAE_PASS_AUTH_FLAG='N', IS_UAE_PASS_AUTH_DONE='N', "
						+ " SKIPUAEPASS_REASON='GCC National' Where WI_NAME='"
						+ sWorkitemId + "'";
				logInfo("Updating the flags for GCC National : ", "" + sUpdate);
				formObject.saveDataInDB(sUpdate);
				logInfo("response : ", "" + sUpdate);

				List<List<String>> decList = null;
				logInfo("For insertion in DEC History", "");
				String decHist = "select * from USR_0_AO_DEC_HIST where wi_name= '"
						+ sWorkitemId
						+ "'"
						+ " and  ws_decision='SKIP UAEPASS'";
				logInfo("Query for decHist : ", "" + decHist);
				decList = formObject.getDataFromDB(decHist);
				if (decList == null || decList.isEmpty()) {
					String insertDec = "INSERT INTO USR_0_AO_DEC_HIST (WI_NAME, CREATE_DAT, USERNAME, WS_DECISION, WS_COMMENTS) "
							+ " VALUES('"
							+ sWorkitemId
							+ "',SYSDATE,'SYSTEM','SKIP UAEPASS','Skiping UAEPASS as Customer belongs to GCC National')";
					logInfo("Query for insert in hist : ", "" + insertDec);
					formObject.saveDataInDB(insertDec);
				}
				uaePassReq = false;
			}
		}
		return uaePassReq ; 
	}

	// Added by reyaz 22032023
	public void callFSKService(String group) {
		logInfo("CLICK", "INSIDE callFSKService");
		String query = "";
		List<List<String>> sOutputlist = null;
		String output = "";
		try {

			sOutputlist = formObject
					.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as IDValue from DUAL");
			String wi_name = formObject.getValue(WI_NAME).toString();
			String txnNumber = sOutputlist.get(0).get(0);
			output = callFSK(txnNumber);
			logInfo("CLICK", "INSIDE callFSKService output " + output);
			XMLParser xpOuter = new XMLParser(output);
			String sReturnCode = xpOuter.getValueOf("StatusCode");
			String trsdWorkitemNumber = xpOuter.getValueOf("WINumber");
			logInfo("CLICK", "INSIDE callFSKService sReturnCode " + sReturnCode);
			logInfo("CLICK", "INSIDE callFSKService trsdWorkitemNumber "
					+ trsdWorkitemNumber);
			List<List<String>> sOutputlist1 = formObject
					.getDataFromDB("SELECT TRSD_FLAG from EXT_AO where wi_name = '"
							+ wi_name + "'");
			String trsdFlag = sOutputlist1.get(0).get(0);
			formObject.setValue("TRSD_FLAG", trsdFlag);
			if (!"".equalsIgnoreCase(trsdWorkitemNumber)) {
				if (formObject.getValue("TRSD_FLAG").toString()
						.equalsIgnoreCase("N")) {
					if (group.equalsIgnoreCase("CRO")) {
						formObject.setValue(TRSD_FINAL_DECISION, "Approved");
					} else {
						logInfo("CLICK", "Set Trsd Final decision ");
						formObject
								.setValue(CPD_TRSD_FINAL_DECISION, "Approved");
					}
				} else if (formObject.getValue("TRSD_FLAG").toString()
						.equalsIgnoreCase("Y")) {
					if (group.equalsIgnoreCase("CRO")) {
						formObject.setValue(TRSD_FINAL_DECISION, "Pending");
					} else {
						logInfo("CLICK", "Set Trsd Final decision ");
						formObject.setValue(CPD_TRSD_FINAL_DECISION, "Pending");
					}
				} else if (formObject.getValue("TRSD_FLAG").toString() //Added date 18-06-2023
						.equalsIgnoreCase("E"))  {
					if (group.equalsIgnoreCase("CRO")) {
						sendMessageValuesList(BTN_TRSD_CHECK, "FSK not working");
					} else {
						sendMessageValuesList(BTN_CPD_TRSD_CHK, "FSK not working");
					}
				} 
				formObject.setValue("TRSD_WI_NAME", trsdWorkitemNumber);
				saveAuditTrailOnFSKWICreation(formObject);
			} else {
				if (group.equalsIgnoreCase("CRO")) {
					sendMessageValuesList(BTN_TRSD_CHECK, "FSK not working");
				} else {
					sendMessageValuesList(BTN_CPD_TRSD_CHK, "FSK not working");
				}
			}

		} catch (Exception e) {
			log.error("Exception in createNewWorkitem", e);
		}
	}

	public String callFSK(String txnNumber) throws Exception {
		String sOutput = "";
		sOutput = createFSKInputXML(txnNumber);
		sOutput = socket.connectToSocket(sOutput);
		logInfo("CLICK", "callFSK output=" + sOutput);
		return sOutput;
	}

	public String createFSKInputXML(String sTxn) throws Exception {
		StringBuilder inputXml = new StringBuilder();
		try {
			logInfo("CLICK", "INSIDE createFSKInputXML  ");
			inputXml.append("<?xml version=\"1.0\"?>")
					.append("\n")
					.append("<APWebService_Input>")
					.append("\n")
					.append("<Option>WebService</Option>")
					.append("\n")
					.append("<EngineName>" + engineName + "</EngineName>")
					.append("\n")
					.append("<SessionId>" + sessionId + "</SessionId>")
					.append("\n")
					.append("<Calltype>WS-2.0</Calltype>")
					.append("\n")
					.append("<InnerCallType>BPMModify</InnerCallType>")
					.append("\n")
					.append("<wiNumber>" + sWorkitemId + "</wiNumber>")
					.append("\n")
					.append("<REF_NO>" + sTxn + "</REF_NO>")
					.append("\n")
					.append("<senderId>" + "WMS" + "</senderId>")
					.append("\n")
					.append("<mode>C</mode>")
					.append("\n")
					.append("<channelName>SANCTION_SCREENING</channelName>")
					.append("\n")
					.append("<correlationId>" + sTxn + "</correlationId>")
					.append("\n")
					.append("<channelRefNumber>" + sTxn + "</channelRefNumber>")
					.append("\n").append("<sysrefno>" + sTxn + "</sysrefno>")
					.append("\n").append("<processName>AO</processName>")
					.append("\n").append("</APWebService_Input>");
			logInfo("CLICK",
					"input xml of createWorkitemInputXML="
							+ inputXml.toString());
		} catch (Exception e) {
			log.error("Exception in", e);
		}
		return inputXml.toString();
	}

	public void saveAuditTrailOnFSKWICreation(IFormReference formObject) {
		try {
			logInfo("saveAuditTrailOnFSKWICreation", "INSIDE");
			String leadRefNo = "";
			String query = "";
			String trsdWINumber = (String) formObject.getValue("TRSD_WI_NAME");
			String reasonForAction = "WORKITEM NUMBER: " + trsdWINumber
					+ " IS CREATED FOR FSK.";
			query = "insert into USR_0_ALL_WS_DECISION_HIST(WI_NAME,USER_NAME,WS_NAME,WS_DECISION,WS_COMMENTS) values('"
					+ this.sWorkitemId
					+ "','"
					+ this.sUserName
					+ "','"
					+ this.sActivityName
					+ "','"
					+ "FSK WI CREATION"
					+ "','"
					+ reasonForAction + "')";
			logInfo("saveAuditTrailOnDedupeButton", " query " + query);
			formObject.saveDataInDB(query);
		} catch (Exception e) {
			log.error("Exception: ", e);
		}
	}

	public boolean checkFSKDecisionforNull() {
		logInfo("checkFSKDecisionforNull", "checkFSKDecisionforNull");
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString()) + 1;
		String sQuery = "select count (wi_name) from bpm_trsd_details where wi_name=(select trsd_wi_name from ext_ao where wi_name ='"
				+ sWorkitemId + "')";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		String count = "";
		try {
			count = sOutput.get(0).get(0);
		} catch (Exception e) {
			log.error("checkFSKDecisionforNull: " + e, e);
		}
		if (Integer.parseInt(count) == 0)
			return false;
		else
			return true;
	}

	public boolean checkFSKDecisionforReturn() throws Exception {
		logInfo("checkFSKDecisionforReturn", "INSIDE");
		int iProcessedCustomer = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String sQuery = "select count (wi_name) from bpm_trsd_details WHERE BATCH_ID =(SELECT MAX(BATCH_ID) FROM BPM_TRSD_DETAILS WHERE WI_NAME "
				+ "= (select trsd_wi_name from ext_ao where wi_name ='"
				+ sWorkitemId
				+ "')) AND WI_NAME ="
				+ "(select trsd_wi_name from ext_ao where wi_name ='"
				+ sWorkitemId + "') AND TRSD_STATUS ='R'";
		logInfo("checkFSKDecisionforReturn", "sQuery: " + sQuery);
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("checkFSKDecisionforReturn", "sOutput: " + sOutput);
		String count = "";
		try {
			count = sOutput.get(0).get(0);
		} catch (Exception e) {
			logError("checkFSKDecisionforReturn", e);
		}
		logInfo("checkFSKDecisionforReturn", "count: " + count);
		if (Integer.parseInt(count) == 0)
			return false;
		else
			return true;
	}

	
	public void skipUAEPassChk() {
		try {
			logInfo("Inside skipUAEPassChk ", " ");
			int gridCount = getGridCount(ACC_RELATION);
			logInfo("gridCount : ", "" + gridCount);
			for (int i = 0; i <= gridCount; i++) {
				String skipFlag = formObject.getTableCellValue(ACC_RELATION, i,
						13);
				String eidaNo = formObject
						.getTableCellValue(ACC_RELATION, i, 4);
				logInfo("skipFlag : ", "" + skipFlag);
				logInfo("eidaNo : ", "" + eidaNo);
				if (skipFlag.equalsIgnoreCase("true")) {
					String sUpdate = "update acc_relation_repeater set DECEASED='true',UAE_PASS_AUTH_FLAG='N',"
							+ " IS_UAE_PASS_AUTH_DONE='N' Where WI_NAME='"
							+ sWorkitemId + "' and Eida = '" + eidaNo + "'";
					logInfo("Updating the flags as skip UAEPASS : ", ""
							+ sUpdate);
					formObject.saveDataInDB(sUpdate);
					if (gridCount == 1) {
						String sUpdate1 = "UPDATE EXT_AO SET UAE_PASS_AUTH_FLAG='N', IS_UAE_PASS_AUTH_DONE='N' "
								+ " Where WI_NAME='" + sWorkitemId + "'";
						logInfo("Updating authFlag : ", "" + sUpdate1);
						formObject.saveDataInDB(sUpdate1);
					}

				}
			}
			int i = 0;
			String skipFlagrow0 = formObject.getTableCellValue(ACC_RELATION, i,
					13);
			String skipFlagrow1 = formObject.getTableCellValue(ACC_RELATION,
					i + 1, 13);
			logInfo("skipFlagrow0  : ", "" + skipFlagrow0);
			logInfo("skipFlagrow1  : ", "" + skipFlagrow1);
			if (skipFlagrow0.equalsIgnoreCase("true")
					|| skipFlagrow1.equalsIgnoreCase("true")) {
				String sUpdate = "UPDATE EXT_AO SET UAE_PASS_AUTH_FLAG='N', IS_UAE_PASS_AUTH_DONE='N' "
						+ " Where WI_NAME='" + sWorkitemId + "'";
				logInfo("Updating authFlag : ", "" + sUpdate);
				formObject.saveDataInDB(sUpdate);
			}
		} catch (Exception e) {
			e.printStackTrace();

		}

	}

	public void updateFSKDecision() {
		logInfo("updateFSKDecision", "INSIDE");
		String sQuery2 = "select trsd_status from bpm_trsd_details WHERE WI_NAME = "
				+ "(select trsd_wi_name from ext_ao where wi_name ='"
				+ sWorkitemId + "') and batch_id = (select max(batch_id) FROM BPM_TRSD_DETAILS WHERE WI_NAME =(select trsd_wi_name from ext_ao where wi_name ='" + sWorkitemId + "'))";
		logInfo("updateFSKDecision", "sQuery2: " + sQuery2);
		List<List<String>> statusSelectOutput = formObject
				.getDataFromDB(sQuery2);

		if (statusSelectOutput.size() > 0) {
			// String
			// status[]=(statusSelectOutput.get(0)).toString().split(",");
			String finalResult = "";
			int approvedCount = 0;

			for (int j = 0; j < statusSelectOutput.size(); j++) {
				if (statusSelectOutput.get(j).get(0).equalsIgnoreCase("P")) {
					finalResult = "Pending";
					break;
				}
				if (statusSelectOutput.get(j).get(0).equalsIgnoreCase("J")) {
					finalResult = "Rejected";
					break;
				}
				if (statusSelectOutput.get(j).get(0).equalsIgnoreCase("R")) {
					finalResult = "Returned";
					break;
				}
				if (statusSelectOutput.get(j).get(0).equalsIgnoreCase("D")
						|| statusSelectOutput.get(j).get(0)
								.equalsIgnoreCase("N")) {
					approvedCount++;
				}
			}
			if (approvedCount == statusSelectOutput.size()) {
				finalResult = "Approved";
			}
			int trsdDecisionUpdateOutput = updateDataInDB("ext_ao",
					"trsd_decision", "'" + finalResult + "'", "wi_name='"
							+ sWorkitemId + "'");
			logInfo("updateFSKDecision", trsdDecisionUpdateOutput + "");
		}
	}

	// public boolean checkProductOfferedChecker(IFormReference formObject){
	// if( ACTIVITY_CPD_CHECKER.equalsIgnoreCase(sActivityName) ){
	// if(!formObject.getValue(REQUEST_TYPE).toString().equalsIgnoreCase("Category Change Only")
	// &&
	// !formObject.getValue(CRO_DEC).toString().equalsIgnoreCase("Permanent Reject - Discard"))
	// {
	// if(formObject.getValue(ACC_TITLE).toString().equalsIgnoreCase("")) {
	// sendMessageValuesList(ACC_TITLE, "Please fill Account Title.");
	// return false;
	// }
	// int iRows = getGridCount(PRODUCT_QUEUE);
	// boolean isEtihad = false;
	// String sProdCode = "";
	// String sChequebook = "";
	// if(iRows < 1) {
	// sendMessageValuesList(PRODUCT_QUEUE, "Please add atleast one product.");
	// return false;
	// }
	// }
	// }
	// return true;
	// }
	public void calculateAppRiskCPD() { // krishna upgrade 22/05/2022
		logInfo("calculateAppRiskCPD", "Inside");
		String sQuery = "SELECT CURRENT_RISK_BUSSINESS FROM USR_0_RISK_ASSESSMENT_DATA_CPD WHERE WI_NAME='"
				+ sWorkitemId + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("calculateAppRiskCPD", "sQuery: " + sQuery + ",sOutput: "
				+ sOutput);
		int iTotalRetrived = sOutput.size();
		logInfo("calculateAppRiskCPD", "iTotalRetrived: " + iTotalRetrived);
		String sRiskArray = (sOutput != null && sOutput.size() > 0) ? sOutput
				.get(0).get(0).toString() : "";
		String sFinalRisk = "";
		if (sOutput != null && sOutput.size() > 0) {
			if (!sRiskArray.equalsIgnoreCase("")) {
				for (int i = 0; i < iTotalRetrived; i++) {
					sRiskArray = sOutput.get(i).get(0);
					if (sRiskArray.equalsIgnoreCase("Unacceptable Risk")) {
						sFinalRisk = "Unacceptable Risk";
						break;
					} else if (sRiskArray.equalsIgnoreCase("PEP")) {
						sFinalRisk = "PEP";
					} else if (sRiskArray.equalsIgnoreCase("Increased Risk")) {
						if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")) {
							sFinalRisk = "Increased Risk";
						}
					} else if (sRiskArray.equalsIgnoreCase("Neutral")) {
						if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")
								&& !sFinalRisk
										.equalsIgnoreCase("Increased Risk")) {
							sFinalRisk = "Neutral Risk";
						}
					} else if (sRiskArray.equalsIgnoreCase("UAE-PEP")) {
						sFinalRisk = "UAE-PEP";
					} else if (sRiskArray.equalsIgnoreCase("Non UAE-PEP")) {
						sFinalRisk = "Non UAE-PEP";
					} else if (sRiskArray.equalsIgnoreCase("Medium Risk")) {
						sFinalRisk = "Medium Risk";
					}

				}
			}
		}
		logInfo("calculateAppRiskCPD", "sFinalRisk: " + sFinalRisk);
		if (!sFinalRisk.equalsIgnoreCase("")) {
			logInfo("calculateAppRiskCPD", "sFinalRisk: " + sFinalRisk);
			formObject.setValue(FINAL_RISK_VAL_CPD, sFinalRisk);
		} else {
			logInfo("calculateAppRiskCPD", "sFinalRisk: " + sFinalRisk);
			String sQueryy = "select max(CUST_CUR_RISK_BANK) as CUST_CUR_RISK_BANK from usr_0_risk_data where "
					+ "(entrydatetime) in (select max(entrydatetime) from usr_0_risk_data  where wi_name='"
					+ sWorkitemId
					+ "' "
					+ "and CUST_CUR_RISK_BANK is not null) and wi_name='"
					+ sWorkitemId + "'";
			List<List<String>> sOutputt = formObject.getDataFromDB(sQueryy);
			logInfo("calculateAppRiskCPD", "sQueryy: " + sQueryy
					+ ",sOutputt: " + sOutputt);
			String sCustCurRiskBank = (sOutput != null && sOutput.size() > 0) ? sOutput
					.get(0).get(0).toString()
					: "";
			logInfo("calculateAppRiskCPD", "sCustCurRiskBank: "
					+ sCustCurRiskBank);
			if (sOutput != null && sOutput.size() > 0) {
				if (!sCustCurRiskBank.equalsIgnoreCase("")) {
					if (sCustCurRiskBank.equalsIgnoreCase("Unacceptable Risk")) {
						sFinalRisk = "Unacceptable Risk";
					} else if (sCustCurRiskBank.equalsIgnoreCase("PEP")) {
						sFinalRisk = "PEP";
					} else if (sCustCurRiskBank
							.equalsIgnoreCase("Increased Risk")) {
						if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")) {
							sFinalRisk = "Increased Risk";
						}
					} else if (sCustCurRiskBank.equalsIgnoreCase("Neutral")) {
						if (!sFinalRisk.equalsIgnoreCase("UAE-PEP")
								&& !sFinalRisk
										.equalsIgnoreCase("Increased Risk")) {
							sFinalRisk = "Neutral Risk";
						}
					} else if (sCustCurRiskBank.equalsIgnoreCase("UAE-PEP")) {
						sFinalRisk = "UAE-PEP";
					} else if (sCustCurRiskBank.equalsIgnoreCase("Non UAE-PEP")) {
						sFinalRisk = "Non UAE-PEP";
					} else if (sCustCurRiskBank.equalsIgnoreCase("Medium Risk")) {
						sFinalRisk = "Medium Risk";
					}
					formObject.setValue(FINAL_RISK_VAL_CPD, sFinalRisk);
				}
			}
		}
		logInfo("calculateAppRiskCPD", "Outside sFinalRisk: " + sFinalRisk);
	}
	
	public String executeApplicationAssessmentRiskRetail(int sNo) {
		StringBuffer inputXML = new StringBuffer();
		try {
			List<List<String>> list;
			String sOutput = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
			list = formObject.getDataFromDB(sOutput);
			logInfo("executeApplicationAssessmentRiskRetail",
					"setting InqRetailCustomerRisk Xml with sNO - " + sNo + " " );
			
			String query = "SELECT SEQ_WEBSERVICE.nextval as ID from DUAL";
			List<List<String>> sOutput1 = formObject.getDataFromDB(query);
			refNo = sOutput1.get(0).get(0);
			
			String sQuerydb = "SELECT CUST_ID,SOURCE_OF_FUNDS,ACC_RELATIONSHIP_PURPOSE,ADDITIONAL_SOURCES_INCOME_AED," //22 jul 2023 changes
					+"SRC_OF_WEALTH,ACC_IN_ANTHR_BNK_UAE,PEP,DUAL_NATIONALITY,Resident_Manual,CHANNELINDICATOR,PRIMARYSRCCTRY,"
					+ "add_src_of_income_cntry,purpose_of_acc_relation,pri_src_of_income,add_src_of_income FROM USR_0_CUST_TXN WHERE WI_NAME ='"
					+ sWorkitemId + "' " + "AND CUST_SNO ='" + sNo + "'";
			logInfo("executeApplicationAssessmentRiskRetail", "sQuerydb::" + sQuerydb);
			sOutput1 = formObject.getDataFromDB(sQuerydb);
			String sInputXML = "";
			senderId="WMSAO";
			String requestTimestamp = getCurrentTimeStamp();
			logInfo("executeApplicationAssessmentRiskRetail"," method requestTimestamp="+ requestTimestamp);			
					
			String customerId ="";
			String occupation ="";
			String additionalSourceOfIncome ="";
			String sourceOfWealth ="";
			String accountInOtherBanksFlag ="";
			String poaFlag ="";
			String dual_nationality ="";
			String residence ="";
			String channelIndicator = "";
			String PrimarySrctry = "";
			String onboardingMethod = "1";
			String addSrcOfIncomeCntry ="";
			String accountOpeningPurpose ="";
			String industry ="";
			String indRisk ="";
			if (sOutput1 != null && sOutput1.size() > 0) {
				customerId = sOutput1.get(0).get(0);
				logInfo("executeApplicationAssessmentRiskRetail","method customerId="+ customerId);
				occupation = sOutput1.get(0).get(1);
				logInfo("executeApplicationAssessmentRiskRetail"," method occupation="+ occupation);
				additionalSourceOfIncome = getAdditionalSrcofIncome(sOutput1.get(0).get(3));
				logInfo("executeApplicationAssessmentRiskRetail"," method additionalSourceOfIncome="+ additionalSourceOfIncome);
//				sourceOfWealth = sOutput1.get(0).get(4);
				sourceOfWealth = getSourceOfWealth(sOutput1.get(0).get(4)); //added by shivanshu DCRA
				logInfo("executeApplicationAssessmentRiskRetail","method sourceOfWealth="+ sourceOfWealth);
				accountInOtherBanksFlag = sOutput1.get(0).get(5);
				logInfo("executeApplicationAssessmentRiskRetail","method accountInOtherBanksFlag="+ accountInOtherBanksFlag);
				poaFlag = sOutput1.get(0).get(6);
				logInfo("executeApplicationAssessmentRiskRetail","method poaFlag="+ poaFlag);
				dual_nationality = sOutput1.get(0).get(7).toUpperCase();
				logInfo("executeApplicationAssessmentRiskRetail","method dual_nationality="+ dual_nationality);
				residence = sOutput1.get(0).get(8).toUpperCase();
				logInfo("executeApplicationAssessmentRiskRetail","method residence="+ residence);			
				channelIndicator=sOutput1.get(0).get(9);
				logInfo("executeApplicationAssessmentRiskRetail","channelIndicator="+channelIndicator);
				PrimarySrctry=sOutput1.get(0).get(10);
				logInfo("executeApplicationAssessmentRiskRetail","PrimarySrctry="+PrimarySrctry);
				addSrcOfIncomeCntry =getSourceOfIncome(PrimarySrctry,sOutput1.get(0).get(11));
				logInfo("executeApplicationAssessmentRiskRetail","addSrcOfIncomeCntry="+addSrcOfIncomeCntry);
				accountOpeningPurpose =getPurposeOfAcc(sOutput1.get(0).get(12));
				logInfo("executeApplicationAssessmentRiskRetail","accountOpeningPurpose="+accountOpeningPurpose);
				industry =getIndustryRisk(sOutput1.get(0).get(13));
				logInfo("executeApplicationAssessmentRiskRetail","industry="+industry);
				indRisk =getAddSourceRisk(sOutput1.get(0).get(14));
				logInfo("executeApplicationAssessmentRiskRetail","indRisk="+indRisk);
			}
			//Added Shivanshu
			String productCode = "0"; 
			String queryProdCode = "select LISTAGG(PROD_CODE,'|') within group (order by PROD_CODE) as concatenated_values"
					+ " from (SELECT DISTINCT PROD_CODE FROM USR_0_PRODUCT_SELECTED WHERE WI_NAME = '" + sWorkitemId + "')"; 
			logInfo("executeApplicationAssessmentRiskRetail","queryProdCode = "+queryProdCode);
			List<List<String>> outputCode = formObject.getDataFromDB(queryProdCode);
			if (outputCode.get(0).get(0) != null && outputCode.size() > 0 ) {
				productCode = outputCode.get(0).get(0);
				logInfo("executeApplicationAssessmentRiskRetail","Product Code = "+productCode);
			}
			//Added by Shivanshu ATP-455
			String residence_cd="";
			String residence_cust = "";
			if(!"".equalsIgnoreCase(residence) && residence!=null){
				String queryRes ="select country_code from usr_0_country_mast where country='"+residence+"'";
				logInfo("executeApplicationAssessmentRiskRetail"," queryRes = "+ queryRes);
				List<List<String>> resiCode =formObject.getDataFromDB(queryRes);
				if (resiCode != null && resiCode.size() > 0) {
					residence_cust=resiCode.get(0).get(0);
					logInfo("executeApplicationAssessmentRiskRetail"," residence_cust = "+ residence_cust);
				}
			}
			String residence_poa=formObject.getValue(POA_RESIDENCY).toString();
			if (residence_poa == null || residence_poa.equalsIgnoreCase(null)
					|| residence_poa.equalsIgnoreCase("")) {
				residence_cd = residence_cust;
			}else{
				residence_cd = residence_cust +"|"+residence_poa;
			}
			logInfo("executeApplicationAssessmentRiskRetail","Residence Code = "+residence_cd);

//			if("UNITED ARAB EMIRATES".equalsIgnoreCase(residence)){
//				residence_cd="Y";
//			}else{
//				residence_cd="N";
//			}

			// pipIndicator
			String pepIndicator = "No PEP";
			String privateClint =formObject.getValue("PRIVATE_CLIENT").toString();
	        logInfo("executeApplicationAssessmentRiskRetail","privateClint <=> "+privateClint);
			if ("N".equalsIgnoreCase(privateClint)) {
				String p1= formObject.getValue("Customer_Authorized_Rad").toString();
				String p2= formObject.getValue("Customer_Entrusted_Rad").toString();
		        logInfo("executeApplicationAssessmentRiskRetail", "p1 <=> "+formObject.getValue("Customer_Authorized_Rad").toString());
		        logInfo("executeApplicationAssessmentRiskRetail", "p2 <=> "+formObject.getValue("Customer_Entrusted_Rad").toString());
                if(p1.equalsIgnoreCase("No") && p2.equalsIgnoreCase("No")) {
					pepIndicator="No PEP";
				}else if(p1.equalsIgnoreCase("No") && p2.equalsIgnoreCase("Yes")) {
					pepIndicator="HIO PEP identified (Client or PoA)";		
				}else if(p1.equalsIgnoreCase("Yes") && p2.equalsIgnoreCase("Yes")) {
					pepIndicator="HIO PEP identified (Client or PoA)";
			    } else if(p1.equalsIgnoreCase("Yes") && p2.equalsIgnoreCase("No")) {
				    pepIndicator=formObject.getValue("HIO_PEP_AO").toString();
				    if (pepIndicator.equalsIgnoreCase("UAE PEP")) {
				pepIndicator = "DPEP identified (Client or PoA)";
					}else {
						pepIndicator = "FPEP identified (Client or PoA)";
					}
			}
		     }else {
				String p3= formObject.getValue("Customer_PEP_Rad").toString();
				String p4= formObject.getValue("Person_Associated_Rad").toString();
				String p5= formObject.getValue("Person_Power_Rad").toString();
				String p6= formObject.getValue("Customer_Entrusted_Man_Rad").toString();
				logInfo("executeApplicationAssessmentRiskRetail", " p3, p4, p5, p6 , HIOFlag <=> "+p3+","+p4+","+ p5+","+p6);
				if(p3.equalsIgnoreCase("No") && p4.equalsIgnoreCase("No") && p5.equalsIgnoreCase("No") && p6.equalsIgnoreCase("No")) {
					pepIndicator="No PEP";
				}else if(p3.equalsIgnoreCase("No") && p4.equalsIgnoreCase("No") && p5.equalsIgnoreCase("No") && p6.equalsIgnoreCase("Yes")) {
					pepIndicator="HIO PEP identified (Client or PoA)";		
				}else if(p3.equalsIgnoreCase("Yes") && p4.equalsIgnoreCase("Yes") && p5.equalsIgnoreCase("Yes") && p6.equalsIgnoreCase("Yes")) {
					pepIndicator="HIO PEP identified (Client or PoA)";
				}else if((p3.equalsIgnoreCase("Yes") || p4.equalsIgnoreCase("Yes") || p5.equalsIgnoreCase("Yes")) && p6.equalsIgnoreCase("YES")) {
					pepIndicator="HIO PEP identified (Client or PoA)";
				}else if((p3.equalsIgnoreCase("Yes") || p4.equalsIgnoreCase("Yes") || p5.equalsIgnoreCase("Yes")) && p6.equalsIgnoreCase("No")) {
					pepIndicator=formObject.getValue("HIO_PEP_AO").toString();
					if (pepIndicator.equalsIgnoreCase("UAE PEP")) {
						pepIndicator = "DPEP identified (Client or PoA)";
					}else {
				pepIndicator = "FPEP identified (Client or PoA)";
			}
				}
		  }
			logInfo("getRiskAssessmentInqCorp", "Inside getRiskAssessmentInqCorp() pepIndicator="+pepIndicator);
			
			logInfo("executeApplicationAssessmentRiskRetail"," method source="+ accountOpeningPurpose);

			//nationality1 on customer info tab
			String nationality1_cd="";
			String nationality1=getFinalDataComparison(CHECKBOX_NATIONALITY_FCR,
					CHECKBOX_NATIONALITY_EIDA, CHECKBOX_NATIONALITY_MANUAL,
					FCR_NATIONALITY, EIDA_NATIONALITY, MANUAL_NATIONALITY).trim(); //formObject.getValue(MANUAL_NATIONALITY).toString();
			if(!"".equalsIgnoreCase(nationality1) && nationality1!=null){
				String query1 ="select country_code from usr_0_country_mast where country='"+nationality1+"'";
				logInfo("executeApplicationAssessmentRiskRetail","query1= "+ query1);
				List<List<String>> list1 =formObject.getDataFromDB(query1); 
				if (list1 != null && list1.size() > 0) {
					nationality1_cd=list1.get(0).get(0); 
					logInfo("executeApplicationAssessmentRiskRetail","nationality1_cd= "+ nationality1_cd);
				}			
			}
					
			String dual_nationality_cd="";
			String final_nationality=nationality1_cd;
			if(!"".equalsIgnoreCase(dual_nationality) && dual_nationality!=null){
				String query1 ="select country_code from usr_0_country_mast where country='"+dual_nationality+"'";
				logInfo("executeApplicationAssessmentRiskRetail","query1= "+ query1);
				List<List<String>> list1 =formObject.getDataFromDB(query1); 
				if (list1 != null && list1.size() > 0) {
					dual_nationality_cd=list1.get(0).get(0); 
					final_nationality =final_nationality+"|"+dual_nationality_cd;
					logInfo("executeApplicationAssessmentRiskRetail","dual_nationality_cd= "+ dual_nationality_cd);
				}		
			}	

				
			 if (!(occupation.equalsIgnoreCase("30")||occupation.equalsIgnoreCase("20"))) {
				 industry = "0";
			}
			
			if(additionalSourceOfIncome.contains("30")||additionalSourceOfIncome.contains("20")) {
				industry=industry +"|"+ indRisk;
				}
				
			if(accountInOtherBanksFlag.equals("Yes")){
				accountInOtherBanksFlag="Y";
			}
			if(accountInOtherBanksFlag.equals("No")){
				accountInOtherBanksFlag="N";
			} 
			
			String pepIndicator_cd="";
			if(!"".equalsIgnoreCase(pepIndicator) && pepIndicator!=null){
				String pepIndicator_query = "select pep_cd from usr_0_wbg_ao_pep_master where pepindicator_desc='"+pepIndicator+"'";
				List<List<String>> pepIndicator_list = formObject.getDataFromDB(pepIndicator_query);
				if (pepIndicator_list != null && pepIndicator_list.size() > 0) {
					pepIndicator_cd=pepIndicator_list.get(0).get(0);
				}
						
			}
			
			if(poaFlag.equals("Yes")){
				poaFlag="Y";
			    final_nationality = final_nationality +"|"+ formObject.getValue("POA_Nationality").toString();
			}
			if(poaFlag.equals("No")){
				poaFlag="N";
			}
			
			if("".equalsIgnoreCase(customerId)|| customerId==null){
				String s=sWorkitemId;
				customerId="A"+s.replaceAll("[^0-9]", "").replaceAll("^0+(?!$)", "");
				logInfo("getRiskAssessmentInqCorp", "customerId after removing leading zeros of workitemnumber="+customerId);
				//to remove the leading zeros
			}
			String preAssessmentFlag = getFlag();
        
				logInfo("executeApplicationAssessmentRiskRetail", "setting ");
				inputXML.append("<?xml version=\"1.0\"?>")
						.append("\n")
						.append("<APWebService_Input>")
						.append("\n")
						.append("<Option>WebService</Option>")
						.append("\n")
						.append("<EngineName>" + sEngineName + "</EngineName>")
						.append("\n")
						.append("<SessionId>" + sSessionId + "</SessionId>")
						.append("\n")	
						.append("<Calltype>WS-2.0</Calltype>")
						.append("\n")
						.append("<InnerCallType>InqRetailCustomerRisk</InnerCallType>")
						.append("\n")
						.append("<serviceName>InqRetailCustomerRisk</serviceName>")
						.append("\n")
						.append("<versionNo>" + "1.0" + "</versionNo>")
						.append("\n")
						.append("<WIName>" + sWorkitemId + "</WIName>")
						.append("\n")
						.append("<senderID>" + senderId + "</senderID>")
						.append("\n")
						.append("<sysRefNumber>" + refNo + "</sysRefNumber>")
						.append("\n")
						.append("<requestTimestamp>" + requestTimestamp
								+ "</requestTimestamp>")
						.append("\n")
						.append("<fetchRetailCustomerRiskReq>")
						.append("\n")
						.append("<customerId>" +customerId+ "</customerId>")
						.append("\n")
						.append("\n")
						.append("<preAssessmentFlag>" + preAssessmentFlag
								+ "</preAssessmentFlag>")
						.append("\n")
						.append("\n")
						.append("<requestTimestamp>" + requestTimestamp
								+ "</requestTimestamp>")
						.append("\n")
						.append("\n")
						.append("<occupation>" + occupation + "</occupation>")
						.append("\n")
						.append("\n")
						.append("<industry>" + industry + "</industry>")
						.append("\n")
						.append("\n")
						.append("<accountOpeningPurpose>"+ accountOpeningPurpose + "</accountOpeningPurpose>")
						.append("\n")
						.append("\n")
						.append("<additionalSourceOfIncome>"
								+ additionalSourceOfIncome
								+ "</additionalSourceOfIncome>")
						.append("\n")
						.append("\n")
						.append("<sourceOfWealth>" + sourceOfWealth
								+ "</sourceOfWealth>")
						.append("\n")
						.append("\n")
						.append("<accountInOtherBanksFlag>"
								+ accountInOtherBanksFlag
								+ "</accountInOtherBanksFlag>")
						.append("\n")
						.append("\n")
						.append("<pepIndicator>" + pepIndicator_cd
								+ "</pepIndicator>")
						.append("\n")
						.append("\n")
						.append("<poaFlag>" + poaFlag + "</poaFlag>")
						.append("\n")
						.append("\n")
						.append("<nationality>" + final_nationality
								+ "</nationality>")
						.append("\n")
						.append("\n")
						.append("<residence>" + residence_cd + "</residence>")
						.append("\n")
						.append("\n")
						.append("<sourceOfIncomeCountry>"
								+ addSrcOfIncomeCntry
								+ "</sourceOfIncomeCountry>")
						.append("\n")
						.append("\n")
						.append("<onboardingMethod>" + onboardingMethod
								+ "</onboardingMethod>")
						.append("\n")
						.append("\n")
						.append("<product>" + productCode + "</product>")
						.append("\n")
						.append("\n")
						.append("<channelIndicator>" + channelIndicator
								+ "</channelIndicator>").append("\n")
						.append("</fetchRetailCustomerRiskReq>").append("\n")
						.append("</APWebService_Input>");

				logInfo("executeApplicationAssessmentRiskRetail",
						" <<<=== Created ===>>> " + inputXML.toString());

		} catch (Exception e) {
			logError("executeApplicationAssessmentRiskRetail", e);
		}
		return inputXML.toString();
	}

	public String getCurrentTimeStamp() {
		String currentTimeStamp = null;
		try {
			Date date = Calendar.getInstance().getTime();
			DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");
			currentTimeStamp = formatter.format(date);
			logInfo("getCurrentTimeStamp", "currentTimeStamp"
					+ currentTimeStamp);
		} catch (Exception e) {
		}
		return currentTimeStamp;
	}	
	
	public int updateDebitCardOrder(int callOrder){
		try{
			logInfo("updateDebitCardOrder", "Inside updateDebitCardOrder: ");
			logInfo("updateDebitCardOrder", " callOrder: "+callOrder);
			String sQuery = "select call_order from usr_0_integration_calls where wi_name='"+sWorkitemId+"'  group by call_order having count(call_order) >1";
			logInfo("updateDebitCardOrder", "updateDebitCardOrder: "+sQuery);
			List<List<String>> output =formObject.getDataFromDB(sQuery);
			int count = output.size();
			logInfo("updateDebitCardOrder", " count: "+count);
			if (count>0){
				int call_order = Integer.parseInt(output.get(0).get(0));
				logInfo("updateDebitCardOrder", " call_order: "+call_order);
				if(call_order == callOrder){
					callOrder = callOrder+1;
				}
			}
			logInfo("updateDebitCardOrder", " callOrder: "+callOrder);
		}catch(Exception e){
			logInfo("updateDebitCardOrder", "error in updateDebitCardOrder: ");
			logError("updateDebitCardOrder", e);
			e.printStackTrace();
		}
		return callOrder;
	}
	
//	public void skipDebitCardCall(){
//		try{
//			 logInfo("skipDebitCardCall", "Inside skipDebitCardCall");
//			 String sCardNo = "";
//			 if (formObject.getValue(CHANNEL_TYPE).toString()
//						.equalsIgnoreCase("Alternate")
//						&& sActivityName
//								.equalsIgnoreCase(ACTIVITY_CPD_CHECKER)
//						&& formObject.getValue(DATA_ENTRY_MODE)
//								.toString().equalsIgnoreCase("Detail Data Entry")
//						&& formObject.getValue(RD_INST_DEL).toString()
//								.equalsIgnoreCase("Yes")) {
//				 logInfo("skipDebitCardCall", "Inside skipDebitCardCall CPD CHECKER");
//					String sQuery = "Select Count(1) as COUNT from USR_0_INTEGRATION_CALLS where wi_name ='"+sWorkitemId+"' AND CALL_NAME LIKE '%DEBITCARD_NEW%'";
//					List<List<String>> output =formObject.getDataFromDB(sQuery);
//					int count = Integer.parseInt(output.get(0).get(0));
//					logInfo("skipDebitCardCall", " count: "+count);
//					if (count>0){
//						String query = "SELECT CARD_NUMBER FROM DEBIT_CARD_REP WHERE "
//									+ "WI_NAME ='"
//									+ sWorkitemId
//									+ "' AND REP_NEW_LINK='New' and instr(card_number,'_')=0 "
//									+ "ORDER BY TO_NUMBER(CID)";
//						logInfo("skipDebitCardCall", "skipDebitCardCall query: "+ query);
//						List<List<String>> output2 =formObject.getDataFromDB(query);
//						int	iNoOfCard = output2.size();
//						logInfo("skipDebitCardCall","DEBITCARD_NEW iNoOfCard: " + iNoOfCard);
//						if (iNoOfCard > 0) {
//							for (int i = 0; i < iNoOfCard; i++) {
//							String	call_name = "DEBITCARD_NEW_" + (i + 1);
//								// iCount=list.get(i).get(0);
//								sCardNo = output2.get(i).get(0);
//								if (!"".equals(sCardNo)) {
//									logInfo("skipDebitCardCall", " sCardNo: "+sCardNo);
//									String updateQuery = "UPDATE USR_0_INTEGRATION_CALLS SET STATUS='Success' where wi_name='"+sWorkitemId+"' AND CALL_NAME = '"+call_name+"'";
//									logInfo("skipDebitCardCall", "skipDebitCardCall updateQuery: "+ updateQuery);
//								}
//							}
//					}
//			 
//			 }
//			 }
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
	public void setEnableAndDisableFskButton(){
		logInfo("setEnableAndDisableFskButton", "Inside setEnableAndDisableFskButton");
		String sQuery = "Select Count(1) as COUNT from acc_relation_repeater where wi_name ='"+sWorkitemId+"'";
		List<List<String>> output =formObject.getDataFromDB(sQuery);
		int count = Integer.parseInt(output.get(0).get(0));
		logInfo("setEnableAndDisableFskButton", " count: "+count);
		String sQuery1 = "Select Count(1) as COUNT from bpm_trsd_details where wi_name =(Select trsd_wi_name from ext_ao where wi_name ='"+sWorkitemId+"') and trsd_status <> 'R'  and  trsd_status <> 'E'";
		List<List<String>> output1 =formObject.getDataFromDB(sQuery1);
		int count1 = Integer.parseInt(output1.get(0).get(0));
		logInfo("setEnableAndDisableFskButton", "Inside count1: "+count1);
		if(count != count1){
			String scan_mode = formObject.getValue("SCAN_MODE").toString();
			String acc_own_type = formObject.getValue("ACC_OWN_TYPE").toString();
			logInfo("setEnableAndDisableFskButton", "Scan_mode: " +scan_mode+ "  & Acc_type : " +acc_own_type);
			if("New WMS ID".equalsIgnoreCase(scan_mode) && !"Single".equalsIgnoreCase(acc_own_type)){
				logInfo("Enable FSK Buttton for Omniscan WI and ", acc_own_type);
			   formObject.setStyle(BTN_CPD_TRSD_CHK,"disable","false");
			} else if(!"Single".equalsIgnoreCase(formObject.getValue("ACC_OWN_TYPE").toString())) { 
				logInfo("Enable FSK Buttton for Intro WI and ", acc_own_type);
			   formObject.setStyle(BTN_TRSD_CHECK,"disable","false");
			}
		} else {
			logInfo("setEnableAndDisableFskButton","Disable FSK Buttton if count is matched: ");
			formObject.setStyle(BTN_TRSD_CHECK,"disable","true");
			formObject.setStyle(BTN_CPD_TRSD_CHK,"disable","true");
		}
	}
		
//	AO DCRA COMMENTED//15082023
		public void savePreAssessmentDetails() {
			int sOutput = -1;
			int sCount = 0;
			String column ="";
			String values ="";
			String sWhere ="";
			if("N".equalsIgnoreCase(formObject.getValue(PRIVATE_CLIENT).toString())) {
			String q1 = formObject.getValue(KYC_CUST_BLACKLIST).toString();
			String q2 = formObject.getValue(KYC_CUST_HAWALADRA_SERV).toString();
			String q3 = formObject.getValue(KYC_CUST_NORTH_KORES_RESD).toString();
			String q4 = formObject.getValue(KYC_ENTITY_RESIDENT_JURISD).toString();
			sWhere = "WI_NAME='" + sWorkitemId + "'";
			String preKYCFlag = "Yes";
			if (q1.equalsIgnoreCase("Yes") || q2.equalsIgnoreCase("Yes") 
					|| q3.equalsIgnoreCase("Yes") || q4.equalsIgnoreCase("Yes") ){
						preKYCFlag = "No";
			}
			logInfo("savePreAssessmentDetails", "preFlag: " + preKYCFlag);
			sOutput = updateDataInDB("EXT_AO", "PRE_ASSESMENT_FLAG", "'" + preKYCFlag + "'" , sWhere);
			logInfo("savePreAssessmentDetails", "output: " + sOutput);
			
			column = "CUST_BLACKLIST,CUST_HAWALADRA_SERV,CUST_NORTHKORES_RESD,ENTITY_RESIDENT_JURISD,WI_NAME,CUST_NAME,ACC_RELATION";
			logInfo("savePreAssessmentDetails", " column:: " + column);
				values = "'" + q1 + "'" 
					+ (char) 25 + "'" + q2 + "'"
					+ (char) 25 + "'" + q3 + "'" 
					+ (char) 25 + "'" + q4 + "'" 					
					+ (char) 25 + "'" + sWorkitemId + "'";
			logInfo("savePreAssessmentDetails", " values:: " + values);
			} else if("Y".equalsIgnoreCase(formObject.getValue(PRIVATE_CLIENT).toString())) {
				String q1 = formObject.getValue(KYC_CUST_BLACKLIST1).toString();
				String q2 = formObject.getValue(KYC_BARRIER).toString();
				String q3 = formObject.getValue(KYC_ENTITY_SHELL).toString();
				String q4 = formObject.getValue(KYC_CUST_HAWALADRA).toString();
				String q5 = formObject.getValue(KYC_CUST_NORTH_KORES).toString();
				String q6 = formObject.getValue(KYC_PATNER_UBO).toString();
				String q7 = formObject.getValue(KYC_MANUFACTURING).toString();
				String q8 = formObject.getValue(KYC_LEGAL_GAMING).toString();
				String q9 = formObject.getValue(KYC_OFFICE_VELLI).toString();
				String q10 = formObject.getValue(KYC_VIRTUAL_CURRENCY).toString();
				String q11 = formObject.getValue(KYC_ENTITY_RE).toString();
				String q12 = formObject.getValue(KYC_NOMINEE).toString();
				String q13 = formObject.getValue(KYC_EXCEPTIONAL).toString();
			
				sWhere = "WI_NAME='" + sWorkitemId + "'";
				
				values = "'" + q1 + "'" 
						+ (char) 25 + "'" + q2 + "'"
						+ (char) 25 + "'" + q3 + "'" 
						+ (char) 25 + "'" + q4 + "'"
						+ (char) 25 + "'" + q5 + "'"
						+ (char) 25 + "'" + q6 + "'"
						+ (char) 25 + "'" + q7 + "'"
						+ (char) 25 + "'" + q8 + "'"
						+ (char) 25 + "'" + q9 + "'"
						+ (char) 25 + "'" + q10 + "'"
						+ (char) 25 + "'" + q11 + "'"
						+ (char) 25 + "'" + q12 + "'"
						+ (char) 25 + "'" + q13 + "'"
						+ (char) 25 + "'" + sWorkitemId + "'";
				
				column = "CUST_BLACKLIST,KYC_BARRIER,ENTITY_SHELL,CUST_HAWALADRA_SERV,CUST_NORTHKORES_RESD,PATNER_UBO,"
						+ "MANUFACTURING,LEGAL_GAMING,OFFICE_VELLI,VIRTUAL_CURRENCY,ENTITY_RESIDENT_JURISD,KYC_NOMINEE,KYC_EXCEPTIONAL,WI_NAME,CUST_NAME,ACC_RELATION";
				logInfo("savePreAssessmentDetails", " column:: " + column);
			}
			
			List<List<String>> list;
			try {
				String sQuery = "SELECT COUNT(WI_NAME) as count FROM USR_0_AO_PREASSESSMENT WHERE WI_NAME ='"
						+ sWorkitemId + "'";
				logInfo("savePreAssessmentDetails", "sQuery: " + sQuery);
				list = formObject.getDataFromDB(sQuery);
				logInfo("savePreAssessmentDetails", "list: " + list);
				sCount = Integer.parseInt(list.get(0).get(0));
				if (sCount > 0) {
					int count =getGridCount("acc_relation");
					for(int i=0;i<count;i++) {
						String CustName =formObject.getTableCellValue("acc_relation",i,1);
						String relation =formObject.getTableCellValue("acc_relation",i,9);
						sWhere = "WI_NAME='" + sWorkitemId + "'  and cust_name ='"+CustName+"'";
						sOutput = updateDataInDB("usr_0_ao_PreAssessment", column, values + (char) 25 + "'" + CustName + "'" +(char) 25 +  "'" + relation + "'", sWhere);
						logInfo("savePreAssessmentDetails", "sOutputU: " + sOutput);
					}
				logInfo("savePreAssessmentDetails", "sOutputU: " + sOutput);
				} else {
					int count =getGridCount("acc_relation");
					for(int i=0;i<count;i++) {
						String CustName =formObject.getTableCellValue("acc_relation",i,1);
						String relation =formObject.getTableCellValue("acc_relation",i,9);
						sOutput = insertDataIntoDB("usr_0_ao_PreAssessment", column, values + (char) 25 + "'" + CustName + "'" +(char) 25 +  "'" + relation + "'");
						logInfo("savePreAssessmentDetails", "sOutputI: " + sOutput);
					}
				logInfo("savePreAssessmentDetails", "sOutputI: " + sOutput);
				}
			} catch (Exception e) {
				logError("savePreAssessmentDetails", e);
			}
	}
	
	
	public String getIndustryRisk(String priSrcOfIncome) {
		String [] priSrcOfInc =priSrcOfIncome.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			StringJoiner str =new StringJoiner("|");
		for(int k=0;k<priSrcOfInc.length;k++) {
			str.add(priSrcOfInc[k]);
		}
		return str.toString();
				}
	
	public String getAdditionalSrcofIncome(String addSrcOfIncome) {
		String [] addSrcOfInc =addSrcOfIncome.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
		StringJoiner str =new StringJoiner("|");
		for(int k=0;k<addSrcOfInc.length;k++) {
			str.add(addSrcOfInc[k]);
			}
			return str.toString();
		}
	
	
	public String getSourceOfIncome(String priSrcCntry, String addSrcofCntry) {
		String srcofIncomeCountry="";
		if(!addSrcofCntry.equalsIgnoreCase("[]")) {
			String [] addSrcCntry =addSrcofCntry.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			StringJoiner str =new StringJoiner("|");
			for(int k=0;k<addSrcCntry.length;k++) {
				str.add(addSrcCntry[k]);
			}
			srcofIncomeCountry =priSrcCntry+"|"+str.toString();
		} else {
			srcofIncomeCountry =priSrcCntry;
			
				}
		return srcofIncomeCountry;
			}
	
	
	public String getPurposeOfAcc(String accOpenPurpose) {
		String [] accOpenPur =accOpenPurpose.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			StringJoiner str =new StringJoiner("|");
		for(int k=0;k<accOpenPur.length;k++) {
			str.add(accOpenPur[k]);
				}
		return str.toString();
				}
				
	public String getAddSourceRisk(String indAddSrcRisk) {
		String [] indAddSrcIncRisk =indAddSrcRisk.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			StringJoiner str =new StringJoiner("|");
		for(int k=0;k<indAddSrcIncRisk.length;k++) {
			str.add(indAddSrcIncRisk[k]);
			}
			return str.toString();
		}
	
	//Added by shivanshu for sourceOFWealth DCRA
	public String getSourceOfWealth(String srcOfWealth) {
		String [] addSrcOfWealth =srcOfWealth.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
		StringJoiner str =new StringJoiner("|");
		for(int k=0;k<addSrcOfWealth.length;k++) {
			str.add(addSrcOfWealth[k]);
			}
			return str.toString();
		}
	
		public void populatePreAssesmentDetails() {
			logInfo("populatePreAssesmentDetails", "Inside populatePreAssesmentDetails");
			logInfo("populatePreAssesmentDetails", "Private Client"+formObject.getValue(PRIVATE_CLIENT).toString());
			if("N".equalsIgnoreCase(formObject.getValue(PRIVATE_CLIENT).toString())) {
			String sQuery = "SELECT CUST_BLACKLIST,CUST_HAWALADRA_SERV,CUST_NORTHKORES_RESD,"
					+ "ENTITY_RESIDENT_JURISD FROM USR_0_AO_PREASSESSMENT where WI_NAME = '"+ sWorkitemId + "' and rownum =1";
			logInfo("populatePreAssesmentDetails", "query: " + sQuery);
			List<List<String>> result = formObject.getDataFromDB(sQuery);
			logInfo("populatePreAssesmentDetails", "populatePreAssesmentDetails result: " + result);
			if (result != null && result.size() > 0) {
				String[] setValues = { KYC_CUST_BLACKLIST,KYC_CUST_HAWALADRA_SERV, KYC_CUST_NORTH_KORES_RESD,KYC_ENTITY_RESIDENT_JURISD};
				setValuesFromDB(result, setValues);
			}
			} else if("Y".equalsIgnoreCase(formObject.getValue(PRIVATE_CLIENT).toString())) {
				String sQuery = "SELECT  CUST_BLACKLIST,KYC_BARRIER,ENTITY_SHELL,CUST_HAWALADRA_SERV,CUST_NORTHKORES_RESD,PATNER_UBO,"
						+ "MANUFACTURING,LEGAL_GAMING,OFFICE_VELLI,VIRTUAL_CURRENCY,ENTITY_RESIDENT_JURISD,KYC_NOMINEE,KYC_EXCEPTIONAL"
						+ " FROM USR_0_AO_PREASSESSMENT where WI_NAME = '"+ sWorkitemId + "'";
				logInfo("populatePreAssesmentDetails", "query: " + sQuery);
				List<List<String>> result = formObject.getDataFromDB(sQuery);
				logInfo("populatePreAssesmentDetails", "populatePreAssesmentDetails result: " + result);
				if (result != null && result.size() > 0) {
					String[] setValues = { KYC_CUST_BLACKLIST1,KYC_BARRIER, KYC_ENTITY_SHELL,KYC_CUST_HAWALADRA,KYC_CUST_NORTH_KORES,
							KYC_PATNER_UBO,KYC_MANUFACTURING,KYC_LEGAL_GAMING,KYC_OFFICE_VELLI,KYC_VIRTUAL_CURRENCY,KYC_ENTITY_RE,
							KYC_NOMINEE,KYC_EXCEPTIONAL};
					setValuesFromDB(result, setValues);
				}
			}
		}
				
		//Added by Jamshed
		public void saveKYCInfoRetailQDE()
		  {
		    try
		    {
		      logInfo("saveKYCInfoRetailQDE", "saveKYCInfoRetailQDE starts");
		      long start_time = System.currentTimeMillis();
		      logInfo("saveKYCInfoRetailQDE", "In saveKYCInfoRetailQDE----");
		      int iSelectedRow = 0;
		      iSelectedRow = Integer.parseInt(this.formObject.getValue(
		        "SELECTED_ROW_INDEX").toString());
		      String cust_id = this.formObject.getTableCellValue("acc_relation", 
		        iSelectedRow, 2);
		      String sCustNo = this.formObject.getTableCellValue("acc_relation", 
		        iSelectedRow, 0);
		      String column1 = "CUST_ID,WMS_ID,WI_NAME,CUST_SNO,SOURCE_OF_FUNDS,ACC_IN_ANTHR_BNK_UAE,DUAL_NATIONALITY,"
		      		+ "RESIDENT_MANUAL,ACC_RELATIONSHIP_PURPOSE,SRC_OF_WEALTH,PEP,"
		      		+ "CHANNELINDICATOR,PRIMARYSRCCTRY,ACCOPENPURPOSE,POA_NATIONALITY,POA_RESIDENCY"; //Shivanshu ATP-455

		      logInfo("saveKYCInfoRetailQDE", "ADDITIONAL_SOURCES_INCOME_AED : " + 
		        this.formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED)
		        .toString());		      
		      String residentManual=getFinalDataComparison(
						CHECKBOX_COUNTRY_RES_FCR, CHECKBOX_COUNTRY_RES_EIDA,
						CHECKBOX_COUNTRY_RES_MANUAL, FCR_RESIDENT, EIDA_RESIDENT,
						MANUAL_RESIDENT).trim();       //Added for RetailService sourceofIncomeCountry tag.
				logInfo("SaveKYCInfo", "For RESIDENT_MANUAL column residentManual value: "+residentManual);
		      
		      String value1 = "'"  
		        + cust_id 
		        + "'"
		        + (char) 25 
		        + "'"	         
		        + this.formObject.getValue("WMS_ID").toString().toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.sWorkitemId 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + sCustNo 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue(AO_INCOME_SRC).toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue("ACC_IN_ANTHR_BNK_UAE").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue("DUAL_NATIONALITY").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + residentManual   
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue("GI_PURPOSE_ACC_REL").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue("RA_CUST_SRC_WEALTH").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	 
		        + this.formObject.getValue("RA_IS_CUST_PEP").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue("CHANNEL_RISK_AO").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue(PRIMARY_SRC_CTRY).toString() 
		        + "'"
		        + (char) 25 
		        + "'"	 
		        + this.formObject.getValue("Others").toString() 
		        + "'"
		        + (char) 25 
		        + "'"	
		        + this.formObject.getValue(POA_NATIONALITY).toString() 
			+ "'"
			+ (char) 25 //Added by SHivanshu ATP-455
			+ "'"
                        + this.formObject.getValue(POA_RESIDENCY).toString()
		        + "'";

		      logInfo("saveKYCInfoRetailQDE", "ADDITIONAL_SOURCES_INCOME_AED : " + 
		        this.formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED)
		        .toString());
			logInfo("saveKYCInfoRetailQDE", "LISTVIEW_PUR_ACC_RELATION : " + 
					this.formObject.getValue("LISTVIEW_PUR_ACC_RELATION")
			.toString());
			logInfo("saveKYCInfoRetailQDE", "LISTVIEW_SRC_ADD_OF_CNTRY : " + 
					this.formObject.getValue("LISTVIEW_SRC_ADD_OF_CNTRY")
			.toString());
		      logInfo("saveKYCInfoRetailQDE", "columns :  " + column1 + "   values :   " + 
		        value1);
		      insertIntoCustomerTXNTable(sCustNo, this.sWorkitemId, column1, value1);
		      long end_Time = System.currentTimeMillis();
		      logInfo("saveKYCInfoRetailQDE", "Diff time in saveKYCInfoRetailQDE Function---" + 
		        Long.toString(end_Time - start_time));
		    } catch (NumberFormatException e) {
		      logError("saveKYCInfoRetailQDE", e);
		    }
		  }
	
		public void loadNewCust(){ //change done by krishna
				try{
					   String Query1 = "SELECT cust_seg FROM usr_0_cust_txn WHERE WI_NAME ='"+ sWorkitemId + "'";
					   List<List<String>> sOutputlist1 = formObject.getDataFromDB(Query1);
					   String newCust= sOutputlist1.get(0).get(0);
					   if(newCust.equalsIgnoreCase("null")||newCust.equalsIgnoreCase("")){
						    newCust=formObject.getValue(OLD_CUST_SEGMENT).toString();
						}
					    log.info("Inside LoadNewCust"+newCust);
					    String reqType = formObject.getValue(REQUEST_TYPE).toString();
						String sQuery = "SELECT NEW_CUST_SEGMENT FROM usr_0_new_cust_seg WHERE OLD_CUST_SEGMENT = '"+ newCust + "' and Request_type= '"+ reqType + "'";
						List<List<String>> sOutputlist = formObject.getDataFromDB(sQuery);
						log.info("Inside loadRefComboTSLM sQuery: " + sQuery);
						//formObject.clearCombo("NEW_CUST_SEGMENT");
						for (int j = 0; j < sOutputlist.size(); j++) {
							formObject.addItemInCombo("NEW_CUST_SEGMENT", sOutputlist.get(j).get(0).toString());
						}
					
					} catch (Exception e) {		
						log.error("Inside catch: ",e);
				}
			 } 
		
		//shahbaz
		public void populateLastKycDate(String outputXml){
			try {
				logInfo("populateLastKycDate methed :", "INSIDE populateLastKycDate() ");
			//	fatchCustomer();
				logInfo("populateLastKycDate ", "outputXml: " + outputXml);
				String bank_Relationship = formObject.getTableCellValue(ACC_RELATION, 0, 7); 
				logInfo("populateLastKycDate ", "bank_Relationship: " + bank_Relationship);
				if(bank_Relationship.equalsIgnoreCase("Existing")){
					XMLParser parser = new XMLParser(outputXml);
					XMLParser subParser=new XMLParser();
					for(int i=0;i<parser.getNoOfFields("UDF");i++){
						subParser.setInputXML(parser.getNextValueOf("UDF"));
						String label=subParser.getValueOf("UDFLabel");
						logInfo("populateLastKycDate ", "lastKycDate: " + label);
						//01112023 Issue Last KYC Date Not Save
						if(label.equalsIgnoreCase("Last KYC Review Date")){
						String lastKycDate = subParser.getValueOf("UDFValue");
							SimpleDateFormat inputFormate  = new SimpleDateFormat("yyyy-MM-dd");
							SimpleDateFormat outputformat = new SimpleDateFormat("dd/MM/yyyy");
							try {
								Date date= inputFormate.parse(lastKycDate);
								String formattedDate= outputformat.format(date);
						logInfo("populateLastKycDate ", "lastKycDate: " + lastKycDate);
								logInfo("populateLastKycDate ", "lastKycDate: " + formattedDate);
								if(!"".equalsIgnoreCase(formattedDate) && formattedDate!=null){
									formObject.setValue(GI_DATE_KYC_PREP, formattedDate);
							}
							}catch(ParseException e) {
								e.printStackTrace();
							}
							//	logInfo("populateLastKycDate ", "lastKycDate: " + lastKycDate);
							//		if(!"".equalsIgnoreCase(lastKycDate) && lastKycDate!=null){
							//	String query1 = "update USR_0_CUST_TXN set KYC_PREPARE_DATE ='"+lastKycDate+"' where WI_NAME ='"+sWorkitemId+"'";
							//	logInfo("populateLastKycDate ", "query1: " + query1);
							//	formObject.saveDataInDB(query1);
							//		}
						}
					}
				}
				
			} catch (Exception e) {
			
			}			
		}
	
			
	public String executeArchival() throws Exception {
		log.info("Inside  executeArchival");
		StringBuilder sInputXML = new StringBuilder();
		String refNo = "";
		String sQuery = "SELECT SEQ_WEBSERVICE.nextval as REFNO from DUAL";
		log.info("seqQuery:" + sQuery);
		List<List<String>> result = formObject.getDataFromDB(sQuery);
		if (result != null && result.size() > 0) {
			refNo = result.get(0).get(0);
		}
		try {

			sInputXML.append("<?xml version=\"1.0\"?>").append("\n")
			.append("<APWebService_Input>").append("\n")
			.append("<Option>WebService</Option>").append("\n")
			.append("<EngineName>" +engineName  + "</EngineName>").append("\n")
			.append("<SessionId>" + sSessionId + "</SessionId>").append("\n")
			.append("<Calltype>WS-2.0</Calltype>").append("\n")
			.append("<InnerCallType>BPMModify</InnerCallType>").append("\n")              
			.append("<wiNumber>" +sWorkitemId + "</wiNumber>").append("\n")
			.append("<REF_NO>" + refNo + "</REF_NO>").append("\n")
			.append("<SENDERID>" + "WMS" + "</SENDERID>").append("\n")
			.append("<mode>C</mode>").append("\n")
			.append("<channelName>ARCHIVAL</channelName>").append("\n")        
			.append("<correlationId>"+refNo+"</correlationId>").append("\n")
			.append("<channelRefNumber>"+refNo+"</channelRefNumber>").append("\n")  
			.append("<sysrefno>"+refNo+"</sysrefno>").append("\n")
			.append("<processName>AO</processName>").append("\n")
			.append("</APWebService_Input>");

			log.info("Archival inputXML ===> "+sInputXML.toString());
			String outputXml = socket.connectToSocket(sInputXML.toString());
			log.info("Archival outputputXML ===> =" + outputXml);
			XMLParser xp = new XMLParser(outputXml);
			String archivalWiName = xp.getValueOf("WINumber");
			formObject.setValue("ARCHIVAL_WI_NAME", archivalWiName);
			archivalWiName = (String) formObject.getValue("ARCHIVAL_WI_NAME");
			log.info("ARCHIVAL WI NAME ::" + archivalWiName);
		} catch (Exception e) {
			log.error("exception in createInputXML: ",e);
		}
		return sInputXML.toString();
	}

 //Added by reyaz 12-09-2023
 public  String returnInsertionOrderID(String tableName){
	List<List<String>> sOutput = null;
	String query="";
	String seq ="";
	String insertionOrderID="";
	try {
		query = "select (processdefid||'_'||extobjid) SEQ from wfudtvarmappingtable where mappedobjectname ='"+tableName+"'";
		sOutput = formObject.getDataFromDB(query);
		log.info("sOutput ::" + sOutput);
		int iTotalRetrived = sOutput.size();
		if (iTotalRetrived != 0) {
		   seq =sOutput.get(0).get(0);
		}
		query ="select wfseq_array_"+seq+".nextval from dual";
		sOutput = formObject.getDataFromDB(query);

		iTotalRetrived = sOutput.size();
			if (iTotalRetrived != 0) {
			    insertionOrderID =sOutput.get(0).get(0);
			}
        } catch (Exception e) {
			log.error("exception in returnInsertionOrderID: ",e);
		}
		return insertionOrderID;
   }
 
//Added by reyaz 12-09-2023
 public  String checkRetriggerDcraRequired(){
	List<List<String>> sOutput = null;
	String query="";
	String count ="";
	try {
		query = "SELECT Count(1) as Count  FROM USR_0_PRODUCT_SELECTED where wi_name ='"+sWorkitemId+"' and prod_code not in"
				+ " (SELECT product_code FROM USR_0_AO_PRODUCT_VALUE WHERE wi_name ='"+sWorkitemId+"')";
		sOutput = formObject.getDataFromDB(query);
		log.info("sOutput :::" + sOutput);
		int iTotalRetrived = sOutput.size();
		if (iTotalRetrived != 0) {
			count =sOutput.get(0).get(0);
		}
		
       } catch (Exception e) {
			log.error("exception in checkRetriggerDcraRequired: ",e);
		}
		return count;
  }
 public void savePepAssessmentDetails() {
	 
	    int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
		String sWhere ="";
		List<List<String>> list;
		String column = "Customer_Authorized_Rad,Customer_Entrusted_Rad,Customer_PEP_Rad,Person_Associated_Rad,Person_Power_Rad,Customer_Entrusted_Man_Rad,"
				+ "WI_NAME,CUST_SNO,CUSTOMER_NAME";
		logInfo("savePepAssessmentDetails", " column:: " + column);
		int count =getGridCount("acc_relation");
		for(int i=0;i<count;i++) {
			String CustName =formObject.getTableCellValue("acc_relation",i,1);
			String sCustNo =formObject.getTableCellValue("acc_relation",i,0);
			logInfo("savePepAssessmentDetails", " sCustNo<>> " + sCustNo);
			if(i==iSelectedRow) {
			   String values = "'" + formObject.getValue("Customer_Authorized_Rad").toString() + "'" 
						+ (char) 25 + "'" + formObject.getValue("Customer_Entrusted_Rad").toString() + "'"
						+ (char) 25 + "'" + formObject.getValue("Customer_PEP_Rad").toString() + "'" 
						+ (char) 25 + "'" + formObject.getValue("Person_Associated_Rad").toString() + "'"
						+ (char) 25 + "'" + formObject.getValue("Person_Power_Rad").toString() + "'" 
						+ (char) 25 + "'" + formObject.getValue("Customer_Entrusted_Man_Rad").toString() + "'"
						+ (char) 25 + "'" +sWorkitemId+ "'"
						+ (char) 25 + "'" +sCustNo+ "'" + (char) 25 + "'" +CustName+ "'";
				logInfo("savePepAssessmentDetails", " values:: " + values);
				
				sWhere = "CUSTOMER_NAME='" + CustName + "' AND CUST_SNO ='"+sCustNo+"' AND WI_NAME='" + sWorkitemId+ "'";
				
				String sQuery = "SELECT COUNT(WI_NAME) as count FROM USR_0_AO_PEP_ASSESMENT WHERE "+sWhere+"";
				logInfo("savePepAssessmentDetails", "sQuery: " + sQuery);
				list = formObject.getDataFromDB(sQuery);
				logInfo("savePepAssessmentDetails", "list: " + list);
				int sOutput = -1;
				int sCount = Integer.parseInt(list.get(0).get(0));
				if (sCount > 0) {
					  sOutput = updateDataInDB("USR_0_AO_PEP_ASSESMENT", column, values, sWhere);
					  logInfo("savePepAssessmentDetails", "sOutputU: " + sOutput);
				} else { 
					  sOutput = insertDataIntoDB("USR_0_AO_PEP_ASSESMENT", column, values);
					  logInfo("savePepAssessmentDetails", "sOutputI: " + sOutput);
		      }
			}
		
		}
	}
	
	public void populatePepAssesmentDetails() {
		logInfo("populatePepAssesmentDetails", "Inside populatePepAssesmentDetails");
		int count =getGridCount("acc_relation");
		int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
		logInfo("populatePreAssesmentDetails", "iSelectedRow: " + iSelectedRow);
		for(int i=0;i<count;i++) {
			 String sCustNo =formObject.getTableCellValue("acc_relation",i,0);
		if(i==iSelectedRow) {
  
			 String sQuery = "SELECT Customer_Authorized_Rad,Customer_Entrusted_Rad,Customer_PEP_Rad,Person_Associated_Rad,Person_Power_Rad,"
				      + "Customer_Entrusted_Man_Rad FROM USR_0_AO_PEP_ASSESMENT where WI_NAME = '"+ sWorkitemId + "' AND CUST_SNO='"+sCustNo+"'";
			 logInfo("populatePepAssesmentDetails", "query: " + sQuery);
			 List<List<String>> result = formObject.getDataFromDB(sQuery);
			 logInfo("populatePreAssesmentDetails", "populatePreAssesmentDetails result: " + result);
			 if (result != null && result.size() > 0) {
					String[] setValues = { "Customer_Authorized_Rad", "Customer_Entrusted_Rad","Customer_PEP_Rad",
							"Person_Associated_Rad","Person_Power_Rad" ,"Customer_Entrusted_Man_Rad"};
					setValuesFromDB(result, setValues);
		      }
			
			} else if(formObject.getValue(ACC_OWN_TYPE).toString().equalsIgnoreCase("Single")){
				 String sQuery = "SELECT Customer_Authorized_Rad,Customer_Entrusted_Rad,Customer_PEP_Rad,Person_Associated_Rad,Person_Power_Rad,"
					      + "Customer_Entrusted_Man_Rad FROM USR_0_AO_PEP_ASSESMENT where WI_NAME = '"+ sWorkitemId + "'";
				 logInfo("populatePepAssesmentDetails", "query: " + sQuery);
				 List<List<String>> result = formObject.getDataFromDB(sQuery);
				 logInfo("populatePreAssesmentDetails", "populatePreAssesmentDetails result: " + result);
				 if (result != null && result.size() > 0) {
						String[] setValues = { "Customer_Authorized_Rad", "Customer_Entrusted_Rad","Customer_PEP_Rad",
								"Person_Associated_Rad","Person_Power_Rad" ,"Customer_Entrusted_Man_Rad"};
						setValuesFromDB(result, setValues);
			      }
			}
		}
	}
	
 public void accountPurpose() {
	logInfo("accountPurpose methed :", "INSIDE accountPurpose() ");
	try {
		String accountPurpose = formObject.getValue("LISTVIEW_PUR_ACC_RELATION").toString();
		logInfo("accountPurpose methed :", "INSIDE accountPurpose() " + accountPurpose);
		if (accountPurpose.contains("380")) {
			formObject.setStyle("Others", "visible", "true");
		} else {
			formObject.setStyle("Others", "visible", "false");
		}
	  } catch (Exception e) {
		log.error("Exception in accountPurpose(): ", e);
	}
}
 
public String getFlag() {
	String preKYCFlag = "N";
	String docAttached=formObject.getValue("EXCEPTION_DOC_ATTACHED").toString();
	String approvalFlag=formObject.getValue("PRE_ASSESMENT_FLAG").toString();
	if ("Yes".equalsIgnoreCase(docAttached) && "Yes".equalsIgnoreCase(approvalFlag)) {
		preKYCFlag = "Y";
	}
	return preKYCFlag;
} 

public void getPreAssessmentFlag() {
	String f1=formObject.getValue("KYC_CUST_BLACKLIST1").toString();
	String f2=formObject.getValue("KYC_BARRIER").toString();
	String f3=formObject.getValue("KYC_ENTITY_SHELL").toString();
	String f4=formObject.getValue("KYC_CUST_HAWALADRA").toString();
	String f5=formObject.getValue("KYC_CUST_NORTH_KORES").toString();
	String f6=formObject.getValue("kYC_PATNER_UBO").toString();
	String f7=formObject.getValue("KYC_MANUFACTURING").toString();
	String f8=formObject.getValue("KYC_LEGAL_GAMING").toString();
	String f9=formObject.getValue("KYC_OFFICE_VELLI").toString();
	String f10=formObject.getValue("KYC_VIRTUAL_CURRENCY").toString();
	String f11=formObject.getValue("KYC_ENTITY_RE").toString();
	String f12=formObject.getValue("KYC_NOMINEE").toString();
	String f13=formObject.getValue("KYC_EXCEPTIONAL").toString();
	
	
	String preKYCFlag=formObject.getValue("PRE_ASSESMENT_FLAG").toString();		
	if("Yes".equalsIgnoreCase(f1) || "Yes".equalsIgnoreCase(f2) || "Yes".equalsIgnoreCase(f3) || "Yes".equalsIgnoreCase(f4) 
			|| "Yes".equalsIgnoreCase(f5) || "Yes".equalsIgnoreCase(f6) || "Yes".equalsIgnoreCase(f7) ||"Yes".equalsIgnoreCase(f8)
			|| "Yes".equalsIgnoreCase(f11) || "No".equalsIgnoreCase(f13)){
		preKYCFlag ="No";		
	}else if("No".equalsIgnoreCase(f1) && "No".equalsIgnoreCase(f2) && "No".equalsIgnoreCase(f3) && "No".equalsIgnoreCase(f4) 
			&& "No".equalsIgnoreCase(f5) && "No".equalsIgnoreCase(f6) && "No".equalsIgnoreCase(f7) && "No".equalsIgnoreCase(f8)
			&& "No".equalsIgnoreCase(f9) && "No".equalsIgnoreCase(f10) && "No".equalsIgnoreCase(f11) && "No".equalsIgnoreCase(f12)) {
		preKYCFlag ="Yes";
	}
	logInfo("getPreAssessmentFlag", " PRE_ASSESMENT_FLAG:: " + preKYCFlag);
	formObject.setValue("PRE_ASSESMENT_FLAG", preKYCFlag);			
}


public int mandatoryDocAlert(){
	int returnCode = 0;
	try {
		String KYCDocFlag = formObject.getValue("KYC_EXCEPTIONAL").toString();
		if(KYCDocFlag.equalsIgnoreCase("Yes")){
			String query=" Select COUNT(1) FROM PdbDocument pd inner join pdbDocumentContent pdc on"
					+ " pd.documentindex = pdc.documentindex where Upper(pd.Name) = UPPER('Exception_Approval') "
					+ " and pdc.parentfolderindex = (select var_rec_1 from wfinstrumenttable where processinstanceid ='"+sWorkitemId+"')";
			log.info("AO DOCUMENT query :"+query);
			List<List<String>> docList = formObject.getDataFromDB(query);
		
		if(docList != null && !docList.isEmpty()){
			int count = Integer.parseInt(docList.get(0).get(0));
			if (count == 0){
				formObject.setValue("EXCEPTION_DOC_ATTACHED","No"); 
				returnCode = -1;
			}else{
				formObject.setValue("EXCEPTION_DOC_ATTACHED","Yes");
				formObject.setValue("PRE_ASSESMENT_FLAG", "Yes");			
				}
		}else {
			returnCode = -2;
			}
		  }
		log.info("AO DOCUMENT returncode :"+returnCode);
		}catch (Exception e) {
			logError("mandatoryDocAlert", e);
	}
	return returnCode;
}

public void insertDataintoProductGrid()
{
	List sOutput = null;
	List sOutput1 = null;
	List sOutput2 = null;
	List sOutput3 = null;
	try {
		String homeBranch = this.formObject.getValue("ACC_HOME_BRANCH").toString();
		String query = "select  product_code,(select CODE from USR_0_HOME_BRANCH where HOME_BRANCH ='" + homeBranch + "') as code from USR_0_AO_PRODUCT_VALUE where wi_name ='" + 
				this.sWorkitemId + "'";
		sOutput = this.formObject.getDataFromDB(query);
		logInfo("insertDataintoProductGrid", "sOutput-----" + sOutput);
		String product_code = "";
		String prod_code = "";
		String prod_desc = "";
		String prod_currency = "";
		String branch_code = "";
		String chequeBook = "";
		String prod_code1 = "";
		String prod_currency1 = "";
		String chequeBook1 = "";
		int iTotalRetrived = sOutput.size();
		String sColumn = "PROD_CODE,PROD_DESC,CURRENCY,ACC_BRANCH,CHEQUE_BOOK,WI_NAME,INSERTIONORDERID";
		String sValues = "";
		if (iTotalRetrived > 0) {
			for (int i = 0; i < iTotalRetrived; ++i) {
				product_code = (String)((List)sOutput.get(i)).get(0);
				branch_code = (String)((List)sOutput.get(i)).get(1);
				logInfo("insertDataintoProductGrid", "branch_code-----" + branch_code);
				String accType =formObject.getValue("ACC_CLASS").toString();
				logInfo("insertDataintoProductGrid", "accType-----" + accType);
				if(accType.equalsIgnoreCase("Islamic")){
					query = "select EQV_ISLAMIC_BR_CODE from USR_0_HOME_BRANCH where CODE ='"+branch_code+"'";
					sOutput2 = formObject.getDataFromDB(query);
					int TotalRetrived = sOutput2.size();
					if (iTotalRetrived > 0) {
						branch_code = (String)((List)sOutput2.get(0)).get(0);
						logInfo("insertDataintoProductGrid", "Islamic branch_code" + branch_code);
					}
				}
				logInfo("insertDataintoProductGrid", "product code" + product_code);
				String[] Split = product_code.split("--");
				prod_code = Split[0];
				prod_currency = Split[1];
				prod_desc = Split[2];
				chequeBook = Split[3];

				// Duplicate Account issue on Production Krishna Pandey 14 march 2024
				int gCount = getGridCount(PRODUCT_QUEUE);
				logInfo("insertDataintoProductGrid---->", " gCount: " + gCount);

				/*	String query5 = "select prod_code,currency,cheque_book from USR_0_PRODUCT_SELECTED where wi_name='" + this.sWorkitemId + "'";
				logInfo("insertDataintoProductGrid", "query5 @@@" + query5);
				sOutput3 = formObject.getDataFromDB(query5);
				logInfo("insertDataintoProductGrid", "sOutput3 ##" + sOutput3);
				int TotalRetrived3 = sOutput3.size();
				logInfo("insertDataintoProductGrid", " TotalRetrived3 ##" + TotalRetrived3);*/
				//	if (TotalRetrived3 > 0) {
				if (gCount > 0) {
					boolean match =false;
					//		for (int k = 0; k < TotalRetrived3; ++k) {
					for (int k = 0; k < gCount; ++k) {
						prod_code1 =  formObject.getTableCellValue(PRODUCT_QUEUE, k, 1);
						prod_currency1 =  formObject.getTableCellValue(PRODUCT_QUEUE, k, 3);
						chequeBook1 =  formObject.getTableCellValue(PRODUCT_QUEUE, k, 6);
						/*	prod_code1 = (String)((List)sOutput3.get(k)).get(0);
						prod_currency1 = (String)((List)sOutput3.get(k)).get(1);
						chequeBook1 = (String)((List)sOutput3.get(k)).get(2);*/

						logInfo("insertDataintoProductGrid", "prod_code1 ::" +prod_code1);
					    logInfo("insertDataintoProductGrid", "prod_currency1 ::" + prod_currency1);
						logInfo("insertDataintoProductGrid", "chequeBook1 ::" + chequeBook1);
						logInfo("insertDataintoProductGrid", "prod_code ::" +prod_code);
						logInfo("insertDataintoProductGrid", "prod_currency ::" + prod_currency);
						logInfo("insertDataintoProductGrid", "chequeBook ::" + chequeBook);
						logInfo("insertDataintoProductGrid", "prod_desc ::" + prod_desc);
						
						if(prod_code.equalsIgnoreCase(prod_code1) && prod_currency.equalsIgnoreCase(prod_currency1) &&
								chequeBook.equalsIgnoreCase(chequeBook1)) {
							match =true;
							break;
							
						}
					}
					logInfo("insertDataintoProductGrid", "match ::" + match);
					if(!match) {
						//	if(formObject.getValue(SOURCING_CHANNEL).toString().equalsIgnoreCase("Sales")) {
							logInfo("insertDataintoProductGrid", "Sales Match Found ::" );
							sColumn = "Product_Code,Product_Description,Currency,Account_Branch,Cheque_Book,WI_NAME";
							sValues = prod_code +  "##"  + prod_desc + "##" + prod_currency + "##" + branch_code + "##" + chequeBook + "##" + this.sWorkitemId;
							logInfo("insertDataintoProductGrid", "Sales column "+sColumn+" Values "+sValues );
						LoadListViewWithHardCodeValues(PRODUCT_QUEUE,sColumn, sValues);
						//	}
						/*else {
						String InsertionorderId = returnInsertionOrderID("USR_0_PRODUCT_SELECTED");
						logInfo("insertDataintoProductGrid", "InsertionorderId ::" + InsertionorderId);
						sValues = "'" + prod_code + "','" + prod_desc + "','" + prod_currency + "','" + branch_code + "','" + chequeBook + "','" + this.sWorkitemId + "','" + InsertionorderId + "'";
						insertDataIntoDB("USR_0_PRODUCT_SELECTED", sColumn, sValues);
						}*/
					}

				}else {
					//if(formObject.getValue(SOURCING_CHANNEL).toString().equalsIgnoreCase("Sales")) {
						logInfo("insertDataintoProductGrid", "Sales No Match Found ::" );
						sColumn = "Product_Code,Product_Description,Currency,Account_Branch,Cheque_Book,WI_NAME";
						sValues = prod_code +  "##"  + prod_desc + "##" + prod_currency + "##" + branch_code + "##" + chequeBook + "##" + this.sWorkitemId;
						logInfo("insertDataintoProductGrid", "Sales column "+sColumn+" Values "+sValues );
					LoadListViewWithHardCodeValues(PRODUCT_QUEUE,sColumn, sValues);
					/*	}else {
					String InsertionorderId = returnInsertionOrderID("USR_0_PRODUCT_SELECTED");
					logInfo("insertDataintoProductGrid", "InsertionorderId ::" + InsertionorderId);
					sValues = "'" + prod_code + "','" + prod_desc + "','" + prod_currency + "','" + branch_code + "','" + chequeBook + "','" + this.sWorkitemId + "','" + InsertionorderId + "'";
					insertDataIntoDB("USR_0_PRODUCT_SELECTED", sColumn, sValues);
					}*/

				}
			}
		}
	} catch(Exception e) {

		log.error("Exception in insertDataintoProductGrid ", e);
	}
}

public void showCustSegmentPC() {
	try {
		String private_clnt_flg="";
		String pri_query ="select private_client from ext_ao where wi_name='"+sWorkitemId+"'";
		logInfo("On load showCustSegmentPC","pri_query= "+ pri_query);
		List<List<String>> pri_clnt_list =formObject.getDataFromDB(pri_query); 
		if (pri_clnt_list != null && pri_clnt_list.size() > 0) {
			private_clnt_flg=pri_clnt_list.get(0).get(0); 
			logInfo("On load showCustSegmentPC","private_clnt_flg= "+ private_clnt_flg);
		}
		
		if ((formObject.getValue(REQUEST_TYPE).toString()).equalsIgnoreCase("New Account") || 
				(formObject.getValue(REQUEST_TYPE).toString()).equalsIgnoreCase("New Account with Category Change")) {
			if(private_clnt_flg !=null && !private_clnt_flg.equalsIgnoreCase("") && private_clnt_flg.equalsIgnoreCase("Y")){
				logInfo("showCustSegmentPC","Condition Satishfied>>");
				formObject.setValue(PD_CUSTSEGMENT, "Private Clients");
				formObject.setStyle(PD_CUSTSEGMENT, DISABLE, TRUE);
				logInfo("showCustSegmentPC","Condition Satishfied>>");
			}
		}
	}catch(Exception e) {
		
		log.error("Exception in showCustSegmentPC(): ", e);
	}
}


public void additionalSource() {
	logInfo("additionalSource methed :", "INSIDE additionalSource() ");
	try {
		String additionalSource = formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED).toString();
		logInfo("additionalSource methed :", "INSIDE accountPurpose() " + additionalSource);
		
		int iSelectedRow = 0;
		boolean flag=false;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
		String sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,0);
		if(additionalSource == null || additionalSource.equalsIgnoreCase("")) {
			String sQuery = "SELECT ADDITIONAL_SOURCES_INCOME_AED FROM USR_0_CUST_TXN "
					+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_SNO= '"+ sCustNo + "'";
			List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
			String[]  addsrcinAed =  sOutput.get(0).get(0).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<addsrcinAed.length;k++) {
				logInfo("additionalSource methed :", ">>> addsrcinAed[k] ");
				if("20".equalsIgnoreCase(addsrcinAed[k]) || "30".equalsIgnoreCase(addsrcinAed[k])) {
					flag=true;
				}
			}
			if(flag) {
				formObject.setStyle("LISTVIEW_ADD_SRCOFINCOME", VISIBLE, TRUE);
			}
		} else {
			if (additionalSource.contains("30")||additionalSource.contains("20")) {
				logInfo("additionalSource methed krishna:", "INSIDE additionalSource() ");
				formObject.setStyle("LISTVIEW_ADD_SRCOFINCOME", "visible", "true");
			} else {
				formObject.setStyle("LISTVIEW_ADD_SRCOFINCOME", "visible", "false");
			}
		}
		
	  } catch (Exception e) {
		log.error("Exception in additionalSource(): ", e);
	}
}

public void saveKycMultiDropDownData() {
	try {
		logInfo("saveKycMultiDropDownData", "Inside saveKycMultiDropDownData() ");
		int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		String cust_id = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 2);
		String sCustNo = formObject.getTableCellValue(ACC_RELATION,
				iSelectedRow, 0);
		String sWhere = "CUST_SNO='" + sCustNo + "' AND WI_NAME='" + sWorkitemId+ "'";
		String values = "";
		String column = "";
		logInfo("saveKycMultiDropDownData", " LISTVIEW_SRCOFINCOME:: " + formObject.getValue("LISTVIEW_SRCOFINCOME").toString());
		logInfo("saveKycMultiDropDownData", " LISTVIEW_PUR_ACC_RELATION:: " + formObject.getValue("LISTVIEW_PUR_ACC_RELATION").toString());
		logInfo("saveKycMultiDropDownData", " LISTVIEW_ADD_SRCOFINCOME:: " + formObject.getValue("LISTVIEW_ADD_SRCOFINCOME").toString());
		logInfo("saveKycMultiDropDownData", " LISTVIEW_ADD_SRCOFCNTRY:: " + formObject.getValue("LISTVIEW_ADD_SRCOFCNTRY").toString());
		logInfo("saveKycMultiDropDownData", " LISTVIEW_SRCOFINCNTRY:: " + formObject.getValue("LISTVIEW_SRCOFINCNTRY").toString());
		logInfo("saveKycMultiDropDownData", " ADDITIONAL_SOURCES_INCOME_AED:: " + formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED).toString());
		logInfo("saveKycMultiDropDownData", " RA_CUST_SRC_WEALTH :: " + formObject.getValue(RA_CUST_SRC_WEALTH).toString());

			column = "PRI_SRC_OF_INCOME,PURPOSE_OF_ACC_RELATION,ADD_SRC_OF_INCOME,"
					+ "ADD_SRC_OF_INCOME_CNTRY,SRC_OF_INCOME_CNTRY,ADDITIONAL_SOURCES_INCOME_AED,";
			values = "'" + formObject.getValue("LISTVIEW_SRCOFINCOME").toString()
					+ "'" + (char) 25 + "'" 
					+ formObject.getValue("LISTVIEW_PUR_ACC_RELATION").toString()
					+ "'"+ (char) 25 + "'" 
					+ formObject.getValue("LISTVIEW_ADD_SRCOFINCOME").toString()
					+ "'"+ (char) 25 + "'" 
					+ formObject.getValue("LISTVIEW_ADD_SRCOFCNTRY").toString()
					+ "'"+ (char) 25 + "'" 
					+ formObject.getValue("LISTVIEW_SRCOFINCNTRY").toString()
					+ "'"+ (char) 25 + "'" 
					+ formObject.getValue(ADDITIONAL_SOURCES_INCOME_AED).toString()
					+ "'"+ (char) 25 + "'"
					+ formObject.getValue(RA_CUST_SRC_WEALTH).toString()
					+ "'";
			
			logInfo("saveKycMultiDropDownData", " column:: " + column);
			logInfo("saveKycMultiDropDownData", " values:: " + values);
			int sOutput = updateDataInDB("USR_0_CUST_TXN", column, values, sWhere);
			logInfo("saveKycMultiDropDownData", "sOutputU: " + sOutput);

	} catch(Exception e) {
		logError("saveKycMultiDropDownData", e);
	}
}

public void populateKycMultiDrop() {
	logInfo("populateKycMultiDrop", "Inside populateKycMultiDrop");
	JSONArray jsonArray1 = new JSONArray();
	JSONArray jsonArray2 = new JSONArray();
	JSONArray jsonArray3 = new JSONArray();
	JSONArray jsonArray4 = new JSONArray();
	JSONArray jsonArray5 = new JSONArray();
	JSONArray jsonArray6 = new JSONArray();
	//Added by Shivanshu For SourceWealth Multi Drop Down
	JSONArray jsonArray7 = new JSONArray();

	int iSelectedRow =0;
	String sCustNo ="";
	try {
		iSelectedRow = Integer.parseInt(formObject.getValue(
				SELECTED_ROW_INDEX).toString());
		sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,
				0);
		String sQuery = "SELECT PRI_SRC_OF_INCOME,PURPOSE_OF_ACC_RELATION,"
				+ "ADD_SRC_OF_INCOME,ADD_SRC_OF_INCOME_CNTRY,SRC_OF_INCOME_CNTRY,"
				+ "ADDITIONAL_SOURCES_INCOME_AED,SRC_OF_WEALTH" //SourceWealth Added
				+ " FROM USR_0_CUST_TXN "
				+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_SNO= '"+ sCustNo + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		logInfo("populateKycMultiDrop", "sOutput:::"+sOutput);
		if (sOutput != null && sOutput.size() > 0) {
			
			String[]  priSrcOfIncome =  sOutput.get(0).get(0).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<priSrcOfIncome.length;k++) {
				logInfo("populateKycMultiDrop", "priSrcOfIncome: " + priSrcOfIncome[k]);
				jsonArray1.add(priSrcOfIncome[k]);
				logInfo("populateKycMultiDrop", "priSrcOfIncome: jsonArray String " + jsonArray1.toString());
				logInfo("populateKycMultiDrop", "priSrcOfIncome: jsonArray " + jsonArray1);
				formObject.setValue("LISTVIEW_SRCOFINCOME",jsonArray1);
			}
			String[]  purpAccRelation =  sOutput.get(0).get(1).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<purpAccRelation.length;k++) {
				jsonArray2.add(purpAccRelation[k]);
				logInfo("populateKycMultiDrop", "purpAccRelation: " + purpAccRelation[k]);
				logInfo("populateKycMultiDrop", "purpAccRelation: jsonArray String " + jsonArray2.toString());
				logInfo("populateKycMultiDrop", "purpAccRelation: jsonArray " + jsonArray2);
				formObject.setValue("LISTVIEW_PUR_ACC_RELATION",jsonArray2);
			}
			String[]  addSrcOfIncome =  sOutput.get(0).get(2).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<addSrcOfIncome.length;k++) {
				logInfo("populateKycMultiDrop", "addSrcOfIncome: " + addSrcOfIncome[k]);
				jsonArray3.add(addSrcOfIncome[k]);
				logInfo("populateKycMultiDrop", "addSrcOfIncome: jsonArray String " + jsonArray3.toString());
				logInfo("populateKycMultiDrop", "addSrcOfIncome: jsonArray " + jsonArray3);
				formObject.setValue("LISTVIEW_ADD_SRCOFINCOME",jsonArray3);
			}
			String[]  addSrcOfIncomeCntry =  sOutput.get(0).get(3).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<addSrcOfIncomeCntry.length;k++) {
				logInfo("populateKycMultiDrop", "addSrcOfIncomeCntry: " + addSrcOfIncomeCntry[k]);
				jsonArray4.add(addSrcOfIncomeCntry[k]);
				logInfo("populateKycMultiDrop", "addSrcOfIncomeCntry: jsonArray String " + jsonArray4.toString());
				logInfo("populateKycMultiDrop", "addSrcOfIncomeCntry: jsonArray " + jsonArray4);
				formObject.setValue("LISTVIEW_ADD_SRCOFCNTRY",jsonArray4);
			}
			String[]  SrcOfIncomeCntry = sOutput.get(0).get(4).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<SrcOfIncomeCntry.length;k++) {
				logInfo("populateKycMultiDrop", "SrcOfIncomeCntry: " + SrcOfIncomeCntry[k]);
				jsonArray5.add(SrcOfIncomeCntry[k]);
				logInfo("populateKycMultiDrop", "SrcOfIncomeCntry: jsonArray String " + jsonArray5.toString());
				logInfo("populateKycMultiDrop", "SrcOfIncomeCntry: jsonArray " + jsonArray5);
				formObject.setValue("LISTVIEW_SRCOFINCNTRY",jsonArray5);
			}
			String[]  addsrcinAed =  sOutput.get(0).get(5).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<addsrcinAed.length;k++) {
				logInfo("populateKycMultiDrop", "addsrcinAed: " + addsrcinAed[k]);
				jsonArray6.add(addsrcinAed[k]);
				logInfo("populateKycMultiDrop", "addsrcinAed: jsonArray String " + jsonArray6.toString());
				logInfo("populateKycMultiDrop", "addsrcinAed: jsonArray " + jsonArray6);
				formObject.setValue(ADDITIONAL_SOURCES_INCOME_AED,jsonArray6);
			}
			//Added by Shivanshu For SourceWealth Multi Drop Down
			String [] srcOfWealth = sOutput.get(0).get(6).replaceAll("\\[","").replaceAll("\\]","").replaceAll("\"","").split(",");
			for(int k=0;k<srcOfWealth.length;k++) {
				logInfo("populateKycMultiDrop", "srcOfWealth: " + srcOfWealth[k]);
				jsonArray7.add(srcOfWealth[k]);
				logInfo("populateKycMultiDrop", "srcOfWealth: jsonArray String " + jsonArray7.toString());
				logInfo("populateKycMultiDrop", "srcOfWealth: jsonArray " + jsonArray7);
				formObject.setValue(RA_CUST_SRC_WEALTH,jsonArray7);
			}
		}

	}catch(Exception e) {
		logError("populateKycMultiDrop", e);
	}
}

//Modify by SHivanshu ATP-455
public void populatePOANationality() {
	int iSelectedRow = 0;
	iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
	String sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,0);
	String sQuery = "SELECT PEP,POA_NATIONALITY,POA_RESIDENCY FROM USR_0_CUST_TXN "
			+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_SNO= '"+ sCustNo + "'";
	List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
	String pep="";
	String poa_nationality="";
	String poa_residency="";
	if(sOutput != null && sOutput.size() >0) {
		pep=sOutput.get(0).get(0);
		poa_nationality=sOutput.get(0).get(1);
		poa_residency=sOutput.get(0).get(2);
	}
	if(pep.equalsIgnoreCase("Yes")) {
		formObject.setValue(RA_IS_CUST_PEP, pep);		
		formObject.setStyle(POA_NATIONALITY, VISIBLE, TRUE);
		formObject.setValue(POA_NATIONALITY, poa_nationality);
		formObject.setStyle(POA_NATIONALITY, DISABLE, TRUE);
		formObject.setStyle(POA_RESIDENCY, VISIBLE, TRUE);
		formObject.setValue(POA_RESIDENCY, poa_residency);
		formObject.setStyle(POA_RESIDENCY, DISABLE, TRUE);
	}
	
}

//Jamshed
public void updateRiskAssessmentData() {
	try {
		logInfo("updateRiskAssessmentData", " Inside updateRiskAssessmentData: ");
		int iSelectedRow = 0;
		iSelectedRow = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString());
		String sCustNo = formObject.getTableCellValue(ACC_RELATION, iSelectedRow,0);
		String sQuery = "SELECT CUST_INDI_RISK FROM USR_0_CUST_TXN "
				+ "WHERE WI_NAME= '"+ sWorkitemId+ "' AND CUST_SNO= '"+ sCustNo + "'";
		List<List<String>> sOutput = formObject.getDataFromDB(sQuery);
		updateDataInDB("USR_0_RISK_ASSESSMENT_DATA","CURRENT_RISK_BUSSINESS,CURRENT_RISK_SYSTEM", "'"+sOutput.get(0).get(0)+"'"
						+ (char) 25 + "'" + sOutput.get(0).get(0) + "'", "WI_NAME = '"+ sWorkitemId + "' AND SNO ="+sCustNo+"");
	} catch(Exception e) {
		logError("updateRiskAssessmentData", e);
	}
}

    //Modified by Shivanshu For Dormant Customer Check 13-01-2025
	public void dormantCustAlert() {
		logInfo("dormantCustAlert", " INSIDE");
		String count = ""; //Added by Shivanshu For Dormant Customer Check 13-01-2025	
		try {
			String gridID = ACC_RELATION;                       
			if(((String)formObject.getValue(REQUEST_TYPE)).equalsIgnoreCase("Family Banking")){
				logInfo("dormantCustAlert", " INSIDE Family Banking ");
				gridID = LVW_FAMILY_MEMBERS;                     
			}
			logInfo("dormantCustAlert", " Grid ID: "+ gridID);
			int gCount = getGridCount(gridID);
			logInfo("dormantCustAlert", " gCount: " + gCount);
			List<String> arr_Cust_Id = new ArrayList<String>();
			for (int i = 0; i < gCount; i++) {
//				String dormant_customer = "";
				String outputXml ="";
				String customerId = formObject.getTableCellValue(gridID, i, 2);
				logInfo("dormantCustAlert", " customerId: " + customerId);
				if(customerId != null && !customerId.equalsIgnoreCase("")) {
					logInfo("executeDormancyXml", " call:--");
					outputXml = executeDormancyXml(customerId);	
				}
				logInfo("dormantCustAlert", " outputXml===>>  " + outputXml);
				if (outputXml != null && !outputXml.equalsIgnoreCase("")) {
					XMLParser xp = new XMLParser(outputXml);
					int returnCode1 = Integer.parseInt(xp.getValueOf("returnCode"));
					logInfo("dormantCustAlert", "Dormant Service returnCode: " + returnCode1);
					if (returnCode1 == 0) {
						String custStatus = xp.getValueOf("custStatus");
						logInfo("dormantCustAlert", "Dormant Service custStatus: " + custStatus);
						if ("D".equalsIgnoreCase(custStatus) || "I".equalsIgnoreCase(custStatus)) {
							dormantCustomer = "Y";
							arr_Cust_Id.add(customerId);
						} else {
							dormantCustomer = "N";
						}
					}
					// dormant_customer="Y";
					logInfo("dormantCustAlert", " dormant_customer: " + dormantCustomer);
					String sQueryCount = "SELECT COUNT(1) COUNT FROM USR_0_AO_DEC_HIST " 
							+ " WHERE WI_NAME='"
							+ sWorkitemId
							+ "' AND WS_COMMENTS = 'Dormancy Check Applied' ";
					List<List<String>> sOutput = formObject.getDataFromDB(sQueryCount);
					count = sOutput.get(0).get(0);
					if (sOutput != null && !sOutput.isEmpty() 
							&& Integer.parseInt(count) < 1 
							&& "Y".equalsIgnoreCase(dormantCustomer)) {

						String sTableName = "USR_0_AO_DEC_HIST";
						String sColName = "CREATE_DAT,USERID,USERNAME,GROUP_NAME,WS_NAME,WS_DECISION,REJ_REASON,WS_COMMENTS,WI_NAME";
						String sComments = "Dormancy Check Applied";
						String sValues = "";
						sValues = sValues + "sysdate,'" + this.sUserName + "','" + this.sUserName + "','"
								+ this.sActivityName + "','" + sActivityName + "','" + dormantCustomer
								+ "','Dormance Customer Found for " + customerId + "','" + sComments.replace("'", "''")
								+ "','" + sWorkitemId + "'";
						insertDataIntoDB(sTableName, sColName, sValues);
					}
				}
			}
			logInfo("dormantCustAlert", "Array Data: " + arr_Cust_Id.toString());
			StringBuilder str = new StringBuilder("");
			String dormant_Cust_Id = "";
			if (arr_Cust_Id != null && arr_Cust_Id.size() > 0) {
				for (String cid : arr_Cust_Id) {
					str.append(cid).append(",");
				}
				dormant_Cust_Id = str.toString();
				if (dormant_Cust_Id.length() > 0) {
					dormant_Cust_Id = dormant_Cust_Id.substring(0, dormant_Cust_Id.length() - 1);
				}
				logInfo("dormantCustAlert", " Dormant Customer all CID---: " + dormant_Cust_Id);
				sendMessageValuesList(ACC_RELATION, "Please note subject customer {" +dormant_Cust_Id+ "} is Dormant/InActive in our Core banking system. Please follow dormant customer activation process to change customer status to Active to proceed with the journey. Contact Branch for activation.");
			}
			logInfo("dormantCustAlert ", "dormant_Cust_Id " + dormant_Cust_Id);

		} catch (Exception e) {
			logError("exception in dormantCustAlert: ", e);
		}
	}
	
	//shahbaz
	public String executeDormancyXml(String customerId) throws Exception {
		logInfo("executeDormancyXml", " Inside");
		StringBuilder sInputXML = new StringBuilder();
		String refNo = "";
		String sQuery = "SELECT SEQ_WEBSERVICE.nextval as REFNO from DUAL";
		log.info("seqQuery: " + sQuery);
		List<List<String>> result = formObject.getDataFromDB(sQuery);
		if (result != null && result.size() > 0) {
			refNo = result.get(0).get(0);
		}
		String outputXml = "";
		try {
			sInputXML.append("<?xml version=\"1.0\"?>").append("\n").append("<APWebService_Input>").append("\n")
					.append("<Option>WebService</Option>").append("\n")
					.append("<EngineName>" + engineName + "</EngineName>").append("\n")
					.append("<SessionId>" + sessionId + "</SessionId>").append("\n").append("<Calltype>CBG</Calltype>")
					.append("\n").append("<CBGCalltype>CustomerPersonalDetailsDA</CBGCalltype>").append("\n")
					.append("<WiName>" + sWorkitemId + "</WiName>").append("\n")
					.append("<REF_NO>" + refNo + "</REF_NO>").append("\n")
					.append("<OLDREF_NO>" + refNo + "</OLDREF_NO>").append("\n")
					.append("<senderId>" + "WMSBPMENG" + "</senderId>").append("\n")
					.append("<CUST_ID>" + customerId + "</CUST_ID>").append("\n").append("</APWebService_Input>");
			log.info("executeDormancyXml inputXML ===> " + sInputXML.toString());
			outputXml = socket.connectToSocket(sInputXML.toString());
			log.info("executeDormancyXml outputputXML ===> " + outputXml);

		} catch (Exception e) {
			log.error("exception in createInputXML: ", e);
		}
		return outputXml;
	}
	
	//Added by Shivanshu ATP-501
	public String getECBValidationRequestJson(int sNo, String bankRelation,
			int iNoOfCustomer) {
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestJson sNo" + sNo);
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestJson bankRelation" + bankRelation);
		logInfo("getECBValidationRequestXml",
				"inside getECBValidationRequestJson iNoOfCustomer"
						+ iNoOfCustomer);
//		StringBuffer inputXML = new StringBuffer();
		// Create the JSON object
        
		JSONObject dataJsonObject = new JSONObject();
		JSONObject jsonObject = new JSONObject();
		StringBuilder inputXML = new StringBuilder();

		try {
			String query = "SELECT FINAL_EIDA_NO,COUNTRY_CODE AS NATIONALITY,TO_CHAR(FINAL_DOB,'ddMMyyyy') AS DOB,"
					+ "FINAL_FULL_NAME,GENDER.UNIQUE_CODE AS GENDER,FINAL_PASS_NO,TO_CHAR(FINAL_PASS_EXP_DATE,"
					+ "'dd/MM/yyyy') AS PASS_EXP_DATE,FINAL_MOBILE_NO FROM USR_0_CUST_TXN TXN JOIN USR_0_GENDER "
					+ "GENDER ON TXN.FINAL_GENDER=GENDER.GENDER JOIN USR_0_COUNTRY_MAST COUNTRY ON "
					+ "TXN.FINAL_NATIONALITY=COUNTRY.COUNTRY WHERE WI_NAME='"
					+ sWorkitemId + "' and cust_sno='" + sNo + "'";
			logInfo("getECBValidationRequestJson", "query-----" + query);
			List<List<String>> output = formObject.getDataFromDB(query);
			String eidaNo = "";
			String nationality = "";
			String dob = "";
			String fullName = "";
			String gender = "";
			String passNo = "";
			String passExpDate = "";
			String mobileNo = "";
//			String NoOfDaysDedupeCheck = "30";
//			String ForceNewfetch = "No";
			String ID = "";


			if (output != null && output.size() > 0) {
				eidaNo = output.get(0).get(0);
				nationality = output.get(0).get(1);
				dob = output.get(0).get(2);
				fullName = output.get(0).get(3);
				gender = output.get(0).get(4);
				passNo = output.get(0).get(5);
				passExpDate = output.get(0).get(6);
				mobileNo = output.get(0).get(7);
				List<List<String>> list = formObject
						.getDataFromDB("SELECT SEQ_WEBSERVICE.nextval as ID from DUAL ");
				if (list != null && !list.isEmpty()) {
					for (int i = 0; i < list.size(); i++) {
						// log.info("data : "+list.get(i));
						ID = list.get(i).get(0);
					}
				}
			}
			logInfo("getECBValidationRequestXml","setting getECBValidationRequestJson");
			
			
	        // Add top-level attributes
	        jsonObject.put("SysRefNumber", ID);
	        jsonObject.put("SenderID", source);
	        jsonObject.put("EnquiryType", enquiryType); // "FullResponse"
	        jsonObject.put("ConsentFlag", consentFlag);
	        jsonObject.put("ContractType", contractType);
	        jsonObject.put("NoOfDaysDedupeCheck", noOfDaysDedupeCheck);
	        jsonObject.put("ForceNewfetch", forceNewFetch);
	        jsonObject.put("ReferenceNumber", sWorkitemId +"_"+ ID);
	        jsonObject.put("ReportType", reportType);
	        jsonObject.put("Role", role);
	        jsonObject.put("UserID", userId);

	        // Create and populate the CustomerDetails object
	        JSONObject customerDetails = new JSONObject();
//	        customerDetails.put("Company", null);

	        JSONObject individual = new JSONObject();
	        JSONObject previousPassport = new JSONObject();
	        previousPassport.put("Passport1", "");
	        previousPassport.put("Passport2", "");
	        previousPassport.put("Passport3", "");
	        previousPassport.put("Passport4", "");
	        individual.put("PreviousPassport", previousPassport);
	        individual.put("DOB", dob);
	        individual.put("EmiratesId", eidaNo);
	        individual.put("FullName", fullName);
	        individual.put("Gender", gender);
	        individual.put("Nationality", nationality);
	        individual.put("Passport", passNo);
	        individual.put("PassportExpiryDate", passExpDate);
	        individual.put("PrimaryMobileNo", mobileNo);
	        
	        customerDetails.put("Individual", individual);

	        jsonObject.put("CustomerDetails", customerDetails);
			
	        dataJsonObject.put("Data", jsonObject);
	        
	        inputXML.append(dataJsonObject.toString());
			
			logInfo("getECBValidationRequestJson"," getECBValidationRequestJson created ===> "+ jsonObject.toString());
			
		} catch (Exception e) {
			logError("Exception in getECBValidationRequestJson", e);
		}
		return inputXML.toString();

	}

	//Added by Shivanshu CRS-TIN 22-11-2024
		public boolean validateCRSTINField() {
			String regex = "";
			String country = formObject.getValue(CRS_TAX_COUNTRY).toString();
			String TIN = formObject.getValue(CRS_TAXPAYERIDENTIFICATIONNUMBER).toString();
			log.info("validateCRSTINField country: " + country);
			log.info("validateCRSTINField TIN: " + TIN);
	        // Define the regular expression
			String sQuery = "SELECT TIN_REGEX FROM CBG_COUNTRY_MASTER WHERE DESCRIPTION = '"+country+"'";
			log.info("validateCRSTINField sQuery: " + sQuery);
			List<List<String>> result = formObject.getDataFromDB(sQuery);
			if (result != null && result.size() > 0) {
				regex = result.get(0).get(0);
			}
	        // Create a Pattern object
	        Pattern pattern = Pattern.compile(regex);
	        
	        // Check if the input matches the pattern
	        boolean match= pattern.matcher(TIN).matches();
	        
	        //Handle Null For TIN
	        if(TIN.isEmpty() ||  TIN == null || TIN.equals("")) {
	        	match = true;
	        }
	         
	        if(!match) {
	        	sendMessageValuesList(CRS_TAXPAYERIDENTIFICATIONNUMBER,"TIN is invalid for " + country 
	        			+ ". TIN is mandatory to proceed with the account opening journey.");
	        }
	    	return match;
	    }

//	DCRA NEW FIELD SHivanshu
	public String dcraCustomerCreation(){
		String accountopeningPurpose ="";
		String accOpenOtherBank="";
		String channelIndicator="";
		String sourceOfWealth="";
		String poaFlag="";
		String sInputXML ="";
		String onboardingMethod = "1";
		int sNo = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString())+1;
		String pepIndicator = "No PEP";
		String privateClint =formObject.getValue("PRIVATE_CLIENT").toString();
        logInfo("dcraCustomerCreation","privateClint <=> "+privateClint);
        
        if ("N".equalsIgnoreCase(privateClint)) {
        	String p1= formObject.getValue("Customer_Authorized_Rad").toString();
        	String p2= formObject.getValue("Customer_Entrusted_Rad").toString();
        	logInfo("dcraCustomerCreation", "p1 <=> "+formObject.getValue("Customer_Authorized_Rad").toString());
        	logInfo("dcraCustomerCreation", "p2 <=> "+formObject.getValue("Customer_Entrusted_Rad").toString());
        	if(p1.equalsIgnoreCase("No") && p2.equalsIgnoreCase("No")) {
        		pepIndicator="No PEP";
        	}else if(p1.equalsIgnoreCase("No") && p2.equalsIgnoreCase("Yes")) {
        		pepIndicator="HIO PEP identified (Client or PoA)";		
        	}else if(p1.equalsIgnoreCase("Yes") && p2.equalsIgnoreCase("Yes")) {
        		pepIndicator="HIO PEP identified (Client or PoA)";
        	} else if(p1.equalsIgnoreCase("Yes") && p2.equalsIgnoreCase("No")) {
        		pepIndicator=formObject.getValue("HIO_PEP_AO").toString();
        		if (pepIndicator.equalsIgnoreCase("UAE PEP")) {
        			pepIndicator = "DPEP identified (Client or PoA)";
        		}else {
        			pepIndicator = "FPEP identified (Client or PoA)";
        		}
        	}
        }else {
        	String p3= formObject.getValue("Customer_PEP_Rad").toString();
        	String p4= formObject.getValue("Person_Associated_Rad").toString();
        	String p5= formObject.getValue("Person_Power_Rad").toString();
        	String p6= formObject.getValue("Customer_Entrusted_Man_Rad").toString();
        	logInfo("dcraCustomerCreation", " p3, p4, p5, p6 , HIOFlag <=> "+p3+","+p4+","+ p5+","+p6);
        	if(p3.equalsIgnoreCase("No") && p4.equalsIgnoreCase("No") && p5.equalsIgnoreCase("No") && p6.equalsIgnoreCase("No")) {
        		pepIndicator="No PEP";
        	}else if(p3.equalsIgnoreCase("No") && p4.equalsIgnoreCase("No") && p5.equalsIgnoreCase("No") && p6.equalsIgnoreCase("Yes")) {
        		pepIndicator="HIO PEP identified (Client or PoA)";		
        	}else if(p3.equalsIgnoreCase("Yes") && p4.equalsIgnoreCase("Yes") && p5.equalsIgnoreCase("Yes") && p6.equalsIgnoreCase("Yes")) {
        		pepIndicator="HIO PEP identified (Client or PoA)";
        	}else if((p3.equalsIgnoreCase("Yes") || p4.equalsIgnoreCase("Yes") || p5.equalsIgnoreCase("Yes")) && p6.equalsIgnoreCase("YES")) {
        		pepIndicator="HIO PEP identified (Client or PoA)";
        	}else if((p3.equalsIgnoreCase("Yes") || p4.equalsIgnoreCase("Yes") || p5.equalsIgnoreCase("Yes")) && p6.equalsIgnoreCase("No")) {
        		pepIndicator=formObject.getValue("HIO_PEP_AO").toString();
        		if (pepIndicator.equalsIgnoreCase("UAE PEP")) {
        			pepIndicator = "DPEP identified (Client or PoA)";
        		}else {
        			pepIndicator = "FPEP identified (Client or PoA)";
        		}
        	}
        }
		String pepIndicator_cd="";
		if(!"".equalsIgnoreCase(pepIndicator) && pepIndicator!=null){
			String pepIndicator_query = "select pep_cd from usr_0_wbg_ao_pep_master where pepindicator_desc='"+pepIndicator+"'";
			List<List<String>> pepIndicator_list = formObject.getDataFromDB(pepIndicator_query);
			if (pepIndicator_list != null && pepIndicator_list.size() > 0) {
				pepIndicator_cd=pepIndicator_list.get(0).get(0);
			}
					
		}
		String outputxml = "SELECT ACC_IN_ANTHR_BNK_UAE,PURPOSE_OF_ACC_RELATION,SRC_OF_WEALTH,CHANNELINDICATOR,PEP FROM USR_0_CUST_TXN WHERE WI_NAME ='"
				           + sWorkitemId + "' " + "AND CUST_SNO ='" + sNo + "'";
		logInfo("dcraCustomerCreation", "outputxml::" + outputxml);
		List<List<String>> output = formObject.getDataFromDB(outputxml);
		if (output != null && output.size() > 0) {
			accOpenOtherBank= output.get(0).get(0);
			accountopeningPurpose= getPurposeOfAcc(output.get(0).get(1));
			channelIndicator= output.get(0).get(3);
			sourceOfWealth= output.get(0).get(2);
			poaFlag= output.get(0).get(4);	
			if(poaFlag.equals("Yes")){
				poaFlag="Y";
			}else{
				poaFlag="N";
			}
			if(accOpenOtherBank.equals("Yes")){
				accOpenOtherBank="Y";
			}else{
				accOpenOtherBank="N";
			}
		}
		logInfo("dcraCustomerCreation"," <=> "+accountopeningPurpose);
		String[] accountdaata =accountopeningPurpose.split("\\|");
		for(int i=0;i<accountdaata.length;i++) {
			sInputXML += "<custAddAccountOpen>\n" 
					+ "<accountOpeningPurpose>"+accountdaata[i]+"</accountOpeningPurpose>\n"
					+ "</custAddAccountOpen>\n";
		}	
		sInputXML += 
			//"<sourceOfWealth>"+sourceOfWealth+"</sourceOfWealth>\n"
   			 "<otherBankUAEAccount>"+accOpenOtherBank+"</otherBankUAEAccount>\n"
   			 +"<pepStatusRisk>"+pepIndicator_cd+"</pepStatusRisk>\n"
   			 +"<onboardingRisk>"+onboardingMethod+"</onboardingRisk>\n"
   			 +"<channelRisk>"+channelIndicator+"</channelRisk>\n"
   			 +"<powerOfAttorney>"+poaFlag+"</powerOfAttorney>\n";
		
		return sInputXML;
	}  

	//Added by SHivanshu DCRA
	public String dcraCustomerModify(){
		String sInputXML = "";
		
		String additionalSourceOfIncome ="";
		String primarySrctry = "";
		String addSrcOfIncomeCntry ="";
		String industry ="";
		String indRisk ="";
		String occupation ="";
		String poa_nationality="";
		String poa_residency="";
		String sourceOfWealth="";


		int sNo = Integer.parseInt(formObject.getValue(SELECTED_ROW_INDEX).toString())+1;
		try {
		String sQuerydb = "SELECT ADDITIONAL_SOURCES_INCOME_AED,ADD_SRC_OF_INCOME_CNTRY,ADD_SRC_OF_INCOME,PRI_SRC_OF_INCOME,"
				+ " PRIMARYSRCCTRY,SOURCE_OF_FUNDS,POA_NATIONALITY,POA_RESIDENCY,SRC_OF_WEALTH "
				+ "  FROM USR_0_CUST_TXN WHERE WI_NAME ='"
				+ sWorkitemId + "' " + "AND CUST_SNO ='" + sNo + "'";
		logInfo("dcraCustomerModify", "sQuerydb::" + sQuerydb);
		List<List<String>> sOutput1 = formObject.getDataFromDB(sQuerydb);
		
		if (sOutput1 != null && sOutput1.size() > 0) {
			occupation = sOutput1.get(0).get(5);
			additionalSourceOfIncome = getAdditionalSrcofIncome(sOutput1.get(0).get(0));
			primarySrctry=sOutput1.get(0).get(4);
			addSrcOfIncomeCntry =getAdditionalSrcofIncome(sOutput1.get(0).get(1));
			industry =getIndustryRisk(sOutput1.get(0).get(3));
			indRisk =getAddSourceRisk(sOutput1.get(0).get(2));
			poa_nationality=sOutput1.get(0).get(6);
			poa_residency=sOutput1.get(0).get(7);
			sourceOfWealth= getSourceOfWealth(sOutput1.get(0).get(8));

			
			logInfo("dcraCustomerModify","addSrcOfIncomeCntry="+addSrcOfIncomeCntry);
		}
		
//		 if (!(occupation.equalsIgnoreCase("30")||occupation.equalsIgnoreCase("20"))) {
//			 industry = "0";
//		}
//		
//		if(additionalSourceOfIncome.contains("30")||additionalSourceOfIncome.contains("20")) {
//			industry=industry +"|"+ indRisk;
//		}
		
		  sInputXML +=dcraCustomerCreation()
		 			+"<poaNationality>"+poa_nationality+"</poaNationality>\n"
		 			+"<poaResidency>"+poa_residency+"</poaResidency>\n"
		 			+"<primSourceofIncomeIndustry>"+industry+"</primSourceofIncomeIndustry>\n"
		 			+"<primSourceofIncomeCntry>"+primarySrctry+"</primSourceofIncomeCntry>\n";
//		 			+"<addSourceIncomeIndustry>"+indRisk+"</addSourceIncomeIndustry>\n";
		  
		  	logInfo("dcraCustomerModify"," <=> "+additionalSourceOfIncome);
			String[] addSrcIncome =additionalSourceOfIncome.split("\\|");
			for(int i=0;i<addSrcIncome.length;i++) {
				sInputXML += "<additionalIncome>\n" 
						+ "<addSourcIncome>"+addSrcIncome[i]+"</addSourcIncome>\n"
						+ "</additionalIncome>\n";
			}
			
			logInfo("dcraCustomerModify"," <=> "+addSrcOfIncomeCntry);
			String[] addSrcIncomeCntry =addSrcOfIncomeCntry.split("\\|");
			for(int i=0;i<addSrcIncomeCntry.length;i++) {
				sInputXML += "<additionalIncomeCountry>\n" 
						+ "<addsourceIncomeCountry>"+addSrcIncomeCntry[i]+"</addsourceIncomeCountry>\n"
						+ "</additionalIncomeCountry>\n";
			}	
			
			//Added by Shivanshu For SourceWealth Multi Drop Down
			logInfo("dcraCustomerModify"," <=> "+sourceOfWealth);
			String[] srcOfWealth =sourceOfWealth.split("\\|");
			for(int i=0;i<srcOfWealth.length;i++) {
				sInputXML += "<customerSource>\n" 
						+ "<sourceOfWealth>"+srcOfWealth[i]+"</sourceOfWealth>\n"
						+ "</customerSource>\n";
			}
			
			//Added by Shivanshu For Add Source OF income industry Multi Drop Down
			logInfo("dcraCustomerModify"," <=> "+indRisk);
			String[] AddSrcIncomeIndustry =indRisk.split("\\|");
			for(int i=0;i<AddSrcIncomeIndustry.length;i++) {
				sInputXML += "<custSourceIndustry>\n" 
						+ "<addSourceIncomeIndustry>"+AddSrcIncomeIndustry[i]+"</addSourceIncomeIndustry>\n"
						+ "</custSourceIndustry>\n";
			}

		} catch (Exception e) {
			logError("Exception in dcraCustomerModify", e);
		}
		return sInputXML;
	}

	
//Added by Shivanshu CRS-TIN Country Field 13-03-2025
			public void disableFieldCRSCountry() {
				String isCRSFlag = "";
				String country = formObject.getValue(CRS_TAX_COUNTRY).toString();
				log.info("disableFieldCRSCountry country: " + country);
				String sQuery = "SELECT CRS_COUNTRY_FLAG FROM CBG_COUNTRY_MASTER WHERE DESCRIPTION = '"+country+"'";
				log.info("disableFieldCRSCountry sQuery: " + sQuery);
				List<List<String>> result = formObject.getDataFromDB(sQuery);
				if (result != null && result.size() > 0) {
					isCRSFlag = result.get(0).get(0);
				}
				log.info("disableFieldCRSCountry isCRSFlag: " + isCRSFlag);
				if ("Y".equalsIgnoreCase(isCRSFlag)) {
					formObject.setStyle(CRS_REASONNOTPROVIDINGTIN, DISABLE, TRUE);
					formObject.setStyle(REASON_DESC, DISABLE, TRUE);					
				}  else {
					formObject.setStyle(CRS_REASONNOTPROVIDINGTIN, DISABLE, FALSE);
					formObject.setStyle(REASON_DESC, DISABLE, FALSE);
				}
		    }
}
